
murphy.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f94  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08004158  08004158  00014158  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004170  08004170  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08004170  08004170  00014170  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004178  08004178  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004178  08004178  00014178  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800417c  0800417c  0001417c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08004180  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000024c  2000007c  080041fc  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002c8  080041fc  000202c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015cdc  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024c6  00000000  00000000  00035d88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001398  00000000  00000000  00038250  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012d8  00000000  00000000  000395e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002252a  00000000  00000000  0003a8c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017f16  00000000  00000000  0005cdea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d3b18  00000000  00000000  00074d00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00148818  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005520  00000000  00000000  0014886c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000007c 	.word	0x2000007c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08004140 	.word	0x08004140

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000080 	.word	0x20000080
 8000200:	08004140 	.word	0x08004140

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96e 	b.w	80004f8 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468c      	mov	ip, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	f040 8083 	bne.w	800034a <__udivmoddi4+0x116>
 8000244:	428a      	cmp	r2, r1
 8000246:	4617      	mov	r7, r2
 8000248:	d947      	bls.n	80002da <__udivmoddi4+0xa6>
 800024a:	fab2 f282 	clz	r2, r2
 800024e:	b142      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 8000250:	f1c2 0020 	rsb	r0, r2, #32
 8000254:	fa24 f000 	lsr.w	r0, r4, r0
 8000258:	4091      	lsls	r1, r2
 800025a:	4097      	lsls	r7, r2
 800025c:	ea40 0c01 	orr.w	ip, r0, r1
 8000260:	4094      	lsls	r4, r2
 8000262:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000266:	0c23      	lsrs	r3, r4, #16
 8000268:	fbbc f6f8 	udiv	r6, ip, r8
 800026c:	fa1f fe87 	uxth.w	lr, r7
 8000270:	fb08 c116 	mls	r1, r8, r6, ip
 8000274:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000278:	fb06 f10e 	mul.w	r1, r6, lr
 800027c:	4299      	cmp	r1, r3
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x60>
 8000280:	18fb      	adds	r3, r7, r3
 8000282:	f106 30ff 	add.w	r0, r6, #4294967295
 8000286:	f080 8119 	bcs.w	80004bc <__udivmoddi4+0x288>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 8116 	bls.w	80004bc <__udivmoddi4+0x288>
 8000290:	3e02      	subs	r6, #2
 8000292:	443b      	add	r3, r7
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0f8 	udiv	r0, r3, r8
 800029c:	fb08 3310 	mls	r3, r8, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 fe0e 	mul.w	lr, r0, lr
 80002a8:	45a6      	cmp	lr, r4
 80002aa:	d909      	bls.n	80002c0 <__udivmoddi4+0x8c>
 80002ac:	193c      	adds	r4, r7, r4
 80002ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b2:	f080 8105 	bcs.w	80004c0 <__udivmoddi4+0x28c>
 80002b6:	45a6      	cmp	lr, r4
 80002b8:	f240 8102 	bls.w	80004c0 <__udivmoddi4+0x28c>
 80002bc:	3802      	subs	r0, #2
 80002be:	443c      	add	r4, r7
 80002c0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c4:	eba4 040e 	sub.w	r4, r4, lr
 80002c8:	2600      	movs	r6, #0
 80002ca:	b11d      	cbz	r5, 80002d4 <__udivmoddi4+0xa0>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c5 4300 	strd	r4, r3, [r5]
 80002d4:	4631      	mov	r1, r6
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xaa>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f282 	clz	r2, r2
 80002e2:	2a00      	cmp	r2, #0
 80002e4:	d150      	bne.n	8000388 <__udivmoddi4+0x154>
 80002e6:	1bcb      	subs	r3, r1, r7
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	fa1f f887 	uxth.w	r8, r7
 80002f0:	2601      	movs	r6, #1
 80002f2:	fbb3 fcfe 	udiv	ip, r3, lr
 80002f6:	0c21      	lsrs	r1, r4, #16
 80002f8:	fb0e 331c 	mls	r3, lr, ip, r3
 80002fc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000300:	fb08 f30c 	mul.w	r3, r8, ip
 8000304:	428b      	cmp	r3, r1
 8000306:	d907      	bls.n	8000318 <__udivmoddi4+0xe4>
 8000308:	1879      	adds	r1, r7, r1
 800030a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800030e:	d202      	bcs.n	8000316 <__udivmoddi4+0xe2>
 8000310:	428b      	cmp	r3, r1
 8000312:	f200 80e9 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 8000316:	4684      	mov	ip, r0
 8000318:	1ac9      	subs	r1, r1, r3
 800031a:	b2a3      	uxth	r3, r4
 800031c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000320:	fb0e 1110 	mls	r1, lr, r0, r1
 8000324:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000328:	fb08 f800 	mul.w	r8, r8, r0
 800032c:	45a0      	cmp	r8, r4
 800032e:	d907      	bls.n	8000340 <__udivmoddi4+0x10c>
 8000330:	193c      	adds	r4, r7, r4
 8000332:	f100 33ff 	add.w	r3, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x10a>
 8000338:	45a0      	cmp	r8, r4
 800033a:	f200 80d9 	bhi.w	80004f0 <__udivmoddi4+0x2bc>
 800033e:	4618      	mov	r0, r3
 8000340:	eba4 0408 	sub.w	r4, r4, r8
 8000344:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000348:	e7bf      	b.n	80002ca <__udivmoddi4+0x96>
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0x12e>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80b1 	beq.w	80004b6 <__udivmoddi4+0x282>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x1cc>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0x140>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80b8 	bhi.w	80004e4 <__udivmoddi4+0x2b0>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0103 	sbc.w	r1, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	468c      	mov	ip, r1
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0a8      	beq.n	80002d4 <__udivmoddi4+0xa0>
 8000382:	e9c5 4c00 	strd	r4, ip, [r5]
 8000386:	e7a5      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000388:	f1c2 0320 	rsb	r3, r2, #32
 800038c:	fa20 f603 	lsr.w	r6, r0, r3
 8000390:	4097      	lsls	r7, r2
 8000392:	fa01 f002 	lsl.w	r0, r1, r2
 8000396:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800039a:	40d9      	lsrs	r1, r3
 800039c:	4330      	orrs	r0, r6
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	fbb1 f6fe 	udiv	r6, r1, lr
 80003a4:	fa1f f887 	uxth.w	r8, r7
 80003a8:	fb0e 1116 	mls	r1, lr, r6, r1
 80003ac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b0:	fb06 f108 	mul.w	r1, r6, r8
 80003b4:	4299      	cmp	r1, r3
 80003b6:	fa04 f402 	lsl.w	r4, r4, r2
 80003ba:	d909      	bls.n	80003d0 <__udivmoddi4+0x19c>
 80003bc:	18fb      	adds	r3, r7, r3
 80003be:	f106 3cff 	add.w	ip, r6, #4294967295
 80003c2:	f080 808d 	bcs.w	80004e0 <__udivmoddi4+0x2ac>
 80003c6:	4299      	cmp	r1, r3
 80003c8:	f240 808a 	bls.w	80004e0 <__udivmoddi4+0x2ac>
 80003cc:	3e02      	subs	r6, #2
 80003ce:	443b      	add	r3, r7
 80003d0:	1a5b      	subs	r3, r3, r1
 80003d2:	b281      	uxth	r1, r0
 80003d4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003d8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003dc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003e0:	fb00 f308 	mul.w	r3, r0, r8
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d907      	bls.n	80003f8 <__udivmoddi4+0x1c4>
 80003e8:	1879      	adds	r1, r7, r1
 80003ea:	f100 3cff 	add.w	ip, r0, #4294967295
 80003ee:	d273      	bcs.n	80004d8 <__udivmoddi4+0x2a4>
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d971      	bls.n	80004d8 <__udivmoddi4+0x2a4>
 80003f4:	3802      	subs	r0, #2
 80003f6:	4439      	add	r1, r7
 80003f8:	1acb      	subs	r3, r1, r3
 80003fa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003fe:	e778      	b.n	80002f2 <__udivmoddi4+0xbe>
 8000400:	f1c6 0c20 	rsb	ip, r6, #32
 8000404:	fa03 f406 	lsl.w	r4, r3, r6
 8000408:	fa22 f30c 	lsr.w	r3, r2, ip
 800040c:	431c      	orrs	r4, r3
 800040e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800041a:	fa21 f10c 	lsr.w	r1, r1, ip
 800041e:	431f      	orrs	r7, r3
 8000420:	0c3b      	lsrs	r3, r7, #16
 8000422:	fbb1 f9fe 	udiv	r9, r1, lr
 8000426:	fa1f f884 	uxth.w	r8, r4
 800042a:	fb0e 1119 	mls	r1, lr, r9, r1
 800042e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000432:	fb09 fa08 	mul.w	sl, r9, r8
 8000436:	458a      	cmp	sl, r1
 8000438:	fa02 f206 	lsl.w	r2, r2, r6
 800043c:	fa00 f306 	lsl.w	r3, r0, r6
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x220>
 8000442:	1861      	adds	r1, r4, r1
 8000444:	f109 30ff 	add.w	r0, r9, #4294967295
 8000448:	d248      	bcs.n	80004dc <__udivmoddi4+0x2a8>
 800044a:	458a      	cmp	sl, r1
 800044c:	d946      	bls.n	80004dc <__udivmoddi4+0x2a8>
 800044e:	f1a9 0902 	sub.w	r9, r9, #2
 8000452:	4421      	add	r1, r4
 8000454:	eba1 010a 	sub.w	r1, r1, sl
 8000458:	b2bf      	uxth	r7, r7
 800045a:	fbb1 f0fe 	udiv	r0, r1, lr
 800045e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000462:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000466:	fb00 f808 	mul.w	r8, r0, r8
 800046a:	45b8      	cmp	r8, r7
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x24a>
 800046e:	19e7      	adds	r7, r4, r7
 8000470:	f100 31ff 	add.w	r1, r0, #4294967295
 8000474:	d22e      	bcs.n	80004d4 <__udivmoddi4+0x2a0>
 8000476:	45b8      	cmp	r8, r7
 8000478:	d92c      	bls.n	80004d4 <__udivmoddi4+0x2a0>
 800047a:	3802      	subs	r0, #2
 800047c:	4427      	add	r7, r4
 800047e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000482:	eba7 0708 	sub.w	r7, r7, r8
 8000486:	fba0 8902 	umull	r8, r9, r0, r2
 800048a:	454f      	cmp	r7, r9
 800048c:	46c6      	mov	lr, r8
 800048e:	4649      	mov	r1, r9
 8000490:	d31a      	bcc.n	80004c8 <__udivmoddi4+0x294>
 8000492:	d017      	beq.n	80004c4 <__udivmoddi4+0x290>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x27a>
 8000496:	ebb3 020e 	subs.w	r2, r3, lr
 800049a:	eb67 0701 	sbc.w	r7, r7, r1
 800049e:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004a2:	40f2      	lsrs	r2, r6
 80004a4:	ea4c 0202 	orr.w	r2, ip, r2
 80004a8:	40f7      	lsrs	r7, r6
 80004aa:	e9c5 2700 	strd	r2, r7, [r5]
 80004ae:	2600      	movs	r6, #0
 80004b0:	4631      	mov	r1, r6
 80004b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b6:	462e      	mov	r6, r5
 80004b8:	4628      	mov	r0, r5
 80004ba:	e70b      	b.n	80002d4 <__udivmoddi4+0xa0>
 80004bc:	4606      	mov	r6, r0
 80004be:	e6e9      	b.n	8000294 <__udivmoddi4+0x60>
 80004c0:	4618      	mov	r0, r3
 80004c2:	e6fd      	b.n	80002c0 <__udivmoddi4+0x8c>
 80004c4:	4543      	cmp	r3, r8
 80004c6:	d2e5      	bcs.n	8000494 <__udivmoddi4+0x260>
 80004c8:	ebb8 0e02 	subs.w	lr, r8, r2
 80004cc:	eb69 0104 	sbc.w	r1, r9, r4
 80004d0:	3801      	subs	r0, #1
 80004d2:	e7df      	b.n	8000494 <__udivmoddi4+0x260>
 80004d4:	4608      	mov	r0, r1
 80004d6:	e7d2      	b.n	800047e <__udivmoddi4+0x24a>
 80004d8:	4660      	mov	r0, ip
 80004da:	e78d      	b.n	80003f8 <__udivmoddi4+0x1c4>
 80004dc:	4681      	mov	r9, r0
 80004de:	e7b9      	b.n	8000454 <__udivmoddi4+0x220>
 80004e0:	4666      	mov	r6, ip
 80004e2:	e775      	b.n	80003d0 <__udivmoddi4+0x19c>
 80004e4:	4630      	mov	r0, r6
 80004e6:	e74a      	b.n	800037e <__udivmoddi4+0x14a>
 80004e8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004ec:	4439      	add	r1, r7
 80004ee:	e713      	b.n	8000318 <__udivmoddi4+0xe4>
 80004f0:	3802      	subs	r0, #2
 80004f2:	443c      	add	r4, r7
 80004f4:	e724      	b.n	8000340 <__udivmoddi4+0x10c>
 80004f6:	bf00      	nop

080004f8 <__aeabi_idiv0>:
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <set_motor_direction>:
// CCR register goes from 0 to 0xffff
#define SPEED_PERCENT_TO_CCR 0xffff

#define PERCENT_TO_DEC 100

bool set_motor_direction(MotorController *mc, MotorDir dir) {
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b082      	sub	sp, #8
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]
 8000504:	460b      	mov	r3, r1
 8000506:	70fb      	strb	r3, [r7, #3]
	if(dir == MOTOR_DIR_FORWARD) {
 8000508:	78fb      	ldrb	r3, [r7, #3]
 800050a:	2b00      	cmp	r3, #0
 800050c:	d112      	bne.n	8000534 <set_motor_direction+0x38>
		HAL_GPIO_WritePin(mc->in1_pin.port, mc->in1_pin.pin, GPIO_PIN_RESET);
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	6858      	ldr	r0, [r3, #4]
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	b29b      	uxth	r3, r3
 8000518:	2200      	movs	r2, #0
 800051a:	4619      	mov	r1, r3
 800051c:	f001 fa7a 	bl	8001a14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(mc->in2_pin.port, mc->in2_pin.pin, GPIO_PIN_SET);
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	68d8      	ldr	r0, [r3, #12]
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	689b      	ldr	r3, [r3, #8]
 8000528:	b29b      	uxth	r3, r3
 800052a:	2201      	movs	r2, #1
 800052c:	4619      	mov	r1, r3
 800052e:	f001 fa71 	bl	8001a14 <HAL_GPIO_WritePin>
 8000532:	e02a      	b.n	800058a <set_motor_direction+0x8e>
	} else if(dir == MOTOR_DIR_BACKWARD) {
 8000534:	78fb      	ldrb	r3, [r7, #3]
 8000536:	2b01      	cmp	r3, #1
 8000538:	d112      	bne.n	8000560 <set_motor_direction+0x64>
		HAL_GPIO_WritePin(mc->in1_pin.port, mc->in1_pin.pin, GPIO_PIN_SET);
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	6858      	ldr	r0, [r3, #4]
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	b29b      	uxth	r3, r3
 8000544:	2201      	movs	r2, #1
 8000546:	4619      	mov	r1, r3
 8000548:	f001 fa64 	bl	8001a14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(mc->in2_pin.port, mc->in2_pin.pin, GPIO_PIN_RESET);
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	68d8      	ldr	r0, [r3, #12]
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	689b      	ldr	r3, [r3, #8]
 8000554:	b29b      	uxth	r3, r3
 8000556:	2200      	movs	r2, #0
 8000558:	4619      	mov	r1, r3
 800055a:	f001 fa5b 	bl	8001a14 <HAL_GPIO_WritePin>
 800055e:	e014      	b.n	800058a <set_motor_direction+0x8e>
	} else if(dir == MOTOR_DIR_OFF) {
 8000560:	78fb      	ldrb	r3, [r7, #3]
 8000562:	2b02      	cmp	r3, #2
 8000564:	d111      	bne.n	800058a <set_motor_direction+0x8e>
		// TODO: Not sure if this is correct
		HAL_GPIO_WritePin(mc->in1_pin.port, mc->in1_pin.pin, GPIO_PIN_RESET);
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	6858      	ldr	r0, [r3, #4]
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	b29b      	uxth	r3, r3
 8000570:	2200      	movs	r2, #0
 8000572:	4619      	mov	r1, r3
 8000574:	f001 fa4e 	bl	8001a14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(mc->in2_pin.port, mc->in2_pin.pin, GPIO_PIN_RESET);
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	68d8      	ldr	r0, [r3, #12]
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	689b      	ldr	r3, [r3, #8]
 8000580:	b29b      	uxth	r3, r3
 8000582:	2200      	movs	r2, #0
 8000584:	4619      	mov	r1, r3
 8000586:	f001 fa45 	bl	8001a14 <HAL_GPIO_WritePin>
	}
	return true;
 800058a:	2301      	movs	r3, #1
}
 800058c:	4618      	mov	r0, r3
 800058e:	3708      	adds	r7, #8
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}

08000594 <set_motor_speed>:

bool set_motor_speed(MotorController *mc, uint8_t speed_percent) {
 8000594:	b480      	push	{r7}
 8000596:	b085      	sub	sp, #20
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
 800059c:	460b      	mov	r3, r1
 800059e:	70fb      	strb	r3, [r7, #3]
	if(speed_percent > 100) {
 80005a0:	78fb      	ldrb	r3, [r7, #3]
 80005a2:	2b64      	cmp	r3, #100	; 0x64
 80005a4:	d901      	bls.n	80005aa <set_motor_speed+0x16>
		return false;
 80005a6:	2300      	movs	r3, #0
 80005a8:	e016      	b.n	80005d8 <set_motor_speed+0x44>
	}
	// Get value to set CCR to
	uint16_t ccr_val = (uint16_t)((float)speed_percent / PERCENT_TO_DEC * SPEED_PERCENT_TO_CCR);
 80005aa:	78fb      	ldrb	r3, [r7, #3]
 80005ac:	ee07 3a90 	vmov	s15, r3
 80005b0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80005b4:	eddf 6a0b 	vldr	s13, [pc, #44]	; 80005e4 <set_motor_speed+0x50>
 80005b8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80005bc:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80005e8 <set_motor_speed+0x54>
 80005c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80005c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80005c8:	ee17 3a90 	vmov	r3, s15
 80005cc:	81fb      	strh	r3, [r7, #14]
	*(mc->en_pin.ccr_ptr) = ccr_val;
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	699b      	ldr	r3, [r3, #24]
 80005d2:	89fa      	ldrh	r2, [r7, #14]
 80005d4:	601a      	str	r2, [r3, #0]
	
	return true;
 80005d6:	2301      	movs	r3, #1
}
 80005d8:	4618      	mov	r0, r3
 80005da:	3714      	adds	r7, #20
 80005dc:	46bd      	mov	sp, r7
 80005de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e2:	4770      	bx	lr
 80005e4:	42c80000 	.word	0x42c80000
 80005e8:	477fff00 	.word	0x477fff00

080005ec <motor_init>:

bool motor_init(MotorController *mc) {
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b082      	sub	sp, #8
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
	set_motor_direction(mc, MOTOR_DIR_OFF);
 80005f4:	2102      	movs	r1, #2
 80005f6:	6878      	ldr	r0, [r7, #4]
 80005f8:	f7ff ff80 	bl	80004fc <set_motor_direction>

	HAL_TIM_PWM_Start(mc->en_pin.tim_handle, mc->en_pin.tim_channel);
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	691a      	ldr	r2, [r3, #16]
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	695b      	ldr	r3, [r3, #20]
 8000604:	4619      	mov	r1, r3
 8000606:	4610      	mov	r0, r2
 8000608:	f002 fd28 	bl	800305c <HAL_TIM_PWM_Start>
	return true;
 800060c:	2301      	movs	r3, #1
}
 800060e:	4618      	mov	r0, r3
 8000610:	3708      	adds	r7, #8
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
	...

08000618 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800061e:	f000 fe0f 	bl	8001240 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000622:	f000 f851 	bl	80006c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000626:	f000 fa9b 	bl	8000b60 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800062a:	f000 fa6f 	bl	8000b0c <MX_USART2_UART_Init>
  MX_FMPI2C1_Init();
 800062e:	f000 f8d7 	bl	80007e0 <MX_FMPI2C1_Init>
  MX_I2C1_Init();
 8000632:	f000 f90b 	bl	800084c <MX_I2C1_Init>
  MX_I2C2_Init();
 8000636:	f000 f937 	bl	80008a8 <MX_I2C2_Init>
  MX_I2C3_Init();
 800063a:	f000 f963 	bl	8000904 <MX_I2C3_Init>
  MX_SPI2_Init();
 800063e:	f000 f98f 	bl	8000960 <MX_SPI2_Init>
  MX_TIM1_Init();
 8000642:	f000 f9c3 	bl	80009cc <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  // Initialize FL motor (currently only one with correctly mapped pins)
  motor_init(&controllers[FRONT_RIGHT_MOTOR]);
 8000646:	481e      	ldr	r0, [pc, #120]	; (80006c0 <main+0xa8>)
 8000648:	f7ff ffd0 	bl	80005ec <motor_init>

  set_motor_direction(&controllers[FRONT_RIGHT_MOTOR], MOTOR_DIR_FORWARD);
 800064c:	2100      	movs	r1, #0
 800064e:	481c      	ldr	r0, [pc, #112]	; (80006c0 <main+0xa8>)
 8000650:	f7ff ff54 	bl	80004fc <set_motor_direction>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    for(int i = 0; i <= 1000; i++) {
 8000654:	2300      	movs	r3, #0
 8000656:	607b      	str	r3, [r7, #4]
 8000658:	e011      	b.n	800067e <main+0x66>
      set_motor_speed(&controllers[FRONT_RIGHT_MOTOR], i / 10);
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	4a19      	ldr	r2, [pc, #100]	; (80006c4 <main+0xac>)
 800065e:	fb82 1203 	smull	r1, r2, r2, r3
 8000662:	1092      	asrs	r2, r2, #2
 8000664:	17db      	asrs	r3, r3, #31
 8000666:	1ad3      	subs	r3, r2, r3
 8000668:	b2db      	uxtb	r3, r3
 800066a:	4619      	mov	r1, r3
 800066c:	4814      	ldr	r0, [pc, #80]	; (80006c0 <main+0xa8>)
 800066e:	f7ff ff91 	bl	8000594 <set_motor_speed>
      HAL_Delay(5);
 8000672:	2005      	movs	r0, #5
 8000674:	f000 fe56 	bl	8001324 <HAL_Delay>
    for(int i = 0; i <= 1000; i++) {
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	3301      	adds	r3, #1
 800067c:	607b      	str	r3, [r7, #4]
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000684:	dde9      	ble.n	800065a <main+0x42>
    }

    for(int i = 0; i <= 1000; i++) {
 8000686:	2300      	movs	r3, #0
 8000688:	603b      	str	r3, [r7, #0]
 800068a:	e013      	b.n	80006b4 <main+0x9c>
	  set_motor_speed(&controllers[FRONT_RIGHT_MOTOR], (1000 - i) / 10);
 800068c:	683b      	ldr	r3, [r7, #0]
 800068e:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 8000692:	4a0c      	ldr	r2, [pc, #48]	; (80006c4 <main+0xac>)
 8000694:	fb82 1203 	smull	r1, r2, r2, r3
 8000698:	1092      	asrs	r2, r2, #2
 800069a:	17db      	asrs	r3, r3, #31
 800069c:	1ad3      	subs	r3, r2, r3
 800069e:	b2db      	uxtb	r3, r3
 80006a0:	4619      	mov	r1, r3
 80006a2:	4807      	ldr	r0, [pc, #28]	; (80006c0 <main+0xa8>)
 80006a4:	f7ff ff76 	bl	8000594 <set_motor_speed>
	  HAL_Delay(5);
 80006a8:	2005      	movs	r0, #5
 80006aa:	f000 fe3b 	bl	8001324 <HAL_Delay>
    for(int i = 0; i <= 1000; i++) {
 80006ae:	683b      	ldr	r3, [r7, #0]
 80006b0:	3301      	adds	r3, #1
 80006b2:	603b      	str	r3, [r7, #0]
 80006b4:	683b      	ldr	r3, [r7, #0]
 80006b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80006ba:	dde7      	ble.n	800068c <main+0x74>
    for(int i = 0; i <= 1000; i++) {
 80006bc:	e7ca      	b.n	8000654 <main+0x3c>
 80006be:	bf00      	nop
 80006c0:	2000001c 	.word	0x2000001c
 80006c4:	66666667 	.word	0x66666667

080006c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b0ac      	sub	sp, #176	; 0xb0
 80006cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ce:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80006d2:	2234      	movs	r2, #52	; 0x34
 80006d4:	2100      	movs	r1, #0
 80006d6:	4618      	mov	r0, r3
 80006d8:	f003 fd2a 	bl	8004130 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006dc:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80006e0:	2200      	movs	r2, #0
 80006e2:	601a      	str	r2, [r3, #0]
 80006e4:	605a      	str	r2, [r3, #4]
 80006e6:	609a      	str	r2, [r3, #8]
 80006e8:	60da      	str	r2, [r3, #12]
 80006ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80006ec:	f107 030c 	add.w	r3, r7, #12
 80006f0:	225c      	movs	r2, #92	; 0x5c
 80006f2:	2100      	movs	r1, #0
 80006f4:	4618      	mov	r0, r3
 80006f6:	f003 fd1b 	bl	8004130 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006fa:	2300      	movs	r3, #0
 80006fc:	60bb      	str	r3, [r7, #8]
 80006fe:	4b36      	ldr	r3, [pc, #216]	; (80007d8 <SystemClock_Config+0x110>)
 8000700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000702:	4a35      	ldr	r2, [pc, #212]	; (80007d8 <SystemClock_Config+0x110>)
 8000704:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000708:	6413      	str	r3, [r2, #64]	; 0x40
 800070a:	4b33      	ldr	r3, [pc, #204]	; (80007d8 <SystemClock_Config+0x110>)
 800070c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800070e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000712:	60bb      	str	r3, [r7, #8]
 8000714:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000716:	2300      	movs	r3, #0
 8000718:	607b      	str	r3, [r7, #4]
 800071a:	4b30      	ldr	r3, [pc, #192]	; (80007dc <SystemClock_Config+0x114>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000722:	4a2e      	ldr	r2, [pc, #184]	; (80007dc <SystemClock_Config+0x114>)
 8000724:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000728:	6013      	str	r3, [r2, #0]
 800072a:	4b2c      	ldr	r3, [pc, #176]	; (80007dc <SystemClock_Config+0x114>)
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000732:	607b      	str	r3, [r7, #4]
 8000734:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000736:	2302      	movs	r3, #2
 8000738:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800073a:	2301      	movs	r3, #1
 800073c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000740:	2310      	movs	r3, #16
 8000742:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000746:	2302      	movs	r3, #2
 8000748:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800074c:	2300      	movs	r3, #0
 800074e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000752:	2310      	movs	r3, #16
 8000754:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000758:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800075c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000760:	2304      	movs	r3, #4
 8000762:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000766:	2302      	movs	r3, #2
 8000768:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = 2;
 800076c:	2302      	movs	r3, #2
 800076e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000772:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000776:	4618      	mov	r0, r3
 8000778:	f002 f8a0 	bl	80028bc <HAL_RCC_OscConfig>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000782:	f000 fa71 	bl	8000c68 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000786:	230f      	movs	r3, #15
 8000788:	66bb      	str	r3, [r7, #104]	; 0x68
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800078a:	2302      	movs	r3, #2
 800078c:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800078e:	2300      	movs	r3, #0
 8000790:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000792:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000796:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000798:	2300      	movs	r3, #0
 800079a:	67bb      	str	r3, [r7, #120]	; 0x78

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800079c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80007a0:	2102      	movs	r1, #2
 80007a2:	4618      	mov	r0, r3
 80007a4:	f001 fa94 	bl	8001cd0 <HAL_RCC_ClockConfig>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <SystemClock_Config+0xea>
  {
    Error_Handler();
 80007ae:	f000 fa5b 	bl	8000c68 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMPI2C1;
 80007b2:	2380      	movs	r3, #128	; 0x80
 80007b4:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Fmpi2c1ClockSelection = RCC_FMPI2C1CLKSOURCE_APB;
 80007b6:	2300      	movs	r3, #0
 80007b8:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80007ba:	f107 030c 	add.w	r3, r7, #12
 80007be:	4618      	mov	r0, r3
 80007c0:	f001 fba0 	bl	8001f04 <HAL_RCCEx_PeriphCLKConfig>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <SystemClock_Config+0x106>
  {
    Error_Handler();
 80007ca:	f000 fa4d 	bl	8000c68 <Error_Handler>
  }
}
 80007ce:	bf00      	nop
 80007d0:	37b0      	adds	r7, #176	; 0xb0
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	40023800 	.word	0x40023800
 80007dc:	40007000 	.word	0x40007000

080007e0 <MX_FMPI2C1_Init>:
  * @brief FMPI2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FMPI2C1_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE END FMPI2C1_Init 0 */

  /* USER CODE BEGIN FMPI2C1_Init 1 */

  /* USER CODE END FMPI2C1_Init 1 */
  hfmpi2c1.Instance = FMPI2C1;
 80007e4:	4b16      	ldr	r3, [pc, #88]	; (8000840 <MX_FMPI2C1_Init+0x60>)
 80007e6:	4a17      	ldr	r2, [pc, #92]	; (8000844 <MX_FMPI2C1_Init+0x64>)
 80007e8:	601a      	str	r2, [r3, #0]
  hfmpi2c1.Init.Timing = 0x00A0A3F7;
 80007ea:	4b15      	ldr	r3, [pc, #84]	; (8000840 <MX_FMPI2C1_Init+0x60>)
 80007ec:	4a16      	ldr	r2, [pc, #88]	; (8000848 <MX_FMPI2C1_Init+0x68>)
 80007ee:	605a      	str	r2, [r3, #4]
  hfmpi2c1.Init.OwnAddress1 = 0;
 80007f0:	4b13      	ldr	r3, [pc, #76]	; (8000840 <MX_FMPI2C1_Init+0x60>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	609a      	str	r2, [r3, #8]
  hfmpi2c1.Init.AddressingMode = FMPI2C_ADDRESSINGMODE_7BIT;
 80007f6:	4b12      	ldr	r3, [pc, #72]	; (8000840 <MX_FMPI2C1_Init+0x60>)
 80007f8:	2201      	movs	r2, #1
 80007fa:	60da      	str	r2, [r3, #12]
  hfmpi2c1.Init.DualAddressMode = FMPI2C_DUALADDRESS_DISABLE;
 80007fc:	4b10      	ldr	r3, [pc, #64]	; (8000840 <MX_FMPI2C1_Init+0x60>)
 80007fe:	2200      	movs	r2, #0
 8000800:	611a      	str	r2, [r3, #16]
  hfmpi2c1.Init.OwnAddress2 = 0;
 8000802:	4b0f      	ldr	r3, [pc, #60]	; (8000840 <MX_FMPI2C1_Init+0x60>)
 8000804:	2200      	movs	r2, #0
 8000806:	615a      	str	r2, [r3, #20]
  hfmpi2c1.Init.OwnAddress2Masks = FMPI2C_OA2_NOMASK;
 8000808:	4b0d      	ldr	r3, [pc, #52]	; (8000840 <MX_FMPI2C1_Init+0x60>)
 800080a:	2200      	movs	r2, #0
 800080c:	619a      	str	r2, [r3, #24]
  hfmpi2c1.Init.GeneralCallMode = FMPI2C_GENERALCALL_DISABLE;
 800080e:	4b0c      	ldr	r3, [pc, #48]	; (8000840 <MX_FMPI2C1_Init+0x60>)
 8000810:	2200      	movs	r2, #0
 8000812:	61da      	str	r2, [r3, #28]
  hfmpi2c1.Init.NoStretchMode = FMPI2C_NOSTRETCH_DISABLE;
 8000814:	4b0a      	ldr	r3, [pc, #40]	; (8000840 <MX_FMPI2C1_Init+0x60>)
 8000816:	2200      	movs	r2, #0
 8000818:	621a      	str	r2, [r3, #32]
  if (HAL_FMPI2C_Init(&hfmpi2c1) != HAL_OK)
 800081a:	4809      	ldr	r0, [pc, #36]	; (8000840 <MX_FMPI2C1_Init+0x60>)
 800081c:	f000 fe8b 	bl	8001536 <HAL_FMPI2C_Init>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <MX_FMPI2C1_Init+0x4a>
  {
    Error_Handler();
 8000826:	f000 fa1f 	bl	8000c68 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_FMPI2CEx_ConfigAnalogFilter(&hfmpi2c1, FMPI2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800082a:	2100      	movs	r1, #0
 800082c:	4804      	ldr	r0, [pc, #16]	; (8000840 <MX_FMPI2C1_Init+0x60>)
 800082e:	f000 ff11 	bl	8001654 <HAL_FMPI2CEx_ConfigAnalogFilter>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <MX_FMPI2C1_Init+0x5c>
  {
    Error_Handler();
 8000838:	f000 fa16 	bl	8000c68 <Error_Handler>
  }
  /* USER CODE BEGIN FMPI2C1_Init 2 */

  /* USER CODE END FMPI2C1_Init 2 */

}
 800083c:	bf00      	nop
 800083e:	bd80      	pop	{r7, pc}
 8000840:	200001ec 	.word	0x200001ec
 8000844:	40006000 	.word	0x40006000
 8000848:	00a0a3f7 	.word	0x00a0a3f7

0800084c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000850:	4b12      	ldr	r3, [pc, #72]	; (800089c <MX_I2C1_Init+0x50>)
 8000852:	4a13      	ldr	r2, [pc, #76]	; (80008a0 <MX_I2C1_Init+0x54>)
 8000854:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000856:	4b11      	ldr	r3, [pc, #68]	; (800089c <MX_I2C1_Init+0x50>)
 8000858:	4a12      	ldr	r2, [pc, #72]	; (80008a4 <MX_I2C1_Init+0x58>)
 800085a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800085c:	4b0f      	ldr	r3, [pc, #60]	; (800089c <MX_I2C1_Init+0x50>)
 800085e:	2200      	movs	r2, #0
 8000860:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000862:	4b0e      	ldr	r3, [pc, #56]	; (800089c <MX_I2C1_Init+0x50>)
 8000864:	2200      	movs	r2, #0
 8000866:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000868:	4b0c      	ldr	r3, [pc, #48]	; (800089c <MX_I2C1_Init+0x50>)
 800086a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800086e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000870:	4b0a      	ldr	r3, [pc, #40]	; (800089c <MX_I2C1_Init+0x50>)
 8000872:	2200      	movs	r2, #0
 8000874:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000876:	4b09      	ldr	r3, [pc, #36]	; (800089c <MX_I2C1_Init+0x50>)
 8000878:	2200      	movs	r2, #0
 800087a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800087c:	4b07      	ldr	r3, [pc, #28]	; (800089c <MX_I2C1_Init+0x50>)
 800087e:	2200      	movs	r2, #0
 8000880:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000882:	4b06      	ldr	r3, [pc, #24]	; (800089c <MX_I2C1_Init+0x50>)
 8000884:	2200      	movs	r2, #0
 8000886:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000888:	4804      	ldr	r0, [pc, #16]	; (800089c <MX_I2C1_Init+0x50>)
 800088a:	f001 f8dd 	bl	8001a48 <HAL_I2C_Init>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000894:	f000 f9e8 	bl	8000c68 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000898:	bf00      	nop
 800089a:	bd80      	pop	{r7, pc}
 800089c:	20000144 	.word	0x20000144
 80008a0:	40005400 	.word	0x40005400
 80008a4:	000186a0 	.word	0x000186a0

080008a8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80008ac:	4b12      	ldr	r3, [pc, #72]	; (80008f8 <MX_I2C2_Init+0x50>)
 80008ae:	4a13      	ldr	r2, [pc, #76]	; (80008fc <MX_I2C2_Init+0x54>)
 80008b0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80008b2:	4b11      	ldr	r3, [pc, #68]	; (80008f8 <MX_I2C2_Init+0x50>)
 80008b4:	4a12      	ldr	r2, [pc, #72]	; (8000900 <MX_I2C2_Init+0x58>)
 80008b6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80008b8:	4b0f      	ldr	r3, [pc, #60]	; (80008f8 <MX_I2C2_Init+0x50>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80008be:	4b0e      	ldr	r3, [pc, #56]	; (80008f8 <MX_I2C2_Init+0x50>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008c4:	4b0c      	ldr	r3, [pc, #48]	; (80008f8 <MX_I2C2_Init+0x50>)
 80008c6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80008ca:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008cc:	4b0a      	ldr	r3, [pc, #40]	; (80008f8 <MX_I2C2_Init+0x50>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80008d2:	4b09      	ldr	r3, [pc, #36]	; (80008f8 <MX_I2C2_Init+0x50>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008d8:	4b07      	ldr	r3, [pc, #28]	; (80008f8 <MX_I2C2_Init+0x50>)
 80008da:	2200      	movs	r2, #0
 80008dc:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008de:	4b06      	ldr	r3, [pc, #24]	; (80008f8 <MX_I2C2_Init+0x50>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80008e4:	4804      	ldr	r0, [pc, #16]	; (80008f8 <MX_I2C2_Init+0x50>)
 80008e6:	f001 f8af 	bl	8001a48 <HAL_I2C_Init>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80008f0:	f000 f9ba 	bl	8000c68 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80008f4:	bf00      	nop
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	20000198 	.word	0x20000198
 80008fc:	40005800 	.word	0x40005800
 8000900:	000186a0 	.word	0x000186a0

08000904 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000908:	4b12      	ldr	r3, [pc, #72]	; (8000954 <MX_I2C3_Init+0x50>)
 800090a:	4a13      	ldr	r2, [pc, #76]	; (8000958 <MX_I2C3_Init+0x54>)
 800090c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800090e:	4b11      	ldr	r3, [pc, #68]	; (8000954 <MX_I2C3_Init+0x50>)
 8000910:	4a12      	ldr	r2, [pc, #72]	; (800095c <MX_I2C3_Init+0x58>)
 8000912:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000914:	4b0f      	ldr	r3, [pc, #60]	; (8000954 <MX_I2C3_Init+0x50>)
 8000916:	2200      	movs	r2, #0
 8000918:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800091a:	4b0e      	ldr	r3, [pc, #56]	; (8000954 <MX_I2C3_Init+0x50>)
 800091c:	2200      	movs	r2, #0
 800091e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000920:	4b0c      	ldr	r3, [pc, #48]	; (8000954 <MX_I2C3_Init+0x50>)
 8000922:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000926:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000928:	4b0a      	ldr	r3, [pc, #40]	; (8000954 <MX_I2C3_Init+0x50>)
 800092a:	2200      	movs	r2, #0
 800092c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800092e:	4b09      	ldr	r3, [pc, #36]	; (8000954 <MX_I2C3_Init+0x50>)
 8000930:	2200      	movs	r2, #0
 8000932:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000934:	4b07      	ldr	r3, [pc, #28]	; (8000954 <MX_I2C3_Init+0x50>)
 8000936:	2200      	movs	r2, #0
 8000938:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800093a:	4b06      	ldr	r3, [pc, #24]	; (8000954 <MX_I2C3_Init+0x50>)
 800093c:	2200      	movs	r2, #0
 800093e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000940:	4804      	ldr	r0, [pc, #16]	; (8000954 <MX_I2C3_Init+0x50>)
 8000942:	f001 f881 	bl	8001a48 <HAL_I2C_Init>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 800094c:	f000 f98c 	bl	8000c68 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000950:	bf00      	nop
 8000952:	bd80      	pop	{r7, pc}
 8000954:	20000098 	.word	0x20000098
 8000958:	40005c00 	.word	0x40005c00
 800095c:	000186a0 	.word	0x000186a0

08000960 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000964:	4b17      	ldr	r3, [pc, #92]	; (80009c4 <MX_SPI2_Init+0x64>)
 8000966:	4a18      	ldr	r2, [pc, #96]	; (80009c8 <MX_SPI2_Init+0x68>)
 8000968:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800096a:	4b16      	ldr	r3, [pc, #88]	; (80009c4 <MX_SPI2_Init+0x64>)
 800096c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000970:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000972:	4b14      	ldr	r3, [pc, #80]	; (80009c4 <MX_SPI2_Init+0x64>)
 8000974:	2200      	movs	r2, #0
 8000976:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000978:	4b12      	ldr	r3, [pc, #72]	; (80009c4 <MX_SPI2_Init+0x64>)
 800097a:	2200      	movs	r2, #0
 800097c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800097e:	4b11      	ldr	r3, [pc, #68]	; (80009c4 <MX_SPI2_Init+0x64>)
 8000980:	2200      	movs	r2, #0
 8000982:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000984:	4b0f      	ldr	r3, [pc, #60]	; (80009c4 <MX_SPI2_Init+0x64>)
 8000986:	2200      	movs	r2, #0
 8000988:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800098a:	4b0e      	ldr	r3, [pc, #56]	; (80009c4 <MX_SPI2_Init+0x64>)
 800098c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000990:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000992:	4b0c      	ldr	r3, [pc, #48]	; (80009c4 <MX_SPI2_Init+0x64>)
 8000994:	2200      	movs	r2, #0
 8000996:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000998:	4b0a      	ldr	r3, [pc, #40]	; (80009c4 <MX_SPI2_Init+0x64>)
 800099a:	2200      	movs	r2, #0
 800099c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800099e:	4b09      	ldr	r3, [pc, #36]	; (80009c4 <MX_SPI2_Init+0x64>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009a4:	4b07      	ldr	r3, [pc, #28]	; (80009c4 <MX_SPI2_Init+0x64>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80009aa:	4b06      	ldr	r3, [pc, #24]	; (80009c4 <MX_SPI2_Init+0x64>)
 80009ac:	220a      	movs	r2, #10
 80009ae:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80009b0:	4804      	ldr	r0, [pc, #16]	; (80009c4 <MX_SPI2_Init+0x64>)
 80009b2:	f002 fa21 	bl	8002df8 <HAL_SPI_Init>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80009bc:	f000 f954 	bl	8000c68 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80009c0:	bf00      	nop
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	200000ec 	.word	0x200000ec
 80009c8:	40003800 	.word	0x40003800

080009cc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b096      	sub	sp, #88	; 0x58
 80009d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009d2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80009d6:	2200      	movs	r2, #0
 80009d8:	601a      	str	r2, [r3, #0]
 80009da:	605a      	str	r2, [r3, #4]
 80009dc:	609a      	str	r2, [r3, #8]
 80009de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009e0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80009e4:	2200      	movs	r2, #0
 80009e6:	601a      	str	r2, [r3, #0]
 80009e8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009ee:	2200      	movs	r2, #0
 80009f0:	601a      	str	r2, [r3, #0]
 80009f2:	605a      	str	r2, [r3, #4]
 80009f4:	609a      	str	r2, [r3, #8]
 80009f6:	60da      	str	r2, [r3, #12]
 80009f8:	611a      	str	r2, [r3, #16]
 80009fa:	615a      	str	r2, [r3, #20]
 80009fc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80009fe:	1d3b      	adds	r3, r7, #4
 8000a00:	2220      	movs	r2, #32
 8000a02:	2100      	movs	r1, #0
 8000a04:	4618      	mov	r0, r3
 8000a06:	f003 fb93 	bl	8004130 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a0a:	4b3e      	ldr	r3, [pc, #248]	; (8000b04 <MX_TIM1_Init+0x138>)
 8000a0c:	4a3e      	ldr	r2, [pc, #248]	; (8000b08 <MX_TIM1_Init+0x13c>)
 8000a0e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000a10:	4b3c      	ldr	r3, [pc, #240]	; (8000b04 <MX_TIM1_Init+0x138>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a16:	4b3b      	ldr	r3, [pc, #236]	; (8000b04 <MX_TIM1_Init+0x138>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000a1c:	4b39      	ldr	r3, [pc, #228]	; (8000b04 <MX_TIM1_Init+0x138>)
 8000a1e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a22:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a24:	4b37      	ldr	r3, [pc, #220]	; (8000b04 <MX_TIM1_Init+0x138>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a2a:	4b36      	ldr	r3, [pc, #216]	; (8000b04 <MX_TIM1_Init+0x138>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a30:	4b34      	ldr	r3, [pc, #208]	; (8000b04 <MX_TIM1_Init+0x138>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000a36:	4833      	ldr	r0, [pc, #204]	; (8000b04 <MX_TIM1_Init+0x138>)
 8000a38:	f002 fa67 	bl	8002f0a <HAL_TIM_Base_Init>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000a42:	f000 f911 	bl	8000c68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a4a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000a4c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000a50:	4619      	mov	r1, r3
 8000a52:	482c      	ldr	r0, [pc, #176]	; (8000b04 <MX_TIM1_Init+0x138>)
 8000a54:	f002 fc8c 	bl	8003370 <HAL_TIM_ConfigClockSource>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d001      	beq.n	8000a62 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000a5e:	f000 f903 	bl	8000c68 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000a62:	4828      	ldr	r0, [pc, #160]	; (8000b04 <MX_TIM1_Init+0x138>)
 8000a64:	f002 faa0 	bl	8002fa8 <HAL_TIM_PWM_Init>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000a6e:	f000 f8fb 	bl	8000c68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a72:	2300      	movs	r3, #0
 8000a74:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a76:	2300      	movs	r3, #0
 8000a78:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a7a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000a7e:	4619      	mov	r1, r3
 8000a80:	4820      	ldr	r0, [pc, #128]	; (8000b04 <MX_TIM1_Init+0x138>)
 8000a82:	f003 f84d 	bl	8003b20 <HAL_TIMEx_MasterConfigSynchronization>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000a8c:	f000 f8ec 	bl	8000c68 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a90:	2360      	movs	r3, #96	; 0x60
 8000a92:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000a94:	2300      	movs	r3, #0
 8000a96:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000aac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ab0:	2208      	movs	r2, #8
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	4813      	ldr	r0, [pc, #76]	; (8000b04 <MX_TIM1_Init+0x138>)
 8000ab6:	f002 fb99 	bl	80031ec <HAL_TIM_PWM_ConfigChannel>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d001      	beq.n	8000ac4 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8000ac0:	f000 f8d2 	bl	8000c68 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000acc:	2300      	movs	r3, #0
 8000ace:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000ad8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000adc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000ae2:	1d3b      	adds	r3, r7, #4
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	4807      	ldr	r0, [pc, #28]	; (8000b04 <MX_TIM1_Init+0x138>)
 8000ae8:	f003 f896 	bl	8003c18 <HAL_TIMEx_ConfigBreakDeadTime>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8000af2:	f000 f8b9 	bl	8000c68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000af6:	4803      	ldr	r0, [pc, #12]	; (8000b04 <MX_TIM1_Init+0x138>)
 8000af8:	f000 faba 	bl	8001070 <HAL_TIM_MspPostInit>

}
 8000afc:	bf00      	nop
 8000afe:	3758      	adds	r7, #88	; 0x58
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	20000238 	.word	0x20000238
 8000b08:	40010000 	.word	0x40010000

08000b0c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b10:	4b11      	ldr	r3, [pc, #68]	; (8000b58 <MX_USART2_UART_Init+0x4c>)
 8000b12:	4a12      	ldr	r2, [pc, #72]	; (8000b5c <MX_USART2_UART_Init+0x50>)
 8000b14:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b16:	4b10      	ldr	r3, [pc, #64]	; (8000b58 <MX_USART2_UART_Init+0x4c>)
 8000b18:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b1c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b1e:	4b0e      	ldr	r3, [pc, #56]	; (8000b58 <MX_USART2_UART_Init+0x4c>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b24:	4b0c      	ldr	r3, [pc, #48]	; (8000b58 <MX_USART2_UART_Init+0x4c>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b2a:	4b0b      	ldr	r3, [pc, #44]	; (8000b58 <MX_USART2_UART_Init+0x4c>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b30:	4b09      	ldr	r3, [pc, #36]	; (8000b58 <MX_USART2_UART_Init+0x4c>)
 8000b32:	220c      	movs	r2, #12
 8000b34:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b36:	4b08      	ldr	r3, [pc, #32]	; (8000b58 <MX_USART2_UART_Init+0x4c>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b3c:	4b06      	ldr	r3, [pc, #24]	; (8000b58 <MX_USART2_UART_Init+0x4c>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b42:	4805      	ldr	r0, [pc, #20]	; (8000b58 <MX_USART2_UART_Init+0x4c>)
 8000b44:	f003 f8ba 	bl	8003cbc <HAL_UART_Init>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b4e:	f000 f88b 	bl	8000c68 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b52:	bf00      	nop
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	20000280 	.word	0x20000280
 8000b5c:	40004400 	.word	0x40004400

08000b60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b08a      	sub	sp, #40	; 0x28
 8000b64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b66:	f107 0314 	add.w	r3, r7, #20
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	601a      	str	r2, [r3, #0]
 8000b6e:	605a      	str	r2, [r3, #4]
 8000b70:	609a      	str	r2, [r3, #8]
 8000b72:	60da      	str	r2, [r3, #12]
 8000b74:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b76:	2300      	movs	r3, #0
 8000b78:	613b      	str	r3, [r7, #16]
 8000b7a:	4b38      	ldr	r3, [pc, #224]	; (8000c5c <MX_GPIO_Init+0xfc>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7e:	4a37      	ldr	r2, [pc, #220]	; (8000c5c <MX_GPIO_Init+0xfc>)
 8000b80:	f043 0304 	orr.w	r3, r3, #4
 8000b84:	6313      	str	r3, [r2, #48]	; 0x30
 8000b86:	4b35      	ldr	r3, [pc, #212]	; (8000c5c <MX_GPIO_Init+0xfc>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8a:	f003 0304 	and.w	r3, r3, #4
 8000b8e:	613b      	str	r3, [r7, #16]
 8000b90:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b92:	2300      	movs	r3, #0
 8000b94:	60fb      	str	r3, [r7, #12]
 8000b96:	4b31      	ldr	r3, [pc, #196]	; (8000c5c <MX_GPIO_Init+0xfc>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9a:	4a30      	ldr	r2, [pc, #192]	; (8000c5c <MX_GPIO_Init+0xfc>)
 8000b9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ba0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba2:	4b2e      	ldr	r3, [pc, #184]	; (8000c5c <MX_GPIO_Init+0xfc>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000baa:	60fb      	str	r3, [r7, #12]
 8000bac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bae:	2300      	movs	r3, #0
 8000bb0:	60bb      	str	r3, [r7, #8]
 8000bb2:	4b2a      	ldr	r3, [pc, #168]	; (8000c5c <MX_GPIO_Init+0xfc>)
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb6:	4a29      	ldr	r2, [pc, #164]	; (8000c5c <MX_GPIO_Init+0xfc>)
 8000bb8:	f043 0301 	orr.w	r3, r3, #1
 8000bbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bbe:	4b27      	ldr	r3, [pc, #156]	; (8000c5c <MX_GPIO_Init+0xfc>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc2:	f003 0301 	and.w	r3, r3, #1
 8000bc6:	60bb      	str	r3, [r7, #8]
 8000bc8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bca:	2300      	movs	r3, #0
 8000bcc:	607b      	str	r3, [r7, #4]
 8000bce:	4b23      	ldr	r3, [pc, #140]	; (8000c5c <MX_GPIO_Init+0xfc>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd2:	4a22      	ldr	r2, [pc, #136]	; (8000c5c <MX_GPIO_Init+0xfc>)
 8000bd4:	f043 0302 	orr.w	r3, r3, #2
 8000bd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bda:	4b20      	ldr	r3, [pc, #128]	; (8000c5c <MX_GPIO_Init+0xfc>)
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bde:	f003 0302 	and.w	r3, r3, #2
 8000be2:	607b      	str	r3, [r7, #4]
 8000be4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000be6:	2200      	movs	r2, #0
 8000be8:	2120      	movs	r1, #32
 8000bea:	481d      	ldr	r0, [pc, #116]	; (8000c60 <MX_GPIO_Init+0x100>)
 8000bec:	f000 ff12 	bl	8001a14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8000bf6:	481b      	ldr	r0, [pc, #108]	; (8000c64 <MX_GPIO_Init+0x104>)
 8000bf8:	f000 ff0c 	bl	8001a14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000bfc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c02:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000c06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c0c:	f107 0314 	add.w	r3, r7, #20
 8000c10:	4619      	mov	r1, r3
 8000c12:	4814      	ldr	r0, [pc, #80]	; (8000c64 <MX_GPIO_Init+0x104>)
 8000c14:	f000 fd6a 	bl	80016ec <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000c18:	2320      	movs	r3, #32
 8000c1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c20:	2300      	movs	r3, #0
 8000c22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c24:	2300      	movs	r3, #0
 8000c26:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000c28:	f107 0314 	add.w	r3, r7, #20
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	480c      	ldr	r0, [pc, #48]	; (8000c60 <MX_GPIO_Init+0x100>)
 8000c30:	f000 fd5c 	bl	80016ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PC10 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000c34:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000c38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c42:	2300      	movs	r3, #0
 8000c44:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c46:	f107 0314 	add.w	r3, r7, #20
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	4805      	ldr	r0, [pc, #20]	; (8000c64 <MX_GPIO_Init+0x104>)
 8000c4e:	f000 fd4d 	bl	80016ec <HAL_GPIO_Init>

}
 8000c52:	bf00      	nop
 8000c54:	3728      	adds	r7, #40	; 0x28
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	40023800 	.word	0x40023800
 8000c60:	40020000 	.word	0x40020000
 8000c64:	40020800 	.word	0x40020800

08000c68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c6c:	b672      	cpsid	i
}
 8000c6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c70:	e7fe      	b.n	8000c70 <Error_Handler+0x8>
	...

08000c74 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	607b      	str	r3, [r7, #4]
 8000c7e:	4b10      	ldr	r3, [pc, #64]	; (8000cc0 <HAL_MspInit+0x4c>)
 8000c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c82:	4a0f      	ldr	r2, [pc, #60]	; (8000cc0 <HAL_MspInit+0x4c>)
 8000c84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c88:	6453      	str	r3, [r2, #68]	; 0x44
 8000c8a:	4b0d      	ldr	r3, [pc, #52]	; (8000cc0 <HAL_MspInit+0x4c>)
 8000c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c92:	607b      	str	r3, [r7, #4]
 8000c94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c96:	2300      	movs	r3, #0
 8000c98:	603b      	str	r3, [r7, #0]
 8000c9a:	4b09      	ldr	r3, [pc, #36]	; (8000cc0 <HAL_MspInit+0x4c>)
 8000c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c9e:	4a08      	ldr	r2, [pc, #32]	; (8000cc0 <HAL_MspInit+0x4c>)
 8000ca0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ca4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ca6:	4b06      	ldr	r3, [pc, #24]	; (8000cc0 <HAL_MspInit+0x4c>)
 8000ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000caa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cae:	603b      	str	r3, [r7, #0]
 8000cb0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000cb2:	2007      	movs	r0, #7
 8000cb4:	f000 fc0c 	bl	80014d0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cb8:	bf00      	nop
 8000cba:	3708      	adds	r7, #8
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	40023800 	.word	0x40023800

08000cc4 <HAL_FMPI2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hfmpi2c: FMPI2C handle pointer
* @retval None
*/
void HAL_FMPI2C_MspInit(FMPI2C_HandleTypeDef* hfmpi2c)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b08a      	sub	sp, #40	; 0x28
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ccc:	f107 0314 	add.w	r3, r7, #20
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	601a      	str	r2, [r3, #0]
 8000cd4:	605a      	str	r2, [r3, #4]
 8000cd6:	609a      	str	r2, [r3, #8]
 8000cd8:	60da      	str	r2, [r3, #12]
 8000cda:	611a      	str	r2, [r3, #16]
  if(hfmpi2c->Instance==FMPI2C1)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4a19      	ldr	r2, [pc, #100]	; (8000d48 <HAL_FMPI2C_MspInit+0x84>)
 8000ce2:	4293      	cmp	r3, r2
 8000ce4:	d12b      	bne.n	8000d3e <HAL_FMPI2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN FMPI2C1_MspInit 0 */

  /* USER CODE END FMPI2C1_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	613b      	str	r3, [r7, #16]
 8000cea:	4b18      	ldr	r3, [pc, #96]	; (8000d4c <HAL_FMPI2C_MspInit+0x88>)
 8000cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cee:	4a17      	ldr	r2, [pc, #92]	; (8000d4c <HAL_FMPI2C_MspInit+0x88>)
 8000cf0:	f043 0304 	orr.w	r3, r3, #4
 8000cf4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cf6:	4b15      	ldr	r3, [pc, #84]	; (8000d4c <HAL_FMPI2C_MspInit+0x88>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfa:	f003 0304 	and.w	r3, r3, #4
 8000cfe:	613b      	str	r3, [r7, #16]
 8000d00:	693b      	ldr	r3, [r7, #16]
    /**FMPI2C1 GPIO Configuration
    PC6     ------> FMPI2C1_SCL
    PC7     ------> FMPI2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d02:	23c0      	movs	r3, #192	; 0xc0
 8000d04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d06:	2312      	movs	r3, #18
 8000d08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d0e:	2303      	movs	r3, #3
 8000d10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_FMPI2C1;
 8000d12:	2304      	movs	r3, #4
 8000d14:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d16:	f107 0314 	add.w	r3, r7, #20
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	480c      	ldr	r0, [pc, #48]	; (8000d50 <HAL_FMPI2C_MspInit+0x8c>)
 8000d1e:	f000 fce5 	bl	80016ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_FMPI2C1_CLK_ENABLE();
 8000d22:	2300      	movs	r3, #0
 8000d24:	60fb      	str	r3, [r7, #12]
 8000d26:	4b09      	ldr	r3, [pc, #36]	; (8000d4c <HAL_FMPI2C_MspInit+0x88>)
 8000d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d2a:	4a08      	ldr	r2, [pc, #32]	; (8000d4c <HAL_FMPI2C_MspInit+0x88>)
 8000d2c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000d30:	6413      	str	r3, [r2, #64]	; 0x40
 8000d32:	4b06      	ldr	r3, [pc, #24]	; (8000d4c <HAL_FMPI2C_MspInit+0x88>)
 8000d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d36:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000d3a:	60fb      	str	r3, [r7, #12]
 8000d3c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN FMPI2C1_MspInit 1 */

  /* USER CODE END FMPI2C1_MspInit 1 */
  }

}
 8000d3e:	bf00      	nop
 8000d40:	3728      	adds	r7, #40	; 0x28
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	40006000 	.word	0x40006000
 8000d4c:	40023800 	.word	0x40023800
 8000d50:	40020800 	.word	0x40020800

08000d54 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b090      	sub	sp, #64	; 0x40
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d5c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d60:	2200      	movs	r2, #0
 8000d62:	601a      	str	r2, [r3, #0]
 8000d64:	605a      	str	r2, [r3, #4]
 8000d66:	609a      	str	r2, [r3, #8]
 8000d68:	60da      	str	r2, [r3, #12]
 8000d6a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a6b      	ldr	r2, [pc, #428]	; (8000f20 <HAL_I2C_MspInit+0x1cc>)
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d12c      	bne.n	8000dd0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d76:	2300      	movs	r3, #0
 8000d78:	62bb      	str	r3, [r7, #40]	; 0x28
 8000d7a:	4b6a      	ldr	r3, [pc, #424]	; (8000f24 <HAL_I2C_MspInit+0x1d0>)
 8000d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7e:	4a69      	ldr	r2, [pc, #420]	; (8000f24 <HAL_I2C_MspInit+0x1d0>)
 8000d80:	f043 0302 	orr.w	r3, r3, #2
 8000d84:	6313      	str	r3, [r2, #48]	; 0x30
 8000d86:	4b67      	ldr	r3, [pc, #412]	; (8000f24 <HAL_I2C_MspInit+0x1d0>)
 8000d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8a:	f003 0302 	and.w	r3, r3, #2
 8000d8e:	62bb      	str	r3, [r7, #40]	; 0x28
 8000d90:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d92:	23c0      	movs	r3, #192	; 0xc0
 8000d94:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d96:	2312      	movs	r3, #18
 8000d98:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d9e:	2303      	movs	r3, #3
 8000da0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000da2:	2304      	movs	r3, #4
 8000da4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000da6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000daa:	4619      	mov	r1, r3
 8000dac:	485e      	ldr	r0, [pc, #376]	; (8000f28 <HAL_I2C_MspInit+0x1d4>)
 8000dae:	f000 fc9d 	bl	80016ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000db2:	2300      	movs	r3, #0
 8000db4:	627b      	str	r3, [r7, #36]	; 0x24
 8000db6:	4b5b      	ldr	r3, [pc, #364]	; (8000f24 <HAL_I2C_MspInit+0x1d0>)
 8000db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dba:	4a5a      	ldr	r2, [pc, #360]	; (8000f24 <HAL_I2C_MspInit+0x1d0>)
 8000dbc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000dc0:	6413      	str	r3, [r2, #64]	; 0x40
 8000dc2:	4b58      	ldr	r3, [pc, #352]	; (8000f24 <HAL_I2C_MspInit+0x1d0>)
 8000dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dca:	627b      	str	r3, [r7, #36]	; 0x24
 8000dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8000dce:	e0a2      	b.n	8000f16 <HAL_I2C_MspInit+0x1c2>
  else if(hi2c->Instance==I2C2)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4a55      	ldr	r2, [pc, #340]	; (8000f2c <HAL_I2C_MspInit+0x1d8>)
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d14c      	bne.n	8000e74 <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dda:	2300      	movs	r3, #0
 8000ddc:	623b      	str	r3, [r7, #32]
 8000dde:	4b51      	ldr	r3, [pc, #324]	; (8000f24 <HAL_I2C_MspInit+0x1d0>)
 8000de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de2:	4a50      	ldr	r2, [pc, #320]	; (8000f24 <HAL_I2C_MspInit+0x1d0>)
 8000de4:	f043 0302 	orr.w	r3, r3, #2
 8000de8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dea:	4b4e      	ldr	r3, [pc, #312]	; (8000f24 <HAL_I2C_MspInit+0x1d0>)
 8000dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dee:	f003 0302 	and.w	r3, r3, #2
 8000df2:	623b      	str	r3, [r7, #32]
 8000df4:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000df6:	2300      	movs	r3, #0
 8000df8:	61fb      	str	r3, [r7, #28]
 8000dfa:	4b4a      	ldr	r3, [pc, #296]	; (8000f24 <HAL_I2C_MspInit+0x1d0>)
 8000dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfe:	4a49      	ldr	r2, [pc, #292]	; (8000f24 <HAL_I2C_MspInit+0x1d0>)
 8000e00:	f043 0304 	orr.w	r3, r3, #4
 8000e04:	6313      	str	r3, [r2, #48]	; 0x30
 8000e06:	4b47      	ldr	r3, [pc, #284]	; (8000f24 <HAL_I2C_MspInit+0x1d0>)
 8000e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0a:	f003 0304 	and.w	r3, r3, #4
 8000e0e:	61fb      	str	r3, [r7, #28]
 8000e10:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000e12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e16:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e18:	2312      	movs	r3, #18
 8000e1a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e20:	2303      	movs	r3, #3
 8000e22:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000e24:	2304      	movs	r3, #4
 8000e26:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e28:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	483e      	ldr	r0, [pc, #248]	; (8000f28 <HAL_I2C_MspInit+0x1d4>)
 8000e30:	f000 fc5c 	bl	80016ec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000e34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e38:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e3a:	2312      	movs	r3, #18
 8000e3c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e42:	2303      	movs	r3, #3
 8000e44:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000e46:	2304      	movs	r3, #4
 8000e48:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e4a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e4e:	4619      	mov	r1, r3
 8000e50:	4837      	ldr	r0, [pc, #220]	; (8000f30 <HAL_I2C_MspInit+0x1dc>)
 8000e52:	f000 fc4b 	bl	80016ec <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000e56:	2300      	movs	r3, #0
 8000e58:	61bb      	str	r3, [r7, #24]
 8000e5a:	4b32      	ldr	r3, [pc, #200]	; (8000f24 <HAL_I2C_MspInit+0x1d0>)
 8000e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e5e:	4a31      	ldr	r2, [pc, #196]	; (8000f24 <HAL_I2C_MspInit+0x1d0>)
 8000e60:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e64:	6413      	str	r3, [r2, #64]	; 0x40
 8000e66:	4b2f      	ldr	r3, [pc, #188]	; (8000f24 <HAL_I2C_MspInit+0x1d0>)
 8000e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e6e:	61bb      	str	r3, [r7, #24]
 8000e70:	69bb      	ldr	r3, [r7, #24]
}
 8000e72:	e050      	b.n	8000f16 <HAL_I2C_MspInit+0x1c2>
  else if(hi2c->Instance==I2C3)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4a2e      	ldr	r2, [pc, #184]	; (8000f34 <HAL_I2C_MspInit+0x1e0>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d14b      	bne.n	8000f16 <HAL_I2C_MspInit+0x1c2>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e7e:	2300      	movs	r3, #0
 8000e80:	617b      	str	r3, [r7, #20]
 8000e82:	4b28      	ldr	r3, [pc, #160]	; (8000f24 <HAL_I2C_MspInit+0x1d0>)
 8000e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e86:	4a27      	ldr	r2, [pc, #156]	; (8000f24 <HAL_I2C_MspInit+0x1d0>)
 8000e88:	f043 0304 	orr.w	r3, r3, #4
 8000e8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e8e:	4b25      	ldr	r3, [pc, #148]	; (8000f24 <HAL_I2C_MspInit+0x1d0>)
 8000e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e92:	f003 0304 	and.w	r3, r3, #4
 8000e96:	617b      	str	r3, [r7, #20]
 8000e98:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	613b      	str	r3, [r7, #16]
 8000e9e:	4b21      	ldr	r3, [pc, #132]	; (8000f24 <HAL_I2C_MspInit+0x1d0>)
 8000ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea2:	4a20      	ldr	r2, [pc, #128]	; (8000f24 <HAL_I2C_MspInit+0x1d0>)
 8000ea4:	f043 0301 	orr.w	r3, r3, #1
 8000ea8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eaa:	4b1e      	ldr	r3, [pc, #120]	; (8000f24 <HAL_I2C_MspInit+0x1d0>)
 8000eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eae:	f003 0301 	and.w	r3, r3, #1
 8000eb2:	613b      	str	r3, [r7, #16]
 8000eb4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000eb6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000eba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ebc:	2312      	movs	r3, #18
 8000ebe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ec4:	2303      	movs	r3, #3
 8000ec6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000ec8:	2304      	movs	r3, #4
 8000eca:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ecc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	4817      	ldr	r0, [pc, #92]	; (8000f30 <HAL_I2C_MspInit+0x1dc>)
 8000ed4:	f000 fc0a 	bl	80016ec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000ed8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000edc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ede:	2312      	movs	r3, #18
 8000ee0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ee6:	2303      	movs	r3, #3
 8000ee8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000eea:	2304      	movs	r3, #4
 8000eec:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	4810      	ldr	r0, [pc, #64]	; (8000f38 <HAL_I2C_MspInit+0x1e4>)
 8000ef6:	f000 fbf9 	bl	80016ec <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000efa:	2300      	movs	r3, #0
 8000efc:	60fb      	str	r3, [r7, #12]
 8000efe:	4b09      	ldr	r3, [pc, #36]	; (8000f24 <HAL_I2C_MspInit+0x1d0>)
 8000f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f02:	4a08      	ldr	r2, [pc, #32]	; (8000f24 <HAL_I2C_MspInit+0x1d0>)
 8000f04:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000f08:	6413      	str	r3, [r2, #64]	; 0x40
 8000f0a:	4b06      	ldr	r3, [pc, #24]	; (8000f24 <HAL_I2C_MspInit+0x1d0>)
 8000f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f0e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000f12:	60fb      	str	r3, [r7, #12]
 8000f14:	68fb      	ldr	r3, [r7, #12]
}
 8000f16:	bf00      	nop
 8000f18:	3740      	adds	r7, #64	; 0x40
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	40005400 	.word	0x40005400
 8000f24:	40023800 	.word	0x40023800
 8000f28:	40020400 	.word	0x40020400
 8000f2c:	40005800 	.word	0x40005800
 8000f30:	40020800 	.word	0x40020800
 8000f34:	40005c00 	.word	0x40005c00
 8000f38:	40020000 	.word	0x40020000

08000f3c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b08a      	sub	sp, #40	; 0x28
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f44:	f107 0314 	add.w	r3, r7, #20
 8000f48:	2200      	movs	r2, #0
 8000f4a:	601a      	str	r2, [r3, #0]
 8000f4c:	605a      	str	r2, [r3, #4]
 8000f4e:	609a      	str	r2, [r3, #8]
 8000f50:	60da      	str	r2, [r3, #12]
 8000f52:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a30      	ldr	r2, [pc, #192]	; (800101c <HAL_SPI_MspInit+0xe0>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d15a      	bne.n	8001014 <HAL_SPI_MspInit+0xd8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000f5e:	2300      	movs	r3, #0
 8000f60:	613b      	str	r3, [r7, #16]
 8000f62:	4b2f      	ldr	r3, [pc, #188]	; (8001020 <HAL_SPI_MspInit+0xe4>)
 8000f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f66:	4a2e      	ldr	r2, [pc, #184]	; (8001020 <HAL_SPI_MspInit+0xe4>)
 8000f68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f6c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f6e:	4b2c      	ldr	r3, [pc, #176]	; (8001020 <HAL_SPI_MspInit+0xe4>)
 8000f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f76:	613b      	str	r3, [r7, #16]
 8000f78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	60fb      	str	r3, [r7, #12]
 8000f7e:	4b28      	ldr	r3, [pc, #160]	; (8001020 <HAL_SPI_MspInit+0xe4>)
 8000f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f82:	4a27      	ldr	r2, [pc, #156]	; (8001020 <HAL_SPI_MspInit+0xe4>)
 8000f84:	f043 0304 	orr.w	r3, r3, #4
 8000f88:	6313      	str	r3, [r2, #48]	; 0x30
 8000f8a:	4b25      	ldr	r3, [pc, #148]	; (8001020 <HAL_SPI_MspInit+0xe4>)
 8000f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8e:	f003 0304 	and.w	r3, r3, #4
 8000f92:	60fb      	str	r3, [r7, #12]
 8000f94:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f96:	2300      	movs	r3, #0
 8000f98:	60bb      	str	r3, [r7, #8]
 8000f9a:	4b21      	ldr	r3, [pc, #132]	; (8001020 <HAL_SPI_MspInit+0xe4>)
 8000f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9e:	4a20      	ldr	r2, [pc, #128]	; (8001020 <HAL_SPI_MspInit+0xe4>)
 8000fa0:	f043 0302 	orr.w	r3, r3, #2
 8000fa4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fa6:	4b1e      	ldr	r3, [pc, #120]	; (8001020 <HAL_SPI_MspInit+0xe4>)
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000faa:	f003 0302 	and.w	r3, r3, #2
 8000fae:	60bb      	str	r3, [r7, #8]
 8000fb0:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC1     ------> SPI2_MOSI
    PC2     ------> SPI2_MISO
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000fb2:	2302      	movs	r3, #2
 8000fb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb6:	2302      	movs	r3, #2
 8000fb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fbe:	2303      	movs	r3, #3
 8000fc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8000fc2:	2307      	movs	r3, #7
 8000fc4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fc6:	f107 0314 	add.w	r3, r7, #20
 8000fca:	4619      	mov	r1, r3
 8000fcc:	4815      	ldr	r0, [pc, #84]	; (8001024 <HAL_SPI_MspInit+0xe8>)
 8000fce:	f000 fb8d 	bl	80016ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000fd2:	2304      	movs	r3, #4
 8000fd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd6:	2302      	movs	r3, #2
 8000fd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fde:	2303      	movs	r3, #3
 8000fe0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000fe2:	2305      	movs	r3, #5
 8000fe4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fe6:	f107 0314 	add.w	r3, r7, #20
 8000fea:	4619      	mov	r1, r3
 8000fec:	480d      	ldr	r0, [pc, #52]	; (8001024 <HAL_SPI_MspInit+0xe8>)
 8000fee:	f000 fb7d 	bl	80016ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000ff2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ff6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff8:	2302      	movs	r3, #2
 8000ffa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001000:	2303      	movs	r3, #3
 8001002:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001004:	2305      	movs	r3, #5
 8001006:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001008:	f107 0314 	add.w	r3, r7, #20
 800100c:	4619      	mov	r1, r3
 800100e:	4806      	ldr	r0, [pc, #24]	; (8001028 <HAL_SPI_MspInit+0xec>)
 8001010:	f000 fb6c 	bl	80016ec <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001014:	bf00      	nop
 8001016:	3728      	adds	r7, #40	; 0x28
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	40003800 	.word	0x40003800
 8001020:	40023800 	.word	0x40023800
 8001024:	40020800 	.word	0x40020800
 8001028:	40020400 	.word	0x40020400

0800102c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800102c:	b480      	push	{r7}
 800102e:	b085      	sub	sp, #20
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a0b      	ldr	r2, [pc, #44]	; (8001068 <HAL_TIM_Base_MspInit+0x3c>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d10d      	bne.n	800105a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800103e:	2300      	movs	r3, #0
 8001040:	60fb      	str	r3, [r7, #12]
 8001042:	4b0a      	ldr	r3, [pc, #40]	; (800106c <HAL_TIM_Base_MspInit+0x40>)
 8001044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001046:	4a09      	ldr	r2, [pc, #36]	; (800106c <HAL_TIM_Base_MspInit+0x40>)
 8001048:	f043 0301 	orr.w	r3, r3, #1
 800104c:	6453      	str	r3, [r2, #68]	; 0x44
 800104e:	4b07      	ldr	r3, [pc, #28]	; (800106c <HAL_TIM_Base_MspInit+0x40>)
 8001050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001052:	f003 0301 	and.w	r3, r3, #1
 8001056:	60fb      	str	r3, [r7, #12]
 8001058:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800105a:	bf00      	nop
 800105c:	3714      	adds	r7, #20
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	40010000 	.word	0x40010000
 800106c:	40023800 	.word	0x40023800

08001070 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b088      	sub	sp, #32
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001078:	f107 030c 	add.w	r3, r7, #12
 800107c:	2200      	movs	r2, #0
 800107e:	601a      	str	r2, [r3, #0]
 8001080:	605a      	str	r2, [r3, #4]
 8001082:	609a      	str	r2, [r3, #8]
 8001084:	60da      	str	r2, [r3, #12]
 8001086:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4a12      	ldr	r2, [pc, #72]	; (80010d8 <HAL_TIM_MspPostInit+0x68>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d11e      	bne.n	80010d0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001092:	2300      	movs	r3, #0
 8001094:	60bb      	str	r3, [r7, #8]
 8001096:	4b11      	ldr	r3, [pc, #68]	; (80010dc <HAL_TIM_MspPostInit+0x6c>)
 8001098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109a:	4a10      	ldr	r2, [pc, #64]	; (80010dc <HAL_TIM_MspPostInit+0x6c>)
 800109c:	f043 0301 	orr.w	r3, r3, #1
 80010a0:	6313      	str	r3, [r2, #48]	; 0x30
 80010a2:	4b0e      	ldr	r3, [pc, #56]	; (80010dc <HAL_TIM_MspPostInit+0x6c>)
 80010a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a6:	f003 0301 	and.w	r3, r3, #1
 80010aa:	60bb      	str	r3, [r7, #8]
 80010ac:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80010ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010b2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b4:	2302      	movs	r3, #2
 80010b6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b8:	2300      	movs	r3, #0
 80010ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010bc:	2300      	movs	r3, #0
 80010be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80010c0:	2301      	movs	r3, #1
 80010c2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010c4:	f107 030c 	add.w	r3, r7, #12
 80010c8:	4619      	mov	r1, r3
 80010ca:	4805      	ldr	r0, [pc, #20]	; (80010e0 <HAL_TIM_MspPostInit+0x70>)
 80010cc:	f000 fb0e 	bl	80016ec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80010d0:	bf00      	nop
 80010d2:	3720      	adds	r7, #32
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	40010000 	.word	0x40010000
 80010dc:	40023800 	.word	0x40023800
 80010e0:	40020000 	.word	0x40020000

080010e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b08a      	sub	sp, #40	; 0x28
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ec:	f107 0314 	add.w	r3, r7, #20
 80010f0:	2200      	movs	r2, #0
 80010f2:	601a      	str	r2, [r3, #0]
 80010f4:	605a      	str	r2, [r3, #4]
 80010f6:	609a      	str	r2, [r3, #8]
 80010f8:	60da      	str	r2, [r3, #12]
 80010fa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4a19      	ldr	r2, [pc, #100]	; (8001168 <HAL_UART_MspInit+0x84>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d12b      	bne.n	800115e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001106:	2300      	movs	r3, #0
 8001108:	613b      	str	r3, [r7, #16]
 800110a:	4b18      	ldr	r3, [pc, #96]	; (800116c <HAL_UART_MspInit+0x88>)
 800110c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800110e:	4a17      	ldr	r2, [pc, #92]	; (800116c <HAL_UART_MspInit+0x88>)
 8001110:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001114:	6413      	str	r3, [r2, #64]	; 0x40
 8001116:	4b15      	ldr	r3, [pc, #84]	; (800116c <HAL_UART_MspInit+0x88>)
 8001118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800111a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800111e:	613b      	str	r3, [r7, #16]
 8001120:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001122:	2300      	movs	r3, #0
 8001124:	60fb      	str	r3, [r7, #12]
 8001126:	4b11      	ldr	r3, [pc, #68]	; (800116c <HAL_UART_MspInit+0x88>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112a:	4a10      	ldr	r2, [pc, #64]	; (800116c <HAL_UART_MspInit+0x88>)
 800112c:	f043 0301 	orr.w	r3, r3, #1
 8001130:	6313      	str	r3, [r2, #48]	; 0x30
 8001132:	4b0e      	ldr	r3, [pc, #56]	; (800116c <HAL_UART_MspInit+0x88>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001136:	f003 0301 	and.w	r3, r3, #1
 800113a:	60fb      	str	r3, [r7, #12]
 800113c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800113e:	230c      	movs	r3, #12
 8001140:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001142:	2302      	movs	r3, #2
 8001144:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001146:	2300      	movs	r3, #0
 8001148:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800114a:	2303      	movs	r3, #3
 800114c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800114e:	2307      	movs	r3, #7
 8001150:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001152:	f107 0314 	add.w	r3, r7, #20
 8001156:	4619      	mov	r1, r3
 8001158:	4805      	ldr	r0, [pc, #20]	; (8001170 <HAL_UART_MspInit+0x8c>)
 800115a:	f000 fac7 	bl	80016ec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800115e:	bf00      	nop
 8001160:	3728      	adds	r7, #40	; 0x28
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	40004400 	.word	0x40004400
 800116c:	40023800 	.word	0x40023800
 8001170:	40020000 	.word	0x40020000

08001174 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001178:	e7fe      	b.n	8001178 <NMI_Handler+0x4>

0800117a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800117a:	b480      	push	{r7}
 800117c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800117e:	e7fe      	b.n	800117e <HardFault_Handler+0x4>

08001180 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001184:	e7fe      	b.n	8001184 <MemManage_Handler+0x4>

08001186 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001186:	b480      	push	{r7}
 8001188:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800118a:	e7fe      	b.n	800118a <BusFault_Handler+0x4>

0800118c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001190:	e7fe      	b.n	8001190 <UsageFault_Handler+0x4>

08001192 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001192:	b480      	push	{r7}
 8001194:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001196:	bf00      	nop
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr

080011a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011a4:	bf00      	nop
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr

080011ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011ae:	b480      	push	{r7}
 80011b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011b2:	bf00      	nop
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr

080011bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011c0:	f000 f890 	bl	80012e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011c4:	bf00      	nop
 80011c6:	bd80      	pop	{r7, pc}

080011c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011cc:	4b06      	ldr	r3, [pc, #24]	; (80011e8 <SystemInit+0x20>)
 80011ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011d2:	4a05      	ldr	r2, [pc, #20]	; (80011e8 <SystemInit+0x20>)
 80011d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011dc:	bf00      	nop
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr
 80011e6:	bf00      	nop
 80011e8:	e000ed00 	.word	0xe000ed00

080011ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80011ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001224 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011f0:	480d      	ldr	r0, [pc, #52]	; (8001228 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80011f2:	490e      	ldr	r1, [pc, #56]	; (800122c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80011f4:	4a0e      	ldr	r2, [pc, #56]	; (8001230 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011f8:	e002      	b.n	8001200 <LoopCopyDataInit>

080011fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011fe:	3304      	adds	r3, #4

08001200 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001200:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001202:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001204:	d3f9      	bcc.n	80011fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001206:	4a0b      	ldr	r2, [pc, #44]	; (8001234 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001208:	4c0b      	ldr	r4, [pc, #44]	; (8001238 <LoopFillZerobss+0x26>)
  movs r3, #0
 800120a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800120c:	e001      	b.n	8001212 <LoopFillZerobss>

0800120e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800120e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001210:	3204      	adds	r2, #4

08001212 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001212:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001214:	d3fb      	bcc.n	800120e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001216:	f7ff ffd7 	bl	80011c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800121a:	f002 ff65 	bl	80040e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800121e:	f7ff f9fb 	bl	8000618 <main>
  bx  lr    
 8001222:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001224:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001228:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800122c:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001230:	08004180 	.word	0x08004180
  ldr r2, =_sbss
 8001234:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001238:	200002c8 	.word	0x200002c8

0800123c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800123c:	e7fe      	b.n	800123c <ADC_IRQHandler>
	...

08001240 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001244:	4b0e      	ldr	r3, [pc, #56]	; (8001280 <HAL_Init+0x40>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a0d      	ldr	r2, [pc, #52]	; (8001280 <HAL_Init+0x40>)
 800124a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800124e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001250:	4b0b      	ldr	r3, [pc, #44]	; (8001280 <HAL_Init+0x40>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a0a      	ldr	r2, [pc, #40]	; (8001280 <HAL_Init+0x40>)
 8001256:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800125a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800125c:	4b08      	ldr	r3, [pc, #32]	; (8001280 <HAL_Init+0x40>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a07      	ldr	r2, [pc, #28]	; (8001280 <HAL_Init+0x40>)
 8001262:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001266:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001268:	2003      	movs	r0, #3
 800126a:	f000 f931 	bl	80014d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800126e:	2000      	movs	r0, #0
 8001270:	f000 f808 	bl	8001284 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001274:	f7ff fcfe 	bl	8000c74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001278:	2300      	movs	r3, #0
}
 800127a:	4618      	mov	r0, r3
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	40023c00 	.word	0x40023c00

08001284 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800128c:	4b12      	ldr	r3, [pc, #72]	; (80012d8 <HAL_InitTick+0x54>)
 800128e:	681a      	ldr	r2, [r3, #0]
 8001290:	4b12      	ldr	r3, [pc, #72]	; (80012dc <HAL_InitTick+0x58>)
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	4619      	mov	r1, r3
 8001296:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800129a:	fbb3 f3f1 	udiv	r3, r3, r1
 800129e:	fbb2 f3f3 	udiv	r3, r2, r3
 80012a2:	4618      	mov	r0, r3
 80012a4:	f000 f93b 	bl	800151e <HAL_SYSTICK_Config>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012ae:	2301      	movs	r3, #1
 80012b0:	e00e      	b.n	80012d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	2b0f      	cmp	r3, #15
 80012b6:	d80a      	bhi.n	80012ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012b8:	2200      	movs	r2, #0
 80012ba:	6879      	ldr	r1, [r7, #4]
 80012bc:	f04f 30ff 	mov.w	r0, #4294967295
 80012c0:	f000 f911 	bl	80014e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012c4:	4a06      	ldr	r2, [pc, #24]	; (80012e0 <HAL_InitTick+0x5c>)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012ca:	2300      	movs	r3, #0
 80012cc:	e000      	b.n	80012d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012ce:	2301      	movs	r3, #1
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	3708      	adds	r7, #8
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	20000070 	.word	0x20000070
 80012dc:	20000078 	.word	0x20000078
 80012e0:	20000074 	.word	0x20000074

080012e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012e8:	4b06      	ldr	r3, [pc, #24]	; (8001304 <HAL_IncTick+0x20>)
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	461a      	mov	r2, r3
 80012ee:	4b06      	ldr	r3, [pc, #24]	; (8001308 <HAL_IncTick+0x24>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4413      	add	r3, r2
 80012f4:	4a04      	ldr	r2, [pc, #16]	; (8001308 <HAL_IncTick+0x24>)
 80012f6:	6013      	str	r3, [r2, #0]
}
 80012f8:	bf00      	nop
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	20000078 	.word	0x20000078
 8001308:	200002c4 	.word	0x200002c4

0800130c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
  return uwTick;
 8001310:	4b03      	ldr	r3, [pc, #12]	; (8001320 <HAL_GetTick+0x14>)
 8001312:	681b      	ldr	r3, [r3, #0]
}
 8001314:	4618      	mov	r0, r3
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr
 800131e:	bf00      	nop
 8001320:	200002c4 	.word	0x200002c4

08001324 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b084      	sub	sp, #16
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800132c:	f7ff ffee 	bl	800130c <HAL_GetTick>
 8001330:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	f1b3 3fff 	cmp.w	r3, #4294967295
 800133c:	d005      	beq.n	800134a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800133e:	4b0a      	ldr	r3, [pc, #40]	; (8001368 <HAL_Delay+0x44>)
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	461a      	mov	r2, r3
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	4413      	add	r3, r2
 8001348:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800134a:	bf00      	nop
 800134c:	f7ff ffde 	bl	800130c <HAL_GetTick>
 8001350:	4602      	mov	r2, r0
 8001352:	68bb      	ldr	r3, [r7, #8]
 8001354:	1ad3      	subs	r3, r2, r3
 8001356:	68fa      	ldr	r2, [r7, #12]
 8001358:	429a      	cmp	r2, r3
 800135a:	d8f7      	bhi.n	800134c <HAL_Delay+0x28>
  {
  }
}
 800135c:	bf00      	nop
 800135e:	bf00      	nop
 8001360:	3710      	adds	r7, #16
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	20000078 	.word	0x20000078

0800136c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800136c:	b480      	push	{r7}
 800136e:	b085      	sub	sp, #20
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	f003 0307 	and.w	r3, r3, #7
 800137a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800137c:	4b0c      	ldr	r3, [pc, #48]	; (80013b0 <__NVIC_SetPriorityGrouping+0x44>)
 800137e:	68db      	ldr	r3, [r3, #12]
 8001380:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001382:	68ba      	ldr	r2, [r7, #8]
 8001384:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001388:	4013      	ands	r3, r2
 800138a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001390:	68bb      	ldr	r3, [r7, #8]
 8001392:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001394:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001398:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800139c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800139e:	4a04      	ldr	r2, [pc, #16]	; (80013b0 <__NVIC_SetPriorityGrouping+0x44>)
 80013a0:	68bb      	ldr	r3, [r7, #8]
 80013a2:	60d3      	str	r3, [r2, #12]
}
 80013a4:	bf00      	nop
 80013a6:	3714      	adds	r7, #20
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr
 80013b0:	e000ed00 	.word	0xe000ed00

080013b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013b8:	4b04      	ldr	r3, [pc, #16]	; (80013cc <__NVIC_GetPriorityGrouping+0x18>)
 80013ba:	68db      	ldr	r3, [r3, #12]
 80013bc:	0a1b      	lsrs	r3, r3, #8
 80013be:	f003 0307 	and.w	r3, r3, #7
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr
 80013cc:	e000ed00 	.word	0xe000ed00

080013d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	4603      	mov	r3, r0
 80013d8:	6039      	str	r1, [r7, #0]
 80013da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	db0a      	blt.n	80013fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	b2da      	uxtb	r2, r3
 80013e8:	490c      	ldr	r1, [pc, #48]	; (800141c <__NVIC_SetPriority+0x4c>)
 80013ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ee:	0112      	lsls	r2, r2, #4
 80013f0:	b2d2      	uxtb	r2, r2
 80013f2:	440b      	add	r3, r1
 80013f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013f8:	e00a      	b.n	8001410 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	b2da      	uxtb	r2, r3
 80013fe:	4908      	ldr	r1, [pc, #32]	; (8001420 <__NVIC_SetPriority+0x50>)
 8001400:	79fb      	ldrb	r3, [r7, #7]
 8001402:	f003 030f 	and.w	r3, r3, #15
 8001406:	3b04      	subs	r3, #4
 8001408:	0112      	lsls	r2, r2, #4
 800140a:	b2d2      	uxtb	r2, r2
 800140c:	440b      	add	r3, r1
 800140e:	761a      	strb	r2, [r3, #24]
}
 8001410:	bf00      	nop
 8001412:	370c      	adds	r7, #12
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr
 800141c:	e000e100 	.word	0xe000e100
 8001420:	e000ed00 	.word	0xe000ed00

08001424 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001424:	b480      	push	{r7}
 8001426:	b089      	sub	sp, #36	; 0x24
 8001428:	af00      	add	r7, sp, #0
 800142a:	60f8      	str	r0, [r7, #12]
 800142c:	60b9      	str	r1, [r7, #8]
 800142e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	f003 0307 	and.w	r3, r3, #7
 8001436:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001438:	69fb      	ldr	r3, [r7, #28]
 800143a:	f1c3 0307 	rsb	r3, r3, #7
 800143e:	2b04      	cmp	r3, #4
 8001440:	bf28      	it	cs
 8001442:	2304      	movcs	r3, #4
 8001444:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001446:	69fb      	ldr	r3, [r7, #28]
 8001448:	3304      	adds	r3, #4
 800144a:	2b06      	cmp	r3, #6
 800144c:	d902      	bls.n	8001454 <NVIC_EncodePriority+0x30>
 800144e:	69fb      	ldr	r3, [r7, #28]
 8001450:	3b03      	subs	r3, #3
 8001452:	e000      	b.n	8001456 <NVIC_EncodePriority+0x32>
 8001454:	2300      	movs	r3, #0
 8001456:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001458:	f04f 32ff 	mov.w	r2, #4294967295
 800145c:	69bb      	ldr	r3, [r7, #24]
 800145e:	fa02 f303 	lsl.w	r3, r2, r3
 8001462:	43da      	mvns	r2, r3
 8001464:	68bb      	ldr	r3, [r7, #8]
 8001466:	401a      	ands	r2, r3
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800146c:	f04f 31ff 	mov.w	r1, #4294967295
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	fa01 f303 	lsl.w	r3, r1, r3
 8001476:	43d9      	mvns	r1, r3
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800147c:	4313      	orrs	r3, r2
         );
}
 800147e:	4618      	mov	r0, r3
 8001480:	3724      	adds	r7, #36	; 0x24
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr
	...

0800148c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	3b01      	subs	r3, #1
 8001498:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800149c:	d301      	bcc.n	80014a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800149e:	2301      	movs	r3, #1
 80014a0:	e00f      	b.n	80014c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014a2:	4a0a      	ldr	r2, [pc, #40]	; (80014cc <SysTick_Config+0x40>)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	3b01      	subs	r3, #1
 80014a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014aa:	210f      	movs	r1, #15
 80014ac:	f04f 30ff 	mov.w	r0, #4294967295
 80014b0:	f7ff ff8e 	bl	80013d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014b4:	4b05      	ldr	r3, [pc, #20]	; (80014cc <SysTick_Config+0x40>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014ba:	4b04      	ldr	r3, [pc, #16]	; (80014cc <SysTick_Config+0x40>)
 80014bc:	2207      	movs	r2, #7
 80014be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014c0:	2300      	movs	r3, #0
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	3708      	adds	r7, #8
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	e000e010 	.word	0xe000e010

080014d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014d8:	6878      	ldr	r0, [r7, #4]
 80014da:	f7ff ff47 	bl	800136c <__NVIC_SetPriorityGrouping>
}
 80014de:	bf00      	nop
 80014e0:	3708      	adds	r7, #8
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}

080014e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014e6:	b580      	push	{r7, lr}
 80014e8:	b086      	sub	sp, #24
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	4603      	mov	r3, r0
 80014ee:	60b9      	str	r1, [r7, #8]
 80014f0:	607a      	str	r2, [r7, #4]
 80014f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014f4:	2300      	movs	r3, #0
 80014f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014f8:	f7ff ff5c 	bl	80013b4 <__NVIC_GetPriorityGrouping>
 80014fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014fe:	687a      	ldr	r2, [r7, #4]
 8001500:	68b9      	ldr	r1, [r7, #8]
 8001502:	6978      	ldr	r0, [r7, #20]
 8001504:	f7ff ff8e 	bl	8001424 <NVIC_EncodePriority>
 8001508:	4602      	mov	r2, r0
 800150a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800150e:	4611      	mov	r1, r2
 8001510:	4618      	mov	r0, r3
 8001512:	f7ff ff5d 	bl	80013d0 <__NVIC_SetPriority>
}
 8001516:	bf00      	nop
 8001518:	3718      	adds	r7, #24
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}

0800151e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800151e:	b580      	push	{r7, lr}
 8001520:	b082      	sub	sp, #8
 8001522:	af00      	add	r7, sp, #0
 8001524:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001526:	6878      	ldr	r0, [r7, #4]
 8001528:	f7ff ffb0 	bl	800148c <SysTick_Config>
 800152c:	4603      	mov	r3, r0
}
 800152e:	4618      	mov	r0, r3
 8001530:	3708      	adds	r7, #8
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}

08001536 <HAL_FMPI2C_Init>:
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FMPI2C_Init(FMPI2C_HandleTypeDef *hfmpi2c)
{
 8001536:	b580      	push	{r7, lr}
 8001538:	b082      	sub	sp, #8
 800153a:	af00      	add	r7, sp, #0
 800153c:	6078      	str	r0, [r7, #4]
  /* Check the FMPI2C handle allocation */
  if (hfmpi2c == NULL)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d101      	bne.n	8001548 <HAL_FMPI2C_Init+0x12>
  {
    return HAL_ERROR;
 8001544:	2301      	movs	r3, #1
 8001546:	e081      	b.n	800164c <HAL_FMPI2C_Init+0x116>
  assert_param(IS_FMPI2C_OWN_ADDRESS2(hfmpi2c->Init.OwnAddress2));
  assert_param(IS_FMPI2C_OWN_ADDRESS2_MASK(hfmpi2c->Init.OwnAddress2Masks));
  assert_param(IS_FMPI2C_GENERAL_CALL(hfmpi2c->Init.GeneralCallMode));
  assert_param(IS_FMPI2C_NO_STRETCH(hfmpi2c->Init.NoStretchMode));

  if (hfmpi2c->State == HAL_FMPI2C_STATE_RESET)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800154e:	b2db      	uxtb	r3, r3
 8001550:	2b00      	cmp	r3, #0
 8001552:	d106      	bne.n	8001562 <HAL_FMPI2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfmpi2c->Lock = HAL_UNLOCKED;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2200      	movs	r2, #0
 8001558:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hfmpi2c->MspInitCallback(hfmpi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_FMPI2C_MspInit(hfmpi2c);
 800155c:	6878      	ldr	r0, [r7, #4]
 800155e:	f7ff fbb1 	bl	8000cc4 <HAL_FMPI2C_MspInit>
#endif /* USE_HAL_FMPI2C_REGISTER_CALLBACKS */
  }

  hfmpi2c->State = HAL_FMPI2C_STATE_BUSY;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2224      	movs	r2, #36	; 0x24
 8001566:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected FMPI2C peripheral */
  __HAL_FMPI2C_DISABLE(hfmpi2c);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	681a      	ldr	r2, [r3, #0]
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f022 0201 	bic.w	r2, r2, #1
 8001578:	601a      	str	r2, [r3, #0]

  /*---------------------------- FMPI2Cx TIMINGR Configuration ------------------*/
  /* Configure FMPI2Cx: Frequency range */
  hfmpi2c->Instance->TIMINGR = hfmpi2c->Init.Timing & TIMING_CLEAR_MASK;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	685a      	ldr	r2, [r3, #4]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001586:	611a      	str	r2, [r3, #16]

  /*---------------------------- FMPI2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hfmpi2c->Instance->OAR1 &= ~FMPI2C_OAR1_OA1EN;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	689a      	ldr	r2, [r3, #8]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001596:	609a      	str	r2, [r3, #8]

  /* Configure FMPI2Cx: Own Address1 and ack own address1 mode */
  if (hfmpi2c->Init.AddressingMode == FMPI2C_ADDRESSINGMODE_7BIT)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	68db      	ldr	r3, [r3, #12]
 800159c:	2b01      	cmp	r3, #1
 800159e:	d107      	bne.n	80015b0 <HAL_FMPI2C_Init+0x7a>
  {
    hfmpi2c->Instance->OAR1 = (FMPI2C_OAR1_OA1EN | hfmpi2c->Init.OwnAddress1);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	689a      	ldr	r2, [r3, #8]
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80015ac:	609a      	str	r2, [r3, #8]
 80015ae:	e006      	b.n	80015be <HAL_FMPI2C_Init+0x88>
  }
  else /* FMPI2C_ADDRESSINGMODE_10BIT */
  {
    hfmpi2c->Instance->OAR1 = (FMPI2C_OAR1_OA1EN | FMPI2C_OAR1_OA1MODE | hfmpi2c->Init.OwnAddress1);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	689a      	ldr	r2, [r3, #8]
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80015bc:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- FMPI2Cx CR2 Configuration ----------------------*/
  /* Configure FMPI2Cx: Addressing Master mode */
  if (hfmpi2c->Init.AddressingMode == FMPI2C_ADDRESSINGMODE_10BIT)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	68db      	ldr	r3, [r3, #12]
 80015c2:	2b02      	cmp	r3, #2
 80015c4:	d104      	bne.n	80015d0 <HAL_FMPI2C_Init+0x9a>
  {
    hfmpi2c->Instance->CR2 = (FMPI2C_CR2_ADD10);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80015ce:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hfmpi2c->Instance->CR2 |= (FMPI2C_CR2_AUTOEND | FMPI2C_CR2_NACK);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	687a      	ldr	r2, [r7, #4]
 80015d8:	6812      	ldr	r2, [r2, #0]
 80015da:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80015de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80015e2:	6053      	str	r3, [r2, #4]

  /*---------------------------- FMPI2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hfmpi2c->Instance->OAR2 &= ~FMPI2C_DUALADDRESS_ENABLE;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	68da      	ldr	r2, [r3, #12]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80015f2:	60da      	str	r2, [r3, #12]

  /* Configure FMPI2Cx: Dual mode and Own Address2 */
  hfmpi2c->Instance->OAR2 = (hfmpi2c->Init.DualAddressMode | hfmpi2c->Init.OwnAddress2 | \
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	691a      	ldr	r2, [r3, #16]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	695b      	ldr	r3, [r3, #20]
 80015fc:	ea42 0103 	orr.w	r1, r2, r3
                             (hfmpi2c->Init.OwnAddress2Masks << 8));
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	699b      	ldr	r3, [r3, #24]
 8001604:	021a      	lsls	r2, r3, #8
  hfmpi2c->Instance->OAR2 = (hfmpi2c->Init.DualAddressMode | hfmpi2c->Init.OwnAddress2 | \
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	430a      	orrs	r2, r1
 800160c:	60da      	str	r2, [r3, #12]

  /*---------------------------- FMPI2Cx CR1 Configuration ----------------------*/
  /* Configure FMPI2Cx: Generalcall and NoStretch mode */
  hfmpi2c->Instance->CR1 = (hfmpi2c->Init.GeneralCallMode | hfmpi2c->Init.NoStretchMode);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	69d9      	ldr	r1, [r3, #28]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6a1a      	ldr	r2, [r3, #32]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	430a      	orrs	r2, r1
 800161c:	601a      	str	r2, [r3, #0]

  /* Enable the selected FMPI2C peripheral */
  __HAL_FMPI2C_ENABLE(hfmpi2c);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	681a      	ldr	r2, [r3, #0]
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f042 0201 	orr.w	r2, r2, #1
 800162c:	601a      	str	r2, [r3, #0]

  hfmpi2c->ErrorCode = HAL_FMPI2C_ERROR_NONE;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2200      	movs	r2, #0
 8001632:	645a      	str	r2, [r3, #68]	; 0x44
  hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2220      	movs	r2, #32
 8001638:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hfmpi2c->PreviousState = FMPI2C_STATE_NONE;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2200      	movs	r2, #0
 8001640:	631a      	str	r2, [r3, #48]	; 0x30
  hfmpi2c->Mode = HAL_FMPI2C_MODE_NONE;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2200      	movs	r2, #0
 8001646:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800164a:	2300      	movs	r3, #0
}
 800164c:	4618      	mov	r0, r3
 800164e:	3708      	adds	r7, #8
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}

08001654 <HAL_FMPI2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified FMPI2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FMPI2CEx_ConfigAnalogFilter(FMPI2C_HandleTypeDef *hfmpi2c, uint32_t AnalogFilter)
{
 8001654:	b480      	push	{r7}
 8001656:	b083      	sub	sp, #12
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
 800165c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMPI2C_ALL_INSTANCE(hfmpi2c->Instance));
  assert_param(IS_FMPI2C_ANALOG_FILTER(AnalogFilter));

  if (hfmpi2c->State == HAL_FMPI2C_STATE_READY)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001664:	b2db      	uxtb	r3, r3
 8001666:	2b20      	cmp	r3, #32
 8001668:	d138      	bne.n	80016dc <HAL_FMPI2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hfmpi2c);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001670:	2b01      	cmp	r3, #1
 8001672:	d101      	bne.n	8001678 <HAL_FMPI2CEx_ConfigAnalogFilter+0x24>
 8001674:	2302      	movs	r3, #2
 8001676:	e032      	b.n	80016de <HAL_FMPI2CEx_ConfigAnalogFilter+0x8a>
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2201      	movs	r2, #1
 800167c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hfmpi2c->State = HAL_FMPI2C_STATE_BUSY;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2224      	movs	r2, #36	; 0x24
 8001684:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected FMPI2C peripheral */
    __HAL_FMPI2C_DISABLE(hfmpi2c);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	681a      	ldr	r2, [r3, #0]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f022 0201 	bic.w	r2, r2, #1
 8001696:	601a      	str	r2, [r3, #0]

    /* Reset FMPI2Cx ANOFF bit */
    hfmpi2c->Instance->CR1 &= ~(FMPI2C_CR1_ANFOFF);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80016a6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hfmpi2c->Instance->CR1 |= AnalogFilter;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	6819      	ldr	r1, [r3, #0]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	683a      	ldr	r2, [r7, #0]
 80016b4:	430a      	orrs	r2, r1
 80016b6:	601a      	str	r2, [r3, #0]

    __HAL_FMPI2C_ENABLE(hfmpi2c);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	681a      	ldr	r2, [r3, #0]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f042 0201 	orr.w	r2, r2, #1
 80016c6:	601a      	str	r2, [r3, #0]

    hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2220      	movs	r2, #32
 80016cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hfmpi2c);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2200      	movs	r2, #0
 80016d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80016d8:	2300      	movs	r3, #0
 80016da:	e000      	b.n	80016de <HAL_FMPI2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80016dc:	2302      	movs	r3, #2
  }
}
 80016de:	4618      	mov	r0, r3
 80016e0:	370c      	adds	r7, #12
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr
	...

080016ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b089      	sub	sp, #36	; 0x24
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
 80016f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80016f6:	2300      	movs	r3, #0
 80016f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80016fa:	2300      	movs	r3, #0
 80016fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80016fe:	2300      	movs	r3, #0
 8001700:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001702:	2300      	movs	r3, #0
 8001704:	61fb      	str	r3, [r7, #28]
 8001706:	e165      	b.n	80019d4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001708:	2201      	movs	r2, #1
 800170a:	69fb      	ldr	r3, [r7, #28]
 800170c:	fa02 f303 	lsl.w	r3, r2, r3
 8001710:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	697a      	ldr	r2, [r7, #20]
 8001718:	4013      	ands	r3, r2
 800171a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800171c:	693a      	ldr	r2, [r7, #16]
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	429a      	cmp	r2, r3
 8001722:	f040 8154 	bne.w	80019ce <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	f003 0303 	and.w	r3, r3, #3
 800172e:	2b01      	cmp	r3, #1
 8001730:	d005      	beq.n	800173e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800173a:	2b02      	cmp	r3, #2
 800173c:	d130      	bne.n	80017a0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	689b      	ldr	r3, [r3, #8]
 8001742:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001744:	69fb      	ldr	r3, [r7, #28]
 8001746:	005b      	lsls	r3, r3, #1
 8001748:	2203      	movs	r2, #3
 800174a:	fa02 f303 	lsl.w	r3, r2, r3
 800174e:	43db      	mvns	r3, r3
 8001750:	69ba      	ldr	r2, [r7, #24]
 8001752:	4013      	ands	r3, r2
 8001754:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	68da      	ldr	r2, [r3, #12]
 800175a:	69fb      	ldr	r3, [r7, #28]
 800175c:	005b      	lsls	r3, r3, #1
 800175e:	fa02 f303 	lsl.w	r3, r2, r3
 8001762:	69ba      	ldr	r2, [r7, #24]
 8001764:	4313      	orrs	r3, r2
 8001766:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	69ba      	ldr	r2, [r7, #24]
 800176c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001774:	2201      	movs	r2, #1
 8001776:	69fb      	ldr	r3, [r7, #28]
 8001778:	fa02 f303 	lsl.w	r3, r2, r3
 800177c:	43db      	mvns	r3, r3
 800177e:	69ba      	ldr	r2, [r7, #24]
 8001780:	4013      	ands	r3, r2
 8001782:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	091b      	lsrs	r3, r3, #4
 800178a:	f003 0201 	and.w	r2, r3, #1
 800178e:	69fb      	ldr	r3, [r7, #28]
 8001790:	fa02 f303 	lsl.w	r3, r2, r3
 8001794:	69ba      	ldr	r2, [r7, #24]
 8001796:	4313      	orrs	r3, r2
 8001798:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	69ba      	ldr	r2, [r7, #24]
 800179e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	f003 0303 	and.w	r3, r3, #3
 80017a8:	2b03      	cmp	r3, #3
 80017aa:	d017      	beq.n	80017dc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	68db      	ldr	r3, [r3, #12]
 80017b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80017b2:	69fb      	ldr	r3, [r7, #28]
 80017b4:	005b      	lsls	r3, r3, #1
 80017b6:	2203      	movs	r2, #3
 80017b8:	fa02 f303 	lsl.w	r3, r2, r3
 80017bc:	43db      	mvns	r3, r3
 80017be:	69ba      	ldr	r2, [r7, #24]
 80017c0:	4013      	ands	r3, r2
 80017c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	689a      	ldr	r2, [r3, #8]
 80017c8:	69fb      	ldr	r3, [r7, #28]
 80017ca:	005b      	lsls	r3, r3, #1
 80017cc:	fa02 f303 	lsl.w	r3, r2, r3
 80017d0:	69ba      	ldr	r2, [r7, #24]
 80017d2:	4313      	orrs	r3, r2
 80017d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	69ba      	ldr	r2, [r7, #24]
 80017da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	f003 0303 	and.w	r3, r3, #3
 80017e4:	2b02      	cmp	r3, #2
 80017e6:	d123      	bne.n	8001830 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80017e8:	69fb      	ldr	r3, [r7, #28]
 80017ea:	08da      	lsrs	r2, r3, #3
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	3208      	adds	r2, #8
 80017f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80017f6:	69fb      	ldr	r3, [r7, #28]
 80017f8:	f003 0307 	and.w	r3, r3, #7
 80017fc:	009b      	lsls	r3, r3, #2
 80017fe:	220f      	movs	r2, #15
 8001800:	fa02 f303 	lsl.w	r3, r2, r3
 8001804:	43db      	mvns	r3, r3
 8001806:	69ba      	ldr	r2, [r7, #24]
 8001808:	4013      	ands	r3, r2
 800180a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	691a      	ldr	r2, [r3, #16]
 8001810:	69fb      	ldr	r3, [r7, #28]
 8001812:	f003 0307 	and.w	r3, r3, #7
 8001816:	009b      	lsls	r3, r3, #2
 8001818:	fa02 f303 	lsl.w	r3, r2, r3
 800181c:	69ba      	ldr	r2, [r7, #24]
 800181e:	4313      	orrs	r3, r2
 8001820:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001822:	69fb      	ldr	r3, [r7, #28]
 8001824:	08da      	lsrs	r2, r3, #3
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	3208      	adds	r2, #8
 800182a:	69b9      	ldr	r1, [r7, #24]
 800182c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001836:	69fb      	ldr	r3, [r7, #28]
 8001838:	005b      	lsls	r3, r3, #1
 800183a:	2203      	movs	r2, #3
 800183c:	fa02 f303 	lsl.w	r3, r2, r3
 8001840:	43db      	mvns	r3, r3
 8001842:	69ba      	ldr	r2, [r7, #24]
 8001844:	4013      	ands	r3, r2
 8001846:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	f003 0203 	and.w	r2, r3, #3
 8001850:	69fb      	ldr	r3, [r7, #28]
 8001852:	005b      	lsls	r3, r3, #1
 8001854:	fa02 f303 	lsl.w	r3, r2, r3
 8001858:	69ba      	ldr	r2, [r7, #24]
 800185a:	4313      	orrs	r3, r2
 800185c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	69ba      	ldr	r2, [r7, #24]
 8001862:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800186c:	2b00      	cmp	r3, #0
 800186e:	f000 80ae 	beq.w	80019ce <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001872:	2300      	movs	r3, #0
 8001874:	60fb      	str	r3, [r7, #12]
 8001876:	4b5d      	ldr	r3, [pc, #372]	; (80019ec <HAL_GPIO_Init+0x300>)
 8001878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800187a:	4a5c      	ldr	r2, [pc, #368]	; (80019ec <HAL_GPIO_Init+0x300>)
 800187c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001880:	6453      	str	r3, [r2, #68]	; 0x44
 8001882:	4b5a      	ldr	r3, [pc, #360]	; (80019ec <HAL_GPIO_Init+0x300>)
 8001884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001886:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800188a:	60fb      	str	r3, [r7, #12]
 800188c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800188e:	4a58      	ldr	r2, [pc, #352]	; (80019f0 <HAL_GPIO_Init+0x304>)
 8001890:	69fb      	ldr	r3, [r7, #28]
 8001892:	089b      	lsrs	r3, r3, #2
 8001894:	3302      	adds	r3, #2
 8001896:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800189a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800189c:	69fb      	ldr	r3, [r7, #28]
 800189e:	f003 0303 	and.w	r3, r3, #3
 80018a2:	009b      	lsls	r3, r3, #2
 80018a4:	220f      	movs	r2, #15
 80018a6:	fa02 f303 	lsl.w	r3, r2, r3
 80018aa:	43db      	mvns	r3, r3
 80018ac:	69ba      	ldr	r2, [r7, #24]
 80018ae:	4013      	ands	r3, r2
 80018b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	4a4f      	ldr	r2, [pc, #316]	; (80019f4 <HAL_GPIO_Init+0x308>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d025      	beq.n	8001906 <HAL_GPIO_Init+0x21a>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	4a4e      	ldr	r2, [pc, #312]	; (80019f8 <HAL_GPIO_Init+0x30c>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d01f      	beq.n	8001902 <HAL_GPIO_Init+0x216>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	4a4d      	ldr	r2, [pc, #308]	; (80019fc <HAL_GPIO_Init+0x310>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d019      	beq.n	80018fe <HAL_GPIO_Init+0x212>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	4a4c      	ldr	r2, [pc, #304]	; (8001a00 <HAL_GPIO_Init+0x314>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d013      	beq.n	80018fa <HAL_GPIO_Init+0x20e>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	4a4b      	ldr	r2, [pc, #300]	; (8001a04 <HAL_GPIO_Init+0x318>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d00d      	beq.n	80018f6 <HAL_GPIO_Init+0x20a>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	4a4a      	ldr	r2, [pc, #296]	; (8001a08 <HAL_GPIO_Init+0x31c>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d007      	beq.n	80018f2 <HAL_GPIO_Init+0x206>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	4a49      	ldr	r2, [pc, #292]	; (8001a0c <HAL_GPIO_Init+0x320>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d101      	bne.n	80018ee <HAL_GPIO_Init+0x202>
 80018ea:	2306      	movs	r3, #6
 80018ec:	e00c      	b.n	8001908 <HAL_GPIO_Init+0x21c>
 80018ee:	2307      	movs	r3, #7
 80018f0:	e00a      	b.n	8001908 <HAL_GPIO_Init+0x21c>
 80018f2:	2305      	movs	r3, #5
 80018f4:	e008      	b.n	8001908 <HAL_GPIO_Init+0x21c>
 80018f6:	2304      	movs	r3, #4
 80018f8:	e006      	b.n	8001908 <HAL_GPIO_Init+0x21c>
 80018fa:	2303      	movs	r3, #3
 80018fc:	e004      	b.n	8001908 <HAL_GPIO_Init+0x21c>
 80018fe:	2302      	movs	r3, #2
 8001900:	e002      	b.n	8001908 <HAL_GPIO_Init+0x21c>
 8001902:	2301      	movs	r3, #1
 8001904:	e000      	b.n	8001908 <HAL_GPIO_Init+0x21c>
 8001906:	2300      	movs	r3, #0
 8001908:	69fa      	ldr	r2, [r7, #28]
 800190a:	f002 0203 	and.w	r2, r2, #3
 800190e:	0092      	lsls	r2, r2, #2
 8001910:	4093      	lsls	r3, r2
 8001912:	69ba      	ldr	r2, [r7, #24]
 8001914:	4313      	orrs	r3, r2
 8001916:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001918:	4935      	ldr	r1, [pc, #212]	; (80019f0 <HAL_GPIO_Init+0x304>)
 800191a:	69fb      	ldr	r3, [r7, #28]
 800191c:	089b      	lsrs	r3, r3, #2
 800191e:	3302      	adds	r3, #2
 8001920:	69ba      	ldr	r2, [r7, #24]
 8001922:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001926:	4b3a      	ldr	r3, [pc, #232]	; (8001a10 <HAL_GPIO_Init+0x324>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800192c:	693b      	ldr	r3, [r7, #16]
 800192e:	43db      	mvns	r3, r3
 8001930:	69ba      	ldr	r2, [r7, #24]
 8001932:	4013      	ands	r3, r2
 8001934:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800193e:	2b00      	cmp	r3, #0
 8001940:	d003      	beq.n	800194a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001942:	69ba      	ldr	r2, [r7, #24]
 8001944:	693b      	ldr	r3, [r7, #16]
 8001946:	4313      	orrs	r3, r2
 8001948:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800194a:	4a31      	ldr	r2, [pc, #196]	; (8001a10 <HAL_GPIO_Init+0x324>)
 800194c:	69bb      	ldr	r3, [r7, #24]
 800194e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001950:	4b2f      	ldr	r3, [pc, #188]	; (8001a10 <HAL_GPIO_Init+0x324>)
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	43db      	mvns	r3, r3
 800195a:	69ba      	ldr	r2, [r7, #24]
 800195c:	4013      	ands	r3, r2
 800195e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001968:	2b00      	cmp	r3, #0
 800196a:	d003      	beq.n	8001974 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800196c:	69ba      	ldr	r2, [r7, #24]
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	4313      	orrs	r3, r2
 8001972:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001974:	4a26      	ldr	r2, [pc, #152]	; (8001a10 <HAL_GPIO_Init+0x324>)
 8001976:	69bb      	ldr	r3, [r7, #24]
 8001978:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800197a:	4b25      	ldr	r3, [pc, #148]	; (8001a10 <HAL_GPIO_Init+0x324>)
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	43db      	mvns	r3, r3
 8001984:	69ba      	ldr	r2, [r7, #24]
 8001986:	4013      	ands	r3, r2
 8001988:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001992:	2b00      	cmp	r3, #0
 8001994:	d003      	beq.n	800199e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001996:	69ba      	ldr	r2, [r7, #24]
 8001998:	693b      	ldr	r3, [r7, #16]
 800199a:	4313      	orrs	r3, r2
 800199c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800199e:	4a1c      	ldr	r2, [pc, #112]	; (8001a10 <HAL_GPIO_Init+0x324>)
 80019a0:	69bb      	ldr	r3, [r7, #24]
 80019a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80019a4:	4b1a      	ldr	r3, [pc, #104]	; (8001a10 <HAL_GPIO_Init+0x324>)
 80019a6:	68db      	ldr	r3, [r3, #12]
 80019a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	43db      	mvns	r3, r3
 80019ae:	69ba      	ldr	r2, [r7, #24]
 80019b0:	4013      	ands	r3, r2
 80019b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d003      	beq.n	80019c8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80019c0:	69ba      	ldr	r2, [r7, #24]
 80019c2:	693b      	ldr	r3, [r7, #16]
 80019c4:	4313      	orrs	r3, r2
 80019c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80019c8:	4a11      	ldr	r2, [pc, #68]	; (8001a10 <HAL_GPIO_Init+0x324>)
 80019ca:	69bb      	ldr	r3, [r7, #24]
 80019cc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019ce:	69fb      	ldr	r3, [r7, #28]
 80019d0:	3301      	adds	r3, #1
 80019d2:	61fb      	str	r3, [r7, #28]
 80019d4:	69fb      	ldr	r3, [r7, #28]
 80019d6:	2b0f      	cmp	r3, #15
 80019d8:	f67f ae96 	bls.w	8001708 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80019dc:	bf00      	nop
 80019de:	bf00      	nop
 80019e0:	3724      	adds	r7, #36	; 0x24
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr
 80019ea:	bf00      	nop
 80019ec:	40023800 	.word	0x40023800
 80019f0:	40013800 	.word	0x40013800
 80019f4:	40020000 	.word	0x40020000
 80019f8:	40020400 	.word	0x40020400
 80019fc:	40020800 	.word	0x40020800
 8001a00:	40020c00 	.word	0x40020c00
 8001a04:	40021000 	.word	0x40021000
 8001a08:	40021400 	.word	0x40021400
 8001a0c:	40021800 	.word	0x40021800
 8001a10:	40013c00 	.word	0x40013c00

08001a14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b083      	sub	sp, #12
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
 8001a1c:	460b      	mov	r3, r1
 8001a1e:	807b      	strh	r3, [r7, #2]
 8001a20:	4613      	mov	r3, r2
 8001a22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a24:	787b      	ldrb	r3, [r7, #1]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d003      	beq.n	8001a32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a2a:	887a      	ldrh	r2, [r7, #2]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a30:	e003      	b.n	8001a3a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a32:	887b      	ldrh	r3, [r7, #2]
 8001a34:	041a      	lsls	r2, r3, #16
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	619a      	str	r2, [r3, #24]
}
 8001a3a:	bf00      	nop
 8001a3c:	370c      	adds	r7, #12
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr
	...

08001a48 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b084      	sub	sp, #16
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d101      	bne.n	8001a5a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
 8001a58:	e12b      	b.n	8001cb2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a60:	b2db      	uxtb	r3, r3
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d106      	bne.n	8001a74 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2200      	movs	r2, #0
 8001a6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001a6e:	6878      	ldr	r0, [r7, #4]
 8001a70:	f7ff f970 	bl	8000d54 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2224      	movs	r2, #36	; 0x24
 8001a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f022 0201 	bic.w	r2, r2, #1
 8001a8a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	681a      	ldr	r2, [r3, #0]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001a9a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	681a      	ldr	r2, [r3, #0]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001aaa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001aac:	f000 fa02 	bl	8001eb4 <HAL_RCC_GetPCLK1Freq>
 8001ab0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	4a81      	ldr	r2, [pc, #516]	; (8001cbc <HAL_I2C_Init+0x274>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d807      	bhi.n	8001acc <HAL_I2C_Init+0x84>
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	4a80      	ldr	r2, [pc, #512]	; (8001cc0 <HAL_I2C_Init+0x278>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	bf94      	ite	ls
 8001ac4:	2301      	movls	r3, #1
 8001ac6:	2300      	movhi	r3, #0
 8001ac8:	b2db      	uxtb	r3, r3
 8001aca:	e006      	b.n	8001ada <HAL_I2C_Init+0x92>
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	4a7d      	ldr	r2, [pc, #500]	; (8001cc4 <HAL_I2C_Init+0x27c>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	bf94      	ite	ls
 8001ad4:	2301      	movls	r3, #1
 8001ad6:	2300      	movhi	r3, #0
 8001ad8:	b2db      	uxtb	r3, r3
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d001      	beq.n	8001ae2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	e0e7      	b.n	8001cb2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	4a78      	ldr	r2, [pc, #480]	; (8001cc8 <HAL_I2C_Init+0x280>)
 8001ae6:	fba2 2303 	umull	r2, r3, r2, r3
 8001aea:	0c9b      	lsrs	r3, r3, #18
 8001aec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	68ba      	ldr	r2, [r7, #8]
 8001afe:	430a      	orrs	r2, r1
 8001b00:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	6a1b      	ldr	r3, [r3, #32]
 8001b08:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	4a6a      	ldr	r2, [pc, #424]	; (8001cbc <HAL_I2C_Init+0x274>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d802      	bhi.n	8001b1c <HAL_I2C_Init+0xd4>
 8001b16:	68bb      	ldr	r3, [r7, #8]
 8001b18:	3301      	adds	r3, #1
 8001b1a:	e009      	b.n	8001b30 <HAL_I2C_Init+0xe8>
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001b22:	fb02 f303 	mul.w	r3, r2, r3
 8001b26:	4a69      	ldr	r2, [pc, #420]	; (8001ccc <HAL_I2C_Init+0x284>)
 8001b28:	fba2 2303 	umull	r2, r3, r2, r3
 8001b2c:	099b      	lsrs	r3, r3, #6
 8001b2e:	3301      	adds	r3, #1
 8001b30:	687a      	ldr	r2, [r7, #4]
 8001b32:	6812      	ldr	r2, [r2, #0]
 8001b34:	430b      	orrs	r3, r1
 8001b36:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	69db      	ldr	r3, [r3, #28]
 8001b3e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001b42:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	495c      	ldr	r1, [pc, #368]	; (8001cbc <HAL_I2C_Init+0x274>)
 8001b4c:	428b      	cmp	r3, r1
 8001b4e:	d819      	bhi.n	8001b84 <HAL_I2C_Init+0x13c>
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	1e59      	subs	r1, r3, #1
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	005b      	lsls	r3, r3, #1
 8001b5a:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b5e:	1c59      	adds	r1, r3, #1
 8001b60:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001b64:	400b      	ands	r3, r1
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d00a      	beq.n	8001b80 <HAL_I2C_Init+0x138>
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	1e59      	subs	r1, r3, #1
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	005b      	lsls	r3, r3, #1
 8001b74:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b78:	3301      	adds	r3, #1
 8001b7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b7e:	e051      	b.n	8001c24 <HAL_I2C_Init+0x1dc>
 8001b80:	2304      	movs	r3, #4
 8001b82:	e04f      	b.n	8001c24 <HAL_I2C_Init+0x1dc>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d111      	bne.n	8001bb0 <HAL_I2C_Init+0x168>
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	1e58      	subs	r0, r3, #1
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6859      	ldr	r1, [r3, #4]
 8001b94:	460b      	mov	r3, r1
 8001b96:	005b      	lsls	r3, r3, #1
 8001b98:	440b      	add	r3, r1
 8001b9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b9e:	3301      	adds	r3, #1
 8001ba0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	bf0c      	ite	eq
 8001ba8:	2301      	moveq	r3, #1
 8001baa:	2300      	movne	r3, #0
 8001bac:	b2db      	uxtb	r3, r3
 8001bae:	e012      	b.n	8001bd6 <HAL_I2C_Init+0x18e>
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	1e58      	subs	r0, r3, #1
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6859      	ldr	r1, [r3, #4]
 8001bb8:	460b      	mov	r3, r1
 8001bba:	009b      	lsls	r3, r3, #2
 8001bbc:	440b      	add	r3, r1
 8001bbe:	0099      	lsls	r1, r3, #2
 8001bc0:	440b      	add	r3, r1
 8001bc2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bc6:	3301      	adds	r3, #1
 8001bc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	bf0c      	ite	eq
 8001bd0:	2301      	moveq	r3, #1
 8001bd2:	2300      	movne	r3, #0
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d001      	beq.n	8001bde <HAL_I2C_Init+0x196>
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e022      	b.n	8001c24 <HAL_I2C_Init+0x1dc>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d10e      	bne.n	8001c04 <HAL_I2C_Init+0x1bc>
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	1e58      	subs	r0, r3, #1
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6859      	ldr	r1, [r3, #4]
 8001bee:	460b      	mov	r3, r1
 8001bf0:	005b      	lsls	r3, r3, #1
 8001bf2:	440b      	add	r3, r1
 8001bf4:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bf8:	3301      	adds	r3, #1
 8001bfa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bfe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c02:	e00f      	b.n	8001c24 <HAL_I2C_Init+0x1dc>
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	1e58      	subs	r0, r3, #1
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6859      	ldr	r1, [r3, #4]
 8001c0c:	460b      	mov	r3, r1
 8001c0e:	009b      	lsls	r3, r3, #2
 8001c10:	440b      	add	r3, r1
 8001c12:	0099      	lsls	r1, r3, #2
 8001c14:	440b      	add	r3, r1
 8001c16:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c1a:	3301      	adds	r3, #1
 8001c1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c20:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001c24:	6879      	ldr	r1, [r7, #4]
 8001c26:	6809      	ldr	r1, [r1, #0]
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	69da      	ldr	r2, [r3, #28]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6a1b      	ldr	r3, [r3, #32]
 8001c3e:	431a      	orrs	r2, r3
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	430a      	orrs	r2, r1
 8001c46:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001c52:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001c56:	687a      	ldr	r2, [r7, #4]
 8001c58:	6911      	ldr	r1, [r2, #16]
 8001c5a:	687a      	ldr	r2, [r7, #4]
 8001c5c:	68d2      	ldr	r2, [r2, #12]
 8001c5e:	4311      	orrs	r1, r2
 8001c60:	687a      	ldr	r2, [r7, #4]
 8001c62:	6812      	ldr	r2, [r2, #0]
 8001c64:	430b      	orrs	r3, r1
 8001c66:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	68db      	ldr	r3, [r3, #12]
 8001c6e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	695a      	ldr	r2, [r3, #20]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	699b      	ldr	r3, [r3, #24]
 8001c7a:	431a      	orrs	r2, r3
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	430a      	orrs	r2, r1
 8001c82:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	681a      	ldr	r2, [r3, #0]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f042 0201 	orr.w	r2, r2, #1
 8001c92:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2200      	movs	r2, #0
 8001c98:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2220      	movs	r2, #32
 8001c9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2200      	movs	r2, #0
 8001cac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001cb0:	2300      	movs	r3, #0
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3710      	adds	r7, #16
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	000186a0 	.word	0x000186a0
 8001cc0:	001e847f 	.word	0x001e847f
 8001cc4:	003d08ff 	.word	0x003d08ff
 8001cc8:	431bde83 	.word	0x431bde83
 8001ccc:	10624dd3 	.word	0x10624dd3

08001cd0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b084      	sub	sp, #16
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
 8001cd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d101      	bne.n	8001ce4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	e0cc      	b.n	8001e7e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ce4:	4b68      	ldr	r3, [pc, #416]	; (8001e88 <HAL_RCC_ClockConfig+0x1b8>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f003 030f 	and.w	r3, r3, #15
 8001cec:	683a      	ldr	r2, [r7, #0]
 8001cee:	429a      	cmp	r2, r3
 8001cf0:	d90c      	bls.n	8001d0c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cf2:	4b65      	ldr	r3, [pc, #404]	; (8001e88 <HAL_RCC_ClockConfig+0x1b8>)
 8001cf4:	683a      	ldr	r2, [r7, #0]
 8001cf6:	b2d2      	uxtb	r2, r2
 8001cf8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cfa:	4b63      	ldr	r3, [pc, #396]	; (8001e88 <HAL_RCC_ClockConfig+0x1b8>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f003 030f 	and.w	r3, r3, #15
 8001d02:	683a      	ldr	r2, [r7, #0]
 8001d04:	429a      	cmp	r2, r3
 8001d06:	d001      	beq.n	8001d0c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	e0b8      	b.n	8001e7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f003 0302 	and.w	r3, r3, #2
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d020      	beq.n	8001d5a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f003 0304 	and.w	r3, r3, #4
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d005      	beq.n	8001d30 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d24:	4b59      	ldr	r3, [pc, #356]	; (8001e8c <HAL_RCC_ClockConfig+0x1bc>)
 8001d26:	689b      	ldr	r3, [r3, #8]
 8001d28:	4a58      	ldr	r2, [pc, #352]	; (8001e8c <HAL_RCC_ClockConfig+0x1bc>)
 8001d2a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001d2e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f003 0308 	and.w	r3, r3, #8
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d005      	beq.n	8001d48 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d3c:	4b53      	ldr	r3, [pc, #332]	; (8001e8c <HAL_RCC_ClockConfig+0x1bc>)
 8001d3e:	689b      	ldr	r3, [r3, #8]
 8001d40:	4a52      	ldr	r2, [pc, #328]	; (8001e8c <HAL_RCC_ClockConfig+0x1bc>)
 8001d42:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001d46:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d48:	4b50      	ldr	r3, [pc, #320]	; (8001e8c <HAL_RCC_ClockConfig+0x1bc>)
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	494d      	ldr	r1, [pc, #308]	; (8001e8c <HAL_RCC_ClockConfig+0x1bc>)
 8001d56:	4313      	orrs	r3, r2
 8001d58:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f003 0301 	and.w	r3, r3, #1
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d044      	beq.n	8001df0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	2b01      	cmp	r3, #1
 8001d6c:	d107      	bne.n	8001d7e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d6e:	4b47      	ldr	r3, [pc, #284]	; (8001e8c <HAL_RCC_ClockConfig+0x1bc>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d119      	bne.n	8001dae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e07f      	b.n	8001e7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	2b02      	cmp	r3, #2
 8001d84:	d003      	beq.n	8001d8e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d8a:	2b03      	cmp	r3, #3
 8001d8c:	d107      	bne.n	8001d9e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d8e:	4b3f      	ldr	r3, [pc, #252]	; (8001e8c <HAL_RCC_ClockConfig+0x1bc>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d109      	bne.n	8001dae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e06f      	b.n	8001e7e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d9e:	4b3b      	ldr	r3, [pc, #236]	; (8001e8c <HAL_RCC_ClockConfig+0x1bc>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f003 0302 	and.w	r3, r3, #2
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d101      	bne.n	8001dae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	e067      	b.n	8001e7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001dae:	4b37      	ldr	r3, [pc, #220]	; (8001e8c <HAL_RCC_ClockConfig+0x1bc>)
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	f023 0203 	bic.w	r2, r3, #3
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	4934      	ldr	r1, [pc, #208]	; (8001e8c <HAL_RCC_ClockConfig+0x1bc>)
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001dc0:	f7ff faa4 	bl	800130c <HAL_GetTick>
 8001dc4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dc6:	e00a      	b.n	8001dde <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dc8:	f7ff faa0 	bl	800130c <HAL_GetTick>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d901      	bls.n	8001dde <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001dda:	2303      	movs	r3, #3
 8001ddc:	e04f      	b.n	8001e7e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dde:	4b2b      	ldr	r3, [pc, #172]	; (8001e8c <HAL_RCC_ClockConfig+0x1bc>)
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	f003 020c 	and.w	r2, r3, #12
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	009b      	lsls	r3, r3, #2
 8001dec:	429a      	cmp	r2, r3
 8001dee:	d1eb      	bne.n	8001dc8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001df0:	4b25      	ldr	r3, [pc, #148]	; (8001e88 <HAL_RCC_ClockConfig+0x1b8>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f003 030f 	and.w	r3, r3, #15
 8001df8:	683a      	ldr	r2, [r7, #0]
 8001dfa:	429a      	cmp	r2, r3
 8001dfc:	d20c      	bcs.n	8001e18 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dfe:	4b22      	ldr	r3, [pc, #136]	; (8001e88 <HAL_RCC_ClockConfig+0x1b8>)
 8001e00:	683a      	ldr	r2, [r7, #0]
 8001e02:	b2d2      	uxtb	r2, r2
 8001e04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e06:	4b20      	ldr	r3, [pc, #128]	; (8001e88 <HAL_RCC_ClockConfig+0x1b8>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f003 030f 	and.w	r3, r3, #15
 8001e0e:	683a      	ldr	r2, [r7, #0]
 8001e10:	429a      	cmp	r2, r3
 8001e12:	d001      	beq.n	8001e18 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001e14:	2301      	movs	r3, #1
 8001e16:	e032      	b.n	8001e7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f003 0304 	and.w	r3, r3, #4
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d008      	beq.n	8001e36 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e24:	4b19      	ldr	r3, [pc, #100]	; (8001e8c <HAL_RCC_ClockConfig+0x1bc>)
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	68db      	ldr	r3, [r3, #12]
 8001e30:	4916      	ldr	r1, [pc, #88]	; (8001e8c <HAL_RCC_ClockConfig+0x1bc>)
 8001e32:	4313      	orrs	r3, r2
 8001e34:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f003 0308 	and.w	r3, r3, #8
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d009      	beq.n	8001e56 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e42:	4b12      	ldr	r3, [pc, #72]	; (8001e8c <HAL_RCC_ClockConfig+0x1bc>)
 8001e44:	689b      	ldr	r3, [r3, #8]
 8001e46:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	691b      	ldr	r3, [r3, #16]
 8001e4e:	00db      	lsls	r3, r3, #3
 8001e50:	490e      	ldr	r1, [pc, #56]	; (8001e8c <HAL_RCC_ClockConfig+0x1bc>)
 8001e52:	4313      	orrs	r3, r2
 8001e54:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001e56:	f000 fb7f 	bl	8002558 <HAL_RCC_GetSysClockFreq>
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	4b0b      	ldr	r3, [pc, #44]	; (8001e8c <HAL_RCC_ClockConfig+0x1bc>)
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	091b      	lsrs	r3, r3, #4
 8001e62:	f003 030f 	and.w	r3, r3, #15
 8001e66:	490a      	ldr	r1, [pc, #40]	; (8001e90 <HAL_RCC_ClockConfig+0x1c0>)
 8001e68:	5ccb      	ldrb	r3, [r1, r3]
 8001e6a:	fa22 f303 	lsr.w	r3, r2, r3
 8001e6e:	4a09      	ldr	r2, [pc, #36]	; (8001e94 <HAL_RCC_ClockConfig+0x1c4>)
 8001e70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001e72:	4b09      	ldr	r3, [pc, #36]	; (8001e98 <HAL_RCC_ClockConfig+0x1c8>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4618      	mov	r0, r3
 8001e78:	f7ff fa04 	bl	8001284 <HAL_InitTick>

  return HAL_OK;
 8001e7c:	2300      	movs	r3, #0
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3710      	adds	r7, #16
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	40023c00 	.word	0x40023c00
 8001e8c:	40023800 	.word	0x40023800
 8001e90:	08004158 	.word	0x08004158
 8001e94:	20000070 	.word	0x20000070
 8001e98:	20000074 	.word	0x20000074

08001e9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ea0:	4b03      	ldr	r3, [pc, #12]	; (8001eb0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr
 8001eae:	bf00      	nop
 8001eb0:	20000070 	.word	0x20000070

08001eb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001eb8:	f7ff fff0 	bl	8001e9c <HAL_RCC_GetHCLKFreq>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	4b05      	ldr	r3, [pc, #20]	; (8001ed4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	0a9b      	lsrs	r3, r3, #10
 8001ec4:	f003 0307 	and.w	r3, r3, #7
 8001ec8:	4903      	ldr	r1, [pc, #12]	; (8001ed8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001eca:	5ccb      	ldrb	r3, [r1, r3]
 8001ecc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	bd80      	pop	{r7, pc}
 8001ed4:	40023800 	.word	0x40023800
 8001ed8:	08004168 	.word	0x08004168

08001edc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001ee0:	f7ff ffdc 	bl	8001e9c <HAL_RCC_GetHCLKFreq>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	4b05      	ldr	r3, [pc, #20]	; (8001efc <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ee8:	689b      	ldr	r3, [r3, #8]
 8001eea:	0b5b      	lsrs	r3, r3, #13
 8001eec:	f003 0307 	and.w	r3, r3, #7
 8001ef0:	4903      	ldr	r1, [pc, #12]	; (8001f00 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ef2:	5ccb      	ldrb	r3, [r1, r3]
 8001ef4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	40023800 	.word	0x40023800
 8001f00:	08004168 	.word	0x08004168

08001f04 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b08c      	sub	sp, #48	; 0x30
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8001f10:	2300      	movs	r3, #0
 8001f12:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8001f14:	2300      	movs	r3, #0
 8001f16:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8001f20:	2300      	movs	r3, #0
 8001f22:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8001f24:	2300      	movs	r3, #0
 8001f26:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f003 0301 	and.w	r3, r3, #1
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d010      	beq.n	8001f5e <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8001f3c:	4b6f      	ldr	r3, [pc, #444]	; (80020fc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001f3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f42:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f4a:	496c      	ldr	r1, [pc, #432]	; (80020fc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d101      	bne.n	8001f5e <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f003 0302 	and.w	r3, r3, #2
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d010      	beq.n	8001f8c <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8001f6a:	4b64      	ldr	r3, [pc, #400]	; (80020fc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001f6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f70:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f78:	4960      	ldr	r1, [pc, #384]	; (80020fc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d101      	bne.n	8001f8c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f003 0304 	and.w	r3, r3, #4
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d017      	beq.n	8001fc8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001f98:	4b58      	ldr	r3, [pc, #352]	; (80020fc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001f9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f9e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa6:	4955      	ldr	r1, [pc, #340]	; (80020fc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001fb6:	d101      	bne.n	8001fbc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d101      	bne.n	8001fc8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f003 0308 	and.w	r3, r3, #8
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d017      	beq.n	8002004 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001fd4:	4b49      	ldr	r3, [pc, #292]	; (80020fc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001fd6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001fda:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fe2:	4946      	ldr	r1, [pc, #280]	; (80020fc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ff2:	d101      	bne.n	8001ff8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d101      	bne.n	8002004 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8002000:	2301      	movs	r3, #1
 8002002:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 0320 	and.w	r3, r3, #32
 800200c:	2b00      	cmp	r3, #0
 800200e:	f000 808a 	beq.w	8002126 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002012:	2300      	movs	r3, #0
 8002014:	60bb      	str	r3, [r7, #8]
 8002016:	4b39      	ldr	r3, [pc, #228]	; (80020fc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201a:	4a38      	ldr	r2, [pc, #224]	; (80020fc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800201c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002020:	6413      	str	r3, [r2, #64]	; 0x40
 8002022:	4b36      	ldr	r3, [pc, #216]	; (80020fc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002026:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800202a:	60bb      	str	r3, [r7, #8]
 800202c:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800202e:	4b34      	ldr	r3, [pc, #208]	; (8002100 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a33      	ldr	r2, [pc, #204]	; (8002100 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002034:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002038:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800203a:	f7ff f967 	bl	800130c <HAL_GetTick>
 800203e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002040:	e008      	b.n	8002054 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002042:	f7ff f963 	bl	800130c <HAL_GetTick>
 8002046:	4602      	mov	r2, r0
 8002048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800204a:	1ad3      	subs	r3, r2, r3
 800204c:	2b02      	cmp	r3, #2
 800204e:	d901      	bls.n	8002054 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8002050:	2303      	movs	r3, #3
 8002052:	e278      	b.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002054:	4b2a      	ldr	r3, [pc, #168]	; (8002100 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800205c:	2b00      	cmp	r3, #0
 800205e:	d0f0      	beq.n	8002042 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002060:	4b26      	ldr	r3, [pc, #152]	; (80020fc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002062:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002064:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002068:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800206a:	6a3b      	ldr	r3, [r7, #32]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d02f      	beq.n	80020d0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002074:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002078:	6a3a      	ldr	r2, [r7, #32]
 800207a:	429a      	cmp	r2, r3
 800207c:	d028      	beq.n	80020d0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800207e:	4b1f      	ldr	r3, [pc, #124]	; (80020fc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002080:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002082:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002086:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002088:	4b1e      	ldr	r3, [pc, #120]	; (8002104 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800208a:	2201      	movs	r2, #1
 800208c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800208e:	4b1d      	ldr	r3, [pc, #116]	; (8002104 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002090:	2200      	movs	r2, #0
 8002092:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002094:	4a19      	ldr	r2, [pc, #100]	; (80020fc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002096:	6a3b      	ldr	r3, [r7, #32]
 8002098:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800209a:	4b18      	ldr	r3, [pc, #96]	; (80020fc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800209c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800209e:	f003 0301 	and.w	r3, r3, #1
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	d114      	bne.n	80020d0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80020a6:	f7ff f931 	bl	800130c <HAL_GetTick>
 80020aa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020ac:	e00a      	b.n	80020c4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020ae:	f7ff f92d 	bl	800130c <HAL_GetTick>
 80020b2:	4602      	mov	r2, r0
 80020b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b6:	1ad3      	subs	r3, r2, r3
 80020b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80020bc:	4293      	cmp	r3, r2
 80020be:	d901      	bls.n	80020c4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 80020c0:	2303      	movs	r3, #3
 80020c2:	e240      	b.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020c4:	4b0d      	ldr	r3, [pc, #52]	; (80020fc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80020c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020c8:	f003 0302 	and.w	r3, r3, #2
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d0ee      	beq.n	80020ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020d8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80020dc:	d114      	bne.n	8002108 <HAL_RCCEx_PeriphCLKConfig+0x204>
 80020de:	4b07      	ldr	r3, [pc, #28]	; (80020fc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80020e0:	689b      	ldr	r3, [r3, #8]
 80020e2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ea:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80020ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020f2:	4902      	ldr	r1, [pc, #8]	; (80020fc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80020f4:	4313      	orrs	r3, r2
 80020f6:	608b      	str	r3, [r1, #8]
 80020f8:	e00c      	b.n	8002114 <HAL_RCCEx_PeriphCLKConfig+0x210>
 80020fa:	bf00      	nop
 80020fc:	40023800 	.word	0x40023800
 8002100:	40007000 	.word	0x40007000
 8002104:	42470e40 	.word	0x42470e40
 8002108:	4b4a      	ldr	r3, [pc, #296]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	4a49      	ldr	r2, [pc, #292]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800210e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002112:	6093      	str	r3, [r2, #8]
 8002114:	4b47      	ldr	r3, [pc, #284]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002116:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800211c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002120:	4944      	ldr	r1, [pc, #272]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002122:	4313      	orrs	r3, r2
 8002124:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 0310 	and.w	r3, r3, #16
 800212e:	2b00      	cmp	r3, #0
 8002130:	d004      	beq.n	800213c <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8002138:	4b3f      	ldr	r3, [pc, #252]	; (8002238 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 800213a:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002144:	2b00      	cmp	r3, #0
 8002146:	d00a      	beq.n	800215e <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8002148:	4b3a      	ldr	r3, [pc, #232]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800214a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800214e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002156:	4937      	ldr	r1, [pc, #220]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002158:	4313      	orrs	r3, r2
 800215a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002166:	2b00      	cmp	r3, #0
 8002168:	d00a      	beq.n	8002180 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800216a:	4b32      	ldr	r3, [pc, #200]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800216c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002170:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002178:	492e      	ldr	r1, [pc, #184]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800217a:	4313      	orrs	r3, r2
 800217c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002188:	2b00      	cmp	r3, #0
 800218a:	d011      	beq.n	80021b0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800218c:	4b29      	ldr	r3, [pc, #164]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800218e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002192:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800219a:	4926      	ldr	r1, [pc, #152]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800219c:	4313      	orrs	r3, r2
 800219e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80021aa:	d101      	bne.n	80021b0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 80021ac:	2301      	movs	r3, #1
 80021ae:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d00a      	beq.n	80021d2 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80021bc:	4b1d      	ldr	r3, [pc, #116]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80021be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021c2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ca:	491a      	ldr	r1, [pc, #104]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80021cc:	4313      	orrs	r3, r2
 80021ce:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d011      	beq.n	8002202 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 80021de:	4b15      	ldr	r3, [pc, #84]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80021e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021e4:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021ec:	4911      	ldr	r1, [pc, #68]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80021ee:	4313      	orrs	r3, r2
 80021f0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80021fc:	d101      	bne.n	8002202 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 80021fe:	2301      	movs	r3, #1
 8002200:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002204:	2b01      	cmp	r3, #1
 8002206:	d005      	beq.n	8002214 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002210:	f040 80ff 	bne.w	8002412 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002214:	4b09      	ldr	r3, [pc, #36]	; (800223c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002216:	2200      	movs	r2, #0
 8002218:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800221a:	f7ff f877 	bl	800130c <HAL_GetTick>
 800221e:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002220:	e00e      	b.n	8002240 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002222:	f7ff f873 	bl	800130c <HAL_GetTick>
 8002226:	4602      	mov	r2, r0
 8002228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800222a:	1ad3      	subs	r3, r2, r3
 800222c:	2b02      	cmp	r3, #2
 800222e:	d907      	bls.n	8002240 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002230:	2303      	movs	r3, #3
 8002232:	e188      	b.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002234:	40023800 	.word	0x40023800
 8002238:	424711e0 	.word	0x424711e0
 800223c:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002240:	4b7e      	ldr	r3, [pc, #504]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002248:	2b00      	cmp	r3, #0
 800224a:	d1ea      	bne.n	8002222 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f003 0301 	and.w	r3, r3, #1
 8002254:	2b00      	cmp	r3, #0
 8002256:	d003      	beq.n	8002260 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800225c:	2b00      	cmp	r3, #0
 800225e:	d009      	beq.n	8002274 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002268:	2b00      	cmp	r3, #0
 800226a:	d028      	beq.n	80022be <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002270:	2b00      	cmp	r3, #0
 8002272:	d124      	bne.n	80022be <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002274:	4b71      	ldr	r3, [pc, #452]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002276:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800227a:	0c1b      	lsrs	r3, r3, #16
 800227c:	f003 0303 	and.w	r3, r3, #3
 8002280:	3301      	adds	r3, #1
 8002282:	005b      	lsls	r3, r3, #1
 8002284:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002286:	4b6d      	ldr	r3, [pc, #436]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002288:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800228c:	0e1b      	lsrs	r3, r3, #24
 800228e:	f003 030f 	and.w	r3, r3, #15
 8002292:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	685a      	ldr	r2, [r3, #4]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	019b      	lsls	r3, r3, #6
 800229e:	431a      	orrs	r2, r3
 80022a0:	69fb      	ldr	r3, [r7, #28]
 80022a2:	085b      	lsrs	r3, r3, #1
 80022a4:	3b01      	subs	r3, #1
 80022a6:	041b      	lsls	r3, r3, #16
 80022a8:	431a      	orrs	r2, r3
 80022aa:	69bb      	ldr	r3, [r7, #24]
 80022ac:	061b      	lsls	r3, r3, #24
 80022ae:	431a      	orrs	r2, r3
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	695b      	ldr	r3, [r3, #20]
 80022b4:	071b      	lsls	r3, r3, #28
 80022b6:	4961      	ldr	r1, [pc, #388]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80022b8:	4313      	orrs	r3, r2
 80022ba:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 0304 	and.w	r3, r3, #4
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d004      	beq.n	80022d4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80022d2:	d00a      	beq.n	80022ea <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d035      	beq.n	800234c <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80022e8:	d130      	bne.n	800234c <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80022ea:	4b54      	ldr	r3, [pc, #336]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80022ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80022f0:	0c1b      	lsrs	r3, r3, #16
 80022f2:	f003 0303 	and.w	r3, r3, #3
 80022f6:	3301      	adds	r3, #1
 80022f8:	005b      	lsls	r3, r3, #1
 80022fa:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80022fc:	4b4f      	ldr	r3, [pc, #316]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80022fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002302:	0f1b      	lsrs	r3, r3, #28
 8002304:	f003 0307 	and.w	r3, r3, #7
 8002308:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	685a      	ldr	r2, [r3, #4]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	019b      	lsls	r3, r3, #6
 8002314:	431a      	orrs	r2, r3
 8002316:	69fb      	ldr	r3, [r7, #28]
 8002318:	085b      	lsrs	r3, r3, #1
 800231a:	3b01      	subs	r3, #1
 800231c:	041b      	lsls	r3, r3, #16
 800231e:	431a      	orrs	r2, r3
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	691b      	ldr	r3, [r3, #16]
 8002324:	061b      	lsls	r3, r3, #24
 8002326:	431a      	orrs	r2, r3
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	071b      	lsls	r3, r3, #28
 800232c:	4943      	ldr	r1, [pc, #268]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800232e:	4313      	orrs	r3, r2
 8002330:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002334:	4b41      	ldr	r3, [pc, #260]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002336:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800233a:	f023 021f 	bic.w	r2, r3, #31
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002342:	3b01      	subs	r3, #1
 8002344:	493d      	ldr	r1, [pc, #244]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002346:	4313      	orrs	r3, r2
 8002348:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002354:	2b00      	cmp	r3, #0
 8002356:	d029      	beq.n	80023ac <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800235c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002360:	d124      	bne.n	80023ac <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002362:	4b36      	ldr	r3, [pc, #216]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002364:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002368:	0c1b      	lsrs	r3, r3, #16
 800236a:	f003 0303 	and.w	r3, r3, #3
 800236e:	3301      	adds	r3, #1
 8002370:	005b      	lsls	r3, r3, #1
 8002372:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002374:	4b31      	ldr	r3, [pc, #196]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002376:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800237a:	0f1b      	lsrs	r3, r3, #28
 800237c:	f003 0307 	and.w	r3, r3, #7
 8002380:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	685a      	ldr	r2, [r3, #4]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	019b      	lsls	r3, r3, #6
 800238c:	431a      	orrs	r2, r3
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	68db      	ldr	r3, [r3, #12]
 8002392:	085b      	lsrs	r3, r3, #1
 8002394:	3b01      	subs	r3, #1
 8002396:	041b      	lsls	r3, r3, #16
 8002398:	431a      	orrs	r2, r3
 800239a:	69bb      	ldr	r3, [r7, #24]
 800239c:	061b      	lsls	r3, r3, #24
 800239e:	431a      	orrs	r2, r3
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	071b      	lsls	r3, r3, #28
 80023a4:	4925      	ldr	r1, [pc, #148]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80023a6:	4313      	orrs	r3, r2
 80023a8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d016      	beq.n	80023e6 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	685a      	ldr	r2, [r3, #4]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	019b      	lsls	r3, r3, #6
 80023c2:	431a      	orrs	r2, r3
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	085b      	lsrs	r3, r3, #1
 80023ca:	3b01      	subs	r3, #1
 80023cc:	041b      	lsls	r3, r3, #16
 80023ce:	431a      	orrs	r2, r3
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	691b      	ldr	r3, [r3, #16]
 80023d4:	061b      	lsls	r3, r3, #24
 80023d6:	431a      	orrs	r2, r3
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	695b      	ldr	r3, [r3, #20]
 80023dc:	071b      	lsls	r3, r3, #28
 80023de:	4917      	ldr	r1, [pc, #92]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80023e0:	4313      	orrs	r3, r2
 80023e2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80023e6:	4b16      	ldr	r3, [pc, #88]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 80023e8:	2201      	movs	r2, #1
 80023ea:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80023ec:	f7fe ff8e 	bl	800130c <HAL_GetTick>
 80023f0:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80023f2:	e008      	b.n	8002406 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80023f4:	f7fe ff8a 	bl	800130c <HAL_GetTick>
 80023f8:	4602      	mov	r2, r0
 80023fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023fc:	1ad3      	subs	r3, r2, r3
 80023fe:	2b02      	cmp	r3, #2
 8002400:	d901      	bls.n	8002406 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002402:	2303      	movs	r3, #3
 8002404:	e09f      	b.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002406:	4b0d      	ldr	r3, [pc, #52]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800240e:	2b00      	cmp	r3, #0
 8002410:	d0f0      	beq.n	80023f4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8002412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002414:	2b01      	cmp	r3, #1
 8002416:	f040 8095 	bne.w	8002544 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800241a:	4b0a      	ldr	r3, [pc, #40]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800241c:	2200      	movs	r2, #0
 800241e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002420:	f7fe ff74 	bl	800130c <HAL_GetTick>
 8002424:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002426:	e00f      	b.n	8002448 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002428:	f7fe ff70 	bl	800130c <HAL_GetTick>
 800242c:	4602      	mov	r2, r0
 800242e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002430:	1ad3      	subs	r3, r2, r3
 8002432:	2b02      	cmp	r3, #2
 8002434:	d908      	bls.n	8002448 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002436:	2303      	movs	r3, #3
 8002438:	e085      	b.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0x642>
 800243a:	bf00      	nop
 800243c:	40023800 	.word	0x40023800
 8002440:	42470068 	.word	0x42470068
 8002444:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002448:	4b41      	ldr	r3, [pc, #260]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002450:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002454:	d0e8      	beq.n	8002428 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 0304 	and.w	r3, r3, #4
 800245e:	2b00      	cmp	r3, #0
 8002460:	d003      	beq.n	800246a <HAL_RCCEx_PeriphCLKConfig+0x566>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002466:	2b00      	cmp	r3, #0
 8002468:	d009      	beq.n	800247e <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8002472:	2b00      	cmp	r3, #0
 8002474:	d02b      	beq.n	80024ce <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800247a:	2b00      	cmp	r3, #0
 800247c:	d127      	bne.n	80024ce <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800247e:	4b34      	ldr	r3, [pc, #208]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002480:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002484:	0c1b      	lsrs	r3, r3, #16
 8002486:	f003 0303 	and.w	r3, r3, #3
 800248a:	3301      	adds	r3, #1
 800248c:	005b      	lsls	r3, r3, #1
 800248e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	699a      	ldr	r2, [r3, #24]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	69db      	ldr	r3, [r3, #28]
 8002498:	019b      	lsls	r3, r3, #6
 800249a:	431a      	orrs	r2, r3
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	085b      	lsrs	r3, r3, #1
 80024a0:	3b01      	subs	r3, #1
 80024a2:	041b      	lsls	r3, r3, #16
 80024a4:	431a      	orrs	r2, r3
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024aa:	061b      	lsls	r3, r3, #24
 80024ac:	4928      	ldr	r1, [pc, #160]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80024ae:	4313      	orrs	r3, r2
 80024b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80024b4:	4b26      	ldr	r3, [pc, #152]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80024b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80024ba:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024c2:	3b01      	subs	r3, #1
 80024c4:	021b      	lsls	r3, r3, #8
 80024c6:	4922      	ldr	r1, [pc, #136]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80024c8:	4313      	orrs	r3, r2
 80024ca:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d01d      	beq.n	8002516 <HAL_RCCEx_PeriphCLKConfig+0x612>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80024e2:	d118      	bne.n	8002516 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80024e4:	4b1a      	ldr	r3, [pc, #104]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80024e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024ea:	0e1b      	lsrs	r3, r3, #24
 80024ec:	f003 030f 	and.w	r3, r3, #15
 80024f0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	699a      	ldr	r2, [r3, #24]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	69db      	ldr	r3, [r3, #28]
 80024fa:	019b      	lsls	r3, r3, #6
 80024fc:	431a      	orrs	r2, r3
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6a1b      	ldr	r3, [r3, #32]
 8002502:	085b      	lsrs	r3, r3, #1
 8002504:	3b01      	subs	r3, #1
 8002506:	041b      	lsls	r3, r3, #16
 8002508:	431a      	orrs	r2, r3
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	061b      	lsls	r3, r3, #24
 800250e:	4910      	ldr	r1, [pc, #64]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002510:	4313      	orrs	r3, r2
 8002512:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002516:	4b0f      	ldr	r3, [pc, #60]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8002518:	2201      	movs	r2, #1
 800251a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800251c:	f7fe fef6 	bl	800130c <HAL_GetTick>
 8002520:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002522:	e008      	b.n	8002536 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002524:	f7fe fef2 	bl	800130c <HAL_GetTick>
 8002528:	4602      	mov	r2, r0
 800252a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800252c:	1ad3      	subs	r3, r2, r3
 800252e:	2b02      	cmp	r3, #2
 8002530:	d901      	bls.n	8002536 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002532:	2303      	movs	r3, #3
 8002534:	e007      	b.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002536:	4b06      	ldr	r3, [pc, #24]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800253e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002542:	d1ef      	bne.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8002544:	2300      	movs	r3, #0
}
 8002546:	4618      	mov	r0, r3
 8002548:	3730      	adds	r7, #48	; 0x30
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	40023800 	.word	0x40023800
 8002554:	42470070 	.word	0x42470070

08002558 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002558:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800255c:	b088      	sub	sp, #32
 800255e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002560:	2300      	movs	r3, #0
 8002562:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8002564:	2300      	movs	r3, #0
 8002566:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8002568:	2300      	movs	r3, #0
 800256a:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 800256c:	2300      	movs	r3, #0
 800256e:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8002570:	2300      	movs	r3, #0
 8002572:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002574:	4bce      	ldr	r3, [pc, #824]	; (80028b0 <HAL_RCC_GetSysClockFreq+0x358>)
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	f003 030c 	and.w	r3, r3, #12
 800257c:	2b0c      	cmp	r3, #12
 800257e:	f200 818d 	bhi.w	800289c <HAL_RCC_GetSysClockFreq+0x344>
 8002582:	a201      	add	r2, pc, #4	; (adr r2, 8002588 <HAL_RCC_GetSysClockFreq+0x30>)
 8002584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002588:	080025bd 	.word	0x080025bd
 800258c:	0800289d 	.word	0x0800289d
 8002590:	0800289d 	.word	0x0800289d
 8002594:	0800289d 	.word	0x0800289d
 8002598:	080025c3 	.word	0x080025c3
 800259c:	0800289d 	.word	0x0800289d
 80025a0:	0800289d 	.word	0x0800289d
 80025a4:	0800289d 	.word	0x0800289d
 80025a8:	080025c9 	.word	0x080025c9
 80025ac:	0800289d 	.word	0x0800289d
 80025b0:	0800289d 	.word	0x0800289d
 80025b4:	0800289d 	.word	0x0800289d
 80025b8:	0800273d 	.word	0x0800273d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80025bc:	4bbd      	ldr	r3, [pc, #756]	; (80028b4 <HAL_RCC_GetSysClockFreq+0x35c>)
 80025be:	61bb      	str	r3, [r7, #24]
       break;
 80025c0:	e16f      	b.n	80028a2 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80025c2:	4bbd      	ldr	r3, [pc, #756]	; (80028b8 <HAL_RCC_GetSysClockFreq+0x360>)
 80025c4:	61bb      	str	r3, [r7, #24]
      break;
 80025c6:	e16c      	b.n	80028a2 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80025c8:	4bb9      	ldr	r3, [pc, #740]	; (80028b0 <HAL_RCC_GetSysClockFreq+0x358>)
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80025d0:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80025d2:	4bb7      	ldr	r3, [pc, #732]	; (80028b0 <HAL_RCC_GetSysClockFreq+0x358>)
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d053      	beq.n	8002686 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025de:	4bb4      	ldr	r3, [pc, #720]	; (80028b0 <HAL_RCC_GetSysClockFreq+0x358>)
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	099b      	lsrs	r3, r3, #6
 80025e4:	461a      	mov	r2, r3
 80025e6:	f04f 0300 	mov.w	r3, #0
 80025ea:	f240 10ff 	movw	r0, #511	; 0x1ff
 80025ee:	f04f 0100 	mov.w	r1, #0
 80025f2:	ea02 0400 	and.w	r4, r2, r0
 80025f6:	603c      	str	r4, [r7, #0]
 80025f8:	400b      	ands	r3, r1
 80025fa:	607b      	str	r3, [r7, #4]
 80025fc:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002600:	4620      	mov	r0, r4
 8002602:	4629      	mov	r1, r5
 8002604:	f04f 0200 	mov.w	r2, #0
 8002608:	f04f 0300 	mov.w	r3, #0
 800260c:	014b      	lsls	r3, r1, #5
 800260e:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002612:	0142      	lsls	r2, r0, #5
 8002614:	4610      	mov	r0, r2
 8002616:	4619      	mov	r1, r3
 8002618:	4623      	mov	r3, r4
 800261a:	1ac0      	subs	r0, r0, r3
 800261c:	462b      	mov	r3, r5
 800261e:	eb61 0103 	sbc.w	r1, r1, r3
 8002622:	f04f 0200 	mov.w	r2, #0
 8002626:	f04f 0300 	mov.w	r3, #0
 800262a:	018b      	lsls	r3, r1, #6
 800262c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002630:	0182      	lsls	r2, r0, #6
 8002632:	1a12      	subs	r2, r2, r0
 8002634:	eb63 0301 	sbc.w	r3, r3, r1
 8002638:	f04f 0000 	mov.w	r0, #0
 800263c:	f04f 0100 	mov.w	r1, #0
 8002640:	00d9      	lsls	r1, r3, #3
 8002642:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002646:	00d0      	lsls	r0, r2, #3
 8002648:	4602      	mov	r2, r0
 800264a:	460b      	mov	r3, r1
 800264c:	4621      	mov	r1, r4
 800264e:	1852      	adds	r2, r2, r1
 8002650:	4629      	mov	r1, r5
 8002652:	eb43 0101 	adc.w	r1, r3, r1
 8002656:	460b      	mov	r3, r1
 8002658:	f04f 0000 	mov.w	r0, #0
 800265c:	f04f 0100 	mov.w	r1, #0
 8002660:	0259      	lsls	r1, r3, #9
 8002662:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002666:	0250      	lsls	r0, r2, #9
 8002668:	4602      	mov	r2, r0
 800266a:	460b      	mov	r3, r1
 800266c:	4610      	mov	r0, r2
 800266e:	4619      	mov	r1, r3
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	461a      	mov	r2, r3
 8002674:	f04f 0300 	mov.w	r3, #0
 8002678:	f7fd fdc4 	bl	8000204 <__aeabi_uldivmod>
 800267c:	4602      	mov	r2, r0
 800267e:	460b      	mov	r3, r1
 8002680:	4613      	mov	r3, r2
 8002682:	61fb      	str	r3, [r7, #28]
 8002684:	e04c      	b.n	8002720 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002686:	4b8a      	ldr	r3, [pc, #552]	; (80028b0 <HAL_RCC_GetSysClockFreq+0x358>)
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	099b      	lsrs	r3, r3, #6
 800268c:	461a      	mov	r2, r3
 800268e:	f04f 0300 	mov.w	r3, #0
 8002692:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002696:	f04f 0100 	mov.w	r1, #0
 800269a:	ea02 0a00 	and.w	sl, r2, r0
 800269e:	ea03 0b01 	and.w	fp, r3, r1
 80026a2:	4650      	mov	r0, sl
 80026a4:	4659      	mov	r1, fp
 80026a6:	f04f 0200 	mov.w	r2, #0
 80026aa:	f04f 0300 	mov.w	r3, #0
 80026ae:	014b      	lsls	r3, r1, #5
 80026b0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80026b4:	0142      	lsls	r2, r0, #5
 80026b6:	4610      	mov	r0, r2
 80026b8:	4619      	mov	r1, r3
 80026ba:	ebb0 000a 	subs.w	r0, r0, sl
 80026be:	eb61 010b 	sbc.w	r1, r1, fp
 80026c2:	f04f 0200 	mov.w	r2, #0
 80026c6:	f04f 0300 	mov.w	r3, #0
 80026ca:	018b      	lsls	r3, r1, #6
 80026cc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80026d0:	0182      	lsls	r2, r0, #6
 80026d2:	1a12      	subs	r2, r2, r0
 80026d4:	eb63 0301 	sbc.w	r3, r3, r1
 80026d8:	f04f 0000 	mov.w	r0, #0
 80026dc:	f04f 0100 	mov.w	r1, #0
 80026e0:	00d9      	lsls	r1, r3, #3
 80026e2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80026e6:	00d0      	lsls	r0, r2, #3
 80026e8:	4602      	mov	r2, r0
 80026ea:	460b      	mov	r3, r1
 80026ec:	eb12 020a 	adds.w	r2, r2, sl
 80026f0:	eb43 030b 	adc.w	r3, r3, fp
 80026f4:	f04f 0000 	mov.w	r0, #0
 80026f8:	f04f 0100 	mov.w	r1, #0
 80026fc:	0299      	lsls	r1, r3, #10
 80026fe:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002702:	0290      	lsls	r0, r2, #10
 8002704:	4602      	mov	r2, r0
 8002706:	460b      	mov	r3, r1
 8002708:	4610      	mov	r0, r2
 800270a:	4619      	mov	r1, r3
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	461a      	mov	r2, r3
 8002710:	f04f 0300 	mov.w	r3, #0
 8002714:	f7fd fd76 	bl	8000204 <__aeabi_uldivmod>
 8002718:	4602      	mov	r2, r0
 800271a:	460b      	mov	r3, r1
 800271c:	4613      	mov	r3, r2
 800271e:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002720:	4b63      	ldr	r3, [pc, #396]	; (80028b0 <HAL_RCC_GetSysClockFreq+0x358>)
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	0c1b      	lsrs	r3, r3, #16
 8002726:	f003 0303 	and.w	r3, r3, #3
 800272a:	3301      	adds	r3, #1
 800272c:	005b      	lsls	r3, r3, #1
 800272e:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8002730:	69fa      	ldr	r2, [r7, #28]
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	fbb2 f3f3 	udiv	r3, r2, r3
 8002738:	61bb      	str	r3, [r7, #24]
      break;
 800273a:	e0b2      	b.n	80028a2 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800273c:	4b5c      	ldr	r3, [pc, #368]	; (80028b0 <HAL_RCC_GetSysClockFreq+0x358>)
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002744:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002746:	4b5a      	ldr	r3, [pc, #360]	; (80028b0 <HAL_RCC_GetSysClockFreq+0x358>)
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800274e:	2b00      	cmp	r3, #0
 8002750:	d04d      	beq.n	80027ee <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002752:	4b57      	ldr	r3, [pc, #348]	; (80028b0 <HAL_RCC_GetSysClockFreq+0x358>)
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	099b      	lsrs	r3, r3, #6
 8002758:	461a      	mov	r2, r3
 800275a:	f04f 0300 	mov.w	r3, #0
 800275e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002762:	f04f 0100 	mov.w	r1, #0
 8002766:	ea02 0800 	and.w	r8, r2, r0
 800276a:	ea03 0901 	and.w	r9, r3, r1
 800276e:	4640      	mov	r0, r8
 8002770:	4649      	mov	r1, r9
 8002772:	f04f 0200 	mov.w	r2, #0
 8002776:	f04f 0300 	mov.w	r3, #0
 800277a:	014b      	lsls	r3, r1, #5
 800277c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002780:	0142      	lsls	r2, r0, #5
 8002782:	4610      	mov	r0, r2
 8002784:	4619      	mov	r1, r3
 8002786:	ebb0 0008 	subs.w	r0, r0, r8
 800278a:	eb61 0109 	sbc.w	r1, r1, r9
 800278e:	f04f 0200 	mov.w	r2, #0
 8002792:	f04f 0300 	mov.w	r3, #0
 8002796:	018b      	lsls	r3, r1, #6
 8002798:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800279c:	0182      	lsls	r2, r0, #6
 800279e:	1a12      	subs	r2, r2, r0
 80027a0:	eb63 0301 	sbc.w	r3, r3, r1
 80027a4:	f04f 0000 	mov.w	r0, #0
 80027a8:	f04f 0100 	mov.w	r1, #0
 80027ac:	00d9      	lsls	r1, r3, #3
 80027ae:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80027b2:	00d0      	lsls	r0, r2, #3
 80027b4:	4602      	mov	r2, r0
 80027b6:	460b      	mov	r3, r1
 80027b8:	eb12 0208 	adds.w	r2, r2, r8
 80027bc:	eb43 0309 	adc.w	r3, r3, r9
 80027c0:	f04f 0000 	mov.w	r0, #0
 80027c4:	f04f 0100 	mov.w	r1, #0
 80027c8:	0259      	lsls	r1, r3, #9
 80027ca:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80027ce:	0250      	lsls	r0, r2, #9
 80027d0:	4602      	mov	r2, r0
 80027d2:	460b      	mov	r3, r1
 80027d4:	4610      	mov	r0, r2
 80027d6:	4619      	mov	r1, r3
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	461a      	mov	r2, r3
 80027dc:	f04f 0300 	mov.w	r3, #0
 80027e0:	f7fd fd10 	bl	8000204 <__aeabi_uldivmod>
 80027e4:	4602      	mov	r2, r0
 80027e6:	460b      	mov	r3, r1
 80027e8:	4613      	mov	r3, r2
 80027ea:	61fb      	str	r3, [r7, #28]
 80027ec:	e04a      	b.n	8002884 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027ee:	4b30      	ldr	r3, [pc, #192]	; (80028b0 <HAL_RCC_GetSysClockFreq+0x358>)
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	099b      	lsrs	r3, r3, #6
 80027f4:	461a      	mov	r2, r3
 80027f6:	f04f 0300 	mov.w	r3, #0
 80027fa:	f240 10ff 	movw	r0, #511	; 0x1ff
 80027fe:	f04f 0100 	mov.w	r1, #0
 8002802:	ea02 0400 	and.w	r4, r2, r0
 8002806:	ea03 0501 	and.w	r5, r3, r1
 800280a:	4620      	mov	r0, r4
 800280c:	4629      	mov	r1, r5
 800280e:	f04f 0200 	mov.w	r2, #0
 8002812:	f04f 0300 	mov.w	r3, #0
 8002816:	014b      	lsls	r3, r1, #5
 8002818:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800281c:	0142      	lsls	r2, r0, #5
 800281e:	4610      	mov	r0, r2
 8002820:	4619      	mov	r1, r3
 8002822:	1b00      	subs	r0, r0, r4
 8002824:	eb61 0105 	sbc.w	r1, r1, r5
 8002828:	f04f 0200 	mov.w	r2, #0
 800282c:	f04f 0300 	mov.w	r3, #0
 8002830:	018b      	lsls	r3, r1, #6
 8002832:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002836:	0182      	lsls	r2, r0, #6
 8002838:	1a12      	subs	r2, r2, r0
 800283a:	eb63 0301 	sbc.w	r3, r3, r1
 800283e:	f04f 0000 	mov.w	r0, #0
 8002842:	f04f 0100 	mov.w	r1, #0
 8002846:	00d9      	lsls	r1, r3, #3
 8002848:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800284c:	00d0      	lsls	r0, r2, #3
 800284e:	4602      	mov	r2, r0
 8002850:	460b      	mov	r3, r1
 8002852:	1912      	adds	r2, r2, r4
 8002854:	eb45 0303 	adc.w	r3, r5, r3
 8002858:	f04f 0000 	mov.w	r0, #0
 800285c:	f04f 0100 	mov.w	r1, #0
 8002860:	0299      	lsls	r1, r3, #10
 8002862:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002866:	0290      	lsls	r0, r2, #10
 8002868:	4602      	mov	r2, r0
 800286a:	460b      	mov	r3, r1
 800286c:	4610      	mov	r0, r2
 800286e:	4619      	mov	r1, r3
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	461a      	mov	r2, r3
 8002874:	f04f 0300 	mov.w	r3, #0
 8002878:	f7fd fcc4 	bl	8000204 <__aeabi_uldivmod>
 800287c:	4602      	mov	r2, r0
 800287e:	460b      	mov	r3, r1
 8002880:	4613      	mov	r3, r2
 8002882:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002884:	4b0a      	ldr	r3, [pc, #40]	; (80028b0 <HAL_RCC_GetSysClockFreq+0x358>)
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	0f1b      	lsrs	r3, r3, #28
 800288a:	f003 0307 	and.w	r3, r3, #7
 800288e:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8002890:	69fa      	ldr	r2, [r7, #28]
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	fbb2 f3f3 	udiv	r3, r2, r3
 8002898:	61bb      	str	r3, [r7, #24]
      break;
 800289a:	e002      	b.n	80028a2 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800289c:	4b05      	ldr	r3, [pc, #20]	; (80028b4 <HAL_RCC_GetSysClockFreq+0x35c>)
 800289e:	61bb      	str	r3, [r7, #24]
      break;
 80028a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028a2:	69bb      	ldr	r3, [r7, #24]
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	3720      	adds	r7, #32
 80028a8:	46bd      	mov	sp, r7
 80028aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80028ae:	bf00      	nop
 80028b0:	40023800 	.word	0x40023800
 80028b4:	00f42400 	.word	0x00f42400
 80028b8:	007a1200 	.word	0x007a1200

080028bc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b086      	sub	sp, #24
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d101      	bne.n	80028ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	e28d      	b.n	8002dea <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f003 0301 	and.w	r3, r3, #1
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	f000 8083 	beq.w	80029e2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80028dc:	4b94      	ldr	r3, [pc, #592]	; (8002b30 <HAL_RCC_OscConfig+0x274>)
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	f003 030c 	and.w	r3, r3, #12
 80028e4:	2b04      	cmp	r3, #4
 80028e6:	d019      	beq.n	800291c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80028e8:	4b91      	ldr	r3, [pc, #580]	; (8002b30 <HAL_RCC_OscConfig+0x274>)
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80028f0:	2b08      	cmp	r3, #8
 80028f2:	d106      	bne.n	8002902 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80028f4:	4b8e      	ldr	r3, [pc, #568]	; (8002b30 <HAL_RCC_OscConfig+0x274>)
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002900:	d00c      	beq.n	800291c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002902:	4b8b      	ldr	r3, [pc, #556]	; (8002b30 <HAL_RCC_OscConfig+0x274>)
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800290a:	2b0c      	cmp	r3, #12
 800290c:	d112      	bne.n	8002934 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800290e:	4b88      	ldr	r3, [pc, #544]	; (8002b30 <HAL_RCC_OscConfig+0x274>)
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002916:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800291a:	d10b      	bne.n	8002934 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800291c:	4b84      	ldr	r3, [pc, #528]	; (8002b30 <HAL_RCC_OscConfig+0x274>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002924:	2b00      	cmp	r3, #0
 8002926:	d05b      	beq.n	80029e0 <HAL_RCC_OscConfig+0x124>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d157      	bne.n	80029e0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002930:	2301      	movs	r3, #1
 8002932:	e25a      	b.n	8002dea <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800293c:	d106      	bne.n	800294c <HAL_RCC_OscConfig+0x90>
 800293e:	4b7c      	ldr	r3, [pc, #496]	; (8002b30 <HAL_RCC_OscConfig+0x274>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a7b      	ldr	r2, [pc, #492]	; (8002b30 <HAL_RCC_OscConfig+0x274>)
 8002944:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002948:	6013      	str	r3, [r2, #0]
 800294a:	e01d      	b.n	8002988 <HAL_RCC_OscConfig+0xcc>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002954:	d10c      	bne.n	8002970 <HAL_RCC_OscConfig+0xb4>
 8002956:	4b76      	ldr	r3, [pc, #472]	; (8002b30 <HAL_RCC_OscConfig+0x274>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a75      	ldr	r2, [pc, #468]	; (8002b30 <HAL_RCC_OscConfig+0x274>)
 800295c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002960:	6013      	str	r3, [r2, #0]
 8002962:	4b73      	ldr	r3, [pc, #460]	; (8002b30 <HAL_RCC_OscConfig+0x274>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a72      	ldr	r2, [pc, #456]	; (8002b30 <HAL_RCC_OscConfig+0x274>)
 8002968:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800296c:	6013      	str	r3, [r2, #0]
 800296e:	e00b      	b.n	8002988 <HAL_RCC_OscConfig+0xcc>
 8002970:	4b6f      	ldr	r3, [pc, #444]	; (8002b30 <HAL_RCC_OscConfig+0x274>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a6e      	ldr	r2, [pc, #440]	; (8002b30 <HAL_RCC_OscConfig+0x274>)
 8002976:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800297a:	6013      	str	r3, [r2, #0]
 800297c:	4b6c      	ldr	r3, [pc, #432]	; (8002b30 <HAL_RCC_OscConfig+0x274>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a6b      	ldr	r2, [pc, #428]	; (8002b30 <HAL_RCC_OscConfig+0x274>)
 8002982:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002986:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d013      	beq.n	80029b8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002990:	f7fe fcbc 	bl	800130c <HAL_GetTick>
 8002994:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002996:	e008      	b.n	80029aa <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002998:	f7fe fcb8 	bl	800130c <HAL_GetTick>
 800299c:	4602      	mov	r2, r0
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	1ad3      	subs	r3, r2, r3
 80029a2:	2b64      	cmp	r3, #100	; 0x64
 80029a4:	d901      	bls.n	80029aa <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80029a6:	2303      	movs	r3, #3
 80029a8:	e21f      	b.n	8002dea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029aa:	4b61      	ldr	r3, [pc, #388]	; (8002b30 <HAL_RCC_OscConfig+0x274>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d0f0      	beq.n	8002998 <HAL_RCC_OscConfig+0xdc>
 80029b6:	e014      	b.n	80029e2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029b8:	f7fe fca8 	bl	800130c <HAL_GetTick>
 80029bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029be:	e008      	b.n	80029d2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029c0:	f7fe fca4 	bl	800130c <HAL_GetTick>
 80029c4:	4602      	mov	r2, r0
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	1ad3      	subs	r3, r2, r3
 80029ca:	2b64      	cmp	r3, #100	; 0x64
 80029cc:	d901      	bls.n	80029d2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80029ce:	2303      	movs	r3, #3
 80029d0:	e20b      	b.n	8002dea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029d2:	4b57      	ldr	r3, [pc, #348]	; (8002b30 <HAL_RCC_OscConfig+0x274>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d1f0      	bne.n	80029c0 <HAL_RCC_OscConfig+0x104>
 80029de:	e000      	b.n	80029e2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 0302 	and.w	r3, r3, #2
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d06f      	beq.n	8002ace <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80029ee:	4b50      	ldr	r3, [pc, #320]	; (8002b30 <HAL_RCC_OscConfig+0x274>)
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	f003 030c 	and.w	r3, r3, #12
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d017      	beq.n	8002a2a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80029fa:	4b4d      	ldr	r3, [pc, #308]	; (8002b30 <HAL_RCC_OscConfig+0x274>)
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002a02:	2b08      	cmp	r3, #8
 8002a04:	d105      	bne.n	8002a12 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002a06:	4b4a      	ldr	r3, [pc, #296]	; (8002b30 <HAL_RCC_OscConfig+0x274>)
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d00b      	beq.n	8002a2a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a12:	4b47      	ldr	r3, [pc, #284]	; (8002b30 <HAL_RCC_OscConfig+0x274>)
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002a1a:	2b0c      	cmp	r3, #12
 8002a1c:	d11c      	bne.n	8002a58 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a1e:	4b44      	ldr	r3, [pc, #272]	; (8002b30 <HAL_RCC_OscConfig+0x274>)
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d116      	bne.n	8002a58 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a2a:	4b41      	ldr	r3, [pc, #260]	; (8002b30 <HAL_RCC_OscConfig+0x274>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f003 0302 	and.w	r3, r3, #2
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d005      	beq.n	8002a42 <HAL_RCC_OscConfig+0x186>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	68db      	ldr	r3, [r3, #12]
 8002a3a:	2b01      	cmp	r3, #1
 8002a3c:	d001      	beq.n	8002a42 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e1d3      	b.n	8002dea <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a42:	4b3b      	ldr	r3, [pc, #236]	; (8002b30 <HAL_RCC_OscConfig+0x274>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	691b      	ldr	r3, [r3, #16]
 8002a4e:	00db      	lsls	r3, r3, #3
 8002a50:	4937      	ldr	r1, [pc, #220]	; (8002b30 <HAL_RCC_OscConfig+0x274>)
 8002a52:	4313      	orrs	r3, r2
 8002a54:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a56:	e03a      	b.n	8002ace <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	68db      	ldr	r3, [r3, #12]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d020      	beq.n	8002aa2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a60:	4b34      	ldr	r3, [pc, #208]	; (8002b34 <HAL_RCC_OscConfig+0x278>)
 8002a62:	2201      	movs	r2, #1
 8002a64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a66:	f7fe fc51 	bl	800130c <HAL_GetTick>
 8002a6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a6c:	e008      	b.n	8002a80 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a6e:	f7fe fc4d 	bl	800130c <HAL_GetTick>
 8002a72:	4602      	mov	r2, r0
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	1ad3      	subs	r3, r2, r3
 8002a78:	2b02      	cmp	r3, #2
 8002a7a:	d901      	bls.n	8002a80 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002a7c:	2303      	movs	r3, #3
 8002a7e:	e1b4      	b.n	8002dea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a80:	4b2b      	ldr	r3, [pc, #172]	; (8002b30 <HAL_RCC_OscConfig+0x274>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f003 0302 	and.w	r3, r3, #2
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d0f0      	beq.n	8002a6e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a8c:	4b28      	ldr	r3, [pc, #160]	; (8002b30 <HAL_RCC_OscConfig+0x274>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	691b      	ldr	r3, [r3, #16]
 8002a98:	00db      	lsls	r3, r3, #3
 8002a9a:	4925      	ldr	r1, [pc, #148]	; (8002b30 <HAL_RCC_OscConfig+0x274>)
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	600b      	str	r3, [r1, #0]
 8002aa0:	e015      	b.n	8002ace <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002aa2:	4b24      	ldr	r3, [pc, #144]	; (8002b34 <HAL_RCC_OscConfig+0x278>)
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aa8:	f7fe fc30 	bl	800130c <HAL_GetTick>
 8002aac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002aae:	e008      	b.n	8002ac2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ab0:	f7fe fc2c 	bl	800130c <HAL_GetTick>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	1ad3      	subs	r3, r2, r3
 8002aba:	2b02      	cmp	r3, #2
 8002abc:	d901      	bls.n	8002ac2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002abe:	2303      	movs	r3, #3
 8002ac0:	e193      	b.n	8002dea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ac2:	4b1b      	ldr	r3, [pc, #108]	; (8002b30 <HAL_RCC_OscConfig+0x274>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 0302 	and.w	r3, r3, #2
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d1f0      	bne.n	8002ab0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f003 0308 	and.w	r3, r3, #8
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d036      	beq.n	8002b48 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	695b      	ldr	r3, [r3, #20]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d016      	beq.n	8002b10 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ae2:	4b15      	ldr	r3, [pc, #84]	; (8002b38 <HAL_RCC_OscConfig+0x27c>)
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ae8:	f7fe fc10 	bl	800130c <HAL_GetTick>
 8002aec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002aee:	e008      	b.n	8002b02 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002af0:	f7fe fc0c 	bl	800130c <HAL_GetTick>
 8002af4:	4602      	mov	r2, r0
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	1ad3      	subs	r3, r2, r3
 8002afa:	2b02      	cmp	r3, #2
 8002afc:	d901      	bls.n	8002b02 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002afe:	2303      	movs	r3, #3
 8002b00:	e173      	b.n	8002dea <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b02:	4b0b      	ldr	r3, [pc, #44]	; (8002b30 <HAL_RCC_OscConfig+0x274>)
 8002b04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b06:	f003 0302 	and.w	r3, r3, #2
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d0f0      	beq.n	8002af0 <HAL_RCC_OscConfig+0x234>
 8002b0e:	e01b      	b.n	8002b48 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b10:	4b09      	ldr	r3, [pc, #36]	; (8002b38 <HAL_RCC_OscConfig+0x27c>)
 8002b12:	2200      	movs	r2, #0
 8002b14:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b16:	f7fe fbf9 	bl	800130c <HAL_GetTick>
 8002b1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b1c:	e00e      	b.n	8002b3c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b1e:	f7fe fbf5 	bl	800130c <HAL_GetTick>
 8002b22:	4602      	mov	r2, r0
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	1ad3      	subs	r3, r2, r3
 8002b28:	2b02      	cmp	r3, #2
 8002b2a:	d907      	bls.n	8002b3c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002b2c:	2303      	movs	r3, #3
 8002b2e:	e15c      	b.n	8002dea <HAL_RCC_OscConfig+0x52e>
 8002b30:	40023800 	.word	0x40023800
 8002b34:	42470000 	.word	0x42470000
 8002b38:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b3c:	4b8a      	ldr	r3, [pc, #552]	; (8002d68 <HAL_RCC_OscConfig+0x4ac>)
 8002b3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b40:	f003 0302 	and.w	r3, r3, #2
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d1ea      	bne.n	8002b1e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 0304 	and.w	r3, r3, #4
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	f000 8097 	beq.w	8002c84 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b56:	2300      	movs	r3, #0
 8002b58:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b5a:	4b83      	ldr	r3, [pc, #524]	; (8002d68 <HAL_RCC_OscConfig+0x4ac>)
 8002b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d10f      	bne.n	8002b86 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b66:	2300      	movs	r3, #0
 8002b68:	60bb      	str	r3, [r7, #8]
 8002b6a:	4b7f      	ldr	r3, [pc, #508]	; (8002d68 <HAL_RCC_OscConfig+0x4ac>)
 8002b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b6e:	4a7e      	ldr	r2, [pc, #504]	; (8002d68 <HAL_RCC_OscConfig+0x4ac>)
 8002b70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b74:	6413      	str	r3, [r2, #64]	; 0x40
 8002b76:	4b7c      	ldr	r3, [pc, #496]	; (8002d68 <HAL_RCC_OscConfig+0x4ac>)
 8002b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b7e:	60bb      	str	r3, [r7, #8]
 8002b80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b82:	2301      	movs	r3, #1
 8002b84:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b86:	4b79      	ldr	r3, [pc, #484]	; (8002d6c <HAL_RCC_OscConfig+0x4b0>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d118      	bne.n	8002bc4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b92:	4b76      	ldr	r3, [pc, #472]	; (8002d6c <HAL_RCC_OscConfig+0x4b0>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a75      	ldr	r2, [pc, #468]	; (8002d6c <HAL_RCC_OscConfig+0x4b0>)
 8002b98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b9e:	f7fe fbb5 	bl	800130c <HAL_GetTick>
 8002ba2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ba4:	e008      	b.n	8002bb8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ba6:	f7fe fbb1 	bl	800130c <HAL_GetTick>
 8002baa:	4602      	mov	r2, r0
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	1ad3      	subs	r3, r2, r3
 8002bb0:	2b02      	cmp	r3, #2
 8002bb2:	d901      	bls.n	8002bb8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002bb4:	2303      	movs	r3, #3
 8002bb6:	e118      	b.n	8002dea <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bb8:	4b6c      	ldr	r3, [pc, #432]	; (8002d6c <HAL_RCC_OscConfig+0x4b0>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d0f0      	beq.n	8002ba6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	d106      	bne.n	8002bda <HAL_RCC_OscConfig+0x31e>
 8002bcc:	4b66      	ldr	r3, [pc, #408]	; (8002d68 <HAL_RCC_OscConfig+0x4ac>)
 8002bce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bd0:	4a65      	ldr	r2, [pc, #404]	; (8002d68 <HAL_RCC_OscConfig+0x4ac>)
 8002bd2:	f043 0301 	orr.w	r3, r3, #1
 8002bd6:	6713      	str	r3, [r2, #112]	; 0x70
 8002bd8:	e01c      	b.n	8002c14 <HAL_RCC_OscConfig+0x358>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	2b05      	cmp	r3, #5
 8002be0:	d10c      	bne.n	8002bfc <HAL_RCC_OscConfig+0x340>
 8002be2:	4b61      	ldr	r3, [pc, #388]	; (8002d68 <HAL_RCC_OscConfig+0x4ac>)
 8002be4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002be6:	4a60      	ldr	r2, [pc, #384]	; (8002d68 <HAL_RCC_OscConfig+0x4ac>)
 8002be8:	f043 0304 	orr.w	r3, r3, #4
 8002bec:	6713      	str	r3, [r2, #112]	; 0x70
 8002bee:	4b5e      	ldr	r3, [pc, #376]	; (8002d68 <HAL_RCC_OscConfig+0x4ac>)
 8002bf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bf2:	4a5d      	ldr	r2, [pc, #372]	; (8002d68 <HAL_RCC_OscConfig+0x4ac>)
 8002bf4:	f043 0301 	orr.w	r3, r3, #1
 8002bf8:	6713      	str	r3, [r2, #112]	; 0x70
 8002bfa:	e00b      	b.n	8002c14 <HAL_RCC_OscConfig+0x358>
 8002bfc:	4b5a      	ldr	r3, [pc, #360]	; (8002d68 <HAL_RCC_OscConfig+0x4ac>)
 8002bfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c00:	4a59      	ldr	r2, [pc, #356]	; (8002d68 <HAL_RCC_OscConfig+0x4ac>)
 8002c02:	f023 0301 	bic.w	r3, r3, #1
 8002c06:	6713      	str	r3, [r2, #112]	; 0x70
 8002c08:	4b57      	ldr	r3, [pc, #348]	; (8002d68 <HAL_RCC_OscConfig+0x4ac>)
 8002c0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c0c:	4a56      	ldr	r2, [pc, #344]	; (8002d68 <HAL_RCC_OscConfig+0x4ac>)
 8002c0e:	f023 0304 	bic.w	r3, r3, #4
 8002c12:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d015      	beq.n	8002c48 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c1c:	f7fe fb76 	bl	800130c <HAL_GetTick>
 8002c20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c22:	e00a      	b.n	8002c3a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c24:	f7fe fb72 	bl	800130c <HAL_GetTick>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	1ad3      	subs	r3, r2, r3
 8002c2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d901      	bls.n	8002c3a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002c36:	2303      	movs	r3, #3
 8002c38:	e0d7      	b.n	8002dea <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c3a:	4b4b      	ldr	r3, [pc, #300]	; (8002d68 <HAL_RCC_OscConfig+0x4ac>)
 8002c3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c3e:	f003 0302 	and.w	r3, r3, #2
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d0ee      	beq.n	8002c24 <HAL_RCC_OscConfig+0x368>
 8002c46:	e014      	b.n	8002c72 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c48:	f7fe fb60 	bl	800130c <HAL_GetTick>
 8002c4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c4e:	e00a      	b.n	8002c66 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c50:	f7fe fb5c 	bl	800130c <HAL_GetTick>
 8002c54:	4602      	mov	r2, r0
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	1ad3      	subs	r3, r2, r3
 8002c5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d901      	bls.n	8002c66 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002c62:	2303      	movs	r3, #3
 8002c64:	e0c1      	b.n	8002dea <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c66:	4b40      	ldr	r3, [pc, #256]	; (8002d68 <HAL_RCC_OscConfig+0x4ac>)
 8002c68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c6a:	f003 0302 	and.w	r3, r3, #2
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d1ee      	bne.n	8002c50 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c72:	7dfb      	ldrb	r3, [r7, #23]
 8002c74:	2b01      	cmp	r3, #1
 8002c76:	d105      	bne.n	8002c84 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c78:	4b3b      	ldr	r3, [pc, #236]	; (8002d68 <HAL_RCC_OscConfig+0x4ac>)
 8002c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7c:	4a3a      	ldr	r2, [pc, #232]	; (8002d68 <HAL_RCC_OscConfig+0x4ac>)
 8002c7e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c82:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	699b      	ldr	r3, [r3, #24]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	f000 80ad 	beq.w	8002de8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c8e:	4b36      	ldr	r3, [pc, #216]	; (8002d68 <HAL_RCC_OscConfig+0x4ac>)
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	f003 030c 	and.w	r3, r3, #12
 8002c96:	2b08      	cmp	r3, #8
 8002c98:	d060      	beq.n	8002d5c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	699b      	ldr	r3, [r3, #24]
 8002c9e:	2b02      	cmp	r3, #2
 8002ca0:	d145      	bne.n	8002d2e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ca2:	4b33      	ldr	r3, [pc, #204]	; (8002d70 <HAL_RCC_OscConfig+0x4b4>)
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ca8:	f7fe fb30 	bl	800130c <HAL_GetTick>
 8002cac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cae:	e008      	b.n	8002cc2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cb0:	f7fe fb2c 	bl	800130c <HAL_GetTick>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	1ad3      	subs	r3, r2, r3
 8002cba:	2b02      	cmp	r3, #2
 8002cbc:	d901      	bls.n	8002cc2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002cbe:	2303      	movs	r3, #3
 8002cc0:	e093      	b.n	8002dea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cc2:	4b29      	ldr	r3, [pc, #164]	; (8002d68 <HAL_RCC_OscConfig+0x4ac>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d1f0      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	69da      	ldr	r2, [r3, #28]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6a1b      	ldr	r3, [r3, #32]
 8002cd6:	431a      	orrs	r2, r3
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cdc:	019b      	lsls	r3, r3, #6
 8002cde:	431a      	orrs	r2, r3
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ce4:	085b      	lsrs	r3, r3, #1
 8002ce6:	3b01      	subs	r3, #1
 8002ce8:	041b      	lsls	r3, r3, #16
 8002cea:	431a      	orrs	r2, r3
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cf0:	061b      	lsls	r3, r3, #24
 8002cf2:	431a      	orrs	r2, r3
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf8:	071b      	lsls	r3, r3, #28
 8002cfa:	491b      	ldr	r1, [pc, #108]	; (8002d68 <HAL_RCC_OscConfig+0x4ac>)
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d00:	4b1b      	ldr	r3, [pc, #108]	; (8002d70 <HAL_RCC_OscConfig+0x4b4>)
 8002d02:	2201      	movs	r2, #1
 8002d04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d06:	f7fe fb01 	bl	800130c <HAL_GetTick>
 8002d0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d0c:	e008      	b.n	8002d20 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d0e:	f7fe fafd 	bl	800130c <HAL_GetTick>
 8002d12:	4602      	mov	r2, r0
 8002d14:	693b      	ldr	r3, [r7, #16]
 8002d16:	1ad3      	subs	r3, r2, r3
 8002d18:	2b02      	cmp	r3, #2
 8002d1a:	d901      	bls.n	8002d20 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002d1c:	2303      	movs	r3, #3
 8002d1e:	e064      	b.n	8002dea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d20:	4b11      	ldr	r3, [pc, #68]	; (8002d68 <HAL_RCC_OscConfig+0x4ac>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d0f0      	beq.n	8002d0e <HAL_RCC_OscConfig+0x452>
 8002d2c:	e05c      	b.n	8002de8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d2e:	4b10      	ldr	r3, [pc, #64]	; (8002d70 <HAL_RCC_OscConfig+0x4b4>)
 8002d30:	2200      	movs	r2, #0
 8002d32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d34:	f7fe faea 	bl	800130c <HAL_GetTick>
 8002d38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d3a:	e008      	b.n	8002d4e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d3c:	f7fe fae6 	bl	800130c <HAL_GetTick>
 8002d40:	4602      	mov	r2, r0
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	1ad3      	subs	r3, r2, r3
 8002d46:	2b02      	cmp	r3, #2
 8002d48:	d901      	bls.n	8002d4e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002d4a:	2303      	movs	r3, #3
 8002d4c:	e04d      	b.n	8002dea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d4e:	4b06      	ldr	r3, [pc, #24]	; (8002d68 <HAL_RCC_OscConfig+0x4ac>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d1f0      	bne.n	8002d3c <HAL_RCC_OscConfig+0x480>
 8002d5a:	e045      	b.n	8002de8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	699b      	ldr	r3, [r3, #24]
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	d107      	bne.n	8002d74 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002d64:	2301      	movs	r3, #1
 8002d66:	e040      	b.n	8002dea <HAL_RCC_OscConfig+0x52e>
 8002d68:	40023800 	.word	0x40023800
 8002d6c:	40007000 	.word	0x40007000
 8002d70:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002d74:	4b1f      	ldr	r3, [pc, #124]	; (8002df4 <HAL_RCC_OscConfig+0x538>)
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	699b      	ldr	r3, [r3, #24]
 8002d7e:	2b01      	cmp	r3, #1
 8002d80:	d030      	beq.n	8002de4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	d129      	bne.n	8002de4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d9a:	429a      	cmp	r2, r3
 8002d9c:	d122      	bne.n	8002de4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d9e:	68fa      	ldr	r2, [r7, #12]
 8002da0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002da4:	4013      	ands	r3, r2
 8002da6:	687a      	ldr	r2, [r7, #4]
 8002da8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002daa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d119      	bne.n	8002de4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dba:	085b      	lsrs	r3, r3, #1
 8002dbc:	3b01      	subs	r3, #1
 8002dbe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	d10f      	bne.n	8002de4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dce:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d107      	bne.n	8002de4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dde:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002de0:	429a      	cmp	r2, r3
 8002de2:	d001      	beq.n	8002de8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	e000      	b.n	8002dea <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002de8:	2300      	movs	r3, #0
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3718      	adds	r7, #24
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	bf00      	nop
 8002df4:	40023800 	.word	0x40023800

08002df8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b082      	sub	sp, #8
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d101      	bne.n	8002e0a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	e07b      	b.n	8002f02 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d108      	bne.n	8002e24 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e1a:	d009      	beq.n	8002e30 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	61da      	str	r2, [r3, #28]
 8002e22:	e005      	b.n	8002e30 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2200      	movs	r2, #0
 8002e28:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2200      	movs	r2, #0
 8002e34:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002e3c:	b2db      	uxtb	r3, r3
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d106      	bne.n	8002e50 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2200      	movs	r2, #0
 8002e46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	f7fe f876 	bl	8000f3c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2202      	movs	r2, #2
 8002e54:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e66:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002e78:	431a      	orrs	r2, r3
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	68db      	ldr	r3, [r3, #12]
 8002e7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e82:	431a      	orrs	r2, r3
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	691b      	ldr	r3, [r3, #16]
 8002e88:	f003 0302 	and.w	r3, r3, #2
 8002e8c:	431a      	orrs	r2, r3
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	695b      	ldr	r3, [r3, #20]
 8002e92:	f003 0301 	and.w	r3, r3, #1
 8002e96:	431a      	orrs	r2, r3
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	699b      	ldr	r3, [r3, #24]
 8002e9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ea0:	431a      	orrs	r2, r3
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	69db      	ldr	r3, [r3, #28]
 8002ea6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002eaa:	431a      	orrs	r2, r3
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6a1b      	ldr	r3, [r3, #32]
 8002eb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002eb4:	ea42 0103 	orr.w	r1, r2, r3
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ebc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	430a      	orrs	r2, r1
 8002ec6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	699b      	ldr	r3, [r3, #24]
 8002ecc:	0c1b      	lsrs	r3, r3, #16
 8002ece:	f003 0104 	and.w	r1, r3, #4
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed6:	f003 0210 	and.w	r2, r3, #16
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	430a      	orrs	r2, r1
 8002ee0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	69da      	ldr	r2, [r3, #28]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ef0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2201      	movs	r2, #1
 8002efc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002f00:	2300      	movs	r3, #0
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	3708      	adds	r7, #8
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}

08002f0a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f0a:	b580      	push	{r7, lr}
 8002f0c:	b082      	sub	sp, #8
 8002f0e:	af00      	add	r7, sp, #0
 8002f10:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d101      	bne.n	8002f1c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	e041      	b.n	8002fa0 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f22:	b2db      	uxtb	r3, r3
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d106      	bne.n	8002f36 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f30:	6878      	ldr	r0, [r7, #4]
 8002f32:	f7fe f87b 	bl	800102c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2202      	movs	r2, #2
 8002f3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	3304      	adds	r3, #4
 8002f46:	4619      	mov	r1, r3
 8002f48:	4610      	mov	r0, r2
 8002f4a:	f000 fad9 	bl	8003500 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2201      	movs	r2, #1
 8002f52:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2201      	movs	r2, #1
 8002f5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2201      	movs	r2, #1
 8002f62:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2201      	movs	r2, #1
 8002f6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2201      	movs	r2, #1
 8002f72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2201      	movs	r2, #1
 8002f7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2201      	movs	r2, #1
 8002f82:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2201      	movs	r2, #1
 8002f8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2201      	movs	r2, #1
 8002f92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2201      	movs	r2, #1
 8002f9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f9e:	2300      	movs	r3, #0
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	3708      	adds	r7, #8
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}

08002fa8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b082      	sub	sp, #8
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d101      	bne.n	8002fba <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e041      	b.n	800303e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d106      	bne.n	8002fd4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002fce:	6878      	ldr	r0, [r7, #4]
 8002fd0:	f000 f839 	bl	8003046 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2202      	movs	r2, #2
 8002fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	3304      	adds	r3, #4
 8002fe4:	4619      	mov	r1, r3
 8002fe6:	4610      	mov	r0, r2
 8002fe8:	f000 fa8a 	bl	8003500 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2201      	movs	r2, #1
 8002ff0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2201      	movs	r2, #1
 8003000:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2201      	movs	r2, #1
 8003008:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2201      	movs	r2, #1
 8003010:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2201      	movs	r2, #1
 8003018:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2201      	movs	r2, #1
 8003020:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2201      	movs	r2, #1
 8003028:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2201      	movs	r2, #1
 8003030:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2201      	movs	r2, #1
 8003038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800303c:	2300      	movs	r3, #0
}
 800303e:	4618      	mov	r0, r3
 8003040:	3708      	adds	r7, #8
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}

08003046 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003046:	b480      	push	{r7}
 8003048:	b083      	sub	sp, #12
 800304a:	af00      	add	r7, sp, #0
 800304c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800304e:	bf00      	nop
 8003050:	370c      	adds	r7, #12
 8003052:	46bd      	mov	sp, r7
 8003054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003058:	4770      	bx	lr
	...

0800305c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b084      	sub	sp, #16
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
 8003064:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d109      	bne.n	8003080 <HAL_TIM_PWM_Start+0x24>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003072:	b2db      	uxtb	r3, r3
 8003074:	2b01      	cmp	r3, #1
 8003076:	bf14      	ite	ne
 8003078:	2301      	movne	r3, #1
 800307a:	2300      	moveq	r3, #0
 800307c:	b2db      	uxtb	r3, r3
 800307e:	e022      	b.n	80030c6 <HAL_TIM_PWM_Start+0x6a>
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	2b04      	cmp	r3, #4
 8003084:	d109      	bne.n	800309a <HAL_TIM_PWM_Start+0x3e>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800308c:	b2db      	uxtb	r3, r3
 800308e:	2b01      	cmp	r3, #1
 8003090:	bf14      	ite	ne
 8003092:	2301      	movne	r3, #1
 8003094:	2300      	moveq	r3, #0
 8003096:	b2db      	uxtb	r3, r3
 8003098:	e015      	b.n	80030c6 <HAL_TIM_PWM_Start+0x6a>
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	2b08      	cmp	r3, #8
 800309e:	d109      	bne.n	80030b4 <HAL_TIM_PWM_Start+0x58>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80030a6:	b2db      	uxtb	r3, r3
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	bf14      	ite	ne
 80030ac:	2301      	movne	r3, #1
 80030ae:	2300      	moveq	r3, #0
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	e008      	b.n	80030c6 <HAL_TIM_PWM_Start+0x6a>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030ba:	b2db      	uxtb	r3, r3
 80030bc:	2b01      	cmp	r3, #1
 80030be:	bf14      	ite	ne
 80030c0:	2301      	movne	r3, #1
 80030c2:	2300      	moveq	r3, #0
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d001      	beq.n	80030ce <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	e07c      	b.n	80031c8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d104      	bne.n	80030de <HAL_TIM_PWM_Start+0x82>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2202      	movs	r2, #2
 80030d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80030dc:	e013      	b.n	8003106 <HAL_TIM_PWM_Start+0xaa>
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	2b04      	cmp	r3, #4
 80030e2:	d104      	bne.n	80030ee <HAL_TIM_PWM_Start+0x92>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2202      	movs	r2, #2
 80030e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80030ec:	e00b      	b.n	8003106 <HAL_TIM_PWM_Start+0xaa>
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	2b08      	cmp	r3, #8
 80030f2:	d104      	bne.n	80030fe <HAL_TIM_PWM_Start+0xa2>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2202      	movs	r2, #2
 80030f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80030fc:	e003      	b.n	8003106 <HAL_TIM_PWM_Start+0xaa>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2202      	movs	r2, #2
 8003102:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	2201      	movs	r2, #1
 800310c:	6839      	ldr	r1, [r7, #0]
 800310e:	4618      	mov	r0, r3
 8003110:	f000 fce0 	bl	8003ad4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a2d      	ldr	r2, [pc, #180]	; (80031d0 <HAL_TIM_PWM_Start+0x174>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d004      	beq.n	8003128 <HAL_TIM_PWM_Start+0xcc>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a2c      	ldr	r2, [pc, #176]	; (80031d4 <HAL_TIM_PWM_Start+0x178>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d101      	bne.n	800312c <HAL_TIM_PWM_Start+0xd0>
 8003128:	2301      	movs	r3, #1
 800312a:	e000      	b.n	800312e <HAL_TIM_PWM_Start+0xd2>
 800312c:	2300      	movs	r3, #0
 800312e:	2b00      	cmp	r3, #0
 8003130:	d007      	beq.n	8003142 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003140:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a22      	ldr	r2, [pc, #136]	; (80031d0 <HAL_TIM_PWM_Start+0x174>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d022      	beq.n	8003192 <HAL_TIM_PWM_Start+0x136>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003154:	d01d      	beq.n	8003192 <HAL_TIM_PWM_Start+0x136>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a1f      	ldr	r2, [pc, #124]	; (80031d8 <HAL_TIM_PWM_Start+0x17c>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d018      	beq.n	8003192 <HAL_TIM_PWM_Start+0x136>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a1d      	ldr	r2, [pc, #116]	; (80031dc <HAL_TIM_PWM_Start+0x180>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d013      	beq.n	8003192 <HAL_TIM_PWM_Start+0x136>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a1c      	ldr	r2, [pc, #112]	; (80031e0 <HAL_TIM_PWM_Start+0x184>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d00e      	beq.n	8003192 <HAL_TIM_PWM_Start+0x136>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a16      	ldr	r2, [pc, #88]	; (80031d4 <HAL_TIM_PWM_Start+0x178>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d009      	beq.n	8003192 <HAL_TIM_PWM_Start+0x136>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a18      	ldr	r2, [pc, #96]	; (80031e4 <HAL_TIM_PWM_Start+0x188>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d004      	beq.n	8003192 <HAL_TIM_PWM_Start+0x136>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a16      	ldr	r2, [pc, #88]	; (80031e8 <HAL_TIM_PWM_Start+0x18c>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d111      	bne.n	80031b6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	f003 0307 	and.w	r3, r3, #7
 800319c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	2b06      	cmp	r3, #6
 80031a2:	d010      	beq.n	80031c6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f042 0201 	orr.w	r2, r2, #1
 80031b2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031b4:	e007      	b.n	80031c6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	681a      	ldr	r2, [r3, #0]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f042 0201 	orr.w	r2, r2, #1
 80031c4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80031c6:	2300      	movs	r3, #0
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	3710      	adds	r7, #16
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}
 80031d0:	40010000 	.word	0x40010000
 80031d4:	40010400 	.word	0x40010400
 80031d8:	40000400 	.word	0x40000400
 80031dc:	40000800 	.word	0x40000800
 80031e0:	40000c00 	.word	0x40000c00
 80031e4:	40014000 	.word	0x40014000
 80031e8:	40001800 	.word	0x40001800

080031ec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b086      	sub	sp, #24
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	60f8      	str	r0, [r7, #12]
 80031f4:	60b9      	str	r1, [r7, #8]
 80031f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031f8:	2300      	movs	r3, #0
 80031fa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003202:	2b01      	cmp	r3, #1
 8003204:	d101      	bne.n	800320a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003206:	2302      	movs	r3, #2
 8003208:	e0ae      	b.n	8003368 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2201      	movs	r2, #1
 800320e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2b0c      	cmp	r3, #12
 8003216:	f200 809f 	bhi.w	8003358 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800321a:	a201      	add	r2, pc, #4	; (adr r2, 8003220 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800321c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003220:	08003255 	.word	0x08003255
 8003224:	08003359 	.word	0x08003359
 8003228:	08003359 	.word	0x08003359
 800322c:	08003359 	.word	0x08003359
 8003230:	08003295 	.word	0x08003295
 8003234:	08003359 	.word	0x08003359
 8003238:	08003359 	.word	0x08003359
 800323c:	08003359 	.word	0x08003359
 8003240:	080032d7 	.word	0x080032d7
 8003244:	08003359 	.word	0x08003359
 8003248:	08003359 	.word	0x08003359
 800324c:	08003359 	.word	0x08003359
 8003250:	08003317 	.word	0x08003317
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	68b9      	ldr	r1, [r7, #8]
 800325a:	4618      	mov	r0, r3
 800325c:	f000 f9f0 	bl	8003640 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	699a      	ldr	r2, [r3, #24]
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f042 0208 	orr.w	r2, r2, #8
 800326e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	699a      	ldr	r2, [r3, #24]
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f022 0204 	bic.w	r2, r2, #4
 800327e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	6999      	ldr	r1, [r3, #24]
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	691a      	ldr	r2, [r3, #16]
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	430a      	orrs	r2, r1
 8003290:	619a      	str	r2, [r3, #24]
      break;
 8003292:	e064      	b.n	800335e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	68b9      	ldr	r1, [r7, #8]
 800329a:	4618      	mov	r0, r3
 800329c:	f000 fa40 	bl	8003720 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	699a      	ldr	r2, [r3, #24]
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	699a      	ldr	r2, [r3, #24]
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	6999      	ldr	r1, [r3, #24]
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	691b      	ldr	r3, [r3, #16]
 80032ca:	021a      	lsls	r2, r3, #8
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	430a      	orrs	r2, r1
 80032d2:	619a      	str	r2, [r3, #24]
      break;
 80032d4:	e043      	b.n	800335e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	68b9      	ldr	r1, [r7, #8]
 80032dc:	4618      	mov	r0, r3
 80032de:	f000 fa95 	bl	800380c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	69da      	ldr	r2, [r3, #28]
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f042 0208 	orr.w	r2, r2, #8
 80032f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	69da      	ldr	r2, [r3, #28]
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f022 0204 	bic.w	r2, r2, #4
 8003300:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	69d9      	ldr	r1, [r3, #28]
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	691a      	ldr	r2, [r3, #16]
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	430a      	orrs	r2, r1
 8003312:	61da      	str	r2, [r3, #28]
      break;
 8003314:	e023      	b.n	800335e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	68b9      	ldr	r1, [r7, #8]
 800331c:	4618      	mov	r0, r3
 800331e:	f000 fae9 	bl	80038f4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	69da      	ldr	r2, [r3, #28]
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003330:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	69da      	ldr	r2, [r3, #28]
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003340:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	69d9      	ldr	r1, [r3, #28]
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	691b      	ldr	r3, [r3, #16]
 800334c:	021a      	lsls	r2, r3, #8
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	430a      	orrs	r2, r1
 8003354:	61da      	str	r2, [r3, #28]
      break;
 8003356:	e002      	b.n	800335e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003358:	2301      	movs	r3, #1
 800335a:	75fb      	strb	r3, [r7, #23]
      break;
 800335c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	2200      	movs	r2, #0
 8003362:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003366:	7dfb      	ldrb	r3, [r7, #23]
}
 8003368:	4618      	mov	r0, r3
 800336a:	3718      	adds	r7, #24
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}

08003370 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b084      	sub	sp, #16
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
 8003378:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800337a:	2300      	movs	r3, #0
 800337c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003384:	2b01      	cmp	r3, #1
 8003386:	d101      	bne.n	800338c <HAL_TIM_ConfigClockSource+0x1c>
 8003388:	2302      	movs	r3, #2
 800338a:	e0b4      	b.n	80034f6 <HAL_TIM_ConfigClockSource+0x186>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2201      	movs	r2, #1
 8003390:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2202      	movs	r2, #2
 8003398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80033aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80033b2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	68ba      	ldr	r2, [r7, #8]
 80033ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033c4:	d03e      	beq.n	8003444 <HAL_TIM_ConfigClockSource+0xd4>
 80033c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033ca:	f200 8087 	bhi.w	80034dc <HAL_TIM_ConfigClockSource+0x16c>
 80033ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033d2:	f000 8086 	beq.w	80034e2 <HAL_TIM_ConfigClockSource+0x172>
 80033d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033da:	d87f      	bhi.n	80034dc <HAL_TIM_ConfigClockSource+0x16c>
 80033dc:	2b70      	cmp	r3, #112	; 0x70
 80033de:	d01a      	beq.n	8003416 <HAL_TIM_ConfigClockSource+0xa6>
 80033e0:	2b70      	cmp	r3, #112	; 0x70
 80033e2:	d87b      	bhi.n	80034dc <HAL_TIM_ConfigClockSource+0x16c>
 80033e4:	2b60      	cmp	r3, #96	; 0x60
 80033e6:	d050      	beq.n	800348a <HAL_TIM_ConfigClockSource+0x11a>
 80033e8:	2b60      	cmp	r3, #96	; 0x60
 80033ea:	d877      	bhi.n	80034dc <HAL_TIM_ConfigClockSource+0x16c>
 80033ec:	2b50      	cmp	r3, #80	; 0x50
 80033ee:	d03c      	beq.n	800346a <HAL_TIM_ConfigClockSource+0xfa>
 80033f0:	2b50      	cmp	r3, #80	; 0x50
 80033f2:	d873      	bhi.n	80034dc <HAL_TIM_ConfigClockSource+0x16c>
 80033f4:	2b40      	cmp	r3, #64	; 0x40
 80033f6:	d058      	beq.n	80034aa <HAL_TIM_ConfigClockSource+0x13a>
 80033f8:	2b40      	cmp	r3, #64	; 0x40
 80033fa:	d86f      	bhi.n	80034dc <HAL_TIM_ConfigClockSource+0x16c>
 80033fc:	2b30      	cmp	r3, #48	; 0x30
 80033fe:	d064      	beq.n	80034ca <HAL_TIM_ConfigClockSource+0x15a>
 8003400:	2b30      	cmp	r3, #48	; 0x30
 8003402:	d86b      	bhi.n	80034dc <HAL_TIM_ConfigClockSource+0x16c>
 8003404:	2b20      	cmp	r3, #32
 8003406:	d060      	beq.n	80034ca <HAL_TIM_ConfigClockSource+0x15a>
 8003408:	2b20      	cmp	r3, #32
 800340a:	d867      	bhi.n	80034dc <HAL_TIM_ConfigClockSource+0x16c>
 800340c:	2b00      	cmp	r3, #0
 800340e:	d05c      	beq.n	80034ca <HAL_TIM_ConfigClockSource+0x15a>
 8003410:	2b10      	cmp	r3, #16
 8003412:	d05a      	beq.n	80034ca <HAL_TIM_ConfigClockSource+0x15a>
 8003414:	e062      	b.n	80034dc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6818      	ldr	r0, [r3, #0]
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	6899      	ldr	r1, [r3, #8]
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	685a      	ldr	r2, [r3, #4]
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	68db      	ldr	r3, [r3, #12]
 8003426:	f000 fb35 	bl	8003a94 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003438:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	68ba      	ldr	r2, [r7, #8]
 8003440:	609a      	str	r2, [r3, #8]
      break;
 8003442:	e04f      	b.n	80034e4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6818      	ldr	r0, [r3, #0]
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	6899      	ldr	r1, [r3, #8]
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	685a      	ldr	r2, [r3, #4]
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	68db      	ldr	r3, [r3, #12]
 8003454:	f000 fb1e 	bl	8003a94 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	689a      	ldr	r2, [r3, #8]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003466:	609a      	str	r2, [r3, #8]
      break;
 8003468:	e03c      	b.n	80034e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6818      	ldr	r0, [r3, #0]
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	6859      	ldr	r1, [r3, #4]
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	68db      	ldr	r3, [r3, #12]
 8003476:	461a      	mov	r2, r3
 8003478:	f000 fa92 	bl	80039a0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	2150      	movs	r1, #80	; 0x50
 8003482:	4618      	mov	r0, r3
 8003484:	f000 faeb 	bl	8003a5e <TIM_ITRx_SetConfig>
      break;
 8003488:	e02c      	b.n	80034e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6818      	ldr	r0, [r3, #0]
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	6859      	ldr	r1, [r3, #4]
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	68db      	ldr	r3, [r3, #12]
 8003496:	461a      	mov	r2, r3
 8003498:	f000 fab1 	bl	80039fe <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	2160      	movs	r1, #96	; 0x60
 80034a2:	4618      	mov	r0, r3
 80034a4:	f000 fadb 	bl	8003a5e <TIM_ITRx_SetConfig>
      break;
 80034a8:	e01c      	b.n	80034e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6818      	ldr	r0, [r3, #0]
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	6859      	ldr	r1, [r3, #4]
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	68db      	ldr	r3, [r3, #12]
 80034b6:	461a      	mov	r2, r3
 80034b8:	f000 fa72 	bl	80039a0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	2140      	movs	r1, #64	; 0x40
 80034c2:	4618      	mov	r0, r3
 80034c4:	f000 facb 	bl	8003a5e <TIM_ITRx_SetConfig>
      break;
 80034c8:	e00c      	b.n	80034e4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681a      	ldr	r2, [r3, #0]
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4619      	mov	r1, r3
 80034d4:	4610      	mov	r0, r2
 80034d6:	f000 fac2 	bl	8003a5e <TIM_ITRx_SetConfig>
      break;
 80034da:	e003      	b.n	80034e4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80034dc:	2301      	movs	r3, #1
 80034de:	73fb      	strb	r3, [r7, #15]
      break;
 80034e0:	e000      	b.n	80034e4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80034e2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2201      	movs	r2, #1
 80034e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2200      	movs	r2, #0
 80034f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80034f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	3710      	adds	r7, #16
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}
	...

08003500 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003500:	b480      	push	{r7}
 8003502:	b085      	sub	sp, #20
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
 8003508:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	4a40      	ldr	r2, [pc, #256]	; (8003614 <TIM_Base_SetConfig+0x114>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d013      	beq.n	8003540 <TIM_Base_SetConfig+0x40>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800351e:	d00f      	beq.n	8003540 <TIM_Base_SetConfig+0x40>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	4a3d      	ldr	r2, [pc, #244]	; (8003618 <TIM_Base_SetConfig+0x118>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d00b      	beq.n	8003540 <TIM_Base_SetConfig+0x40>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	4a3c      	ldr	r2, [pc, #240]	; (800361c <TIM_Base_SetConfig+0x11c>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d007      	beq.n	8003540 <TIM_Base_SetConfig+0x40>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	4a3b      	ldr	r2, [pc, #236]	; (8003620 <TIM_Base_SetConfig+0x120>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d003      	beq.n	8003540 <TIM_Base_SetConfig+0x40>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	4a3a      	ldr	r2, [pc, #232]	; (8003624 <TIM_Base_SetConfig+0x124>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d108      	bne.n	8003552 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003546:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	68fa      	ldr	r2, [r7, #12]
 800354e:	4313      	orrs	r3, r2
 8003550:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	4a2f      	ldr	r2, [pc, #188]	; (8003614 <TIM_Base_SetConfig+0x114>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d02b      	beq.n	80035b2 <TIM_Base_SetConfig+0xb2>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003560:	d027      	beq.n	80035b2 <TIM_Base_SetConfig+0xb2>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	4a2c      	ldr	r2, [pc, #176]	; (8003618 <TIM_Base_SetConfig+0x118>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d023      	beq.n	80035b2 <TIM_Base_SetConfig+0xb2>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	4a2b      	ldr	r2, [pc, #172]	; (800361c <TIM_Base_SetConfig+0x11c>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d01f      	beq.n	80035b2 <TIM_Base_SetConfig+0xb2>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	4a2a      	ldr	r2, [pc, #168]	; (8003620 <TIM_Base_SetConfig+0x120>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d01b      	beq.n	80035b2 <TIM_Base_SetConfig+0xb2>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	4a29      	ldr	r2, [pc, #164]	; (8003624 <TIM_Base_SetConfig+0x124>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d017      	beq.n	80035b2 <TIM_Base_SetConfig+0xb2>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	4a28      	ldr	r2, [pc, #160]	; (8003628 <TIM_Base_SetConfig+0x128>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d013      	beq.n	80035b2 <TIM_Base_SetConfig+0xb2>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	4a27      	ldr	r2, [pc, #156]	; (800362c <TIM_Base_SetConfig+0x12c>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d00f      	beq.n	80035b2 <TIM_Base_SetConfig+0xb2>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	4a26      	ldr	r2, [pc, #152]	; (8003630 <TIM_Base_SetConfig+0x130>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d00b      	beq.n	80035b2 <TIM_Base_SetConfig+0xb2>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	4a25      	ldr	r2, [pc, #148]	; (8003634 <TIM_Base_SetConfig+0x134>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d007      	beq.n	80035b2 <TIM_Base_SetConfig+0xb2>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	4a24      	ldr	r2, [pc, #144]	; (8003638 <TIM_Base_SetConfig+0x138>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d003      	beq.n	80035b2 <TIM_Base_SetConfig+0xb2>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	4a23      	ldr	r2, [pc, #140]	; (800363c <TIM_Base_SetConfig+0x13c>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d108      	bne.n	80035c4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	68db      	ldr	r3, [r3, #12]
 80035be:	68fa      	ldr	r2, [r7, #12]
 80035c0:	4313      	orrs	r3, r2
 80035c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	695b      	ldr	r3, [r3, #20]
 80035ce:	4313      	orrs	r3, r2
 80035d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	68fa      	ldr	r2, [r7, #12]
 80035d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	689a      	ldr	r2, [r3, #8]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	4a0a      	ldr	r2, [pc, #40]	; (8003614 <TIM_Base_SetConfig+0x114>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d003      	beq.n	80035f8 <TIM_Base_SetConfig+0xf8>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	4a0c      	ldr	r2, [pc, #48]	; (8003624 <TIM_Base_SetConfig+0x124>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d103      	bne.n	8003600 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	691a      	ldr	r2, [r3, #16]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2201      	movs	r2, #1
 8003604:	615a      	str	r2, [r3, #20]
}
 8003606:	bf00      	nop
 8003608:	3714      	adds	r7, #20
 800360a:	46bd      	mov	sp, r7
 800360c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003610:	4770      	bx	lr
 8003612:	bf00      	nop
 8003614:	40010000 	.word	0x40010000
 8003618:	40000400 	.word	0x40000400
 800361c:	40000800 	.word	0x40000800
 8003620:	40000c00 	.word	0x40000c00
 8003624:	40010400 	.word	0x40010400
 8003628:	40014000 	.word	0x40014000
 800362c:	40014400 	.word	0x40014400
 8003630:	40014800 	.word	0x40014800
 8003634:	40001800 	.word	0x40001800
 8003638:	40001c00 	.word	0x40001c00
 800363c:	40002000 	.word	0x40002000

08003640 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003640:	b480      	push	{r7}
 8003642:	b087      	sub	sp, #28
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
 8003648:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6a1b      	ldr	r3, [r3, #32]
 800364e:	f023 0201 	bic.w	r2, r3, #1
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6a1b      	ldr	r3, [r3, #32]
 800365a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	699b      	ldr	r3, [r3, #24]
 8003666:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800366e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	f023 0303 	bic.w	r3, r3, #3
 8003676:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	68fa      	ldr	r2, [r7, #12]
 800367e:	4313      	orrs	r3, r2
 8003680:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	f023 0302 	bic.w	r3, r3, #2
 8003688:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	697a      	ldr	r2, [r7, #20]
 8003690:	4313      	orrs	r3, r2
 8003692:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	4a20      	ldr	r2, [pc, #128]	; (8003718 <TIM_OC1_SetConfig+0xd8>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d003      	beq.n	80036a4 <TIM_OC1_SetConfig+0x64>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	4a1f      	ldr	r2, [pc, #124]	; (800371c <TIM_OC1_SetConfig+0xdc>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d10c      	bne.n	80036be <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	f023 0308 	bic.w	r3, r3, #8
 80036aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	68db      	ldr	r3, [r3, #12]
 80036b0:	697a      	ldr	r2, [r7, #20]
 80036b2:	4313      	orrs	r3, r2
 80036b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	f023 0304 	bic.w	r3, r3, #4
 80036bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	4a15      	ldr	r2, [pc, #84]	; (8003718 <TIM_OC1_SetConfig+0xd8>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d003      	beq.n	80036ce <TIM_OC1_SetConfig+0x8e>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	4a14      	ldr	r2, [pc, #80]	; (800371c <TIM_OC1_SetConfig+0xdc>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d111      	bne.n	80036f2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80036d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80036dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	695b      	ldr	r3, [r3, #20]
 80036e2:	693a      	ldr	r2, [r7, #16]
 80036e4:	4313      	orrs	r3, r2
 80036e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	699b      	ldr	r3, [r3, #24]
 80036ec:	693a      	ldr	r2, [r7, #16]
 80036ee:	4313      	orrs	r3, r2
 80036f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	693a      	ldr	r2, [r7, #16]
 80036f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	68fa      	ldr	r2, [r7, #12]
 80036fc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	685a      	ldr	r2, [r3, #4]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	697a      	ldr	r2, [r7, #20]
 800370a:	621a      	str	r2, [r3, #32]
}
 800370c:	bf00      	nop
 800370e:	371c      	adds	r7, #28
 8003710:	46bd      	mov	sp, r7
 8003712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003716:	4770      	bx	lr
 8003718:	40010000 	.word	0x40010000
 800371c:	40010400 	.word	0x40010400

08003720 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003720:	b480      	push	{r7}
 8003722:	b087      	sub	sp, #28
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
 8003728:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6a1b      	ldr	r3, [r3, #32]
 800372e:	f023 0210 	bic.w	r2, r3, #16
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6a1b      	ldr	r3, [r3, #32]
 800373a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	699b      	ldr	r3, [r3, #24]
 8003746:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800374e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003756:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	021b      	lsls	r3, r3, #8
 800375e:	68fa      	ldr	r2, [r7, #12]
 8003760:	4313      	orrs	r3, r2
 8003762:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	f023 0320 	bic.w	r3, r3, #32
 800376a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	011b      	lsls	r3, r3, #4
 8003772:	697a      	ldr	r2, [r7, #20]
 8003774:	4313      	orrs	r3, r2
 8003776:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	4a22      	ldr	r2, [pc, #136]	; (8003804 <TIM_OC2_SetConfig+0xe4>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d003      	beq.n	8003788 <TIM_OC2_SetConfig+0x68>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	4a21      	ldr	r2, [pc, #132]	; (8003808 <TIM_OC2_SetConfig+0xe8>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d10d      	bne.n	80037a4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800378e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	68db      	ldr	r3, [r3, #12]
 8003794:	011b      	lsls	r3, r3, #4
 8003796:	697a      	ldr	r2, [r7, #20]
 8003798:	4313      	orrs	r3, r2
 800379a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80037a2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	4a17      	ldr	r2, [pc, #92]	; (8003804 <TIM_OC2_SetConfig+0xe4>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d003      	beq.n	80037b4 <TIM_OC2_SetConfig+0x94>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	4a16      	ldr	r2, [pc, #88]	; (8003808 <TIM_OC2_SetConfig+0xe8>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d113      	bne.n	80037dc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80037b4:	693b      	ldr	r3, [r7, #16]
 80037b6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80037ba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80037bc:	693b      	ldr	r3, [r7, #16]
 80037be:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80037c2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	695b      	ldr	r3, [r3, #20]
 80037c8:	009b      	lsls	r3, r3, #2
 80037ca:	693a      	ldr	r2, [r7, #16]
 80037cc:	4313      	orrs	r3, r2
 80037ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	699b      	ldr	r3, [r3, #24]
 80037d4:	009b      	lsls	r3, r3, #2
 80037d6:	693a      	ldr	r2, [r7, #16]
 80037d8:	4313      	orrs	r3, r2
 80037da:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	693a      	ldr	r2, [r7, #16]
 80037e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	68fa      	ldr	r2, [r7, #12]
 80037e6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	685a      	ldr	r2, [r3, #4]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	697a      	ldr	r2, [r7, #20]
 80037f4:	621a      	str	r2, [r3, #32]
}
 80037f6:	bf00      	nop
 80037f8:	371c      	adds	r7, #28
 80037fa:	46bd      	mov	sp, r7
 80037fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003800:	4770      	bx	lr
 8003802:	bf00      	nop
 8003804:	40010000 	.word	0x40010000
 8003808:	40010400 	.word	0x40010400

0800380c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800380c:	b480      	push	{r7}
 800380e:	b087      	sub	sp, #28
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
 8003814:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6a1b      	ldr	r3, [r3, #32]
 800381a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6a1b      	ldr	r3, [r3, #32]
 8003826:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	69db      	ldr	r3, [r3, #28]
 8003832:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800383a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	f023 0303 	bic.w	r3, r3, #3
 8003842:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	68fa      	ldr	r2, [r7, #12]
 800384a:	4313      	orrs	r3, r2
 800384c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003854:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	021b      	lsls	r3, r3, #8
 800385c:	697a      	ldr	r2, [r7, #20]
 800385e:	4313      	orrs	r3, r2
 8003860:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	4a21      	ldr	r2, [pc, #132]	; (80038ec <TIM_OC3_SetConfig+0xe0>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d003      	beq.n	8003872 <TIM_OC3_SetConfig+0x66>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	4a20      	ldr	r2, [pc, #128]	; (80038f0 <TIM_OC3_SetConfig+0xe4>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d10d      	bne.n	800388e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003878:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	68db      	ldr	r3, [r3, #12]
 800387e:	021b      	lsls	r3, r3, #8
 8003880:	697a      	ldr	r2, [r7, #20]
 8003882:	4313      	orrs	r3, r2
 8003884:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800388c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	4a16      	ldr	r2, [pc, #88]	; (80038ec <TIM_OC3_SetConfig+0xe0>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d003      	beq.n	800389e <TIM_OC3_SetConfig+0x92>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	4a15      	ldr	r2, [pc, #84]	; (80038f0 <TIM_OC3_SetConfig+0xe4>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d113      	bne.n	80038c6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80038a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80038ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	695b      	ldr	r3, [r3, #20]
 80038b2:	011b      	lsls	r3, r3, #4
 80038b4:	693a      	ldr	r2, [r7, #16]
 80038b6:	4313      	orrs	r3, r2
 80038b8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	699b      	ldr	r3, [r3, #24]
 80038be:	011b      	lsls	r3, r3, #4
 80038c0:	693a      	ldr	r2, [r7, #16]
 80038c2:	4313      	orrs	r3, r2
 80038c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	693a      	ldr	r2, [r7, #16]
 80038ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	68fa      	ldr	r2, [r7, #12]
 80038d0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	685a      	ldr	r2, [r3, #4]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	697a      	ldr	r2, [r7, #20]
 80038de:	621a      	str	r2, [r3, #32]
}
 80038e0:	bf00      	nop
 80038e2:	371c      	adds	r7, #28
 80038e4:	46bd      	mov	sp, r7
 80038e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ea:	4770      	bx	lr
 80038ec:	40010000 	.word	0x40010000
 80038f0:	40010400 	.word	0x40010400

080038f4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b087      	sub	sp, #28
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
 80038fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6a1b      	ldr	r3, [r3, #32]
 8003902:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6a1b      	ldr	r3, [r3, #32]
 800390e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	69db      	ldr	r3, [r3, #28]
 800391a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003922:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800392a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	021b      	lsls	r3, r3, #8
 8003932:	68fa      	ldr	r2, [r7, #12]
 8003934:	4313      	orrs	r3, r2
 8003936:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800393e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	031b      	lsls	r3, r3, #12
 8003946:	693a      	ldr	r2, [r7, #16]
 8003948:	4313      	orrs	r3, r2
 800394a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	4a12      	ldr	r2, [pc, #72]	; (8003998 <TIM_OC4_SetConfig+0xa4>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d003      	beq.n	800395c <TIM_OC4_SetConfig+0x68>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	4a11      	ldr	r2, [pc, #68]	; (800399c <TIM_OC4_SetConfig+0xa8>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d109      	bne.n	8003970 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003962:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	695b      	ldr	r3, [r3, #20]
 8003968:	019b      	lsls	r3, r3, #6
 800396a:	697a      	ldr	r2, [r7, #20]
 800396c:	4313      	orrs	r3, r2
 800396e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	697a      	ldr	r2, [r7, #20]
 8003974:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	68fa      	ldr	r2, [r7, #12]
 800397a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	685a      	ldr	r2, [r3, #4]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	693a      	ldr	r2, [r7, #16]
 8003988:	621a      	str	r2, [r3, #32]
}
 800398a:	bf00      	nop
 800398c:	371c      	adds	r7, #28
 800398e:	46bd      	mov	sp, r7
 8003990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003994:	4770      	bx	lr
 8003996:	bf00      	nop
 8003998:	40010000 	.word	0x40010000
 800399c:	40010400 	.word	0x40010400

080039a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b087      	sub	sp, #28
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	60f8      	str	r0, [r7, #12]
 80039a8:	60b9      	str	r1, [r7, #8]
 80039aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	6a1b      	ldr	r3, [r3, #32]
 80039b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	6a1b      	ldr	r3, [r3, #32]
 80039b6:	f023 0201 	bic.w	r2, r3, #1
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	699b      	ldr	r3, [r3, #24]
 80039c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80039ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	011b      	lsls	r3, r3, #4
 80039d0:	693a      	ldr	r2, [r7, #16]
 80039d2:	4313      	orrs	r3, r2
 80039d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	f023 030a 	bic.w	r3, r3, #10
 80039dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80039de:	697a      	ldr	r2, [r7, #20]
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	4313      	orrs	r3, r2
 80039e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	693a      	ldr	r2, [r7, #16]
 80039ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	697a      	ldr	r2, [r7, #20]
 80039f0:	621a      	str	r2, [r3, #32]
}
 80039f2:	bf00      	nop
 80039f4:	371c      	adds	r7, #28
 80039f6:	46bd      	mov	sp, r7
 80039f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fc:	4770      	bx	lr

080039fe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80039fe:	b480      	push	{r7}
 8003a00:	b087      	sub	sp, #28
 8003a02:	af00      	add	r7, sp, #0
 8003a04:	60f8      	str	r0, [r7, #12]
 8003a06:	60b9      	str	r1, [r7, #8]
 8003a08:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	6a1b      	ldr	r3, [r3, #32]
 8003a0e:	f023 0210 	bic.w	r2, r3, #16
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	699b      	ldr	r3, [r3, #24]
 8003a1a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	6a1b      	ldr	r3, [r3, #32]
 8003a20:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003a28:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	031b      	lsls	r3, r3, #12
 8003a2e:	697a      	ldr	r2, [r7, #20]
 8003a30:	4313      	orrs	r3, r2
 8003a32:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003a3a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	011b      	lsls	r3, r3, #4
 8003a40:	693a      	ldr	r2, [r7, #16]
 8003a42:	4313      	orrs	r3, r2
 8003a44:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	697a      	ldr	r2, [r7, #20]
 8003a4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	693a      	ldr	r2, [r7, #16]
 8003a50:	621a      	str	r2, [r3, #32]
}
 8003a52:	bf00      	nop
 8003a54:	371c      	adds	r7, #28
 8003a56:	46bd      	mov	sp, r7
 8003a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5c:	4770      	bx	lr

08003a5e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003a5e:	b480      	push	{r7}
 8003a60:	b085      	sub	sp, #20
 8003a62:	af00      	add	r7, sp, #0
 8003a64:	6078      	str	r0, [r7, #4]
 8003a66:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a74:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003a76:	683a      	ldr	r2, [r7, #0]
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	f043 0307 	orr.w	r3, r3, #7
 8003a80:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	68fa      	ldr	r2, [r7, #12]
 8003a86:	609a      	str	r2, [r3, #8]
}
 8003a88:	bf00      	nop
 8003a8a:	3714      	adds	r7, #20
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a92:	4770      	bx	lr

08003a94 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b087      	sub	sp, #28
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	60f8      	str	r0, [r7, #12]
 8003a9c:	60b9      	str	r1, [r7, #8]
 8003a9e:	607a      	str	r2, [r7, #4]
 8003aa0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	689b      	ldr	r3, [r3, #8]
 8003aa6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003aae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	021a      	lsls	r2, r3, #8
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	431a      	orrs	r2, r3
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	4313      	orrs	r3, r2
 8003abc:	697a      	ldr	r2, [r7, #20]
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	697a      	ldr	r2, [r7, #20]
 8003ac6:	609a      	str	r2, [r3, #8]
}
 8003ac8:	bf00      	nop
 8003aca:	371c      	adds	r7, #28
 8003acc:	46bd      	mov	sp, r7
 8003ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad2:	4770      	bx	lr

08003ad4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b087      	sub	sp, #28
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	60f8      	str	r0, [r7, #12]
 8003adc:	60b9      	str	r1, [r7, #8]
 8003ade:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	f003 031f 	and.w	r3, r3, #31
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8003aec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	6a1a      	ldr	r2, [r3, #32]
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	43db      	mvns	r3, r3
 8003af6:	401a      	ands	r2, r3
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	6a1a      	ldr	r2, [r3, #32]
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	f003 031f 	and.w	r3, r3, #31
 8003b06:	6879      	ldr	r1, [r7, #4]
 8003b08:	fa01 f303 	lsl.w	r3, r1, r3
 8003b0c:	431a      	orrs	r2, r3
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	621a      	str	r2, [r3, #32]
}
 8003b12:	bf00      	nop
 8003b14:	371c      	adds	r7, #28
 8003b16:	46bd      	mov	sp, r7
 8003b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1c:	4770      	bx	lr
	...

08003b20 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b085      	sub	sp, #20
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
 8003b28:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	d101      	bne.n	8003b38 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003b34:	2302      	movs	r3, #2
 8003b36:	e05a      	b.n	8003bee <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2202      	movs	r2, #2
 8003b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b5e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	68fa      	ldr	r2, [r7, #12]
 8003b66:	4313      	orrs	r3, r2
 8003b68:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	68fa      	ldr	r2, [r7, #12]
 8003b70:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a21      	ldr	r2, [pc, #132]	; (8003bfc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d022      	beq.n	8003bc2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b84:	d01d      	beq.n	8003bc2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a1d      	ldr	r2, [pc, #116]	; (8003c00 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d018      	beq.n	8003bc2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a1b      	ldr	r2, [pc, #108]	; (8003c04 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d013      	beq.n	8003bc2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a1a      	ldr	r2, [pc, #104]	; (8003c08 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d00e      	beq.n	8003bc2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a18      	ldr	r2, [pc, #96]	; (8003c0c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d009      	beq.n	8003bc2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a17      	ldr	r2, [pc, #92]	; (8003c10 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d004      	beq.n	8003bc2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a15      	ldr	r2, [pc, #84]	; (8003c14 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d10c      	bne.n	8003bdc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003bc8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	68ba      	ldr	r2, [r7, #8]
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	68ba      	ldr	r2, [r7, #8]
 8003bda:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2201      	movs	r2, #1
 8003be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2200      	movs	r2, #0
 8003be8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003bec:	2300      	movs	r3, #0
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	3714      	adds	r7, #20
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf8:	4770      	bx	lr
 8003bfa:	bf00      	nop
 8003bfc:	40010000 	.word	0x40010000
 8003c00:	40000400 	.word	0x40000400
 8003c04:	40000800 	.word	0x40000800
 8003c08:	40000c00 	.word	0x40000c00
 8003c0c:	40010400 	.word	0x40010400
 8003c10:	40014000 	.word	0x40014000
 8003c14:	40001800 	.word	0x40001800

08003c18 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b085      	sub	sp, #20
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
 8003c20:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003c22:	2300      	movs	r3, #0
 8003c24:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	d101      	bne.n	8003c34 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003c30:	2302      	movs	r3, #2
 8003c32:	e03d      	b.n	8003cb0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2201      	movs	r2, #1
 8003c38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	68db      	ldr	r3, [r3, #12]
 8003c46:	4313      	orrs	r3, r2
 8003c48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	689b      	ldr	r3, [r3, #8]
 8003c54:	4313      	orrs	r3, r2
 8003c56:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	4313      	orrs	r3, r2
 8003c64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4313      	orrs	r3, r2
 8003c72:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	691b      	ldr	r3, [r3, #16]
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	695b      	ldr	r3, [r3, #20]
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	69db      	ldr	r3, [r3, #28]
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	68fa      	ldr	r2, [r7, #12]
 8003ca4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003cae:	2300      	movs	r3, #0
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	3714      	adds	r7, #20
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cba:	4770      	bx	lr

08003cbc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b082      	sub	sp, #8
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d101      	bne.n	8003cce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	e03f      	b.n	8003d4e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cd4:	b2db      	uxtb	r3, r3
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d106      	bne.n	8003ce8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ce2:	6878      	ldr	r0, [r7, #4]
 8003ce4:	f7fd f9fe 	bl	80010e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2224      	movs	r2, #36	; 0x24
 8003cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	68da      	ldr	r2, [r3, #12]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003cfe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003d00:	6878      	ldr	r0, [r7, #4]
 8003d02:	f000 f829 	bl	8003d58 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	691a      	ldr	r2, [r3, #16]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d14:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	695a      	ldr	r2, [r3, #20]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d24:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	68da      	ldr	r2, [r3, #12]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d34:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2220      	movs	r2, #32
 8003d40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2220      	movs	r2, #32
 8003d48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003d4c:	2300      	movs	r3, #0
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	3708      	adds	r7, #8
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}
	...

08003d58 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d5c:	b09f      	sub	sp, #124	; 0x7c
 8003d5e:	af00      	add	r7, sp, #0
 8003d60:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	691b      	ldr	r3, [r3, #16]
 8003d68:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003d6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d6e:	68d9      	ldr	r1, [r3, #12]
 8003d70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d72:	681a      	ldr	r2, [r3, #0]
 8003d74:	ea40 0301 	orr.w	r3, r0, r1
 8003d78:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003d7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d7c:	689a      	ldr	r2, [r3, #8]
 8003d7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d80:	691b      	ldr	r3, [r3, #16]
 8003d82:	431a      	orrs	r2, r3
 8003d84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d86:	695b      	ldr	r3, [r3, #20]
 8003d88:	431a      	orrs	r2, r3
 8003d8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d8c:	69db      	ldr	r3, [r3, #28]
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003d92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	68db      	ldr	r3, [r3, #12]
 8003d98:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003d9c:	f021 010c 	bic.w	r1, r1, #12
 8003da0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003da2:	681a      	ldr	r2, [r3, #0]
 8003da4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003da6:	430b      	orrs	r3, r1
 8003da8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003daa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	695b      	ldr	r3, [r3, #20]
 8003db0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003db4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003db6:	6999      	ldr	r1, [r3, #24]
 8003db8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dba:	681a      	ldr	r2, [r3, #0]
 8003dbc:	ea40 0301 	orr.w	r3, r0, r1
 8003dc0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003dc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	4bc5      	ldr	r3, [pc, #788]	; (80040dc <UART_SetConfig+0x384>)
 8003dc8:	429a      	cmp	r2, r3
 8003dca:	d004      	beq.n	8003dd6 <UART_SetConfig+0x7e>
 8003dcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dce:	681a      	ldr	r2, [r3, #0]
 8003dd0:	4bc3      	ldr	r3, [pc, #780]	; (80040e0 <UART_SetConfig+0x388>)
 8003dd2:	429a      	cmp	r2, r3
 8003dd4:	d103      	bne.n	8003dde <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003dd6:	f7fe f881 	bl	8001edc <HAL_RCC_GetPCLK2Freq>
 8003dda:	6778      	str	r0, [r7, #116]	; 0x74
 8003ddc:	e002      	b.n	8003de4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003dde:	f7fe f869 	bl	8001eb4 <HAL_RCC_GetPCLK1Freq>
 8003de2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003de4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003de6:	69db      	ldr	r3, [r3, #28]
 8003de8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003dec:	f040 80b6 	bne.w	8003f5c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003df0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003df2:	461c      	mov	r4, r3
 8003df4:	f04f 0500 	mov.w	r5, #0
 8003df8:	4622      	mov	r2, r4
 8003dfa:	462b      	mov	r3, r5
 8003dfc:	1891      	adds	r1, r2, r2
 8003dfe:	6439      	str	r1, [r7, #64]	; 0x40
 8003e00:	415b      	adcs	r3, r3
 8003e02:	647b      	str	r3, [r7, #68]	; 0x44
 8003e04:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003e08:	1912      	adds	r2, r2, r4
 8003e0a:	eb45 0303 	adc.w	r3, r5, r3
 8003e0e:	f04f 0000 	mov.w	r0, #0
 8003e12:	f04f 0100 	mov.w	r1, #0
 8003e16:	00d9      	lsls	r1, r3, #3
 8003e18:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003e1c:	00d0      	lsls	r0, r2, #3
 8003e1e:	4602      	mov	r2, r0
 8003e20:	460b      	mov	r3, r1
 8003e22:	1911      	adds	r1, r2, r4
 8003e24:	6639      	str	r1, [r7, #96]	; 0x60
 8003e26:	416b      	adcs	r3, r5
 8003e28:	667b      	str	r3, [r7, #100]	; 0x64
 8003e2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	461a      	mov	r2, r3
 8003e30:	f04f 0300 	mov.w	r3, #0
 8003e34:	1891      	adds	r1, r2, r2
 8003e36:	63b9      	str	r1, [r7, #56]	; 0x38
 8003e38:	415b      	adcs	r3, r3
 8003e3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e3c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003e40:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003e44:	f7fc f9de 	bl	8000204 <__aeabi_uldivmod>
 8003e48:	4602      	mov	r2, r0
 8003e4a:	460b      	mov	r3, r1
 8003e4c:	4ba5      	ldr	r3, [pc, #660]	; (80040e4 <UART_SetConfig+0x38c>)
 8003e4e:	fba3 2302 	umull	r2, r3, r3, r2
 8003e52:	095b      	lsrs	r3, r3, #5
 8003e54:	011e      	lsls	r6, r3, #4
 8003e56:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e58:	461c      	mov	r4, r3
 8003e5a:	f04f 0500 	mov.w	r5, #0
 8003e5e:	4622      	mov	r2, r4
 8003e60:	462b      	mov	r3, r5
 8003e62:	1891      	adds	r1, r2, r2
 8003e64:	6339      	str	r1, [r7, #48]	; 0x30
 8003e66:	415b      	adcs	r3, r3
 8003e68:	637b      	str	r3, [r7, #52]	; 0x34
 8003e6a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003e6e:	1912      	adds	r2, r2, r4
 8003e70:	eb45 0303 	adc.w	r3, r5, r3
 8003e74:	f04f 0000 	mov.w	r0, #0
 8003e78:	f04f 0100 	mov.w	r1, #0
 8003e7c:	00d9      	lsls	r1, r3, #3
 8003e7e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003e82:	00d0      	lsls	r0, r2, #3
 8003e84:	4602      	mov	r2, r0
 8003e86:	460b      	mov	r3, r1
 8003e88:	1911      	adds	r1, r2, r4
 8003e8a:	65b9      	str	r1, [r7, #88]	; 0x58
 8003e8c:	416b      	adcs	r3, r5
 8003e8e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003e90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	461a      	mov	r2, r3
 8003e96:	f04f 0300 	mov.w	r3, #0
 8003e9a:	1891      	adds	r1, r2, r2
 8003e9c:	62b9      	str	r1, [r7, #40]	; 0x28
 8003e9e:	415b      	adcs	r3, r3
 8003ea0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ea2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003ea6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003eaa:	f7fc f9ab 	bl	8000204 <__aeabi_uldivmod>
 8003eae:	4602      	mov	r2, r0
 8003eb0:	460b      	mov	r3, r1
 8003eb2:	4b8c      	ldr	r3, [pc, #560]	; (80040e4 <UART_SetConfig+0x38c>)
 8003eb4:	fba3 1302 	umull	r1, r3, r3, r2
 8003eb8:	095b      	lsrs	r3, r3, #5
 8003eba:	2164      	movs	r1, #100	; 0x64
 8003ebc:	fb01 f303 	mul.w	r3, r1, r3
 8003ec0:	1ad3      	subs	r3, r2, r3
 8003ec2:	00db      	lsls	r3, r3, #3
 8003ec4:	3332      	adds	r3, #50	; 0x32
 8003ec6:	4a87      	ldr	r2, [pc, #540]	; (80040e4 <UART_SetConfig+0x38c>)
 8003ec8:	fba2 2303 	umull	r2, r3, r2, r3
 8003ecc:	095b      	lsrs	r3, r3, #5
 8003ece:	005b      	lsls	r3, r3, #1
 8003ed0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003ed4:	441e      	add	r6, r3
 8003ed6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ed8:	4618      	mov	r0, r3
 8003eda:	f04f 0100 	mov.w	r1, #0
 8003ede:	4602      	mov	r2, r0
 8003ee0:	460b      	mov	r3, r1
 8003ee2:	1894      	adds	r4, r2, r2
 8003ee4:	623c      	str	r4, [r7, #32]
 8003ee6:	415b      	adcs	r3, r3
 8003ee8:	627b      	str	r3, [r7, #36]	; 0x24
 8003eea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003eee:	1812      	adds	r2, r2, r0
 8003ef0:	eb41 0303 	adc.w	r3, r1, r3
 8003ef4:	f04f 0400 	mov.w	r4, #0
 8003ef8:	f04f 0500 	mov.w	r5, #0
 8003efc:	00dd      	lsls	r5, r3, #3
 8003efe:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003f02:	00d4      	lsls	r4, r2, #3
 8003f04:	4622      	mov	r2, r4
 8003f06:	462b      	mov	r3, r5
 8003f08:	1814      	adds	r4, r2, r0
 8003f0a:	653c      	str	r4, [r7, #80]	; 0x50
 8003f0c:	414b      	adcs	r3, r1
 8003f0e:	657b      	str	r3, [r7, #84]	; 0x54
 8003f10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	461a      	mov	r2, r3
 8003f16:	f04f 0300 	mov.w	r3, #0
 8003f1a:	1891      	adds	r1, r2, r2
 8003f1c:	61b9      	str	r1, [r7, #24]
 8003f1e:	415b      	adcs	r3, r3
 8003f20:	61fb      	str	r3, [r7, #28]
 8003f22:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003f26:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003f2a:	f7fc f96b 	bl	8000204 <__aeabi_uldivmod>
 8003f2e:	4602      	mov	r2, r0
 8003f30:	460b      	mov	r3, r1
 8003f32:	4b6c      	ldr	r3, [pc, #432]	; (80040e4 <UART_SetConfig+0x38c>)
 8003f34:	fba3 1302 	umull	r1, r3, r3, r2
 8003f38:	095b      	lsrs	r3, r3, #5
 8003f3a:	2164      	movs	r1, #100	; 0x64
 8003f3c:	fb01 f303 	mul.w	r3, r1, r3
 8003f40:	1ad3      	subs	r3, r2, r3
 8003f42:	00db      	lsls	r3, r3, #3
 8003f44:	3332      	adds	r3, #50	; 0x32
 8003f46:	4a67      	ldr	r2, [pc, #412]	; (80040e4 <UART_SetConfig+0x38c>)
 8003f48:	fba2 2303 	umull	r2, r3, r2, r3
 8003f4c:	095b      	lsrs	r3, r3, #5
 8003f4e:	f003 0207 	and.w	r2, r3, #7
 8003f52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4432      	add	r2, r6
 8003f58:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003f5a:	e0b9      	b.n	80040d0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003f5c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f5e:	461c      	mov	r4, r3
 8003f60:	f04f 0500 	mov.w	r5, #0
 8003f64:	4622      	mov	r2, r4
 8003f66:	462b      	mov	r3, r5
 8003f68:	1891      	adds	r1, r2, r2
 8003f6a:	6139      	str	r1, [r7, #16]
 8003f6c:	415b      	adcs	r3, r3
 8003f6e:	617b      	str	r3, [r7, #20]
 8003f70:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003f74:	1912      	adds	r2, r2, r4
 8003f76:	eb45 0303 	adc.w	r3, r5, r3
 8003f7a:	f04f 0000 	mov.w	r0, #0
 8003f7e:	f04f 0100 	mov.w	r1, #0
 8003f82:	00d9      	lsls	r1, r3, #3
 8003f84:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003f88:	00d0      	lsls	r0, r2, #3
 8003f8a:	4602      	mov	r2, r0
 8003f8c:	460b      	mov	r3, r1
 8003f8e:	eb12 0804 	adds.w	r8, r2, r4
 8003f92:	eb43 0905 	adc.w	r9, r3, r5
 8003f96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	f04f 0100 	mov.w	r1, #0
 8003fa0:	f04f 0200 	mov.w	r2, #0
 8003fa4:	f04f 0300 	mov.w	r3, #0
 8003fa8:	008b      	lsls	r3, r1, #2
 8003faa:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003fae:	0082      	lsls	r2, r0, #2
 8003fb0:	4640      	mov	r0, r8
 8003fb2:	4649      	mov	r1, r9
 8003fb4:	f7fc f926 	bl	8000204 <__aeabi_uldivmod>
 8003fb8:	4602      	mov	r2, r0
 8003fba:	460b      	mov	r3, r1
 8003fbc:	4b49      	ldr	r3, [pc, #292]	; (80040e4 <UART_SetConfig+0x38c>)
 8003fbe:	fba3 2302 	umull	r2, r3, r3, r2
 8003fc2:	095b      	lsrs	r3, r3, #5
 8003fc4:	011e      	lsls	r6, r3, #4
 8003fc6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f04f 0100 	mov.w	r1, #0
 8003fce:	4602      	mov	r2, r0
 8003fd0:	460b      	mov	r3, r1
 8003fd2:	1894      	adds	r4, r2, r2
 8003fd4:	60bc      	str	r4, [r7, #8]
 8003fd6:	415b      	adcs	r3, r3
 8003fd8:	60fb      	str	r3, [r7, #12]
 8003fda:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003fde:	1812      	adds	r2, r2, r0
 8003fe0:	eb41 0303 	adc.w	r3, r1, r3
 8003fe4:	f04f 0400 	mov.w	r4, #0
 8003fe8:	f04f 0500 	mov.w	r5, #0
 8003fec:	00dd      	lsls	r5, r3, #3
 8003fee:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003ff2:	00d4      	lsls	r4, r2, #3
 8003ff4:	4622      	mov	r2, r4
 8003ff6:	462b      	mov	r3, r5
 8003ff8:	1814      	adds	r4, r2, r0
 8003ffa:	64bc      	str	r4, [r7, #72]	; 0x48
 8003ffc:	414b      	adcs	r3, r1
 8003ffe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004000:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	4618      	mov	r0, r3
 8004006:	f04f 0100 	mov.w	r1, #0
 800400a:	f04f 0200 	mov.w	r2, #0
 800400e:	f04f 0300 	mov.w	r3, #0
 8004012:	008b      	lsls	r3, r1, #2
 8004014:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004018:	0082      	lsls	r2, r0, #2
 800401a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800401e:	f7fc f8f1 	bl	8000204 <__aeabi_uldivmod>
 8004022:	4602      	mov	r2, r0
 8004024:	460b      	mov	r3, r1
 8004026:	4b2f      	ldr	r3, [pc, #188]	; (80040e4 <UART_SetConfig+0x38c>)
 8004028:	fba3 1302 	umull	r1, r3, r3, r2
 800402c:	095b      	lsrs	r3, r3, #5
 800402e:	2164      	movs	r1, #100	; 0x64
 8004030:	fb01 f303 	mul.w	r3, r1, r3
 8004034:	1ad3      	subs	r3, r2, r3
 8004036:	011b      	lsls	r3, r3, #4
 8004038:	3332      	adds	r3, #50	; 0x32
 800403a:	4a2a      	ldr	r2, [pc, #168]	; (80040e4 <UART_SetConfig+0x38c>)
 800403c:	fba2 2303 	umull	r2, r3, r2, r3
 8004040:	095b      	lsrs	r3, r3, #5
 8004042:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004046:	441e      	add	r6, r3
 8004048:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800404a:	4618      	mov	r0, r3
 800404c:	f04f 0100 	mov.w	r1, #0
 8004050:	4602      	mov	r2, r0
 8004052:	460b      	mov	r3, r1
 8004054:	1894      	adds	r4, r2, r2
 8004056:	603c      	str	r4, [r7, #0]
 8004058:	415b      	adcs	r3, r3
 800405a:	607b      	str	r3, [r7, #4]
 800405c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004060:	1812      	adds	r2, r2, r0
 8004062:	eb41 0303 	adc.w	r3, r1, r3
 8004066:	f04f 0400 	mov.w	r4, #0
 800406a:	f04f 0500 	mov.w	r5, #0
 800406e:	00dd      	lsls	r5, r3, #3
 8004070:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004074:	00d4      	lsls	r4, r2, #3
 8004076:	4622      	mov	r2, r4
 8004078:	462b      	mov	r3, r5
 800407a:	eb12 0a00 	adds.w	sl, r2, r0
 800407e:	eb43 0b01 	adc.w	fp, r3, r1
 8004082:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	4618      	mov	r0, r3
 8004088:	f04f 0100 	mov.w	r1, #0
 800408c:	f04f 0200 	mov.w	r2, #0
 8004090:	f04f 0300 	mov.w	r3, #0
 8004094:	008b      	lsls	r3, r1, #2
 8004096:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800409a:	0082      	lsls	r2, r0, #2
 800409c:	4650      	mov	r0, sl
 800409e:	4659      	mov	r1, fp
 80040a0:	f7fc f8b0 	bl	8000204 <__aeabi_uldivmod>
 80040a4:	4602      	mov	r2, r0
 80040a6:	460b      	mov	r3, r1
 80040a8:	4b0e      	ldr	r3, [pc, #56]	; (80040e4 <UART_SetConfig+0x38c>)
 80040aa:	fba3 1302 	umull	r1, r3, r3, r2
 80040ae:	095b      	lsrs	r3, r3, #5
 80040b0:	2164      	movs	r1, #100	; 0x64
 80040b2:	fb01 f303 	mul.w	r3, r1, r3
 80040b6:	1ad3      	subs	r3, r2, r3
 80040b8:	011b      	lsls	r3, r3, #4
 80040ba:	3332      	adds	r3, #50	; 0x32
 80040bc:	4a09      	ldr	r2, [pc, #36]	; (80040e4 <UART_SetConfig+0x38c>)
 80040be:	fba2 2303 	umull	r2, r3, r2, r3
 80040c2:	095b      	lsrs	r3, r3, #5
 80040c4:	f003 020f 	and.w	r2, r3, #15
 80040c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4432      	add	r2, r6
 80040ce:	609a      	str	r2, [r3, #8]
}
 80040d0:	bf00      	nop
 80040d2:	377c      	adds	r7, #124	; 0x7c
 80040d4:	46bd      	mov	sp, r7
 80040d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040da:	bf00      	nop
 80040dc:	40011000 	.word	0x40011000
 80040e0:	40011400 	.word	0x40011400
 80040e4:	51eb851f 	.word	0x51eb851f

080040e8 <__libc_init_array>:
 80040e8:	b570      	push	{r4, r5, r6, lr}
 80040ea:	4d0d      	ldr	r5, [pc, #52]	; (8004120 <__libc_init_array+0x38>)
 80040ec:	4c0d      	ldr	r4, [pc, #52]	; (8004124 <__libc_init_array+0x3c>)
 80040ee:	1b64      	subs	r4, r4, r5
 80040f0:	10a4      	asrs	r4, r4, #2
 80040f2:	2600      	movs	r6, #0
 80040f4:	42a6      	cmp	r6, r4
 80040f6:	d109      	bne.n	800410c <__libc_init_array+0x24>
 80040f8:	4d0b      	ldr	r5, [pc, #44]	; (8004128 <__libc_init_array+0x40>)
 80040fa:	4c0c      	ldr	r4, [pc, #48]	; (800412c <__libc_init_array+0x44>)
 80040fc:	f000 f820 	bl	8004140 <_init>
 8004100:	1b64      	subs	r4, r4, r5
 8004102:	10a4      	asrs	r4, r4, #2
 8004104:	2600      	movs	r6, #0
 8004106:	42a6      	cmp	r6, r4
 8004108:	d105      	bne.n	8004116 <__libc_init_array+0x2e>
 800410a:	bd70      	pop	{r4, r5, r6, pc}
 800410c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004110:	4798      	blx	r3
 8004112:	3601      	adds	r6, #1
 8004114:	e7ee      	b.n	80040f4 <__libc_init_array+0xc>
 8004116:	f855 3b04 	ldr.w	r3, [r5], #4
 800411a:	4798      	blx	r3
 800411c:	3601      	adds	r6, #1
 800411e:	e7f2      	b.n	8004106 <__libc_init_array+0x1e>
 8004120:	08004178 	.word	0x08004178
 8004124:	08004178 	.word	0x08004178
 8004128:	08004178 	.word	0x08004178
 800412c:	0800417c 	.word	0x0800417c

08004130 <memset>:
 8004130:	4402      	add	r2, r0
 8004132:	4603      	mov	r3, r0
 8004134:	4293      	cmp	r3, r2
 8004136:	d100      	bne.n	800413a <memset+0xa>
 8004138:	4770      	bx	lr
 800413a:	f803 1b01 	strb.w	r1, [r3], #1
 800413e:	e7f9      	b.n	8004134 <memset+0x4>

08004140 <_init>:
 8004140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004142:	bf00      	nop
 8004144:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004146:	bc08      	pop	{r3}
 8004148:	469e      	mov	lr, r3
 800414a:	4770      	bx	lr

0800414c <_fini>:
 800414c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800414e:	bf00      	nop
 8004150:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004152:	bc08      	pop	{r3}
 8004154:	469e      	mov	lr, r3
 8004156:	4770      	bx	lr
