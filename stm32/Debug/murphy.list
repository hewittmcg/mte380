
murphy.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009f1c  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  0800a0e0  0800a0e0  0001a0e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a0f8  0800a0f8  00020344  2**0
                  CONTENTS
  4 .ARM          00000008  0800a0f8  0800a0f8  0001a0f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a100  0800a100  00020344  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a100  0800a100  0001a100  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a104  0800a104  0001a104  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000344  20000000  0800a108  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000784  20000344  0800a44c  00020344  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000ac8  0800a44c  00020ac8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020344  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021706  00000000  00000000  00020374  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030ec  00000000  00000000  00041a7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001910  00000000  00000000  00044b68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001810  00000000  00000000  00046478  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024be1  00000000  00000000  00047c88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e3d6  00000000  00000000  0006c869  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000de7bf  00000000  00000000  0008ac3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001693fe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006da0  00000000  00000000  00169454  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000344 	.word	0x20000344
 80001e0:	00000000 	.word	0x00000000
 80001e4:	0800a0c8 	.word	0x0800a0c8

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000348 	.word	0x20000348
 8000200:	0800a0c8 	.word	0x0800a0c8

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96e 	b.w	80004f8 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468c      	mov	ip, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	f040 8083 	bne.w	800034a <__udivmoddi4+0x116>
 8000244:	428a      	cmp	r2, r1
 8000246:	4617      	mov	r7, r2
 8000248:	d947      	bls.n	80002da <__udivmoddi4+0xa6>
 800024a:	fab2 f282 	clz	r2, r2
 800024e:	b142      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 8000250:	f1c2 0020 	rsb	r0, r2, #32
 8000254:	fa24 f000 	lsr.w	r0, r4, r0
 8000258:	4091      	lsls	r1, r2
 800025a:	4097      	lsls	r7, r2
 800025c:	ea40 0c01 	orr.w	ip, r0, r1
 8000260:	4094      	lsls	r4, r2
 8000262:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000266:	0c23      	lsrs	r3, r4, #16
 8000268:	fbbc f6f8 	udiv	r6, ip, r8
 800026c:	fa1f fe87 	uxth.w	lr, r7
 8000270:	fb08 c116 	mls	r1, r8, r6, ip
 8000274:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000278:	fb06 f10e 	mul.w	r1, r6, lr
 800027c:	4299      	cmp	r1, r3
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x60>
 8000280:	18fb      	adds	r3, r7, r3
 8000282:	f106 30ff 	add.w	r0, r6, #4294967295
 8000286:	f080 8119 	bcs.w	80004bc <__udivmoddi4+0x288>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 8116 	bls.w	80004bc <__udivmoddi4+0x288>
 8000290:	3e02      	subs	r6, #2
 8000292:	443b      	add	r3, r7
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0f8 	udiv	r0, r3, r8
 800029c:	fb08 3310 	mls	r3, r8, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 fe0e 	mul.w	lr, r0, lr
 80002a8:	45a6      	cmp	lr, r4
 80002aa:	d909      	bls.n	80002c0 <__udivmoddi4+0x8c>
 80002ac:	193c      	adds	r4, r7, r4
 80002ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b2:	f080 8105 	bcs.w	80004c0 <__udivmoddi4+0x28c>
 80002b6:	45a6      	cmp	lr, r4
 80002b8:	f240 8102 	bls.w	80004c0 <__udivmoddi4+0x28c>
 80002bc:	3802      	subs	r0, #2
 80002be:	443c      	add	r4, r7
 80002c0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c4:	eba4 040e 	sub.w	r4, r4, lr
 80002c8:	2600      	movs	r6, #0
 80002ca:	b11d      	cbz	r5, 80002d4 <__udivmoddi4+0xa0>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c5 4300 	strd	r4, r3, [r5]
 80002d4:	4631      	mov	r1, r6
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xaa>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f282 	clz	r2, r2
 80002e2:	2a00      	cmp	r2, #0
 80002e4:	d150      	bne.n	8000388 <__udivmoddi4+0x154>
 80002e6:	1bcb      	subs	r3, r1, r7
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	fa1f f887 	uxth.w	r8, r7
 80002f0:	2601      	movs	r6, #1
 80002f2:	fbb3 fcfe 	udiv	ip, r3, lr
 80002f6:	0c21      	lsrs	r1, r4, #16
 80002f8:	fb0e 331c 	mls	r3, lr, ip, r3
 80002fc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000300:	fb08 f30c 	mul.w	r3, r8, ip
 8000304:	428b      	cmp	r3, r1
 8000306:	d907      	bls.n	8000318 <__udivmoddi4+0xe4>
 8000308:	1879      	adds	r1, r7, r1
 800030a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800030e:	d202      	bcs.n	8000316 <__udivmoddi4+0xe2>
 8000310:	428b      	cmp	r3, r1
 8000312:	f200 80e9 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 8000316:	4684      	mov	ip, r0
 8000318:	1ac9      	subs	r1, r1, r3
 800031a:	b2a3      	uxth	r3, r4
 800031c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000320:	fb0e 1110 	mls	r1, lr, r0, r1
 8000324:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000328:	fb08 f800 	mul.w	r8, r8, r0
 800032c:	45a0      	cmp	r8, r4
 800032e:	d907      	bls.n	8000340 <__udivmoddi4+0x10c>
 8000330:	193c      	adds	r4, r7, r4
 8000332:	f100 33ff 	add.w	r3, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x10a>
 8000338:	45a0      	cmp	r8, r4
 800033a:	f200 80d9 	bhi.w	80004f0 <__udivmoddi4+0x2bc>
 800033e:	4618      	mov	r0, r3
 8000340:	eba4 0408 	sub.w	r4, r4, r8
 8000344:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000348:	e7bf      	b.n	80002ca <__udivmoddi4+0x96>
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0x12e>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80b1 	beq.w	80004b6 <__udivmoddi4+0x282>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x1cc>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0x140>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80b8 	bhi.w	80004e4 <__udivmoddi4+0x2b0>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0103 	sbc.w	r1, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	468c      	mov	ip, r1
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0a8      	beq.n	80002d4 <__udivmoddi4+0xa0>
 8000382:	e9c5 4c00 	strd	r4, ip, [r5]
 8000386:	e7a5      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000388:	f1c2 0320 	rsb	r3, r2, #32
 800038c:	fa20 f603 	lsr.w	r6, r0, r3
 8000390:	4097      	lsls	r7, r2
 8000392:	fa01 f002 	lsl.w	r0, r1, r2
 8000396:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800039a:	40d9      	lsrs	r1, r3
 800039c:	4330      	orrs	r0, r6
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	fbb1 f6fe 	udiv	r6, r1, lr
 80003a4:	fa1f f887 	uxth.w	r8, r7
 80003a8:	fb0e 1116 	mls	r1, lr, r6, r1
 80003ac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b0:	fb06 f108 	mul.w	r1, r6, r8
 80003b4:	4299      	cmp	r1, r3
 80003b6:	fa04 f402 	lsl.w	r4, r4, r2
 80003ba:	d909      	bls.n	80003d0 <__udivmoddi4+0x19c>
 80003bc:	18fb      	adds	r3, r7, r3
 80003be:	f106 3cff 	add.w	ip, r6, #4294967295
 80003c2:	f080 808d 	bcs.w	80004e0 <__udivmoddi4+0x2ac>
 80003c6:	4299      	cmp	r1, r3
 80003c8:	f240 808a 	bls.w	80004e0 <__udivmoddi4+0x2ac>
 80003cc:	3e02      	subs	r6, #2
 80003ce:	443b      	add	r3, r7
 80003d0:	1a5b      	subs	r3, r3, r1
 80003d2:	b281      	uxth	r1, r0
 80003d4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003d8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003dc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003e0:	fb00 f308 	mul.w	r3, r0, r8
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d907      	bls.n	80003f8 <__udivmoddi4+0x1c4>
 80003e8:	1879      	adds	r1, r7, r1
 80003ea:	f100 3cff 	add.w	ip, r0, #4294967295
 80003ee:	d273      	bcs.n	80004d8 <__udivmoddi4+0x2a4>
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d971      	bls.n	80004d8 <__udivmoddi4+0x2a4>
 80003f4:	3802      	subs	r0, #2
 80003f6:	4439      	add	r1, r7
 80003f8:	1acb      	subs	r3, r1, r3
 80003fa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003fe:	e778      	b.n	80002f2 <__udivmoddi4+0xbe>
 8000400:	f1c6 0c20 	rsb	ip, r6, #32
 8000404:	fa03 f406 	lsl.w	r4, r3, r6
 8000408:	fa22 f30c 	lsr.w	r3, r2, ip
 800040c:	431c      	orrs	r4, r3
 800040e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800041a:	fa21 f10c 	lsr.w	r1, r1, ip
 800041e:	431f      	orrs	r7, r3
 8000420:	0c3b      	lsrs	r3, r7, #16
 8000422:	fbb1 f9fe 	udiv	r9, r1, lr
 8000426:	fa1f f884 	uxth.w	r8, r4
 800042a:	fb0e 1119 	mls	r1, lr, r9, r1
 800042e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000432:	fb09 fa08 	mul.w	sl, r9, r8
 8000436:	458a      	cmp	sl, r1
 8000438:	fa02 f206 	lsl.w	r2, r2, r6
 800043c:	fa00 f306 	lsl.w	r3, r0, r6
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x220>
 8000442:	1861      	adds	r1, r4, r1
 8000444:	f109 30ff 	add.w	r0, r9, #4294967295
 8000448:	d248      	bcs.n	80004dc <__udivmoddi4+0x2a8>
 800044a:	458a      	cmp	sl, r1
 800044c:	d946      	bls.n	80004dc <__udivmoddi4+0x2a8>
 800044e:	f1a9 0902 	sub.w	r9, r9, #2
 8000452:	4421      	add	r1, r4
 8000454:	eba1 010a 	sub.w	r1, r1, sl
 8000458:	b2bf      	uxth	r7, r7
 800045a:	fbb1 f0fe 	udiv	r0, r1, lr
 800045e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000462:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000466:	fb00 f808 	mul.w	r8, r0, r8
 800046a:	45b8      	cmp	r8, r7
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x24a>
 800046e:	19e7      	adds	r7, r4, r7
 8000470:	f100 31ff 	add.w	r1, r0, #4294967295
 8000474:	d22e      	bcs.n	80004d4 <__udivmoddi4+0x2a0>
 8000476:	45b8      	cmp	r8, r7
 8000478:	d92c      	bls.n	80004d4 <__udivmoddi4+0x2a0>
 800047a:	3802      	subs	r0, #2
 800047c:	4427      	add	r7, r4
 800047e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000482:	eba7 0708 	sub.w	r7, r7, r8
 8000486:	fba0 8902 	umull	r8, r9, r0, r2
 800048a:	454f      	cmp	r7, r9
 800048c:	46c6      	mov	lr, r8
 800048e:	4649      	mov	r1, r9
 8000490:	d31a      	bcc.n	80004c8 <__udivmoddi4+0x294>
 8000492:	d017      	beq.n	80004c4 <__udivmoddi4+0x290>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x27a>
 8000496:	ebb3 020e 	subs.w	r2, r3, lr
 800049a:	eb67 0701 	sbc.w	r7, r7, r1
 800049e:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004a2:	40f2      	lsrs	r2, r6
 80004a4:	ea4c 0202 	orr.w	r2, ip, r2
 80004a8:	40f7      	lsrs	r7, r6
 80004aa:	e9c5 2700 	strd	r2, r7, [r5]
 80004ae:	2600      	movs	r6, #0
 80004b0:	4631      	mov	r1, r6
 80004b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b6:	462e      	mov	r6, r5
 80004b8:	4628      	mov	r0, r5
 80004ba:	e70b      	b.n	80002d4 <__udivmoddi4+0xa0>
 80004bc:	4606      	mov	r6, r0
 80004be:	e6e9      	b.n	8000294 <__udivmoddi4+0x60>
 80004c0:	4618      	mov	r0, r3
 80004c2:	e6fd      	b.n	80002c0 <__udivmoddi4+0x8c>
 80004c4:	4543      	cmp	r3, r8
 80004c6:	d2e5      	bcs.n	8000494 <__udivmoddi4+0x260>
 80004c8:	ebb8 0e02 	subs.w	lr, r8, r2
 80004cc:	eb69 0104 	sbc.w	r1, r9, r4
 80004d0:	3801      	subs	r0, #1
 80004d2:	e7df      	b.n	8000494 <__udivmoddi4+0x260>
 80004d4:	4608      	mov	r0, r1
 80004d6:	e7d2      	b.n	800047e <__udivmoddi4+0x24a>
 80004d8:	4660      	mov	r0, ip
 80004da:	e78d      	b.n	80003f8 <__udivmoddi4+0x1c4>
 80004dc:	4681      	mov	r9, r0
 80004de:	e7b9      	b.n	8000454 <__udivmoddi4+0x220>
 80004e0:	4666      	mov	r6, ip
 80004e2:	e775      	b.n	80003d0 <__udivmoddi4+0x19c>
 80004e4:	4630      	mov	r0, r6
 80004e6:	e74a      	b.n	800037e <__udivmoddi4+0x14a>
 80004e8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004ec:	4439      	add	r1, r7
 80004ee:	e713      	b.n	8000318 <__udivmoddi4+0xe4>
 80004f0:	3802      	subs	r0, #2
 80004f2:	443c      	add	r4, r7
 80004f4:	e724      	b.n	8000340 <__udivmoddi4+0x10c>
 80004f6:	bf00      	nop

080004f8 <__aeabi_idiv0>:
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <set_motor_direction>:
// CCR register goes from 0 to 0xffff
#define SPEED_PERCENT_TO_CCR 0xffff

#define PERCENT_TO_DEC 100

bool set_motor_direction(MotorController *mc, MotorDir dir) {
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b082      	sub	sp, #8
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]
 8000504:	460b      	mov	r3, r1
 8000506:	70fb      	strb	r3, [r7, #3]
	if(dir == MOTOR_DIR_FORWARD) {
 8000508:	78fb      	ldrb	r3, [r7, #3]
 800050a:	2b00      	cmp	r3, #0
 800050c:	d112      	bne.n	8000534 <set_motor_direction+0x38>
		HAL_GPIO_WritePin(mc->in1_pin.port, mc->in1_pin.pin, GPIO_PIN_RESET);
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	6858      	ldr	r0, [r3, #4]
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	b29b      	uxth	r3, r3
 8000518:	2200      	movs	r2, #0
 800051a:	4619      	mov	r1, r3
 800051c:	f001 fbe2 	bl	8001ce4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(mc->in2_pin.port, mc->in2_pin.pin, GPIO_PIN_SET);
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	68d8      	ldr	r0, [r3, #12]
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	689b      	ldr	r3, [r3, #8]
 8000528:	b29b      	uxth	r3, r3
 800052a:	2201      	movs	r2, #1
 800052c:	4619      	mov	r1, r3
 800052e:	f001 fbd9 	bl	8001ce4 <HAL_GPIO_WritePin>
 8000532:	e02a      	b.n	800058a <set_motor_direction+0x8e>
	} else if(dir == MOTOR_DIR_BACKWARD) {
 8000534:	78fb      	ldrb	r3, [r7, #3]
 8000536:	2b01      	cmp	r3, #1
 8000538:	d112      	bne.n	8000560 <set_motor_direction+0x64>
		HAL_GPIO_WritePin(mc->in1_pin.port, mc->in1_pin.pin, GPIO_PIN_SET);
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	6858      	ldr	r0, [r3, #4]
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	b29b      	uxth	r3, r3
 8000544:	2201      	movs	r2, #1
 8000546:	4619      	mov	r1, r3
 8000548:	f001 fbcc 	bl	8001ce4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(mc->in2_pin.port, mc->in2_pin.pin, GPIO_PIN_RESET);
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	68d8      	ldr	r0, [r3, #12]
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	689b      	ldr	r3, [r3, #8]
 8000554:	b29b      	uxth	r3, r3
 8000556:	2200      	movs	r2, #0
 8000558:	4619      	mov	r1, r3
 800055a:	f001 fbc3 	bl	8001ce4 <HAL_GPIO_WritePin>
 800055e:	e014      	b.n	800058a <set_motor_direction+0x8e>
	} else if(dir == MOTOR_DIR_OFF) {
 8000560:	78fb      	ldrb	r3, [r7, #3]
 8000562:	2b02      	cmp	r3, #2
 8000564:	d111      	bne.n	800058a <set_motor_direction+0x8e>
		// TODO: Not sure if this is correct
		HAL_GPIO_WritePin(mc->in1_pin.port, mc->in1_pin.pin, GPIO_PIN_RESET);
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	6858      	ldr	r0, [r3, #4]
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	b29b      	uxth	r3, r3
 8000570:	2200      	movs	r2, #0
 8000572:	4619      	mov	r1, r3
 8000574:	f001 fbb6 	bl	8001ce4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(mc->in2_pin.port, mc->in2_pin.pin, GPIO_PIN_RESET);
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	68d8      	ldr	r0, [r3, #12]
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	689b      	ldr	r3, [r3, #8]
 8000580:	b29b      	uxth	r3, r3
 8000582:	2200      	movs	r2, #0
 8000584:	4619      	mov	r1, r3
 8000586:	f001 fbad 	bl	8001ce4 <HAL_GPIO_WritePin>
	}
	return true;
 800058a:	2301      	movs	r3, #1
}
 800058c:	4618      	mov	r0, r3
 800058e:	3708      	adds	r7, #8
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}

08000594 <motor_init>:
	*(mc->en_pin.ccr_ptr) = ccr_val;
	
	return true;
}

bool motor_init(MotorController *mc) {
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
	set_motor_direction(mc, MOTOR_DIR_OFF);
 800059c:	2102      	movs	r1, #2
 800059e:	6878      	ldr	r0, [r7, #4]
 80005a0:	f7ff ffac 	bl	80004fc <set_motor_direction>

	HAL_TIM_PWM_Start(mc->en_pin.tim_handle, mc->en_pin.tim_channel);
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	691a      	ldr	r2, [r3, #16]
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	695b      	ldr	r3, [r3, #20]
 80005ac:	4619      	mov	r1, r3
 80005ae:	4610      	mov	r0, r2
 80005b0:	f003 fd04 	bl	8003fbc <HAL_TIM_PWM_Start>
	return true;
 80005b4:	2301      	movs	r3, #1
}
 80005b6:	4618      	mov	r0, r3
 80005b8:	3708      	adds	r7, #8
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}

080005be <TOF_Init>:
VL53L0X_Dev_t  vl53l0x_2; // bottom left
VL53L0X_DEV    DevI2C2 = &vl53l0x_2;
VL53L0X_Dev_t  vl53l0x_3; // bottom right
VL53L0X_DEV    DevI2C3 = &vl53l0x_3;

void TOF_Init(VL53L0X_DEV dev, struct TOF_Calibration tof){
 80005be:	b084      	sub	sp, #16
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b082      	sub	sp, #8
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
 80005c8:	f107 0014 	add.w	r0, r7, #20
 80005cc:	e880 000e 	stmia.w	r0, {r1, r2, r3}

	// VL53L0X init for Single Measurement

	VL53L0X_WaitDeviceBooted( dev );
 80005d0:	6878      	ldr	r0, [r7, #4]
 80005d2:	f005 f833 	bl	800563c <VL53L0X_WaitDeviceBooted>
	VL53L0X_DataInit( dev );
 80005d6:	6878      	ldr	r0, [r7, #4]
 80005d8:	f004 fd4a 	bl	8005070 <VL53L0X_DataInit>
	VL53L0X_StaticInit( dev );
 80005dc:	6878      	ldr	r0, [r7, #4]
 80005de:	f004 feab 	bl	8005338 <VL53L0X_StaticInit>
	VL53L0X_PerformRefCalibration(dev, &tof.VhvSettings, &tof.PhaseCal);
 80005e2:	f107 0314 	add.w	r3, r7, #20
 80005e6:	1d9a      	adds	r2, r3, #6
 80005e8:	f107 0314 	add.w	r3, r7, #20
 80005ec:	3305      	adds	r3, #5
 80005ee:	4619      	mov	r1, r3
 80005f0:	6878      	ldr	r0, [r7, #4]
 80005f2:	f005 fd43 	bl	800607c <VL53L0X_PerformRefCalibration>
	VL53L0X_PerformRefSpadManagement(dev, &tof.refSpadCount, &tof.isApertureSpads);
 80005f6:	f107 0314 	add.w	r3, r7, #20
 80005fa:	1d1a      	adds	r2, r3, #4
 80005fc:	f107 0314 	add.w	r3, r7, #20
 8000600:	4619      	mov	r1, r3
 8000602:	6878      	ldr	r0, [r7, #4]
 8000604:	f006 f9c8 	bl	8006998 <VL53L0X_PerformRefSpadManagement>
	VL53L0X_SetDeviceMode(dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 8000608:	2100      	movs	r1, #0
 800060a:	6878      	ldr	r0, [r7, #4]
 800060c:	f005 f8b4 	bl	8005778 <VL53L0X_SetDeviceMode>

	// Enable/Disable Sigma and Signal check
	VL53L0X_SetLimitCheckEnable(dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, 1);
 8000610:	2201      	movs	r2, #1
 8000612:	2100      	movs	r1, #0
 8000614:	6878      	ldr	r0, [r7, #4]
 8000616:	f005 fb2b 	bl	8005c70 <VL53L0X_SetLimitCheckEnable>
	VL53L0X_SetLimitCheckEnable(dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, 1);
 800061a:	2201      	movs	r2, #1
 800061c:	2101      	movs	r1, #1
 800061e:	6878      	ldr	r0, [r7, #4]
 8000620:	f005 fb26 	bl	8005c70 <VL53L0X_SetLimitCheckEnable>
	VL53L0X_SetLimitCheckValue(dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, (FixPoint1616_t)(0.1*65536));
 8000624:	f641 1299 	movw	r2, #6553	; 0x1999
 8000628:	2101      	movs	r1, #1
 800062a:	6878      	ldr	r0, [r7, #4]
 800062c:	f005 fbd0 	bl	8005dd0 <VL53L0X_SetLimitCheckValue>
	VL53L0X_SetLimitCheckValue(dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, (FixPoint1616_t)(60*65536));
 8000630:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8000634:	2100      	movs	r1, #0
 8000636:	6878      	ldr	r0, [r7, #4]
 8000638:	f005 fbca 	bl	8005dd0 <VL53L0X_SetLimitCheckValue>
	VL53L0X_SetMeasurementTimingBudgetMicroSeconds(dev, 33000);
 800063c:	f248 01e8 	movw	r1, #33000	; 0x80e8
 8000640:	6878      	ldr	r0, [r7, #4]
 8000642:	f005 f8f7 	bl	8005834 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
	VL53L0X_SetVcselPulsePeriod(dev, VL53L0X_VCSEL_PERIOD_PRE_RANGE, 18);
 8000646:	2212      	movs	r2, #18
 8000648:	2100      	movs	r1, #0
 800064a:	6878      	ldr	r0, [r7, #4]
 800064c:	f005 f918 	bl	8005880 <VL53L0X_SetVcselPulsePeriod>
	VL53L0X_SetVcselPulsePeriod(dev, VL53L0X_VCSEL_PERIOD_FINAL_RANGE, 14);
 8000650:	220e      	movs	r2, #14
 8000652:	2101      	movs	r1, #1
 8000654:	6878      	ldr	r0, [r7, #4]
 8000656:	f005 f913 	bl	8005880 <VL53L0X_SetVcselPulsePeriod>
}
 800065a:	bf00      	nop
 800065c:	3708      	adds	r7, #8
 800065e:	46bd      	mov	sp, r7
 8000660:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000664:	b004      	add	sp, #16
 8000666:	4770      	bx	lr

08000668 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000668:	b5f0      	push	{r4, r5, r6, r7, lr}
 800066a:	b0a5      	sub	sp, #148	; 0x94
 800066c:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800066e:	f000 ff4f 	bl	8001510 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000672:	f000 f891 	bl	8000798 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000676:	f000 fb77 	bl	8000d68 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800067a:	f000 fb4b 	bl	8000d14 <MX_USART2_UART_Init>
  MX_FMPI2C1_Init();
 800067e:	f000 f917 	bl	80008b0 <MX_FMPI2C1_Init>
  MX_I2C1_Init();
 8000682:	f000 f94b 	bl	800091c <MX_I2C1_Init>
  MX_I2C2_Init();
 8000686:	f000 f977 	bl	8000978 <MX_I2C2_Init>
  MX_I2C3_Init();
 800068a:	f000 f9a3 	bl	80009d4 <MX_I2C3_Init>
  MX_SPI2_Init();
 800068e:	f000 f9cf 	bl	8000a30 <MX_SPI2_Init>
  MX_TIM1_Init();
 8000692:	f000 fa03 	bl	8000a9c <MX_TIM1_Init>
  MX_TIM8_Init();
 8000696:	f000 fab9 	bl	8000c0c <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */

  DevI2C1->I2cHandle = &hi2c1;
 800069a:	4b37      	ldr	r3, [pc, #220]	; (8000778 <main+0x110>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	4a37      	ldr	r2, [pc, #220]	; (800077c <main+0x114>)
 80006a0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  DevI2C1->I2cDevAddr = 0x52;
 80006a4:	4b34      	ldr	r3, [pc, #208]	; (8000778 <main+0x110>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	2252      	movs	r2, #82	; 0x52
 80006aa:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
  DevI2C2->I2cHandle = &hi2c2;
 80006ae:	4b34      	ldr	r3, [pc, #208]	; (8000780 <main+0x118>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	4a34      	ldr	r2, [pc, #208]	; (8000784 <main+0x11c>)
 80006b4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  DevI2C2->I2cDevAddr = 0x52;
 80006b8:	4b31      	ldr	r3, [pc, #196]	; (8000780 <main+0x118>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	2252      	movs	r2, #82	; 0x52
 80006be:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
  DevI2C3->I2cHandle = &hi2c3;
 80006c2:	4b31      	ldr	r3, [pc, #196]	; (8000788 <main+0x120>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	4a31      	ldr	r2, [pc, #196]	; (800078c <main+0x124>)
 80006c8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  DevI2C3->I2cDevAddr = 0x52;
 80006cc:	4b2e      	ldr	r3, [pc, #184]	; (8000788 <main+0x120>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	2252      	movs	r2, #82	; 0x52
 80006d2:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160

  TOF_Init(DevI2C1, TOF_TL);
 80006d6:	4b28      	ldr	r3, [pc, #160]	; (8000778 <main+0x110>)
 80006d8:	681e      	ldr	r6, [r3, #0]
 80006da:	466d      	mov	r5, sp
 80006dc:	f107 0460 	add.w	r4, r7, #96	; 0x60
 80006e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80006e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80006e4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80006e8:	e885 0003 	stmia.w	r5, {r0, r1}
 80006ec:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80006f0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80006f2:	4630      	mov	r0, r6
 80006f4:	f7ff ff63 	bl	80005be <TOF_Init>
  TOF_Init(DevI2C2, TOF_BL);
 80006f8:	4b21      	ldr	r3, [pc, #132]	; (8000780 <main+0x118>)
 80006fa:	681e      	ldr	r6, [r3, #0]
 80006fc:	466d      	mov	r5, sp
 80006fe:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000702:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000704:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000706:	e894 0003 	ldmia.w	r4, {r0, r1}
 800070a:	e885 0003 	stmia.w	r5, {r0, r1}
 800070e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000712:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000714:	4630      	mov	r0, r6
 8000716:	f7ff ff52 	bl	80005be <TOF_Init>
  TOF_Init(DevI2C3, TOF_BR);
 800071a:	4b1b      	ldr	r3, [pc, #108]	; (8000788 <main+0x120>)
 800071c:	681e      	ldr	r6, [r3, #0]
 800071e:	466d      	mov	r5, sp
 8000720:	f107 0418 	add.w	r4, r7, #24
 8000724:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000726:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000728:	e894 0003 	ldmia.w	r4, {r0, r1}
 800072c:	e885 0003 	stmia.w	r5, {r0, r1}
 8000730:	f107 030c 	add.w	r3, r7, #12
 8000734:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000736:	4630      	mov	r0, r6
 8000738:	f7ff ff41 	bl	80005be <TOF_Init>

  // Initialize FR and FL motors (currently rear MC is untested)
  motor_init(&controllers[FRONT_LEFT_MOTOR]);
 800073c:	4814      	ldr	r0, [pc, #80]	; (8000790 <main+0x128>)
 800073e:	f7ff ff29 	bl	8000594 <motor_init>
  motor_init(&controllers[FRONT_RIGHT_MOTOR]);
 8000742:	4814      	ldr	r0, [pc, #80]	; (8000794 <main+0x12c>)
 8000744:	f7ff ff26 	bl	8000594 <motor_init>

  set_motor_direction(&controllers[FRONT_RIGHT_MOTOR], MOTOR_DIR_FORWARD);
 8000748:	2100      	movs	r1, #0
 800074a:	4812      	ldr	r0, [pc, #72]	; (8000794 <main+0x12c>)
 800074c:	f7ff fed6 	bl	80004fc <set_motor_direction>
  set_motor_direction(&controllers[FRONT_LEFT_MOTOR], MOTOR_DIR_FORWARD);
 8000750:	2100      	movs	r1, #0
 8000752:	480f      	ldr	r0, [pc, #60]	; (8000790 <main+0x128>)
 8000754:	f7ff fed2 	bl	80004fc <set_motor_direction>
  {
	int data[3];
	while (1) {
//		VL53L0X_PerformSingleRangingMeasurement(DevI2C1, &TOF_TL.RangingData);
//		VL53L0X_PerformSingleRangingMeasurement(DevI2C2, &TOF_BL.RangingData);
		VL53L0X_PerformSingleRangingMeasurement(DevI2C3, &TOF_BR.RangingData);
 8000758:	4b0b      	ldr	r3, [pc, #44]	; (8000788 <main+0x120>)
 800075a:	681a      	ldr	r2, [r3, #0]
 800075c:	f107 030c 	add.w	r3, r7, #12
 8000760:	3308      	adds	r3, #8
 8000762:	4619      	mov	r1, r3
 8000764:	4610      	mov	r0, r2
 8000766:	f005 ff2b 	bl	80065c0 <VL53L0X_PerformSingleRangingMeasurement>
//		printf("Range: %d\n", TOF_TL.RangingData.RangeMilliMeter);
//		if (TOF_TL.RangingData.RangeMilliMeter < 300) {
//			break;
//		}
//		data[0] = TOF_TL.RangingData.RangeMilliMeter;
		data[0] = 0;
 800076a:	2300      	movs	r3, #0
 800076c:	603b      	str	r3, [r7, #0]
		data[1] = 0;
 800076e:	2300      	movs	r3, #0
 8000770:	607b      	str	r3, [r7, #4]
//		data[1] = TOF_BL.RangingData.RangeMilliMeter;
		data[2] = TOF_BR.RangingData.RangeMilliMeter;
 8000772:	8bbb      	ldrh	r3, [r7, #28]
 8000774:	60bb      	str	r3, [r7, #8]
		VL53L0X_PerformSingleRangingMeasurement(DevI2C3, &TOF_BR.RangingData);
 8000776:	e7ef      	b.n	8000758 <main+0xf0>
 8000778:	20000000 	.word	0x20000000
 800077c:	200005e4 	.word	0x200005e4
 8000780:	20000004 	.word	0x20000004
 8000784:	20000638 	.word	0x20000638
 8000788:	20000008 	.word	0x20000008
 800078c:	20000360 	.word	0x20000360
 8000790:	2000000c 	.word	0x2000000c
 8000794:	20000028 	.word	0x20000028

08000798 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b0ac      	sub	sp, #176	; 0xb0
 800079c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800079e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80007a2:	2234      	movs	r2, #52	; 0x34
 80007a4:	2100      	movs	r1, #0
 80007a6:	4618      	mov	r0, r3
 80007a8:	f009 fc7e 	bl	800a0a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007ac:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80007b0:	2200      	movs	r2, #0
 80007b2:	601a      	str	r2, [r3, #0]
 80007b4:	605a      	str	r2, [r3, #4]
 80007b6:	609a      	str	r2, [r3, #8]
 80007b8:	60da      	str	r2, [r3, #12]
 80007ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80007bc:	f107 030c 	add.w	r3, r7, #12
 80007c0:	225c      	movs	r2, #92	; 0x5c
 80007c2:	2100      	movs	r1, #0
 80007c4:	4618      	mov	r0, r3
 80007c6:	f009 fc6f 	bl	800a0a8 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ca:	2300      	movs	r3, #0
 80007cc:	60bb      	str	r3, [r7, #8]
 80007ce:	4b36      	ldr	r3, [pc, #216]	; (80008a8 <SystemClock_Config+0x110>)
 80007d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007d2:	4a35      	ldr	r2, [pc, #212]	; (80008a8 <SystemClock_Config+0x110>)
 80007d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007d8:	6413      	str	r3, [r2, #64]	; 0x40
 80007da:	4b33      	ldr	r3, [pc, #204]	; (80008a8 <SystemClock_Config+0x110>)
 80007dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007e2:	60bb      	str	r3, [r7, #8]
 80007e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80007e6:	2300      	movs	r3, #0
 80007e8:	607b      	str	r3, [r7, #4]
 80007ea:	4b30      	ldr	r3, [pc, #192]	; (80008ac <SystemClock_Config+0x114>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80007f2:	4a2e      	ldr	r2, [pc, #184]	; (80008ac <SystemClock_Config+0x114>)
 80007f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007f8:	6013      	str	r3, [r2, #0]
 80007fa:	4b2c      	ldr	r3, [pc, #176]	; (80008ac <SystemClock_Config+0x114>)
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000802:	607b      	str	r3, [r7, #4]
 8000804:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000806:	2302      	movs	r3, #2
 8000808:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800080a:	2301      	movs	r3, #1
 800080c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000810:	2310      	movs	r3, #16
 8000812:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000816:	2302      	movs	r3, #2
 8000818:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800081c:	2300      	movs	r3, #0
 800081e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000822:	2310      	movs	r3, #16
 8000824:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000828:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800082c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000830:	2304      	movs	r3, #4
 8000832:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000836:	2302      	movs	r3, #2
 8000838:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = 2;
 800083c:	2302      	movs	r3, #2
 800083e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000842:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000846:	4618      	mov	r0, r3
 8000848:	f002 fff2 	bl	8003830 <HAL_RCC_OscConfig>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000852:	f000 fb25 	bl	8000ea0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000856:	230f      	movs	r3, #15
 8000858:	66bb      	str	r3, [r7, #104]	; 0x68
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800085a:	2302      	movs	r3, #2
 800085c:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800085e:	2300      	movs	r3, #0
 8000860:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000862:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000866:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000868:	2300      	movs	r3, #0
 800086a:	67bb      	str	r3, [r7, #120]	; 0x78

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800086c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000870:	2102      	movs	r1, #2
 8000872:	4618      	mov	r0, r3
 8000874:	f002 f9e6 	bl	8002c44 <HAL_RCC_ClockConfig>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <SystemClock_Config+0xea>
  {
    Error_Handler();
 800087e:	f000 fb0f 	bl	8000ea0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMPI2C1;
 8000882:	2380      	movs	r3, #128	; 0x80
 8000884:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Fmpi2c1ClockSelection = RCC_FMPI2C1CLKSOURCE_APB;
 8000886:	2300      	movs	r3, #0
 8000888:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800088a:	f107 030c 	add.w	r3, r7, #12
 800088e:	4618      	mov	r0, r3
 8000890:	f002 faf2 	bl	8002e78 <HAL_RCCEx_PeriphCLKConfig>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <SystemClock_Config+0x106>
  {
    Error_Handler();
 800089a:	f000 fb01 	bl	8000ea0 <Error_Handler>
  }
}
 800089e:	bf00      	nop
 80008a0:	37b0      	adds	r7, #176	; 0xb0
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	40023800 	.word	0x40023800
 80008ac:	40007000 	.word	0x40007000

080008b0 <MX_FMPI2C1_Init>:
  * @brief FMPI2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FMPI2C1_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE END FMPI2C1_Init 0 */

  /* USER CODE BEGIN FMPI2C1_Init 1 */

  /* USER CODE END FMPI2C1_Init 1 */
  hfmpi2c1.Instance = FMPI2C1;
 80008b4:	4b16      	ldr	r3, [pc, #88]	; (8000910 <MX_FMPI2C1_Init+0x60>)
 80008b6:	4a17      	ldr	r2, [pc, #92]	; (8000914 <MX_FMPI2C1_Init+0x64>)
 80008b8:	601a      	str	r2, [r3, #0]
  hfmpi2c1.Init.Timing = 0x00A0A3F7;
 80008ba:	4b15      	ldr	r3, [pc, #84]	; (8000910 <MX_FMPI2C1_Init+0x60>)
 80008bc:	4a16      	ldr	r2, [pc, #88]	; (8000918 <MX_FMPI2C1_Init+0x68>)
 80008be:	605a      	str	r2, [r3, #4]
  hfmpi2c1.Init.OwnAddress1 = 0;
 80008c0:	4b13      	ldr	r3, [pc, #76]	; (8000910 <MX_FMPI2C1_Init+0x60>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	609a      	str	r2, [r3, #8]
  hfmpi2c1.Init.AddressingMode = FMPI2C_ADDRESSINGMODE_7BIT;
 80008c6:	4b12      	ldr	r3, [pc, #72]	; (8000910 <MX_FMPI2C1_Init+0x60>)
 80008c8:	2201      	movs	r2, #1
 80008ca:	60da      	str	r2, [r3, #12]
  hfmpi2c1.Init.DualAddressMode = FMPI2C_DUALADDRESS_DISABLE;
 80008cc:	4b10      	ldr	r3, [pc, #64]	; (8000910 <MX_FMPI2C1_Init+0x60>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	611a      	str	r2, [r3, #16]
  hfmpi2c1.Init.OwnAddress2 = 0;
 80008d2:	4b0f      	ldr	r3, [pc, #60]	; (8000910 <MX_FMPI2C1_Init+0x60>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	615a      	str	r2, [r3, #20]
  hfmpi2c1.Init.OwnAddress2Masks = FMPI2C_OA2_NOMASK;
 80008d8:	4b0d      	ldr	r3, [pc, #52]	; (8000910 <MX_FMPI2C1_Init+0x60>)
 80008da:	2200      	movs	r2, #0
 80008dc:	619a      	str	r2, [r3, #24]
  hfmpi2c1.Init.GeneralCallMode = FMPI2C_GENERALCALL_DISABLE;
 80008de:	4b0c      	ldr	r3, [pc, #48]	; (8000910 <MX_FMPI2C1_Init+0x60>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	61da      	str	r2, [r3, #28]
  hfmpi2c1.Init.NoStretchMode = FMPI2C_NOSTRETCH_DISABLE;
 80008e4:	4b0a      	ldr	r3, [pc, #40]	; (8000910 <MX_FMPI2C1_Init+0x60>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	621a      	str	r2, [r3, #32]
  if (HAL_FMPI2C_Init(&hfmpi2c1) != HAL_OK)
 80008ea:	4809      	ldr	r0, [pc, #36]	; (8000910 <MX_FMPI2C1_Init+0x60>)
 80008ec:	f000 ff8b 	bl	8001806 <HAL_FMPI2C_Init>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <MX_FMPI2C1_Init+0x4a>
  {
    Error_Handler();
 80008f6:	f000 fad3 	bl	8000ea0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_FMPI2CEx_ConfigAnalogFilter(&hfmpi2c1, FMPI2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008fa:	2100      	movs	r1, #0
 80008fc:	4804      	ldr	r0, [pc, #16]	; (8000910 <MX_FMPI2C1_Init+0x60>)
 80008fe:	f001 f811 	bl	8001924 <HAL_FMPI2CEx_ConfigAnalogFilter>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <MX_FMPI2C1_Init+0x5c>
  {
    Error_Handler();
 8000908:	f000 faca 	bl	8000ea0 <Error_Handler>
  }
  /* USER CODE BEGIN FMPI2C1_Init 2 */

  /* USER CODE END FMPI2C1_Init 2 */

}
 800090c:	bf00      	nop
 800090e:	bd80      	pop	{r7, pc}
 8000910:	2000081c 	.word	0x2000081c
 8000914:	40006000 	.word	0x40006000
 8000918:	00a0a3f7 	.word	0x00a0a3f7

0800091c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000920:	4b12      	ldr	r3, [pc, #72]	; (800096c <MX_I2C1_Init+0x50>)
 8000922:	4a13      	ldr	r2, [pc, #76]	; (8000970 <MX_I2C1_Init+0x54>)
 8000924:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000926:	4b11      	ldr	r3, [pc, #68]	; (800096c <MX_I2C1_Init+0x50>)
 8000928:	4a12      	ldr	r2, [pc, #72]	; (8000974 <MX_I2C1_Init+0x58>)
 800092a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800092c:	4b0f      	ldr	r3, [pc, #60]	; (800096c <MX_I2C1_Init+0x50>)
 800092e:	2200      	movs	r2, #0
 8000930:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000932:	4b0e      	ldr	r3, [pc, #56]	; (800096c <MX_I2C1_Init+0x50>)
 8000934:	2200      	movs	r2, #0
 8000936:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000938:	4b0c      	ldr	r3, [pc, #48]	; (800096c <MX_I2C1_Init+0x50>)
 800093a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800093e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000940:	4b0a      	ldr	r3, [pc, #40]	; (800096c <MX_I2C1_Init+0x50>)
 8000942:	2200      	movs	r2, #0
 8000944:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000946:	4b09      	ldr	r3, [pc, #36]	; (800096c <MX_I2C1_Init+0x50>)
 8000948:	2200      	movs	r2, #0
 800094a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800094c:	4b07      	ldr	r3, [pc, #28]	; (800096c <MX_I2C1_Init+0x50>)
 800094e:	2200      	movs	r2, #0
 8000950:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000952:	4b06      	ldr	r3, [pc, #24]	; (800096c <MX_I2C1_Init+0x50>)
 8000954:	2200      	movs	r2, #0
 8000956:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000958:	4804      	ldr	r0, [pc, #16]	; (800096c <MX_I2C1_Init+0x50>)
 800095a:	f001 f9dd 	bl	8001d18 <HAL_I2C_Init>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000964:	f000 fa9c 	bl	8000ea0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000968:	bf00      	nop
 800096a:	bd80      	pop	{r7, pc}
 800096c:	200005e4 	.word	0x200005e4
 8000970:	40005400 	.word	0x40005400
 8000974:	000186a0 	.word	0x000186a0

08000978 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800097c:	4b12      	ldr	r3, [pc, #72]	; (80009c8 <MX_I2C2_Init+0x50>)
 800097e:	4a13      	ldr	r2, [pc, #76]	; (80009cc <MX_I2C2_Init+0x54>)
 8000980:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000982:	4b11      	ldr	r3, [pc, #68]	; (80009c8 <MX_I2C2_Init+0x50>)
 8000984:	4a12      	ldr	r2, [pc, #72]	; (80009d0 <MX_I2C2_Init+0x58>)
 8000986:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000988:	4b0f      	ldr	r3, [pc, #60]	; (80009c8 <MX_I2C2_Init+0x50>)
 800098a:	2200      	movs	r2, #0
 800098c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800098e:	4b0e      	ldr	r3, [pc, #56]	; (80009c8 <MX_I2C2_Init+0x50>)
 8000990:	2200      	movs	r2, #0
 8000992:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000994:	4b0c      	ldr	r3, [pc, #48]	; (80009c8 <MX_I2C2_Init+0x50>)
 8000996:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800099a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800099c:	4b0a      	ldr	r3, [pc, #40]	; (80009c8 <MX_I2C2_Init+0x50>)
 800099e:	2200      	movs	r2, #0
 80009a0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80009a2:	4b09      	ldr	r3, [pc, #36]	; (80009c8 <MX_I2C2_Init+0x50>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009a8:	4b07      	ldr	r3, [pc, #28]	; (80009c8 <MX_I2C2_Init+0x50>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009ae:	4b06      	ldr	r3, [pc, #24]	; (80009c8 <MX_I2C2_Init+0x50>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80009b4:	4804      	ldr	r0, [pc, #16]	; (80009c8 <MX_I2C2_Init+0x50>)
 80009b6:	f001 f9af 	bl	8001d18 <HAL_I2C_Init>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80009c0:	f000 fa6e 	bl	8000ea0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80009c4:	bf00      	nop
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	20000638 	.word	0x20000638
 80009cc:	40005800 	.word	0x40005800
 80009d0:	000186a0 	.word	0x000186a0

080009d4 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80009d8:	4b12      	ldr	r3, [pc, #72]	; (8000a24 <MX_I2C3_Init+0x50>)
 80009da:	4a13      	ldr	r2, [pc, #76]	; (8000a28 <MX_I2C3_Init+0x54>)
 80009dc:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80009de:	4b11      	ldr	r3, [pc, #68]	; (8000a24 <MX_I2C3_Init+0x50>)
 80009e0:	4a12      	ldr	r2, [pc, #72]	; (8000a2c <MX_I2C3_Init+0x58>)
 80009e2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80009e4:	4b0f      	ldr	r3, [pc, #60]	; (8000a24 <MX_I2C3_Init+0x50>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80009ea:	4b0e      	ldr	r3, [pc, #56]	; (8000a24 <MX_I2C3_Init+0x50>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009f0:	4b0c      	ldr	r3, [pc, #48]	; (8000a24 <MX_I2C3_Init+0x50>)
 80009f2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80009f6:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009f8:	4b0a      	ldr	r3, [pc, #40]	; (8000a24 <MX_I2C3_Init+0x50>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80009fe:	4b09      	ldr	r3, [pc, #36]	; (8000a24 <MX_I2C3_Init+0x50>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a04:	4b07      	ldr	r3, [pc, #28]	; (8000a24 <MX_I2C3_Init+0x50>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a0a:	4b06      	ldr	r3, [pc, #24]	; (8000a24 <MX_I2C3_Init+0x50>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000a10:	4804      	ldr	r0, [pc, #16]	; (8000a24 <MX_I2C3_Init+0x50>)
 8000a12:	f001 f981 	bl	8001d18 <HAL_I2C_Init>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000a1c:	f000 fa40 	bl	8000ea0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000a20:	bf00      	nop
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	20000360 	.word	0x20000360
 8000a28:	40005c00 	.word	0x40005c00
 8000a2c:	000186a0 	.word	0x000186a0

08000a30 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000a34:	4b17      	ldr	r3, [pc, #92]	; (8000a94 <MX_SPI2_Init+0x64>)
 8000a36:	4a18      	ldr	r2, [pc, #96]	; (8000a98 <MX_SPI2_Init+0x68>)
 8000a38:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000a3a:	4b16      	ldr	r3, [pc, #88]	; (8000a94 <MX_SPI2_Init+0x64>)
 8000a3c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a40:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000a42:	4b14      	ldr	r3, [pc, #80]	; (8000a94 <MX_SPI2_Init+0x64>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a48:	4b12      	ldr	r3, [pc, #72]	; (8000a94 <MX_SPI2_Init+0x64>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a4e:	4b11      	ldr	r3, [pc, #68]	; (8000a94 <MX_SPI2_Init+0x64>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a54:	4b0f      	ldr	r3, [pc, #60]	; (8000a94 <MX_SPI2_Init+0x64>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000a5a:	4b0e      	ldr	r3, [pc, #56]	; (8000a94 <MX_SPI2_Init+0x64>)
 8000a5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a60:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a62:	4b0c      	ldr	r3, [pc, #48]	; (8000a94 <MX_SPI2_Init+0x64>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a68:	4b0a      	ldr	r3, [pc, #40]	; (8000a94 <MX_SPI2_Init+0x64>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a6e:	4b09      	ldr	r3, [pc, #36]	; (8000a94 <MX_SPI2_Init+0x64>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a74:	4b07      	ldr	r3, [pc, #28]	; (8000a94 <MX_SPI2_Init+0x64>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000a7a:	4b06      	ldr	r3, [pc, #24]	; (8000a94 <MX_SPI2_Init+0x64>)
 8000a7c:	220a      	movs	r2, #10
 8000a7e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000a80:	4804      	ldr	r0, [pc, #16]	; (8000a94 <MX_SPI2_Init+0x64>)
 8000a82:	f003 f973 	bl	8003d6c <HAL_SPI_Init>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000a8c:	f000 fa08 	bl	8000ea0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000a90:	bf00      	nop
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	200003b4 	.word	0x200003b4
 8000a98:	40003800 	.word	0x40003800

08000a9c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b096      	sub	sp, #88	; 0x58
 8000aa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000aa2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	601a      	str	r2, [r3, #0]
 8000aaa:	605a      	str	r2, [r3, #4]
 8000aac:	609a      	str	r2, [r3, #8]
 8000aae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ab0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	601a      	str	r2, [r3, #0]
 8000ab8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000aba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000abe:	2200      	movs	r2, #0
 8000ac0:	601a      	str	r2, [r3, #0]
 8000ac2:	605a      	str	r2, [r3, #4]
 8000ac4:	609a      	str	r2, [r3, #8]
 8000ac6:	60da      	str	r2, [r3, #12]
 8000ac8:	611a      	str	r2, [r3, #16]
 8000aca:	615a      	str	r2, [r3, #20]
 8000acc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000ace:	1d3b      	adds	r3, r7, #4
 8000ad0:	2220      	movs	r2, #32
 8000ad2:	2100      	movs	r1, #0
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f009 fae7 	bl	800a0a8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000ada:	4b4a      	ldr	r3, [pc, #296]	; (8000c04 <MX_TIM1_Init+0x168>)
 8000adc:	4a4a      	ldr	r2, [pc, #296]	; (8000c08 <MX_TIM1_Init+0x16c>)
 8000ade:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000ae0:	4b48      	ldr	r3, [pc, #288]	; (8000c04 <MX_TIM1_Init+0x168>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ae6:	4b47      	ldr	r3, [pc, #284]	; (8000c04 <MX_TIM1_Init+0x168>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000aec:	4b45      	ldr	r3, [pc, #276]	; (8000c04 <MX_TIM1_Init+0x168>)
 8000aee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000af2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000af4:	4b43      	ldr	r3, [pc, #268]	; (8000c04 <MX_TIM1_Init+0x168>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000afa:	4b42      	ldr	r3, [pc, #264]	; (8000c04 <MX_TIM1_Init+0x168>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b00:	4b40      	ldr	r3, [pc, #256]	; (8000c04 <MX_TIM1_Init+0x168>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000b06:	483f      	ldr	r0, [pc, #252]	; (8000c04 <MX_TIM1_Init+0x168>)
 8000b08:	f003 f9b9 	bl	8003e7e <HAL_TIM_Base_Init>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d001      	beq.n	8000b16 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000b12:	f000 f9c5 	bl	8000ea0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b1a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000b1c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000b20:	4619      	mov	r1, r3
 8000b22:	4838      	ldr	r0, [pc, #224]	; (8000c04 <MX_TIM1_Init+0x168>)
 8000b24:	f003 fbd4 	bl	80042d0 <HAL_TIM_ConfigClockSource>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000b2e:	f000 f9b7 	bl	8000ea0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000b32:	4834      	ldr	r0, [pc, #208]	; (8000c04 <MX_TIM1_Init+0x168>)
 8000b34:	f003 f9f2 	bl	8003f1c <HAL_TIM_PWM_Init>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000b3e:	f000 f9af 	bl	8000ea0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b42:	2300      	movs	r3, #0
 8000b44:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b46:	2300      	movs	r3, #0
 8000b48:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b4a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000b4e:	4619      	mov	r1, r3
 8000b50:	482c      	ldr	r0, [pc, #176]	; (8000c04 <MX_TIM1_Init+0x168>)
 8000b52:	f003 ff95 	bl	8004a80 <HAL_TIMEx_MasterConfigSynchronization>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d001      	beq.n	8000b60 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000b5c:	f000 f9a0 	bl	8000ea0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b60:	2360      	movs	r3, #96	; 0x60
 8000b62:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000b64:	2300      	movs	r3, #0
 8000b66:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b70:	2300      	movs	r3, #0
 8000b72:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b74:	2300      	movs	r3, #0
 8000b76:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000b7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b80:	2204      	movs	r2, #4
 8000b82:	4619      	mov	r1, r3
 8000b84:	481f      	ldr	r0, [pc, #124]	; (8000c04 <MX_TIM1_Init+0x168>)
 8000b86:	f003 fae1 	bl	800414c <HAL_TIM_PWM_ConfigChannel>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d001      	beq.n	8000b94 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8000b90:	f000 f986 	bl	8000ea0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000b94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b98:	2208      	movs	r2, #8
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	4819      	ldr	r0, [pc, #100]	; (8000c04 <MX_TIM1_Init+0x168>)
 8000b9e:	f003 fad5 	bl	800414c <HAL_TIM_PWM_ConfigChannel>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d001      	beq.n	8000bac <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8000ba8:	f000 f97a 	bl	8000ea0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000bac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bb0:	220c      	movs	r2, #12
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	4813      	ldr	r0, [pc, #76]	; (8000c04 <MX_TIM1_Init+0x168>)
 8000bb6:	f003 fac9 	bl	800414c <HAL_TIM_PWM_ConfigChannel>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d001      	beq.n	8000bc4 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8000bc0:	f000 f96e 	bl	8000ea0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000bd8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bdc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000bde:	2300      	movs	r3, #0
 8000be0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000be2:	1d3b      	adds	r3, r7, #4
 8000be4:	4619      	mov	r1, r3
 8000be6:	4807      	ldr	r0, [pc, #28]	; (8000c04 <MX_TIM1_Init+0x168>)
 8000be8:	f003 ffc6 	bl	8004b78 <HAL_TIMEx_ConfigBreakDeadTime>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d001      	beq.n	8000bf6 <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 8000bf2:	f000 f955 	bl	8000ea0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000bf6:	4803      	ldr	r0, [pc, #12]	; (8000c04 <MX_TIM1_Init+0x168>)
 8000bf8:	f000 fb78 	bl	80012ec <HAL_TIM_MspPostInit>

}
 8000bfc:	bf00      	nop
 8000bfe:	3758      	adds	r7, #88	; 0x58
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	200009f8 	.word	0x200009f8
 8000c08:	40010000 	.word	0x40010000

08000c0c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b092      	sub	sp, #72	; 0x48
 8000c10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c12:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000c16:	2200      	movs	r2, #0
 8000c18:	601a      	str	r2, [r3, #0]
 8000c1a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c20:	2200      	movs	r2, #0
 8000c22:	601a      	str	r2, [r3, #0]
 8000c24:	605a      	str	r2, [r3, #4]
 8000c26:	609a      	str	r2, [r3, #8]
 8000c28:	60da      	str	r2, [r3, #12]
 8000c2a:	611a      	str	r2, [r3, #16]
 8000c2c:	615a      	str	r2, [r3, #20]
 8000c2e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000c30:	1d3b      	adds	r3, r7, #4
 8000c32:	2220      	movs	r2, #32
 8000c34:	2100      	movs	r1, #0
 8000c36:	4618      	mov	r0, r3
 8000c38:	f009 fa36 	bl	800a0a8 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000c3c:	4b33      	ldr	r3, [pc, #204]	; (8000d0c <MX_TIM8_Init+0x100>)
 8000c3e:	4a34      	ldr	r2, [pc, #208]	; (8000d10 <MX_TIM8_Init+0x104>)
 8000c40:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000c42:	4b32      	ldr	r3, [pc, #200]	; (8000d0c <MX_TIM8_Init+0x100>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c48:	4b30      	ldr	r3, [pc, #192]	; (8000d0c <MX_TIM8_Init+0x100>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8000c4e:	4b2f      	ldr	r3, [pc, #188]	; (8000d0c <MX_TIM8_Init+0x100>)
 8000c50:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c54:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c56:	4b2d      	ldr	r3, [pc, #180]	; (8000d0c <MX_TIM8_Init+0x100>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000c5c:	4b2b      	ldr	r3, [pc, #172]	; (8000d0c <MX_TIM8_Init+0x100>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c62:	4b2a      	ldr	r3, [pc, #168]	; (8000d0c <MX_TIM8_Init+0x100>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000c68:	4828      	ldr	r0, [pc, #160]	; (8000d0c <MX_TIM8_Init+0x100>)
 8000c6a:	f003 f957 	bl	8003f1c <HAL_TIM_PWM_Init>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d001      	beq.n	8000c78 <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 8000c74:	f000 f914 	bl	8000ea0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000c80:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000c84:	4619      	mov	r1, r3
 8000c86:	4821      	ldr	r0, [pc, #132]	; (8000d0c <MX_TIM8_Init+0x100>)
 8000c88:	f003 fefa 	bl	8004a80 <HAL_TIMEx_MasterConfigSynchronization>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d001      	beq.n	8000c96 <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 8000c92:	f000 f905 	bl	8000ea0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c96:	2360      	movs	r3, #96	; 0x60
 8000c98:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000caa:	2300      	movs	r3, #0
 8000cac:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000cb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cb6:	2208      	movs	r2, #8
 8000cb8:	4619      	mov	r1, r3
 8000cba:	4814      	ldr	r0, [pc, #80]	; (8000d0c <MX_TIM8_Init+0x100>)
 8000cbc:	f003 fa46 	bl	800414c <HAL_TIM_PWM_ConfigChannel>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d001      	beq.n	8000cca <MX_TIM8_Init+0xbe>
  {
    Error_Handler();
 8000cc6:	f000 f8eb 	bl	8000ea0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000cde:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ce2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000ce8:	1d3b      	adds	r3, r7, #4
 8000cea:	4619      	mov	r1, r3
 8000cec:	4807      	ldr	r0, [pc, #28]	; (8000d0c <MX_TIM8_Init+0x100>)
 8000cee:	f003 ff43 	bl	8004b78 <HAL_TIMEx_ConfigBreakDeadTime>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d001      	beq.n	8000cfc <MX_TIM8_Init+0xf0>
  {
    Error_Handler();
 8000cf8:	f000 f8d2 	bl	8000ea0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000cfc:	4803      	ldr	r0, [pc, #12]	; (8000d0c <MX_TIM8_Init+0x100>)
 8000cfe:	f000 faf5 	bl	80012ec <HAL_TIM_MspPostInit>

}
 8000d02:	bf00      	nop
 8000d04:	3748      	adds	r7, #72	; 0x48
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	2000040c 	.word	0x2000040c
 8000d10:	40010400 	.word	0x40010400

08000d14 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d18:	4b11      	ldr	r3, [pc, #68]	; (8000d60 <MX_USART2_UART_Init+0x4c>)
 8000d1a:	4a12      	ldr	r2, [pc, #72]	; (8000d64 <MX_USART2_UART_Init+0x50>)
 8000d1c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d1e:	4b10      	ldr	r3, [pc, #64]	; (8000d60 <MX_USART2_UART_Init+0x4c>)
 8000d20:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d24:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d26:	4b0e      	ldr	r3, [pc, #56]	; (8000d60 <MX_USART2_UART_Init+0x4c>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d2c:	4b0c      	ldr	r3, [pc, #48]	; (8000d60 <MX_USART2_UART_Init+0x4c>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d32:	4b0b      	ldr	r3, [pc, #44]	; (8000d60 <MX_USART2_UART_Init+0x4c>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d38:	4b09      	ldr	r3, [pc, #36]	; (8000d60 <MX_USART2_UART_Init+0x4c>)
 8000d3a:	220c      	movs	r2, #12
 8000d3c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d3e:	4b08      	ldr	r3, [pc, #32]	; (8000d60 <MX_USART2_UART_Init+0x4c>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d44:	4b06      	ldr	r3, [pc, #24]	; (8000d60 <MX_USART2_UART_Init+0x4c>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d4a:	4805      	ldr	r0, [pc, #20]	; (8000d60 <MX_USART2_UART_Init+0x4c>)
 8000d4c:	f003 ff66 	bl	8004c1c <HAL_UART_Init>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000d56:	f000 f8a3 	bl	8000ea0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d5a:	bf00      	nop
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	20000a40 	.word	0x20000a40
 8000d64:	40004400 	.word	0x40004400

08000d68 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b08a      	sub	sp, #40	; 0x28
 8000d6c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d6e:	f107 0314 	add.w	r3, r7, #20
 8000d72:	2200      	movs	r2, #0
 8000d74:	601a      	str	r2, [r3, #0]
 8000d76:	605a      	str	r2, [r3, #4]
 8000d78:	609a      	str	r2, [r3, #8]
 8000d7a:	60da      	str	r2, [r3, #12]
 8000d7c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d7e:	2300      	movs	r3, #0
 8000d80:	613b      	str	r3, [r7, #16]
 8000d82:	4b43      	ldr	r3, [pc, #268]	; (8000e90 <MX_GPIO_Init+0x128>)
 8000d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d86:	4a42      	ldr	r2, [pc, #264]	; (8000e90 <MX_GPIO_Init+0x128>)
 8000d88:	f043 0304 	orr.w	r3, r3, #4
 8000d8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d8e:	4b40      	ldr	r3, [pc, #256]	; (8000e90 <MX_GPIO_Init+0x128>)
 8000d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d92:	f003 0304 	and.w	r3, r3, #4
 8000d96:	613b      	str	r3, [r7, #16]
 8000d98:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	60fb      	str	r3, [r7, #12]
 8000d9e:	4b3c      	ldr	r3, [pc, #240]	; (8000e90 <MX_GPIO_Init+0x128>)
 8000da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da2:	4a3b      	ldr	r2, [pc, #236]	; (8000e90 <MX_GPIO_Init+0x128>)
 8000da4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000da8:	6313      	str	r3, [r2, #48]	; 0x30
 8000daa:	4b39      	ldr	r3, [pc, #228]	; (8000e90 <MX_GPIO_Init+0x128>)
 8000dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000db2:	60fb      	str	r3, [r7, #12]
 8000db4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000db6:	2300      	movs	r3, #0
 8000db8:	60bb      	str	r3, [r7, #8]
 8000dba:	4b35      	ldr	r3, [pc, #212]	; (8000e90 <MX_GPIO_Init+0x128>)
 8000dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dbe:	4a34      	ldr	r2, [pc, #208]	; (8000e90 <MX_GPIO_Init+0x128>)
 8000dc0:	f043 0301 	orr.w	r3, r3, #1
 8000dc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000dc6:	4b32      	ldr	r3, [pc, #200]	; (8000e90 <MX_GPIO_Init+0x128>)
 8000dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dca:	f003 0301 	and.w	r3, r3, #1
 8000dce:	60bb      	str	r3, [r7, #8]
 8000dd0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	607b      	str	r3, [r7, #4]
 8000dd6:	4b2e      	ldr	r3, [pc, #184]	; (8000e90 <MX_GPIO_Init+0x128>)
 8000dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dda:	4a2d      	ldr	r2, [pc, #180]	; (8000e90 <MX_GPIO_Init+0x128>)
 8000ddc:	f043 0302 	orr.w	r3, r3, #2
 8000de0:	6313      	str	r3, [r2, #48]	; 0x30
 8000de2:	4b2b      	ldr	r3, [pc, #172]	; (8000e90 <MX_GPIO_Init+0x128>)
 8000de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de6:	f003 0302 	and.w	r3, r3, #2
 8000dea:	607b      	str	r3, [r7, #4]
 8000dec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|LD2_Pin|GPIO_PIN_15, GPIO_PIN_RESET);
 8000dee:	2200      	movs	r2, #0
 8000df0:	f248 0122 	movw	r1, #32802	; 0x8022
 8000df4:	4827      	ldr	r0, [pc, #156]	; (8000e94 <MX_GPIO_Init+0x12c>)
 8000df6:	f000 ff75 	bl	8001ce4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	f24c 0130 	movw	r1, #49200	; 0xc030
 8000e00:	4825      	ldr	r0, [pc, #148]	; (8000e98 <MX_GPIO_Init+0x130>)
 8000e02:	f000 ff6f 	bl	8001ce4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 8000e06:	2200      	movs	r2, #0
 8000e08:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8000e0c:	4823      	ldr	r0, [pc, #140]	; (8000e9c <MX_GPIO_Init+0x134>)
 8000e0e:	f000 ff69 	bl	8001ce4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000e12:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e18:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000e1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000e22:	f107 0314 	add.w	r3, r7, #20
 8000e26:	4619      	mov	r1, r3
 8000e28:	481c      	ldr	r0, [pc, #112]	; (8000e9c <MX_GPIO_Init+0x134>)
 8000e2a:	f000 fdc7 	bl	80019bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 LD2_Pin PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|LD2_Pin|GPIO_PIN_15;
 8000e2e:	f248 0322 	movw	r3, #32802	; 0x8022
 8000e32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e34:	2301      	movs	r3, #1
 8000e36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e40:	f107 0314 	add.w	r3, r7, #20
 8000e44:	4619      	mov	r1, r3
 8000e46:	4813      	ldr	r0, [pc, #76]	; (8000e94 <MX_GPIO_Init+0x12c>)
 8000e48:	f000 fdb8 	bl	80019bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB15 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_5;
 8000e4c:	f24c 0330 	movw	r3, #49200	; 0xc030
 8000e50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e52:	2301      	movs	r3, #1
 8000e54:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e56:	2300      	movs	r3, #0
 8000e58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e5e:	f107 0314 	add.w	r3, r7, #20
 8000e62:	4619      	mov	r1, r3
 8000e64:	480c      	ldr	r0, [pc, #48]	; (8000e98 <MX_GPIO_Init+0x130>)
 8000e66:	f000 fda9 	bl	80019bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC10 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000e6a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000e6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e70:	2301      	movs	r3, #1
 8000e72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e74:	2300      	movs	r3, #0
 8000e76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e7c:	f107 0314 	add.w	r3, r7, #20
 8000e80:	4619      	mov	r1, r3
 8000e82:	4806      	ldr	r0, [pc, #24]	; (8000e9c <MX_GPIO_Init+0x134>)
 8000e84:	f000 fd9a 	bl	80019bc <HAL_GPIO_Init>

}
 8000e88:	bf00      	nop
 8000e8a:	3728      	adds	r7, #40	; 0x28
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	40023800 	.word	0x40023800
 8000e94:	40020000 	.word	0x40020000
 8000e98:	40020400 	.word	0x40020400
 8000e9c:	40020800 	.word	0x40020800

08000ea0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ea4:	b672      	cpsid	i
}
 8000ea6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ea8:	e7fe      	b.n	8000ea8 <Error_Handler+0x8>
	...

08000eac <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	607b      	str	r3, [r7, #4]
 8000eb6:	4b10      	ldr	r3, [pc, #64]	; (8000ef8 <HAL_MspInit+0x4c>)
 8000eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eba:	4a0f      	ldr	r2, [pc, #60]	; (8000ef8 <HAL_MspInit+0x4c>)
 8000ebc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ec0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ec2:	4b0d      	ldr	r3, [pc, #52]	; (8000ef8 <HAL_MspInit+0x4c>)
 8000ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ec6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000eca:	607b      	str	r3, [r7, #4]
 8000ecc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ece:	2300      	movs	r3, #0
 8000ed0:	603b      	str	r3, [r7, #0]
 8000ed2:	4b09      	ldr	r3, [pc, #36]	; (8000ef8 <HAL_MspInit+0x4c>)
 8000ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed6:	4a08      	ldr	r2, [pc, #32]	; (8000ef8 <HAL_MspInit+0x4c>)
 8000ed8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000edc:	6413      	str	r3, [r2, #64]	; 0x40
 8000ede:	4b06      	ldr	r3, [pc, #24]	; (8000ef8 <HAL_MspInit+0x4c>)
 8000ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ee6:	603b      	str	r3, [r7, #0]
 8000ee8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000eea:	2007      	movs	r0, #7
 8000eec:	f000 fc58 	bl	80017a0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ef0:	bf00      	nop
 8000ef2:	3708      	adds	r7, #8
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	40023800 	.word	0x40023800

08000efc <HAL_FMPI2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hfmpi2c: FMPI2C handle pointer
* @retval None
*/
void HAL_FMPI2C_MspInit(FMPI2C_HandleTypeDef* hfmpi2c)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b08a      	sub	sp, #40	; 0x28
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f04:	f107 0314 	add.w	r3, r7, #20
 8000f08:	2200      	movs	r2, #0
 8000f0a:	601a      	str	r2, [r3, #0]
 8000f0c:	605a      	str	r2, [r3, #4]
 8000f0e:	609a      	str	r2, [r3, #8]
 8000f10:	60da      	str	r2, [r3, #12]
 8000f12:	611a      	str	r2, [r3, #16]
  if(hfmpi2c->Instance==FMPI2C1)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a19      	ldr	r2, [pc, #100]	; (8000f80 <HAL_FMPI2C_MspInit+0x84>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d12b      	bne.n	8000f76 <HAL_FMPI2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN FMPI2C1_MspInit 0 */

  /* USER CODE END FMPI2C1_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f1e:	2300      	movs	r3, #0
 8000f20:	613b      	str	r3, [r7, #16]
 8000f22:	4b18      	ldr	r3, [pc, #96]	; (8000f84 <HAL_FMPI2C_MspInit+0x88>)
 8000f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f26:	4a17      	ldr	r2, [pc, #92]	; (8000f84 <HAL_FMPI2C_MspInit+0x88>)
 8000f28:	f043 0304 	orr.w	r3, r3, #4
 8000f2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f2e:	4b15      	ldr	r3, [pc, #84]	; (8000f84 <HAL_FMPI2C_MspInit+0x88>)
 8000f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f32:	f003 0304 	and.w	r3, r3, #4
 8000f36:	613b      	str	r3, [r7, #16]
 8000f38:	693b      	ldr	r3, [r7, #16]
    /**FMPI2C1 GPIO Configuration
    PC6     ------> FMPI2C1_SCL
    PC7     ------> FMPI2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f3a:	23c0      	movs	r3, #192	; 0xc0
 8000f3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f3e:	2312      	movs	r3, #18
 8000f40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f42:	2301      	movs	r3, #1
 8000f44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f46:	2303      	movs	r3, #3
 8000f48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_FMPI2C1;
 8000f4a:	2304      	movs	r3, #4
 8000f4c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f4e:	f107 0314 	add.w	r3, r7, #20
 8000f52:	4619      	mov	r1, r3
 8000f54:	480c      	ldr	r0, [pc, #48]	; (8000f88 <HAL_FMPI2C_MspInit+0x8c>)
 8000f56:	f000 fd31 	bl	80019bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_FMPI2C1_CLK_ENABLE();
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	60fb      	str	r3, [r7, #12]
 8000f5e:	4b09      	ldr	r3, [pc, #36]	; (8000f84 <HAL_FMPI2C_MspInit+0x88>)
 8000f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f62:	4a08      	ldr	r2, [pc, #32]	; (8000f84 <HAL_FMPI2C_MspInit+0x88>)
 8000f64:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000f68:	6413      	str	r3, [r2, #64]	; 0x40
 8000f6a:	4b06      	ldr	r3, [pc, #24]	; (8000f84 <HAL_FMPI2C_MspInit+0x88>)
 8000f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f6e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000f72:	60fb      	str	r3, [r7, #12]
 8000f74:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN FMPI2C1_MspInit 1 */

  /* USER CODE END FMPI2C1_MspInit 1 */
  }

}
 8000f76:	bf00      	nop
 8000f78:	3728      	adds	r7, #40	; 0x28
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	40006000 	.word	0x40006000
 8000f84:	40023800 	.word	0x40023800
 8000f88:	40020800 	.word	0x40020800

08000f8c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b090      	sub	sp, #64	; 0x40
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f94:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f98:	2200      	movs	r2, #0
 8000f9a:	601a      	str	r2, [r3, #0]
 8000f9c:	605a      	str	r2, [r3, #4]
 8000f9e:	609a      	str	r2, [r3, #8]
 8000fa0:	60da      	str	r2, [r3, #12]
 8000fa2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a6b      	ldr	r2, [pc, #428]	; (8001158 <HAL_I2C_MspInit+0x1cc>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d12c      	bne.n	8001008 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fae:	2300      	movs	r3, #0
 8000fb0:	62bb      	str	r3, [r7, #40]	; 0x28
 8000fb2:	4b6a      	ldr	r3, [pc, #424]	; (800115c <HAL_I2C_MspInit+0x1d0>)
 8000fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb6:	4a69      	ldr	r2, [pc, #420]	; (800115c <HAL_I2C_MspInit+0x1d0>)
 8000fb8:	f043 0302 	orr.w	r3, r3, #2
 8000fbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000fbe:	4b67      	ldr	r3, [pc, #412]	; (800115c <HAL_I2C_MspInit+0x1d0>)
 8000fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc2:	f003 0302 	and.w	r3, r3, #2
 8000fc6:	62bb      	str	r3, [r7, #40]	; 0x28
 8000fc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000fca:	23c0      	movs	r3, #192	; 0xc0
 8000fcc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fce:	2312      	movs	r3, #18
 8000fd0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fd6:	2303      	movs	r3, #3
 8000fd8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000fda:	2304      	movs	r3, #4
 8000fdc:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fde:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	485e      	ldr	r0, [pc, #376]	; (8001160 <HAL_I2C_MspInit+0x1d4>)
 8000fe6:	f000 fce9 	bl	80019bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000fea:	2300      	movs	r3, #0
 8000fec:	627b      	str	r3, [r7, #36]	; 0x24
 8000fee:	4b5b      	ldr	r3, [pc, #364]	; (800115c <HAL_I2C_MspInit+0x1d0>)
 8000ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff2:	4a5a      	ldr	r2, [pc, #360]	; (800115c <HAL_I2C_MspInit+0x1d0>)
 8000ff4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ff8:	6413      	str	r3, [r2, #64]	; 0x40
 8000ffa:	4b58      	ldr	r3, [pc, #352]	; (800115c <HAL_I2C_MspInit+0x1d0>)
 8000ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ffe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001002:	627b      	str	r3, [r7, #36]	; 0x24
 8001004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001006:	e0a2      	b.n	800114e <HAL_I2C_MspInit+0x1c2>
  else if(hi2c->Instance==I2C2)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4a55      	ldr	r2, [pc, #340]	; (8001164 <HAL_I2C_MspInit+0x1d8>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d14c      	bne.n	80010ac <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001012:	2300      	movs	r3, #0
 8001014:	623b      	str	r3, [r7, #32]
 8001016:	4b51      	ldr	r3, [pc, #324]	; (800115c <HAL_I2C_MspInit+0x1d0>)
 8001018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101a:	4a50      	ldr	r2, [pc, #320]	; (800115c <HAL_I2C_MspInit+0x1d0>)
 800101c:	f043 0302 	orr.w	r3, r3, #2
 8001020:	6313      	str	r3, [r2, #48]	; 0x30
 8001022:	4b4e      	ldr	r3, [pc, #312]	; (800115c <HAL_I2C_MspInit+0x1d0>)
 8001024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001026:	f003 0302 	and.w	r3, r3, #2
 800102a:	623b      	str	r3, [r7, #32]
 800102c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800102e:	2300      	movs	r3, #0
 8001030:	61fb      	str	r3, [r7, #28]
 8001032:	4b4a      	ldr	r3, [pc, #296]	; (800115c <HAL_I2C_MspInit+0x1d0>)
 8001034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001036:	4a49      	ldr	r2, [pc, #292]	; (800115c <HAL_I2C_MspInit+0x1d0>)
 8001038:	f043 0304 	orr.w	r3, r3, #4
 800103c:	6313      	str	r3, [r2, #48]	; 0x30
 800103e:	4b47      	ldr	r3, [pc, #284]	; (800115c <HAL_I2C_MspInit+0x1d0>)
 8001040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001042:	f003 0304 	and.w	r3, r3, #4
 8001046:	61fb      	str	r3, [r7, #28]
 8001048:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800104a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800104e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001050:	2312      	movs	r3, #18
 8001052:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001054:	2301      	movs	r3, #1
 8001056:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001058:	2303      	movs	r3, #3
 800105a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800105c:	2304      	movs	r3, #4
 800105e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001060:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001064:	4619      	mov	r1, r3
 8001066:	483e      	ldr	r0, [pc, #248]	; (8001160 <HAL_I2C_MspInit+0x1d4>)
 8001068:	f000 fca8 	bl	80019bc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800106c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001070:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001072:	2312      	movs	r3, #18
 8001074:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001076:	2301      	movs	r3, #1
 8001078:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800107a:	2303      	movs	r3, #3
 800107c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800107e:	2304      	movs	r3, #4
 8001080:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001082:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001086:	4619      	mov	r1, r3
 8001088:	4837      	ldr	r0, [pc, #220]	; (8001168 <HAL_I2C_MspInit+0x1dc>)
 800108a:	f000 fc97 	bl	80019bc <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800108e:	2300      	movs	r3, #0
 8001090:	61bb      	str	r3, [r7, #24]
 8001092:	4b32      	ldr	r3, [pc, #200]	; (800115c <HAL_I2C_MspInit+0x1d0>)
 8001094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001096:	4a31      	ldr	r2, [pc, #196]	; (800115c <HAL_I2C_MspInit+0x1d0>)
 8001098:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800109c:	6413      	str	r3, [r2, #64]	; 0x40
 800109e:	4b2f      	ldr	r3, [pc, #188]	; (800115c <HAL_I2C_MspInit+0x1d0>)
 80010a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010a6:	61bb      	str	r3, [r7, #24]
 80010a8:	69bb      	ldr	r3, [r7, #24]
}
 80010aa:	e050      	b.n	800114e <HAL_I2C_MspInit+0x1c2>
  else if(hi2c->Instance==I2C3)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a2e      	ldr	r2, [pc, #184]	; (800116c <HAL_I2C_MspInit+0x1e0>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d14b      	bne.n	800114e <HAL_I2C_MspInit+0x1c2>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010b6:	2300      	movs	r3, #0
 80010b8:	617b      	str	r3, [r7, #20]
 80010ba:	4b28      	ldr	r3, [pc, #160]	; (800115c <HAL_I2C_MspInit+0x1d0>)
 80010bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010be:	4a27      	ldr	r2, [pc, #156]	; (800115c <HAL_I2C_MspInit+0x1d0>)
 80010c0:	f043 0304 	orr.w	r3, r3, #4
 80010c4:	6313      	str	r3, [r2, #48]	; 0x30
 80010c6:	4b25      	ldr	r3, [pc, #148]	; (800115c <HAL_I2C_MspInit+0x1d0>)
 80010c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ca:	f003 0304 	and.w	r3, r3, #4
 80010ce:	617b      	str	r3, [r7, #20]
 80010d0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010d2:	2300      	movs	r3, #0
 80010d4:	613b      	str	r3, [r7, #16]
 80010d6:	4b21      	ldr	r3, [pc, #132]	; (800115c <HAL_I2C_MspInit+0x1d0>)
 80010d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010da:	4a20      	ldr	r2, [pc, #128]	; (800115c <HAL_I2C_MspInit+0x1d0>)
 80010dc:	f043 0301 	orr.w	r3, r3, #1
 80010e0:	6313      	str	r3, [r2, #48]	; 0x30
 80010e2:	4b1e      	ldr	r3, [pc, #120]	; (800115c <HAL_I2C_MspInit+0x1d0>)
 80010e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e6:	f003 0301 	and.w	r3, r3, #1
 80010ea:	613b      	str	r3, [r7, #16]
 80010ec:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80010ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010f4:	2312      	movs	r3, #18
 80010f6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010f8:	2301      	movs	r3, #1
 80010fa:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010fc:	2303      	movs	r3, #3
 80010fe:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001100:	2304      	movs	r3, #4
 8001102:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001104:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001108:	4619      	mov	r1, r3
 800110a:	4817      	ldr	r0, [pc, #92]	; (8001168 <HAL_I2C_MspInit+0x1dc>)
 800110c:	f000 fc56 	bl	80019bc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001110:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001114:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001116:	2312      	movs	r3, #18
 8001118:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800111a:	2301      	movs	r3, #1
 800111c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800111e:	2303      	movs	r3, #3
 8001120:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001122:	2304      	movs	r3, #4
 8001124:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001126:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800112a:	4619      	mov	r1, r3
 800112c:	4810      	ldr	r0, [pc, #64]	; (8001170 <HAL_I2C_MspInit+0x1e4>)
 800112e:	f000 fc45 	bl	80019bc <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001132:	2300      	movs	r3, #0
 8001134:	60fb      	str	r3, [r7, #12]
 8001136:	4b09      	ldr	r3, [pc, #36]	; (800115c <HAL_I2C_MspInit+0x1d0>)
 8001138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800113a:	4a08      	ldr	r2, [pc, #32]	; (800115c <HAL_I2C_MspInit+0x1d0>)
 800113c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001140:	6413      	str	r3, [r2, #64]	; 0x40
 8001142:	4b06      	ldr	r3, [pc, #24]	; (800115c <HAL_I2C_MspInit+0x1d0>)
 8001144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001146:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800114a:	60fb      	str	r3, [r7, #12]
 800114c:	68fb      	ldr	r3, [r7, #12]
}
 800114e:	bf00      	nop
 8001150:	3740      	adds	r7, #64	; 0x40
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	40005400 	.word	0x40005400
 800115c:	40023800 	.word	0x40023800
 8001160:	40020400 	.word	0x40020400
 8001164:	40005800 	.word	0x40005800
 8001168:	40020800 	.word	0x40020800
 800116c:	40005c00 	.word	0x40005c00
 8001170:	40020000 	.word	0x40020000

08001174 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b08a      	sub	sp, #40	; 0x28
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800117c:	f107 0314 	add.w	r3, r7, #20
 8001180:	2200      	movs	r2, #0
 8001182:	601a      	str	r2, [r3, #0]
 8001184:	605a      	str	r2, [r3, #4]
 8001186:	609a      	str	r2, [r3, #8]
 8001188:	60da      	str	r2, [r3, #12]
 800118a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a30      	ldr	r2, [pc, #192]	; (8001254 <HAL_SPI_MspInit+0xe0>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d15a      	bne.n	800124c <HAL_SPI_MspInit+0xd8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001196:	2300      	movs	r3, #0
 8001198:	613b      	str	r3, [r7, #16]
 800119a:	4b2f      	ldr	r3, [pc, #188]	; (8001258 <HAL_SPI_MspInit+0xe4>)
 800119c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800119e:	4a2e      	ldr	r2, [pc, #184]	; (8001258 <HAL_SPI_MspInit+0xe4>)
 80011a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011a4:	6413      	str	r3, [r2, #64]	; 0x40
 80011a6:	4b2c      	ldr	r3, [pc, #176]	; (8001258 <HAL_SPI_MspInit+0xe4>)
 80011a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011ae:	613b      	str	r3, [r7, #16]
 80011b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011b2:	2300      	movs	r3, #0
 80011b4:	60fb      	str	r3, [r7, #12]
 80011b6:	4b28      	ldr	r3, [pc, #160]	; (8001258 <HAL_SPI_MspInit+0xe4>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ba:	4a27      	ldr	r2, [pc, #156]	; (8001258 <HAL_SPI_MspInit+0xe4>)
 80011bc:	f043 0304 	orr.w	r3, r3, #4
 80011c0:	6313      	str	r3, [r2, #48]	; 0x30
 80011c2:	4b25      	ldr	r3, [pc, #148]	; (8001258 <HAL_SPI_MspInit+0xe4>)
 80011c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c6:	f003 0304 	and.w	r3, r3, #4
 80011ca:	60fb      	str	r3, [r7, #12]
 80011cc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ce:	2300      	movs	r3, #0
 80011d0:	60bb      	str	r3, [r7, #8]
 80011d2:	4b21      	ldr	r3, [pc, #132]	; (8001258 <HAL_SPI_MspInit+0xe4>)
 80011d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d6:	4a20      	ldr	r2, [pc, #128]	; (8001258 <HAL_SPI_MspInit+0xe4>)
 80011d8:	f043 0302 	orr.w	r3, r3, #2
 80011dc:	6313      	str	r3, [r2, #48]	; 0x30
 80011de:	4b1e      	ldr	r3, [pc, #120]	; (8001258 <HAL_SPI_MspInit+0xe4>)
 80011e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e2:	f003 0302 	and.w	r3, r3, #2
 80011e6:	60bb      	str	r3, [r7, #8]
 80011e8:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC1     ------> SPI2_MOSI
    PC2     ------> SPI2_MISO
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80011ea:	2302      	movs	r3, #2
 80011ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ee:	2302      	movs	r3, #2
 80011f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f2:	2300      	movs	r3, #0
 80011f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011f6:	2303      	movs	r3, #3
 80011f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 80011fa:	2307      	movs	r3, #7
 80011fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011fe:	f107 0314 	add.w	r3, r7, #20
 8001202:	4619      	mov	r1, r3
 8001204:	4815      	ldr	r0, [pc, #84]	; (800125c <HAL_SPI_MspInit+0xe8>)
 8001206:	f000 fbd9 	bl	80019bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800120a:	2304      	movs	r3, #4
 800120c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800120e:	2302      	movs	r3, #2
 8001210:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001212:	2300      	movs	r3, #0
 8001214:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001216:	2303      	movs	r3, #3
 8001218:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800121a:	2305      	movs	r3, #5
 800121c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800121e:	f107 0314 	add.w	r3, r7, #20
 8001222:	4619      	mov	r1, r3
 8001224:	480d      	ldr	r0, [pc, #52]	; (800125c <HAL_SPI_MspInit+0xe8>)
 8001226:	f000 fbc9 	bl	80019bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800122a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800122e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001230:	2302      	movs	r3, #2
 8001232:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001234:	2300      	movs	r3, #0
 8001236:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001238:	2303      	movs	r3, #3
 800123a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800123c:	2305      	movs	r3, #5
 800123e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001240:	f107 0314 	add.w	r3, r7, #20
 8001244:	4619      	mov	r1, r3
 8001246:	4806      	ldr	r0, [pc, #24]	; (8001260 <HAL_SPI_MspInit+0xec>)
 8001248:	f000 fbb8 	bl	80019bc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800124c:	bf00      	nop
 800124e:	3728      	adds	r7, #40	; 0x28
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	40003800 	.word	0x40003800
 8001258:	40023800 	.word	0x40023800
 800125c:	40020800 	.word	0x40020800
 8001260:	40020400 	.word	0x40020400

08001264 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001264:	b480      	push	{r7}
 8001266:	b085      	sub	sp, #20
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a0b      	ldr	r2, [pc, #44]	; (80012a0 <HAL_TIM_Base_MspInit+0x3c>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d10d      	bne.n	8001292 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001276:	2300      	movs	r3, #0
 8001278:	60fb      	str	r3, [r7, #12]
 800127a:	4b0a      	ldr	r3, [pc, #40]	; (80012a4 <HAL_TIM_Base_MspInit+0x40>)
 800127c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800127e:	4a09      	ldr	r2, [pc, #36]	; (80012a4 <HAL_TIM_Base_MspInit+0x40>)
 8001280:	f043 0301 	orr.w	r3, r3, #1
 8001284:	6453      	str	r3, [r2, #68]	; 0x44
 8001286:	4b07      	ldr	r3, [pc, #28]	; (80012a4 <HAL_TIM_Base_MspInit+0x40>)
 8001288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800128a:	f003 0301 	and.w	r3, r3, #1
 800128e:	60fb      	str	r3, [r7, #12]
 8001290:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001292:	bf00      	nop
 8001294:	3714      	adds	r7, #20
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
 800129e:	bf00      	nop
 80012a0:	40010000 	.word	0x40010000
 80012a4:	40023800 	.word	0x40023800

080012a8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b085      	sub	sp, #20
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM8)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a0b      	ldr	r2, [pc, #44]	; (80012e4 <HAL_TIM_PWM_MspInit+0x3c>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d10d      	bne.n	80012d6 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 80012ba:	2300      	movs	r3, #0
 80012bc:	60fb      	str	r3, [r7, #12]
 80012be:	4b0a      	ldr	r3, [pc, #40]	; (80012e8 <HAL_TIM_PWM_MspInit+0x40>)
 80012c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012c2:	4a09      	ldr	r2, [pc, #36]	; (80012e8 <HAL_TIM_PWM_MspInit+0x40>)
 80012c4:	f043 0302 	orr.w	r3, r3, #2
 80012c8:	6453      	str	r3, [r2, #68]	; 0x44
 80012ca:	4b07      	ldr	r3, [pc, #28]	; (80012e8 <HAL_TIM_PWM_MspInit+0x40>)
 80012cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ce:	f003 0302 	and.w	r3, r3, #2
 80012d2:	60fb      	str	r3, [r7, #12]
 80012d4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80012d6:	bf00      	nop
 80012d8:	3714      	adds	r7, #20
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	40010400 	.word	0x40010400
 80012e8:	40023800 	.word	0x40023800

080012ec <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b08a      	sub	sp, #40	; 0x28
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f4:	f107 0314 	add.w	r3, r7, #20
 80012f8:	2200      	movs	r2, #0
 80012fa:	601a      	str	r2, [r3, #0]
 80012fc:	605a      	str	r2, [r3, #4]
 80012fe:	609a      	str	r2, [r3, #8]
 8001300:	60da      	str	r2, [r3, #12]
 8001302:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a25      	ldr	r2, [pc, #148]	; (80013a0 <HAL_TIM_MspPostInit+0xb4>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d11f      	bne.n	800134e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800130e:	2300      	movs	r3, #0
 8001310:	613b      	str	r3, [r7, #16]
 8001312:	4b24      	ldr	r3, [pc, #144]	; (80013a4 <HAL_TIM_MspPostInit+0xb8>)
 8001314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001316:	4a23      	ldr	r2, [pc, #140]	; (80013a4 <HAL_TIM_MspPostInit+0xb8>)
 8001318:	f043 0301 	orr.w	r3, r3, #1
 800131c:	6313      	str	r3, [r2, #48]	; 0x30
 800131e:	4b21      	ldr	r3, [pc, #132]	; (80013a4 <HAL_TIM_MspPostInit+0xb8>)
 8001320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001322:	f003 0301 	and.w	r3, r3, #1
 8001326:	613b      	str	r3, [r7, #16]
 8001328:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 800132a:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 800132e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001330:	2302      	movs	r3, #2
 8001332:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001334:	2300      	movs	r3, #0
 8001336:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001338:	2300      	movs	r3, #0
 800133a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800133c:	2301      	movs	r3, #1
 800133e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001340:	f107 0314 	add.w	r3, r7, #20
 8001344:	4619      	mov	r1, r3
 8001346:	4818      	ldr	r0, [pc, #96]	; (80013a8 <HAL_TIM_MspPostInit+0xbc>)
 8001348:	f000 fb38 	bl	80019bc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 800134c:	e023      	b.n	8001396 <HAL_TIM_MspPostInit+0xaa>
  else if(htim->Instance==TIM8)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a16      	ldr	r2, [pc, #88]	; (80013ac <HAL_TIM_MspPostInit+0xc0>)
 8001354:	4293      	cmp	r3, r2
 8001356:	d11e      	bne.n	8001396 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001358:	2300      	movs	r3, #0
 800135a:	60fb      	str	r3, [r7, #12]
 800135c:	4b11      	ldr	r3, [pc, #68]	; (80013a4 <HAL_TIM_MspPostInit+0xb8>)
 800135e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001360:	4a10      	ldr	r2, [pc, #64]	; (80013a4 <HAL_TIM_MspPostInit+0xb8>)
 8001362:	f043 0304 	orr.w	r3, r3, #4
 8001366:	6313      	str	r3, [r2, #48]	; 0x30
 8001368:	4b0e      	ldr	r3, [pc, #56]	; (80013a4 <HAL_TIM_MspPostInit+0xb8>)
 800136a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136c:	f003 0304 	and.w	r3, r3, #4
 8001370:	60fb      	str	r3, [r7, #12]
 8001372:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001374:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001378:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800137a:	2302      	movs	r3, #2
 800137c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137e:	2300      	movs	r3, #0
 8001380:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001382:	2300      	movs	r3, #0
 8001384:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001386:	2303      	movs	r3, #3
 8001388:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800138a:	f107 0314 	add.w	r3, r7, #20
 800138e:	4619      	mov	r1, r3
 8001390:	4807      	ldr	r0, [pc, #28]	; (80013b0 <HAL_TIM_MspPostInit+0xc4>)
 8001392:	f000 fb13 	bl	80019bc <HAL_GPIO_Init>
}
 8001396:	bf00      	nop
 8001398:	3728      	adds	r7, #40	; 0x28
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	40010000 	.word	0x40010000
 80013a4:	40023800 	.word	0x40023800
 80013a8:	40020000 	.word	0x40020000
 80013ac:	40010400 	.word	0x40010400
 80013b0:	40020800 	.word	0x40020800

080013b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b08a      	sub	sp, #40	; 0x28
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013bc:	f107 0314 	add.w	r3, r7, #20
 80013c0:	2200      	movs	r2, #0
 80013c2:	601a      	str	r2, [r3, #0]
 80013c4:	605a      	str	r2, [r3, #4]
 80013c6:	609a      	str	r2, [r3, #8]
 80013c8:	60da      	str	r2, [r3, #12]
 80013ca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a19      	ldr	r2, [pc, #100]	; (8001438 <HAL_UART_MspInit+0x84>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d12b      	bne.n	800142e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80013d6:	2300      	movs	r3, #0
 80013d8:	613b      	str	r3, [r7, #16]
 80013da:	4b18      	ldr	r3, [pc, #96]	; (800143c <HAL_UART_MspInit+0x88>)
 80013dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013de:	4a17      	ldr	r2, [pc, #92]	; (800143c <HAL_UART_MspInit+0x88>)
 80013e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013e4:	6413      	str	r3, [r2, #64]	; 0x40
 80013e6:	4b15      	ldr	r3, [pc, #84]	; (800143c <HAL_UART_MspInit+0x88>)
 80013e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ee:	613b      	str	r3, [r7, #16]
 80013f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013f2:	2300      	movs	r3, #0
 80013f4:	60fb      	str	r3, [r7, #12]
 80013f6:	4b11      	ldr	r3, [pc, #68]	; (800143c <HAL_UART_MspInit+0x88>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fa:	4a10      	ldr	r2, [pc, #64]	; (800143c <HAL_UART_MspInit+0x88>)
 80013fc:	f043 0301 	orr.w	r3, r3, #1
 8001400:	6313      	str	r3, [r2, #48]	; 0x30
 8001402:	4b0e      	ldr	r3, [pc, #56]	; (800143c <HAL_UART_MspInit+0x88>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001406:	f003 0301 	and.w	r3, r3, #1
 800140a:	60fb      	str	r3, [r7, #12]
 800140c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800140e:	230c      	movs	r3, #12
 8001410:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001412:	2302      	movs	r3, #2
 8001414:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001416:	2300      	movs	r3, #0
 8001418:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800141a:	2303      	movs	r3, #3
 800141c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800141e:	2307      	movs	r3, #7
 8001420:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001422:	f107 0314 	add.w	r3, r7, #20
 8001426:	4619      	mov	r1, r3
 8001428:	4805      	ldr	r0, [pc, #20]	; (8001440 <HAL_UART_MspInit+0x8c>)
 800142a:	f000 fac7 	bl	80019bc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800142e:	bf00      	nop
 8001430:	3728      	adds	r7, #40	; 0x28
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	40004400 	.word	0x40004400
 800143c:	40023800 	.word	0x40023800
 8001440:	40020000 	.word	0x40020000

08001444 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001448:	e7fe      	b.n	8001448 <NMI_Handler+0x4>

0800144a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800144a:	b480      	push	{r7}
 800144c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800144e:	e7fe      	b.n	800144e <HardFault_Handler+0x4>

08001450 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001454:	e7fe      	b.n	8001454 <MemManage_Handler+0x4>

08001456 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001456:	b480      	push	{r7}
 8001458:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800145a:	e7fe      	b.n	800145a <BusFault_Handler+0x4>

0800145c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001460:	e7fe      	b.n	8001460 <UsageFault_Handler+0x4>

08001462 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001462:	b480      	push	{r7}
 8001464:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001466:	bf00      	nop
 8001468:	46bd      	mov	sp, r7
 800146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146e:	4770      	bx	lr

08001470 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001474:	bf00      	nop
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr

0800147e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800147e:	b480      	push	{r7}
 8001480:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001482:	bf00      	nop
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr

0800148c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001490:	f000 f890 	bl	80015b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001494:	bf00      	nop
 8001496:	bd80      	pop	{r7, pc}

08001498 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800149c:	4b06      	ldr	r3, [pc, #24]	; (80014b8 <SystemInit+0x20>)
 800149e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014a2:	4a05      	ldr	r2, [pc, #20]	; (80014b8 <SystemInit+0x20>)
 80014a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014ac:	bf00      	nop
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr
 80014b6:	bf00      	nop
 80014b8:	e000ed00 	.word	0xe000ed00

080014bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80014bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014f4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80014c0:	480d      	ldr	r0, [pc, #52]	; (80014f8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80014c2:	490e      	ldr	r1, [pc, #56]	; (80014fc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80014c4:	4a0e      	ldr	r2, [pc, #56]	; (8001500 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80014c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014c8:	e002      	b.n	80014d0 <LoopCopyDataInit>

080014ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014ce:	3304      	adds	r3, #4

080014d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014d4:	d3f9      	bcc.n	80014ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014d6:	4a0b      	ldr	r2, [pc, #44]	; (8001504 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80014d8:	4c0b      	ldr	r4, [pc, #44]	; (8001508 <LoopFillZerobss+0x26>)
  movs r3, #0
 80014da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014dc:	e001      	b.n	80014e2 <LoopFillZerobss>

080014de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014e0:	3204      	adds	r2, #4

080014e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014e4:	d3fb      	bcc.n	80014de <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80014e6:	f7ff ffd7 	bl	8001498 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014ea:	f008 fdab 	bl	800a044 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014ee:	f7ff f8bb 	bl	8000668 <main>
  bx  lr    
 80014f2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80014f4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80014f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014fc:	20000344 	.word	0x20000344
  ldr r2, =_sidata
 8001500:	0800a108 	.word	0x0800a108
  ldr r2, =_sbss
 8001504:	20000344 	.word	0x20000344
  ldr r4, =_ebss
 8001508:	20000ac8 	.word	0x20000ac8

0800150c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800150c:	e7fe      	b.n	800150c <ADC_IRQHandler>
	...

08001510 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001514:	4b0e      	ldr	r3, [pc, #56]	; (8001550 <HAL_Init+0x40>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a0d      	ldr	r2, [pc, #52]	; (8001550 <HAL_Init+0x40>)
 800151a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800151e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001520:	4b0b      	ldr	r3, [pc, #44]	; (8001550 <HAL_Init+0x40>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a0a      	ldr	r2, [pc, #40]	; (8001550 <HAL_Init+0x40>)
 8001526:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800152a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800152c:	4b08      	ldr	r3, [pc, #32]	; (8001550 <HAL_Init+0x40>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a07      	ldr	r2, [pc, #28]	; (8001550 <HAL_Init+0x40>)
 8001532:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001536:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001538:	2003      	movs	r0, #3
 800153a:	f000 f931 	bl	80017a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800153e:	2000      	movs	r0, #0
 8001540:	f000 f808 	bl	8001554 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001544:	f7ff fcb2 	bl	8000eac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001548:	2300      	movs	r3, #0
}
 800154a:	4618      	mov	r0, r3
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	40023c00 	.word	0x40023c00

08001554 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800155c:	4b12      	ldr	r3, [pc, #72]	; (80015a8 <HAL_InitTick+0x54>)
 800155e:	681a      	ldr	r2, [r3, #0]
 8001560:	4b12      	ldr	r3, [pc, #72]	; (80015ac <HAL_InitTick+0x58>)
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	4619      	mov	r1, r3
 8001566:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800156a:	fbb3 f3f1 	udiv	r3, r3, r1
 800156e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001572:	4618      	mov	r0, r3
 8001574:	f000 f93b 	bl	80017ee <HAL_SYSTICK_Config>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800157e:	2301      	movs	r3, #1
 8001580:	e00e      	b.n	80015a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2b0f      	cmp	r3, #15
 8001586:	d80a      	bhi.n	800159e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001588:	2200      	movs	r2, #0
 800158a:	6879      	ldr	r1, [r7, #4]
 800158c:	f04f 30ff 	mov.w	r0, #4294967295
 8001590:	f000 f911 	bl	80017b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001594:	4a06      	ldr	r2, [pc, #24]	; (80015b0 <HAL_InitTick+0x5c>)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800159a:	2300      	movs	r3, #0
 800159c:	e000      	b.n	80015a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800159e:	2301      	movs	r3, #1
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	3708      	adds	r7, #8
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	2000007c 	.word	0x2000007c
 80015ac:	20000084 	.word	0x20000084
 80015b0:	20000080 	.word	0x20000080

080015b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015b8:	4b06      	ldr	r3, [pc, #24]	; (80015d4 <HAL_IncTick+0x20>)
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	461a      	mov	r2, r3
 80015be:	4b06      	ldr	r3, [pc, #24]	; (80015d8 <HAL_IncTick+0x24>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4413      	add	r3, r2
 80015c4:	4a04      	ldr	r2, [pc, #16]	; (80015d8 <HAL_IncTick+0x24>)
 80015c6:	6013      	str	r3, [r2, #0]
}
 80015c8:	bf00      	nop
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop
 80015d4:	20000084 	.word	0x20000084
 80015d8:	20000a84 	.word	0x20000a84

080015dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  return uwTick;
 80015e0:	4b03      	ldr	r3, [pc, #12]	; (80015f0 <HAL_GetTick+0x14>)
 80015e2:	681b      	ldr	r3, [r3, #0]
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr
 80015ee:	bf00      	nop
 80015f0:	20000a84 	.word	0x20000a84

080015f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b084      	sub	sp, #16
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015fc:	f7ff ffee 	bl	80015dc <HAL_GetTick>
 8001600:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	f1b3 3fff 	cmp.w	r3, #4294967295
 800160c:	d005      	beq.n	800161a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800160e:	4b0a      	ldr	r3, [pc, #40]	; (8001638 <HAL_Delay+0x44>)
 8001610:	781b      	ldrb	r3, [r3, #0]
 8001612:	461a      	mov	r2, r3
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	4413      	add	r3, r2
 8001618:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800161a:	bf00      	nop
 800161c:	f7ff ffde 	bl	80015dc <HAL_GetTick>
 8001620:	4602      	mov	r2, r0
 8001622:	68bb      	ldr	r3, [r7, #8]
 8001624:	1ad3      	subs	r3, r2, r3
 8001626:	68fa      	ldr	r2, [r7, #12]
 8001628:	429a      	cmp	r2, r3
 800162a:	d8f7      	bhi.n	800161c <HAL_Delay+0x28>
  {
  }
}
 800162c:	bf00      	nop
 800162e:	bf00      	nop
 8001630:	3710      	adds	r7, #16
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	20000084 	.word	0x20000084

0800163c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800163c:	b480      	push	{r7}
 800163e:	b085      	sub	sp, #20
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	f003 0307 	and.w	r3, r3, #7
 800164a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800164c:	4b0c      	ldr	r3, [pc, #48]	; (8001680 <__NVIC_SetPriorityGrouping+0x44>)
 800164e:	68db      	ldr	r3, [r3, #12]
 8001650:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001652:	68ba      	ldr	r2, [r7, #8]
 8001654:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001658:	4013      	ands	r3, r2
 800165a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001660:	68bb      	ldr	r3, [r7, #8]
 8001662:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001664:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001668:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800166c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800166e:	4a04      	ldr	r2, [pc, #16]	; (8001680 <__NVIC_SetPriorityGrouping+0x44>)
 8001670:	68bb      	ldr	r3, [r7, #8]
 8001672:	60d3      	str	r3, [r2, #12]
}
 8001674:	bf00      	nop
 8001676:	3714      	adds	r7, #20
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr
 8001680:	e000ed00 	.word	0xe000ed00

08001684 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001688:	4b04      	ldr	r3, [pc, #16]	; (800169c <__NVIC_GetPriorityGrouping+0x18>)
 800168a:	68db      	ldr	r3, [r3, #12]
 800168c:	0a1b      	lsrs	r3, r3, #8
 800168e:	f003 0307 	and.w	r3, r3, #7
}
 8001692:	4618      	mov	r0, r3
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr
 800169c:	e000ed00 	.word	0xe000ed00

080016a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b083      	sub	sp, #12
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	4603      	mov	r3, r0
 80016a8:	6039      	str	r1, [r7, #0]
 80016aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	db0a      	blt.n	80016ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	b2da      	uxtb	r2, r3
 80016b8:	490c      	ldr	r1, [pc, #48]	; (80016ec <__NVIC_SetPriority+0x4c>)
 80016ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016be:	0112      	lsls	r2, r2, #4
 80016c0:	b2d2      	uxtb	r2, r2
 80016c2:	440b      	add	r3, r1
 80016c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016c8:	e00a      	b.n	80016e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	b2da      	uxtb	r2, r3
 80016ce:	4908      	ldr	r1, [pc, #32]	; (80016f0 <__NVIC_SetPriority+0x50>)
 80016d0:	79fb      	ldrb	r3, [r7, #7]
 80016d2:	f003 030f 	and.w	r3, r3, #15
 80016d6:	3b04      	subs	r3, #4
 80016d8:	0112      	lsls	r2, r2, #4
 80016da:	b2d2      	uxtb	r2, r2
 80016dc:	440b      	add	r3, r1
 80016de:	761a      	strb	r2, [r3, #24]
}
 80016e0:	bf00      	nop
 80016e2:	370c      	adds	r7, #12
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr
 80016ec:	e000e100 	.word	0xe000e100
 80016f0:	e000ed00 	.word	0xe000ed00

080016f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b089      	sub	sp, #36	; 0x24
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	60f8      	str	r0, [r7, #12]
 80016fc:	60b9      	str	r1, [r7, #8]
 80016fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	f003 0307 	and.w	r3, r3, #7
 8001706:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001708:	69fb      	ldr	r3, [r7, #28]
 800170a:	f1c3 0307 	rsb	r3, r3, #7
 800170e:	2b04      	cmp	r3, #4
 8001710:	bf28      	it	cs
 8001712:	2304      	movcs	r3, #4
 8001714:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001716:	69fb      	ldr	r3, [r7, #28]
 8001718:	3304      	adds	r3, #4
 800171a:	2b06      	cmp	r3, #6
 800171c:	d902      	bls.n	8001724 <NVIC_EncodePriority+0x30>
 800171e:	69fb      	ldr	r3, [r7, #28]
 8001720:	3b03      	subs	r3, #3
 8001722:	e000      	b.n	8001726 <NVIC_EncodePriority+0x32>
 8001724:	2300      	movs	r3, #0
 8001726:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001728:	f04f 32ff 	mov.w	r2, #4294967295
 800172c:	69bb      	ldr	r3, [r7, #24]
 800172e:	fa02 f303 	lsl.w	r3, r2, r3
 8001732:	43da      	mvns	r2, r3
 8001734:	68bb      	ldr	r3, [r7, #8]
 8001736:	401a      	ands	r2, r3
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800173c:	f04f 31ff 	mov.w	r1, #4294967295
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	fa01 f303 	lsl.w	r3, r1, r3
 8001746:	43d9      	mvns	r1, r3
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800174c:	4313      	orrs	r3, r2
         );
}
 800174e:	4618      	mov	r0, r3
 8001750:	3724      	adds	r7, #36	; 0x24
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr
	...

0800175c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b082      	sub	sp, #8
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	3b01      	subs	r3, #1
 8001768:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800176c:	d301      	bcc.n	8001772 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800176e:	2301      	movs	r3, #1
 8001770:	e00f      	b.n	8001792 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001772:	4a0a      	ldr	r2, [pc, #40]	; (800179c <SysTick_Config+0x40>)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	3b01      	subs	r3, #1
 8001778:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800177a:	210f      	movs	r1, #15
 800177c:	f04f 30ff 	mov.w	r0, #4294967295
 8001780:	f7ff ff8e 	bl	80016a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001784:	4b05      	ldr	r3, [pc, #20]	; (800179c <SysTick_Config+0x40>)
 8001786:	2200      	movs	r2, #0
 8001788:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800178a:	4b04      	ldr	r3, [pc, #16]	; (800179c <SysTick_Config+0x40>)
 800178c:	2207      	movs	r2, #7
 800178e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001790:	2300      	movs	r3, #0
}
 8001792:	4618      	mov	r0, r3
 8001794:	3708      	adds	r7, #8
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	e000e010 	.word	0xe000e010

080017a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017a8:	6878      	ldr	r0, [r7, #4]
 80017aa:	f7ff ff47 	bl	800163c <__NVIC_SetPriorityGrouping>
}
 80017ae:	bf00      	nop
 80017b0:	3708      	adds	r7, #8
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}

080017b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017b6:	b580      	push	{r7, lr}
 80017b8:	b086      	sub	sp, #24
 80017ba:	af00      	add	r7, sp, #0
 80017bc:	4603      	mov	r3, r0
 80017be:	60b9      	str	r1, [r7, #8]
 80017c0:	607a      	str	r2, [r7, #4]
 80017c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017c4:	2300      	movs	r3, #0
 80017c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017c8:	f7ff ff5c 	bl	8001684 <__NVIC_GetPriorityGrouping>
 80017cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017ce:	687a      	ldr	r2, [r7, #4]
 80017d0:	68b9      	ldr	r1, [r7, #8]
 80017d2:	6978      	ldr	r0, [r7, #20]
 80017d4:	f7ff ff8e 	bl	80016f4 <NVIC_EncodePriority>
 80017d8:	4602      	mov	r2, r0
 80017da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017de:	4611      	mov	r1, r2
 80017e0:	4618      	mov	r0, r3
 80017e2:	f7ff ff5d 	bl	80016a0 <__NVIC_SetPriority>
}
 80017e6:	bf00      	nop
 80017e8:	3718      	adds	r7, #24
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}

080017ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017ee:	b580      	push	{r7, lr}
 80017f0:	b082      	sub	sp, #8
 80017f2:	af00      	add	r7, sp, #0
 80017f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017f6:	6878      	ldr	r0, [r7, #4]
 80017f8:	f7ff ffb0 	bl	800175c <SysTick_Config>
 80017fc:	4603      	mov	r3, r0
}
 80017fe:	4618      	mov	r0, r3
 8001800:	3708      	adds	r7, #8
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}

08001806 <HAL_FMPI2C_Init>:
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FMPI2C_Init(FMPI2C_HandleTypeDef *hfmpi2c)
{
 8001806:	b580      	push	{r7, lr}
 8001808:	b082      	sub	sp, #8
 800180a:	af00      	add	r7, sp, #0
 800180c:	6078      	str	r0, [r7, #4]
  /* Check the FMPI2C handle allocation */
  if (hfmpi2c == NULL)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d101      	bne.n	8001818 <HAL_FMPI2C_Init+0x12>
  {
    return HAL_ERROR;
 8001814:	2301      	movs	r3, #1
 8001816:	e081      	b.n	800191c <HAL_FMPI2C_Init+0x116>
  assert_param(IS_FMPI2C_OWN_ADDRESS2(hfmpi2c->Init.OwnAddress2));
  assert_param(IS_FMPI2C_OWN_ADDRESS2_MASK(hfmpi2c->Init.OwnAddress2Masks));
  assert_param(IS_FMPI2C_GENERAL_CALL(hfmpi2c->Init.GeneralCallMode));
  assert_param(IS_FMPI2C_NO_STRETCH(hfmpi2c->Init.NoStretchMode));

  if (hfmpi2c->State == HAL_FMPI2C_STATE_RESET)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800181e:	b2db      	uxtb	r3, r3
 8001820:	2b00      	cmp	r3, #0
 8001822:	d106      	bne.n	8001832 <HAL_FMPI2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfmpi2c->Lock = HAL_UNLOCKED;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2200      	movs	r2, #0
 8001828:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hfmpi2c->MspInitCallback(hfmpi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_FMPI2C_MspInit(hfmpi2c);
 800182c:	6878      	ldr	r0, [r7, #4]
 800182e:	f7ff fb65 	bl	8000efc <HAL_FMPI2C_MspInit>
#endif /* USE_HAL_FMPI2C_REGISTER_CALLBACKS */
  }

  hfmpi2c->State = HAL_FMPI2C_STATE_BUSY;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2224      	movs	r2, #36	; 0x24
 8001836:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected FMPI2C peripheral */
  __HAL_FMPI2C_DISABLE(hfmpi2c);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f022 0201 	bic.w	r2, r2, #1
 8001848:	601a      	str	r2, [r3, #0]

  /*---------------------------- FMPI2Cx TIMINGR Configuration ------------------*/
  /* Configure FMPI2Cx: Frequency range */
  hfmpi2c->Instance->TIMINGR = hfmpi2c->Init.Timing & TIMING_CLEAR_MASK;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	685a      	ldr	r2, [r3, #4]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001856:	611a      	str	r2, [r3, #16]

  /*---------------------------- FMPI2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hfmpi2c->Instance->OAR1 &= ~FMPI2C_OAR1_OA1EN;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	689a      	ldr	r2, [r3, #8]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001866:	609a      	str	r2, [r3, #8]

  /* Configure FMPI2Cx: Own Address1 and ack own address1 mode */
  if (hfmpi2c->Init.AddressingMode == FMPI2C_ADDRESSINGMODE_7BIT)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	68db      	ldr	r3, [r3, #12]
 800186c:	2b01      	cmp	r3, #1
 800186e:	d107      	bne.n	8001880 <HAL_FMPI2C_Init+0x7a>
  {
    hfmpi2c->Instance->OAR1 = (FMPI2C_OAR1_OA1EN | hfmpi2c->Init.OwnAddress1);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	689a      	ldr	r2, [r3, #8]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800187c:	609a      	str	r2, [r3, #8]
 800187e:	e006      	b.n	800188e <HAL_FMPI2C_Init+0x88>
  }
  else /* FMPI2C_ADDRESSINGMODE_10BIT */
  {
    hfmpi2c->Instance->OAR1 = (FMPI2C_OAR1_OA1EN | FMPI2C_OAR1_OA1MODE | hfmpi2c->Init.OwnAddress1);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	689a      	ldr	r2, [r3, #8]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800188c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- FMPI2Cx CR2 Configuration ----------------------*/
  /* Configure FMPI2Cx: Addressing Master mode */
  if (hfmpi2c->Init.AddressingMode == FMPI2C_ADDRESSINGMODE_10BIT)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	68db      	ldr	r3, [r3, #12]
 8001892:	2b02      	cmp	r3, #2
 8001894:	d104      	bne.n	80018a0 <HAL_FMPI2C_Init+0x9a>
  {
    hfmpi2c->Instance->CR2 = (FMPI2C_CR2_ADD10);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800189e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hfmpi2c->Instance->CR2 |= (FMPI2C_CR2_AUTOEND | FMPI2C_CR2_NACK);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	687a      	ldr	r2, [r7, #4]
 80018a8:	6812      	ldr	r2, [r2, #0]
 80018aa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80018ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018b2:	6053      	str	r3, [r2, #4]

  /*---------------------------- FMPI2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hfmpi2c->Instance->OAR2 &= ~FMPI2C_DUALADDRESS_ENABLE;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	68da      	ldr	r2, [r3, #12]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80018c2:	60da      	str	r2, [r3, #12]

  /* Configure FMPI2Cx: Dual mode and Own Address2 */
  hfmpi2c->Instance->OAR2 = (hfmpi2c->Init.DualAddressMode | hfmpi2c->Init.OwnAddress2 | \
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	691a      	ldr	r2, [r3, #16]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	695b      	ldr	r3, [r3, #20]
 80018cc:	ea42 0103 	orr.w	r1, r2, r3
                             (hfmpi2c->Init.OwnAddress2Masks << 8));
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	699b      	ldr	r3, [r3, #24]
 80018d4:	021a      	lsls	r2, r3, #8
  hfmpi2c->Instance->OAR2 = (hfmpi2c->Init.DualAddressMode | hfmpi2c->Init.OwnAddress2 | \
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	430a      	orrs	r2, r1
 80018dc:	60da      	str	r2, [r3, #12]

  /*---------------------------- FMPI2Cx CR1 Configuration ----------------------*/
  /* Configure FMPI2Cx: Generalcall and NoStretch mode */
  hfmpi2c->Instance->CR1 = (hfmpi2c->Init.GeneralCallMode | hfmpi2c->Init.NoStretchMode);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	69d9      	ldr	r1, [r3, #28]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6a1a      	ldr	r2, [r3, #32]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	430a      	orrs	r2, r1
 80018ec:	601a      	str	r2, [r3, #0]

  /* Enable the selected FMPI2C peripheral */
  __HAL_FMPI2C_ENABLE(hfmpi2c);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f042 0201 	orr.w	r2, r2, #1
 80018fc:	601a      	str	r2, [r3, #0]

  hfmpi2c->ErrorCode = HAL_FMPI2C_ERROR_NONE;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2200      	movs	r2, #0
 8001902:	645a      	str	r2, [r3, #68]	; 0x44
  hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2220      	movs	r2, #32
 8001908:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hfmpi2c->PreviousState = FMPI2C_STATE_NONE;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2200      	movs	r2, #0
 8001910:	631a      	str	r2, [r3, #48]	; 0x30
  hfmpi2c->Mode = HAL_FMPI2C_MODE_NONE;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2200      	movs	r2, #0
 8001916:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800191a:	2300      	movs	r3, #0
}
 800191c:	4618      	mov	r0, r3
 800191e:	3708      	adds	r7, #8
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}

08001924 <HAL_FMPI2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified FMPI2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FMPI2CEx_ConfigAnalogFilter(FMPI2C_HandleTypeDef *hfmpi2c, uint32_t AnalogFilter)
{
 8001924:	b480      	push	{r7}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
 800192c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMPI2C_ALL_INSTANCE(hfmpi2c->Instance));
  assert_param(IS_FMPI2C_ANALOG_FILTER(AnalogFilter));

  if (hfmpi2c->State == HAL_FMPI2C_STATE_READY)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001934:	b2db      	uxtb	r3, r3
 8001936:	2b20      	cmp	r3, #32
 8001938:	d138      	bne.n	80019ac <HAL_FMPI2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hfmpi2c);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001940:	2b01      	cmp	r3, #1
 8001942:	d101      	bne.n	8001948 <HAL_FMPI2CEx_ConfigAnalogFilter+0x24>
 8001944:	2302      	movs	r3, #2
 8001946:	e032      	b.n	80019ae <HAL_FMPI2CEx_ConfigAnalogFilter+0x8a>
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2201      	movs	r2, #1
 800194c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hfmpi2c->State = HAL_FMPI2C_STATE_BUSY;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2224      	movs	r2, #36	; 0x24
 8001954:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected FMPI2C peripheral */
    __HAL_FMPI2C_DISABLE(hfmpi2c);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	681a      	ldr	r2, [r3, #0]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f022 0201 	bic.w	r2, r2, #1
 8001966:	601a      	str	r2, [r3, #0]

    /* Reset FMPI2Cx ANOFF bit */
    hfmpi2c->Instance->CR1 &= ~(FMPI2C_CR1_ANFOFF);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001976:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hfmpi2c->Instance->CR1 |= AnalogFilter;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	6819      	ldr	r1, [r3, #0]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	683a      	ldr	r2, [r7, #0]
 8001984:	430a      	orrs	r2, r1
 8001986:	601a      	str	r2, [r3, #0]

    __HAL_FMPI2C_ENABLE(hfmpi2c);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	681a      	ldr	r2, [r3, #0]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f042 0201 	orr.w	r2, r2, #1
 8001996:	601a      	str	r2, [r3, #0]

    hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2220      	movs	r2, #32
 800199c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hfmpi2c);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2200      	movs	r2, #0
 80019a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80019a8:	2300      	movs	r3, #0
 80019aa:	e000      	b.n	80019ae <HAL_FMPI2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80019ac:	2302      	movs	r3, #2
  }
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	370c      	adds	r7, #12
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr
	...

080019bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019bc:	b480      	push	{r7}
 80019be:	b089      	sub	sp, #36	; 0x24
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
 80019c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80019c6:	2300      	movs	r3, #0
 80019c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80019ca:	2300      	movs	r3, #0
 80019cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80019ce:	2300      	movs	r3, #0
 80019d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019d2:	2300      	movs	r3, #0
 80019d4:	61fb      	str	r3, [r7, #28]
 80019d6:	e165      	b.n	8001ca4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80019d8:	2201      	movs	r2, #1
 80019da:	69fb      	ldr	r3, [r7, #28]
 80019dc:	fa02 f303 	lsl.w	r3, r2, r3
 80019e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	697a      	ldr	r2, [r7, #20]
 80019e8:	4013      	ands	r3, r2
 80019ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80019ec:	693a      	ldr	r2, [r7, #16]
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	429a      	cmp	r2, r3
 80019f2:	f040 8154 	bne.w	8001c9e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	f003 0303 	and.w	r3, r3, #3
 80019fe:	2b01      	cmp	r3, #1
 8001a00:	d005      	beq.n	8001a0e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a0a:	2b02      	cmp	r3, #2
 8001a0c:	d130      	bne.n	8001a70 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	689b      	ldr	r3, [r3, #8]
 8001a12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a14:	69fb      	ldr	r3, [r7, #28]
 8001a16:	005b      	lsls	r3, r3, #1
 8001a18:	2203      	movs	r2, #3
 8001a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1e:	43db      	mvns	r3, r3
 8001a20:	69ba      	ldr	r2, [r7, #24]
 8001a22:	4013      	ands	r3, r2
 8001a24:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	68da      	ldr	r2, [r3, #12]
 8001a2a:	69fb      	ldr	r3, [r7, #28]
 8001a2c:	005b      	lsls	r3, r3, #1
 8001a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a32:	69ba      	ldr	r2, [r7, #24]
 8001a34:	4313      	orrs	r3, r2
 8001a36:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	69ba      	ldr	r2, [r7, #24]
 8001a3c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a44:	2201      	movs	r2, #1
 8001a46:	69fb      	ldr	r3, [r7, #28]
 8001a48:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4c:	43db      	mvns	r3, r3
 8001a4e:	69ba      	ldr	r2, [r7, #24]
 8001a50:	4013      	ands	r3, r2
 8001a52:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	091b      	lsrs	r3, r3, #4
 8001a5a:	f003 0201 	and.w	r2, r3, #1
 8001a5e:	69fb      	ldr	r3, [r7, #28]
 8001a60:	fa02 f303 	lsl.w	r3, r2, r3
 8001a64:	69ba      	ldr	r2, [r7, #24]
 8001a66:	4313      	orrs	r3, r2
 8001a68:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	69ba      	ldr	r2, [r7, #24]
 8001a6e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	f003 0303 	and.w	r3, r3, #3
 8001a78:	2b03      	cmp	r3, #3
 8001a7a:	d017      	beq.n	8001aac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	68db      	ldr	r3, [r3, #12]
 8001a80:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a82:	69fb      	ldr	r3, [r7, #28]
 8001a84:	005b      	lsls	r3, r3, #1
 8001a86:	2203      	movs	r2, #3
 8001a88:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8c:	43db      	mvns	r3, r3
 8001a8e:	69ba      	ldr	r2, [r7, #24]
 8001a90:	4013      	ands	r3, r2
 8001a92:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	689a      	ldr	r2, [r3, #8]
 8001a98:	69fb      	ldr	r3, [r7, #28]
 8001a9a:	005b      	lsls	r3, r3, #1
 8001a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa0:	69ba      	ldr	r2, [r7, #24]
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	69ba      	ldr	r2, [r7, #24]
 8001aaa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	f003 0303 	and.w	r3, r3, #3
 8001ab4:	2b02      	cmp	r3, #2
 8001ab6:	d123      	bne.n	8001b00 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ab8:	69fb      	ldr	r3, [r7, #28]
 8001aba:	08da      	lsrs	r2, r3, #3
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	3208      	adds	r2, #8
 8001ac0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ac4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ac6:	69fb      	ldr	r3, [r7, #28]
 8001ac8:	f003 0307 	and.w	r3, r3, #7
 8001acc:	009b      	lsls	r3, r3, #2
 8001ace:	220f      	movs	r2, #15
 8001ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad4:	43db      	mvns	r3, r3
 8001ad6:	69ba      	ldr	r2, [r7, #24]
 8001ad8:	4013      	ands	r3, r2
 8001ada:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	691a      	ldr	r2, [r3, #16]
 8001ae0:	69fb      	ldr	r3, [r7, #28]
 8001ae2:	f003 0307 	and.w	r3, r3, #7
 8001ae6:	009b      	lsls	r3, r3, #2
 8001ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aec:	69ba      	ldr	r2, [r7, #24]
 8001aee:	4313      	orrs	r3, r2
 8001af0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	08da      	lsrs	r2, r3, #3
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	3208      	adds	r2, #8
 8001afa:	69b9      	ldr	r1, [r7, #24]
 8001afc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b06:	69fb      	ldr	r3, [r7, #28]
 8001b08:	005b      	lsls	r3, r3, #1
 8001b0a:	2203      	movs	r2, #3
 8001b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b10:	43db      	mvns	r3, r3
 8001b12:	69ba      	ldr	r2, [r7, #24]
 8001b14:	4013      	ands	r3, r2
 8001b16:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	f003 0203 	and.w	r2, r3, #3
 8001b20:	69fb      	ldr	r3, [r7, #28]
 8001b22:	005b      	lsls	r3, r3, #1
 8001b24:	fa02 f303 	lsl.w	r3, r2, r3
 8001b28:	69ba      	ldr	r2, [r7, #24]
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	69ba      	ldr	r2, [r7, #24]
 8001b32:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	f000 80ae 	beq.w	8001c9e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b42:	2300      	movs	r3, #0
 8001b44:	60fb      	str	r3, [r7, #12]
 8001b46:	4b5d      	ldr	r3, [pc, #372]	; (8001cbc <HAL_GPIO_Init+0x300>)
 8001b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b4a:	4a5c      	ldr	r2, [pc, #368]	; (8001cbc <HAL_GPIO_Init+0x300>)
 8001b4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b50:	6453      	str	r3, [r2, #68]	; 0x44
 8001b52:	4b5a      	ldr	r3, [pc, #360]	; (8001cbc <HAL_GPIO_Init+0x300>)
 8001b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b5a:	60fb      	str	r3, [r7, #12]
 8001b5c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b5e:	4a58      	ldr	r2, [pc, #352]	; (8001cc0 <HAL_GPIO_Init+0x304>)
 8001b60:	69fb      	ldr	r3, [r7, #28]
 8001b62:	089b      	lsrs	r3, r3, #2
 8001b64:	3302      	adds	r3, #2
 8001b66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b6c:	69fb      	ldr	r3, [r7, #28]
 8001b6e:	f003 0303 	and.w	r3, r3, #3
 8001b72:	009b      	lsls	r3, r3, #2
 8001b74:	220f      	movs	r2, #15
 8001b76:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7a:	43db      	mvns	r3, r3
 8001b7c:	69ba      	ldr	r2, [r7, #24]
 8001b7e:	4013      	ands	r3, r2
 8001b80:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	4a4f      	ldr	r2, [pc, #316]	; (8001cc4 <HAL_GPIO_Init+0x308>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d025      	beq.n	8001bd6 <HAL_GPIO_Init+0x21a>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	4a4e      	ldr	r2, [pc, #312]	; (8001cc8 <HAL_GPIO_Init+0x30c>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d01f      	beq.n	8001bd2 <HAL_GPIO_Init+0x216>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	4a4d      	ldr	r2, [pc, #308]	; (8001ccc <HAL_GPIO_Init+0x310>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d019      	beq.n	8001bce <HAL_GPIO_Init+0x212>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	4a4c      	ldr	r2, [pc, #304]	; (8001cd0 <HAL_GPIO_Init+0x314>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d013      	beq.n	8001bca <HAL_GPIO_Init+0x20e>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	4a4b      	ldr	r2, [pc, #300]	; (8001cd4 <HAL_GPIO_Init+0x318>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d00d      	beq.n	8001bc6 <HAL_GPIO_Init+0x20a>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	4a4a      	ldr	r2, [pc, #296]	; (8001cd8 <HAL_GPIO_Init+0x31c>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d007      	beq.n	8001bc2 <HAL_GPIO_Init+0x206>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	4a49      	ldr	r2, [pc, #292]	; (8001cdc <HAL_GPIO_Init+0x320>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d101      	bne.n	8001bbe <HAL_GPIO_Init+0x202>
 8001bba:	2306      	movs	r3, #6
 8001bbc:	e00c      	b.n	8001bd8 <HAL_GPIO_Init+0x21c>
 8001bbe:	2307      	movs	r3, #7
 8001bc0:	e00a      	b.n	8001bd8 <HAL_GPIO_Init+0x21c>
 8001bc2:	2305      	movs	r3, #5
 8001bc4:	e008      	b.n	8001bd8 <HAL_GPIO_Init+0x21c>
 8001bc6:	2304      	movs	r3, #4
 8001bc8:	e006      	b.n	8001bd8 <HAL_GPIO_Init+0x21c>
 8001bca:	2303      	movs	r3, #3
 8001bcc:	e004      	b.n	8001bd8 <HAL_GPIO_Init+0x21c>
 8001bce:	2302      	movs	r3, #2
 8001bd0:	e002      	b.n	8001bd8 <HAL_GPIO_Init+0x21c>
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e000      	b.n	8001bd8 <HAL_GPIO_Init+0x21c>
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	69fa      	ldr	r2, [r7, #28]
 8001bda:	f002 0203 	and.w	r2, r2, #3
 8001bde:	0092      	lsls	r2, r2, #2
 8001be0:	4093      	lsls	r3, r2
 8001be2:	69ba      	ldr	r2, [r7, #24]
 8001be4:	4313      	orrs	r3, r2
 8001be6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001be8:	4935      	ldr	r1, [pc, #212]	; (8001cc0 <HAL_GPIO_Init+0x304>)
 8001bea:	69fb      	ldr	r3, [r7, #28]
 8001bec:	089b      	lsrs	r3, r3, #2
 8001bee:	3302      	adds	r3, #2
 8001bf0:	69ba      	ldr	r2, [r7, #24]
 8001bf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bf6:	4b3a      	ldr	r3, [pc, #232]	; (8001ce0 <HAL_GPIO_Init+0x324>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bfc:	693b      	ldr	r3, [r7, #16]
 8001bfe:	43db      	mvns	r3, r3
 8001c00:	69ba      	ldr	r2, [r7, #24]
 8001c02:	4013      	ands	r3, r2
 8001c04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d003      	beq.n	8001c1a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001c12:	69ba      	ldr	r2, [r7, #24]
 8001c14:	693b      	ldr	r3, [r7, #16]
 8001c16:	4313      	orrs	r3, r2
 8001c18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c1a:	4a31      	ldr	r2, [pc, #196]	; (8001ce0 <HAL_GPIO_Init+0x324>)
 8001c1c:	69bb      	ldr	r3, [r7, #24]
 8001c1e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001c20:	4b2f      	ldr	r3, [pc, #188]	; (8001ce0 <HAL_GPIO_Init+0x324>)
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	43db      	mvns	r3, r3
 8001c2a:	69ba      	ldr	r2, [r7, #24]
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d003      	beq.n	8001c44 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001c3c:	69ba      	ldr	r2, [r7, #24]
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	4313      	orrs	r3, r2
 8001c42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c44:	4a26      	ldr	r2, [pc, #152]	; (8001ce0 <HAL_GPIO_Init+0x324>)
 8001c46:	69bb      	ldr	r3, [r7, #24]
 8001c48:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c4a:	4b25      	ldr	r3, [pc, #148]	; (8001ce0 <HAL_GPIO_Init+0x324>)
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c50:	693b      	ldr	r3, [r7, #16]
 8001c52:	43db      	mvns	r3, r3
 8001c54:	69ba      	ldr	r2, [r7, #24]
 8001c56:	4013      	ands	r3, r2
 8001c58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d003      	beq.n	8001c6e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001c66:	69ba      	ldr	r2, [r7, #24]
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c6e:	4a1c      	ldr	r2, [pc, #112]	; (8001ce0 <HAL_GPIO_Init+0x324>)
 8001c70:	69bb      	ldr	r3, [r7, #24]
 8001c72:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c74:	4b1a      	ldr	r3, [pc, #104]	; (8001ce0 <HAL_GPIO_Init+0x324>)
 8001c76:	68db      	ldr	r3, [r3, #12]
 8001c78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	43db      	mvns	r3, r3
 8001c7e:	69ba      	ldr	r2, [r7, #24]
 8001c80:	4013      	ands	r3, r2
 8001c82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d003      	beq.n	8001c98 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001c90:	69ba      	ldr	r2, [r7, #24]
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	4313      	orrs	r3, r2
 8001c96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c98:	4a11      	ldr	r2, [pc, #68]	; (8001ce0 <HAL_GPIO_Init+0x324>)
 8001c9a:	69bb      	ldr	r3, [r7, #24]
 8001c9c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c9e:	69fb      	ldr	r3, [r7, #28]
 8001ca0:	3301      	adds	r3, #1
 8001ca2:	61fb      	str	r3, [r7, #28]
 8001ca4:	69fb      	ldr	r3, [r7, #28]
 8001ca6:	2b0f      	cmp	r3, #15
 8001ca8:	f67f ae96 	bls.w	80019d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001cac:	bf00      	nop
 8001cae:	bf00      	nop
 8001cb0:	3724      	adds	r7, #36	; 0x24
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr
 8001cba:	bf00      	nop
 8001cbc:	40023800 	.word	0x40023800
 8001cc0:	40013800 	.word	0x40013800
 8001cc4:	40020000 	.word	0x40020000
 8001cc8:	40020400 	.word	0x40020400
 8001ccc:	40020800 	.word	0x40020800
 8001cd0:	40020c00 	.word	0x40020c00
 8001cd4:	40021000 	.word	0x40021000
 8001cd8:	40021400 	.word	0x40021400
 8001cdc:	40021800 	.word	0x40021800
 8001ce0:	40013c00 	.word	0x40013c00

08001ce4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b083      	sub	sp, #12
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
 8001cec:	460b      	mov	r3, r1
 8001cee:	807b      	strh	r3, [r7, #2]
 8001cf0:	4613      	mov	r3, r2
 8001cf2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001cf4:	787b      	ldrb	r3, [r7, #1]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d003      	beq.n	8001d02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cfa:	887a      	ldrh	r2, [r7, #2]
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d00:	e003      	b.n	8001d0a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d02:	887b      	ldrh	r3, [r7, #2]
 8001d04:	041a      	lsls	r2, r3, #16
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	619a      	str	r2, [r3, #24]
}
 8001d0a:	bf00      	nop
 8001d0c:	370c      	adds	r7, #12
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr
	...

08001d18 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b084      	sub	sp, #16
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d101      	bne.n	8001d2a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	e12b      	b.n	8001f82 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d106      	bne.n	8001d44 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001d3e:	6878      	ldr	r0, [r7, #4]
 8001d40:	f7ff f924 	bl	8000f8c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2224      	movs	r2, #36	; 0x24
 8001d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f022 0201 	bic.w	r2, r2, #1
 8001d5a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001d6a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001d7a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001d7c:	f001 f854 	bl	8002e28 <HAL_RCC_GetPCLK1Freq>
 8001d80:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	4a81      	ldr	r2, [pc, #516]	; (8001f8c <HAL_I2C_Init+0x274>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d807      	bhi.n	8001d9c <HAL_I2C_Init+0x84>
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	4a80      	ldr	r2, [pc, #512]	; (8001f90 <HAL_I2C_Init+0x278>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	bf94      	ite	ls
 8001d94:	2301      	movls	r3, #1
 8001d96:	2300      	movhi	r3, #0
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	e006      	b.n	8001daa <HAL_I2C_Init+0x92>
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	4a7d      	ldr	r2, [pc, #500]	; (8001f94 <HAL_I2C_Init+0x27c>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	bf94      	ite	ls
 8001da4:	2301      	movls	r3, #1
 8001da6:	2300      	movhi	r3, #0
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d001      	beq.n	8001db2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	e0e7      	b.n	8001f82 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	4a78      	ldr	r2, [pc, #480]	; (8001f98 <HAL_I2C_Init+0x280>)
 8001db6:	fba2 2303 	umull	r2, r3, r2, r3
 8001dba:	0c9b      	lsrs	r3, r3, #18
 8001dbc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	68ba      	ldr	r2, [r7, #8]
 8001dce:	430a      	orrs	r2, r1
 8001dd0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	6a1b      	ldr	r3, [r3, #32]
 8001dd8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	4a6a      	ldr	r2, [pc, #424]	; (8001f8c <HAL_I2C_Init+0x274>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d802      	bhi.n	8001dec <HAL_I2C_Init+0xd4>
 8001de6:	68bb      	ldr	r3, [r7, #8]
 8001de8:	3301      	adds	r3, #1
 8001dea:	e009      	b.n	8001e00 <HAL_I2C_Init+0xe8>
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001df2:	fb02 f303 	mul.w	r3, r2, r3
 8001df6:	4a69      	ldr	r2, [pc, #420]	; (8001f9c <HAL_I2C_Init+0x284>)
 8001df8:	fba2 2303 	umull	r2, r3, r2, r3
 8001dfc:	099b      	lsrs	r3, r3, #6
 8001dfe:	3301      	adds	r3, #1
 8001e00:	687a      	ldr	r2, [r7, #4]
 8001e02:	6812      	ldr	r2, [r2, #0]
 8001e04:	430b      	orrs	r3, r1
 8001e06:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	69db      	ldr	r3, [r3, #28]
 8001e0e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001e12:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	495c      	ldr	r1, [pc, #368]	; (8001f8c <HAL_I2C_Init+0x274>)
 8001e1c:	428b      	cmp	r3, r1
 8001e1e:	d819      	bhi.n	8001e54 <HAL_I2C_Init+0x13c>
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	1e59      	subs	r1, r3, #1
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	005b      	lsls	r3, r3, #1
 8001e2a:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e2e:	1c59      	adds	r1, r3, #1
 8001e30:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001e34:	400b      	ands	r3, r1
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d00a      	beq.n	8001e50 <HAL_I2C_Init+0x138>
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	1e59      	subs	r1, r3, #1
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	005b      	lsls	r3, r3, #1
 8001e44:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e48:	3301      	adds	r3, #1
 8001e4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e4e:	e051      	b.n	8001ef4 <HAL_I2C_Init+0x1dc>
 8001e50:	2304      	movs	r3, #4
 8001e52:	e04f      	b.n	8001ef4 <HAL_I2C_Init+0x1dc>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	689b      	ldr	r3, [r3, #8]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d111      	bne.n	8001e80 <HAL_I2C_Init+0x168>
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	1e58      	subs	r0, r3, #1
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6859      	ldr	r1, [r3, #4]
 8001e64:	460b      	mov	r3, r1
 8001e66:	005b      	lsls	r3, r3, #1
 8001e68:	440b      	add	r3, r1
 8001e6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e6e:	3301      	adds	r3, #1
 8001e70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	bf0c      	ite	eq
 8001e78:	2301      	moveq	r3, #1
 8001e7a:	2300      	movne	r3, #0
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	e012      	b.n	8001ea6 <HAL_I2C_Init+0x18e>
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	1e58      	subs	r0, r3, #1
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6859      	ldr	r1, [r3, #4]
 8001e88:	460b      	mov	r3, r1
 8001e8a:	009b      	lsls	r3, r3, #2
 8001e8c:	440b      	add	r3, r1
 8001e8e:	0099      	lsls	r1, r3, #2
 8001e90:	440b      	add	r3, r1
 8001e92:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e96:	3301      	adds	r3, #1
 8001e98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	bf0c      	ite	eq
 8001ea0:	2301      	moveq	r3, #1
 8001ea2:	2300      	movne	r3, #0
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d001      	beq.n	8001eae <HAL_I2C_Init+0x196>
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e022      	b.n	8001ef4 <HAL_I2C_Init+0x1dc>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d10e      	bne.n	8001ed4 <HAL_I2C_Init+0x1bc>
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	1e58      	subs	r0, r3, #1
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6859      	ldr	r1, [r3, #4]
 8001ebe:	460b      	mov	r3, r1
 8001ec0:	005b      	lsls	r3, r3, #1
 8001ec2:	440b      	add	r3, r1
 8001ec4:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ec8:	3301      	adds	r3, #1
 8001eca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ece:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ed2:	e00f      	b.n	8001ef4 <HAL_I2C_Init+0x1dc>
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	1e58      	subs	r0, r3, #1
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6859      	ldr	r1, [r3, #4]
 8001edc:	460b      	mov	r3, r1
 8001ede:	009b      	lsls	r3, r3, #2
 8001ee0:	440b      	add	r3, r1
 8001ee2:	0099      	lsls	r1, r3, #2
 8001ee4:	440b      	add	r3, r1
 8001ee6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001eea:	3301      	adds	r3, #1
 8001eec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ef0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001ef4:	6879      	ldr	r1, [r7, #4]
 8001ef6:	6809      	ldr	r1, [r1, #0]
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	69da      	ldr	r2, [r3, #28]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6a1b      	ldr	r3, [r3, #32]
 8001f0e:	431a      	orrs	r2, r3
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	430a      	orrs	r2, r1
 8001f16:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	689b      	ldr	r3, [r3, #8]
 8001f1e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001f22:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001f26:	687a      	ldr	r2, [r7, #4]
 8001f28:	6911      	ldr	r1, [r2, #16]
 8001f2a:	687a      	ldr	r2, [r7, #4]
 8001f2c:	68d2      	ldr	r2, [r2, #12]
 8001f2e:	4311      	orrs	r1, r2
 8001f30:	687a      	ldr	r2, [r7, #4]
 8001f32:	6812      	ldr	r2, [r2, #0]
 8001f34:	430b      	orrs	r3, r1
 8001f36:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	68db      	ldr	r3, [r3, #12]
 8001f3e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	695a      	ldr	r2, [r3, #20]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	699b      	ldr	r3, [r3, #24]
 8001f4a:	431a      	orrs	r2, r3
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	430a      	orrs	r2, r1
 8001f52:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f042 0201 	orr.w	r2, r2, #1
 8001f62:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2200      	movs	r2, #0
 8001f68:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2220      	movs	r2, #32
 8001f6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2200      	movs	r2, #0
 8001f76:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001f80:	2300      	movs	r3, #0
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	3710      	adds	r7, #16
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	000186a0 	.word	0x000186a0
 8001f90:	001e847f 	.word	0x001e847f
 8001f94:	003d08ff 	.word	0x003d08ff
 8001f98:	431bde83 	.word	0x431bde83
 8001f9c:	10624dd3 	.word	0x10624dd3

08001fa0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b088      	sub	sp, #32
 8001fa4:	af02      	add	r7, sp, #8
 8001fa6:	60f8      	str	r0, [r7, #12]
 8001fa8:	607a      	str	r2, [r7, #4]
 8001faa:	461a      	mov	r2, r3
 8001fac:	460b      	mov	r3, r1
 8001fae:	817b      	strh	r3, [r7, #10]
 8001fb0:	4613      	mov	r3, r2
 8001fb2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001fb4:	f7ff fb12 	bl	80015dc <HAL_GetTick>
 8001fb8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fc0:	b2db      	uxtb	r3, r3
 8001fc2:	2b20      	cmp	r3, #32
 8001fc4:	f040 80e0 	bne.w	8002188 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	9300      	str	r3, [sp, #0]
 8001fcc:	2319      	movs	r3, #25
 8001fce:	2201      	movs	r2, #1
 8001fd0:	4970      	ldr	r1, [pc, #448]	; (8002194 <HAL_I2C_Master_Transmit+0x1f4>)
 8001fd2:	68f8      	ldr	r0, [r7, #12]
 8001fd4:	f000 fc58 	bl	8002888 <I2C_WaitOnFlagUntilTimeout>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d001      	beq.n	8001fe2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001fde:	2302      	movs	r3, #2
 8001fe0:	e0d3      	b.n	800218a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	d101      	bne.n	8001ff0 <HAL_I2C_Master_Transmit+0x50>
 8001fec:	2302      	movs	r3, #2
 8001fee:	e0cc      	b.n	800218a <HAL_I2C_Master_Transmit+0x1ea>
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 0301 	and.w	r3, r3, #1
 8002002:	2b01      	cmp	r3, #1
 8002004:	d007      	beq.n	8002016 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f042 0201 	orr.w	r2, r2, #1
 8002014:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002024:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	2221      	movs	r2, #33	; 0x21
 800202a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	2210      	movs	r2, #16
 8002032:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	2200      	movs	r2, #0
 800203a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	687a      	ldr	r2, [r7, #4]
 8002040:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	893a      	ldrh	r2, [r7, #8]
 8002046:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800204c:	b29a      	uxth	r2, r3
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	4a50      	ldr	r2, [pc, #320]	; (8002198 <HAL_I2C_Master_Transmit+0x1f8>)
 8002056:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002058:	8979      	ldrh	r1, [r7, #10]
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	6a3a      	ldr	r2, [r7, #32]
 800205e:	68f8      	ldr	r0, [r7, #12]
 8002060:	f000 fac2 	bl	80025e8 <I2C_MasterRequestWrite>
 8002064:	4603      	mov	r3, r0
 8002066:	2b00      	cmp	r3, #0
 8002068:	d001      	beq.n	800206e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	e08d      	b.n	800218a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800206e:	2300      	movs	r3, #0
 8002070:	613b      	str	r3, [r7, #16]
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	695b      	ldr	r3, [r3, #20]
 8002078:	613b      	str	r3, [r7, #16]
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	699b      	ldr	r3, [r3, #24]
 8002080:	613b      	str	r3, [r7, #16]
 8002082:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002084:	e066      	b.n	8002154 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002086:	697a      	ldr	r2, [r7, #20]
 8002088:	6a39      	ldr	r1, [r7, #32]
 800208a:	68f8      	ldr	r0, [r7, #12]
 800208c:	f000 fcd2 	bl	8002a34 <I2C_WaitOnTXEFlagUntilTimeout>
 8002090:	4603      	mov	r3, r0
 8002092:	2b00      	cmp	r3, #0
 8002094:	d00d      	beq.n	80020b2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209a:	2b04      	cmp	r3, #4
 800209c:	d107      	bne.n	80020ae <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020ac:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e06b      	b.n	800218a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020b6:	781a      	ldrb	r2, [r3, #0]
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c2:	1c5a      	adds	r2, r3, #1
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020cc:	b29b      	uxth	r3, r3
 80020ce:	3b01      	subs	r3, #1
 80020d0:	b29a      	uxth	r2, r3
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020da:	3b01      	subs	r3, #1
 80020dc:	b29a      	uxth	r2, r3
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	695b      	ldr	r3, [r3, #20]
 80020e8:	f003 0304 	and.w	r3, r3, #4
 80020ec:	2b04      	cmp	r3, #4
 80020ee:	d11b      	bne.n	8002128 <HAL_I2C_Master_Transmit+0x188>
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d017      	beq.n	8002128 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020fc:	781a      	ldrb	r2, [r3, #0]
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002108:	1c5a      	adds	r2, r3, #1
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002112:	b29b      	uxth	r3, r3
 8002114:	3b01      	subs	r3, #1
 8002116:	b29a      	uxth	r2, r3
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002120:	3b01      	subs	r3, #1
 8002122:	b29a      	uxth	r2, r3
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002128:	697a      	ldr	r2, [r7, #20]
 800212a:	6a39      	ldr	r1, [r7, #32]
 800212c:	68f8      	ldr	r0, [r7, #12]
 800212e:	f000 fcc2 	bl	8002ab6 <I2C_WaitOnBTFFlagUntilTimeout>
 8002132:	4603      	mov	r3, r0
 8002134:	2b00      	cmp	r3, #0
 8002136:	d00d      	beq.n	8002154 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213c:	2b04      	cmp	r3, #4
 800213e:	d107      	bne.n	8002150 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800214e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002150:	2301      	movs	r3, #1
 8002152:	e01a      	b.n	800218a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002158:	2b00      	cmp	r3, #0
 800215a:	d194      	bne.n	8002086 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	681a      	ldr	r2, [r3, #0]
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800216a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	2220      	movs	r2, #32
 8002170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	2200      	movs	r2, #0
 8002178:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	2200      	movs	r2, #0
 8002180:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002184:	2300      	movs	r3, #0
 8002186:	e000      	b.n	800218a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002188:	2302      	movs	r3, #2
  }
}
 800218a:	4618      	mov	r0, r3
 800218c:	3718      	adds	r7, #24
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	00100002 	.word	0x00100002
 8002198:	ffff0000 	.word	0xffff0000

0800219c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b08c      	sub	sp, #48	; 0x30
 80021a0:	af02      	add	r7, sp, #8
 80021a2:	60f8      	str	r0, [r7, #12]
 80021a4:	607a      	str	r2, [r7, #4]
 80021a6:	461a      	mov	r2, r3
 80021a8:	460b      	mov	r3, r1
 80021aa:	817b      	strh	r3, [r7, #10]
 80021ac:	4613      	mov	r3, r2
 80021ae:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80021b0:	f7ff fa14 	bl	80015dc <HAL_GetTick>
 80021b4:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021bc:	b2db      	uxtb	r3, r3
 80021be:	2b20      	cmp	r3, #32
 80021c0:	f040 820b 	bne.w	80025da <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80021c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c6:	9300      	str	r3, [sp, #0]
 80021c8:	2319      	movs	r3, #25
 80021ca:	2201      	movs	r2, #1
 80021cc:	497c      	ldr	r1, [pc, #496]	; (80023c0 <HAL_I2C_Master_Receive+0x224>)
 80021ce:	68f8      	ldr	r0, [r7, #12]
 80021d0:	f000 fb5a 	bl	8002888 <I2C_WaitOnFlagUntilTimeout>
 80021d4:	4603      	mov	r3, r0
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d001      	beq.n	80021de <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80021da:	2302      	movs	r3, #2
 80021dc:	e1fe      	b.n	80025dc <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021e4:	2b01      	cmp	r3, #1
 80021e6:	d101      	bne.n	80021ec <HAL_I2C_Master_Receive+0x50>
 80021e8:	2302      	movs	r3, #2
 80021ea:	e1f7      	b.n	80025dc <HAL_I2C_Master_Receive+0x440>
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	2201      	movs	r2, #1
 80021f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f003 0301 	and.w	r3, r3, #1
 80021fe:	2b01      	cmp	r3, #1
 8002200:	d007      	beq.n	8002212 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f042 0201 	orr.w	r2, r2, #1
 8002210:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002220:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	2222      	movs	r2, #34	; 0x22
 8002226:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	2210      	movs	r2, #16
 800222e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	2200      	movs	r2, #0
 8002236:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	687a      	ldr	r2, [r7, #4]
 800223c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	893a      	ldrh	r2, [r7, #8]
 8002242:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002248:	b29a      	uxth	r2, r3
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	4a5c      	ldr	r2, [pc, #368]	; (80023c4 <HAL_I2C_Master_Receive+0x228>)
 8002252:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002254:	8979      	ldrh	r1, [r7, #10]
 8002256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002258:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800225a:	68f8      	ldr	r0, [r7, #12]
 800225c:	f000 fa46 	bl	80026ec <I2C_MasterRequestRead>
 8002260:	4603      	mov	r3, r0
 8002262:	2b00      	cmp	r3, #0
 8002264:	d001      	beq.n	800226a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	e1b8      	b.n	80025dc <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800226e:	2b00      	cmp	r3, #0
 8002270:	d113      	bne.n	800229a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002272:	2300      	movs	r3, #0
 8002274:	623b      	str	r3, [r7, #32]
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	695b      	ldr	r3, [r3, #20]
 800227c:	623b      	str	r3, [r7, #32]
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	699b      	ldr	r3, [r3, #24]
 8002284:	623b      	str	r3, [r7, #32]
 8002286:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002296:	601a      	str	r2, [r3, #0]
 8002298:	e18c      	b.n	80025b4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800229e:	2b01      	cmp	r3, #1
 80022a0:	d11b      	bne.n	80022da <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022b0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022b2:	2300      	movs	r3, #0
 80022b4:	61fb      	str	r3, [r7, #28]
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	695b      	ldr	r3, [r3, #20]
 80022bc:	61fb      	str	r3, [r7, #28]
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	699b      	ldr	r3, [r3, #24]
 80022c4:	61fb      	str	r3, [r7, #28]
 80022c6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	681a      	ldr	r2, [r3, #0]
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022d6:	601a      	str	r2, [r3, #0]
 80022d8:	e16c      	b.n	80025b4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022de:	2b02      	cmp	r3, #2
 80022e0:	d11b      	bne.n	800231a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022f0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	681a      	ldr	r2, [r3, #0]
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002300:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002302:	2300      	movs	r3, #0
 8002304:	61bb      	str	r3, [r7, #24]
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	695b      	ldr	r3, [r3, #20]
 800230c:	61bb      	str	r3, [r7, #24]
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	699b      	ldr	r3, [r3, #24]
 8002314:	61bb      	str	r3, [r7, #24]
 8002316:	69bb      	ldr	r3, [r7, #24]
 8002318:	e14c      	b.n	80025b4 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	681a      	ldr	r2, [r3, #0]
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002328:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800232a:	2300      	movs	r3, #0
 800232c:	617b      	str	r3, [r7, #20]
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	695b      	ldr	r3, [r3, #20]
 8002334:	617b      	str	r3, [r7, #20]
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	699b      	ldr	r3, [r3, #24]
 800233c:	617b      	str	r3, [r7, #20]
 800233e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002340:	e138      	b.n	80025b4 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002346:	2b03      	cmp	r3, #3
 8002348:	f200 80f1 	bhi.w	800252e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002350:	2b01      	cmp	r3, #1
 8002352:	d123      	bne.n	800239c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002354:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002356:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002358:	68f8      	ldr	r0, [r7, #12]
 800235a:	f000 fbed 	bl	8002b38 <I2C_WaitOnRXNEFlagUntilTimeout>
 800235e:	4603      	mov	r3, r0
 8002360:	2b00      	cmp	r3, #0
 8002362:	d001      	beq.n	8002368 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	e139      	b.n	80025dc <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	691a      	ldr	r2, [r3, #16]
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002372:	b2d2      	uxtb	r2, r2
 8002374:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800237a:	1c5a      	adds	r2, r3, #1
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002384:	3b01      	subs	r3, #1
 8002386:	b29a      	uxth	r2, r3
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002390:	b29b      	uxth	r3, r3
 8002392:	3b01      	subs	r3, #1
 8002394:	b29a      	uxth	r2, r3
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	855a      	strh	r2, [r3, #42]	; 0x2a
 800239a:	e10b      	b.n	80025b4 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023a0:	2b02      	cmp	r3, #2
 80023a2:	d14e      	bne.n	8002442 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80023a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a6:	9300      	str	r3, [sp, #0]
 80023a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023aa:	2200      	movs	r2, #0
 80023ac:	4906      	ldr	r1, [pc, #24]	; (80023c8 <HAL_I2C_Master_Receive+0x22c>)
 80023ae:	68f8      	ldr	r0, [r7, #12]
 80023b0:	f000 fa6a 	bl	8002888 <I2C_WaitOnFlagUntilTimeout>
 80023b4:	4603      	mov	r3, r0
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d008      	beq.n	80023cc <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e10e      	b.n	80025dc <HAL_I2C_Master_Receive+0x440>
 80023be:	bf00      	nop
 80023c0:	00100002 	.word	0x00100002
 80023c4:	ffff0000 	.word	0xffff0000
 80023c8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023da:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	691a      	ldr	r2, [r3, #16]
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e6:	b2d2      	uxtb	r2, r2
 80023e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ee:	1c5a      	adds	r2, r3, #1
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023f8:	3b01      	subs	r3, #1
 80023fa:	b29a      	uxth	r2, r3
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002404:	b29b      	uxth	r3, r3
 8002406:	3b01      	subs	r3, #1
 8002408:	b29a      	uxth	r2, r3
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	691a      	ldr	r2, [r3, #16]
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002418:	b2d2      	uxtb	r2, r2
 800241a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002420:	1c5a      	adds	r2, r3, #1
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800242a:	3b01      	subs	r3, #1
 800242c:	b29a      	uxth	r2, r3
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002436:	b29b      	uxth	r3, r3
 8002438:	3b01      	subs	r3, #1
 800243a:	b29a      	uxth	r2, r3
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002440:	e0b8      	b.n	80025b4 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002444:	9300      	str	r3, [sp, #0]
 8002446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002448:	2200      	movs	r2, #0
 800244a:	4966      	ldr	r1, [pc, #408]	; (80025e4 <HAL_I2C_Master_Receive+0x448>)
 800244c:	68f8      	ldr	r0, [r7, #12]
 800244e:	f000 fa1b 	bl	8002888 <I2C_WaitOnFlagUntilTimeout>
 8002452:	4603      	mov	r3, r0
 8002454:	2b00      	cmp	r3, #0
 8002456:	d001      	beq.n	800245c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002458:	2301      	movs	r3, #1
 800245a:	e0bf      	b.n	80025dc <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	681a      	ldr	r2, [r3, #0]
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800246a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	691a      	ldr	r2, [r3, #16]
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002476:	b2d2      	uxtb	r2, r2
 8002478:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800247e:	1c5a      	adds	r2, r3, #1
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002488:	3b01      	subs	r3, #1
 800248a:	b29a      	uxth	r2, r3
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002494:	b29b      	uxth	r3, r3
 8002496:	3b01      	subs	r3, #1
 8002498:	b29a      	uxth	r2, r3
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800249e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a0:	9300      	str	r3, [sp, #0]
 80024a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024a4:	2200      	movs	r2, #0
 80024a6:	494f      	ldr	r1, [pc, #316]	; (80025e4 <HAL_I2C_Master_Receive+0x448>)
 80024a8:	68f8      	ldr	r0, [r7, #12]
 80024aa:	f000 f9ed 	bl	8002888 <I2C_WaitOnFlagUntilTimeout>
 80024ae:	4603      	mov	r3, r0
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d001      	beq.n	80024b8 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80024b4:	2301      	movs	r3, #1
 80024b6:	e091      	b.n	80025dc <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024c6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	691a      	ldr	r2, [r3, #16]
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d2:	b2d2      	uxtb	r2, r2
 80024d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024da:	1c5a      	adds	r2, r3, #1
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024e4:	3b01      	subs	r3, #1
 80024e6:	b29a      	uxth	r2, r3
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024f0:	b29b      	uxth	r3, r3
 80024f2:	3b01      	subs	r3, #1
 80024f4:	b29a      	uxth	r2, r3
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	691a      	ldr	r2, [r3, #16]
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002504:	b2d2      	uxtb	r2, r2
 8002506:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800250c:	1c5a      	adds	r2, r3, #1
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002516:	3b01      	subs	r3, #1
 8002518:	b29a      	uxth	r2, r3
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002522:	b29b      	uxth	r3, r3
 8002524:	3b01      	subs	r3, #1
 8002526:	b29a      	uxth	r2, r3
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800252c:	e042      	b.n	80025b4 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800252e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002530:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002532:	68f8      	ldr	r0, [r7, #12]
 8002534:	f000 fb00 	bl	8002b38 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002538:	4603      	mov	r3, r0
 800253a:	2b00      	cmp	r3, #0
 800253c:	d001      	beq.n	8002542 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	e04c      	b.n	80025dc <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	691a      	ldr	r2, [r3, #16]
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800254c:	b2d2      	uxtb	r2, r2
 800254e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002554:	1c5a      	adds	r2, r3, #1
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800255e:	3b01      	subs	r3, #1
 8002560:	b29a      	uxth	r2, r3
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800256a:	b29b      	uxth	r3, r3
 800256c:	3b01      	subs	r3, #1
 800256e:	b29a      	uxth	r2, r3
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	695b      	ldr	r3, [r3, #20]
 800257a:	f003 0304 	and.w	r3, r3, #4
 800257e:	2b04      	cmp	r3, #4
 8002580:	d118      	bne.n	80025b4 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	691a      	ldr	r2, [r3, #16]
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800258c:	b2d2      	uxtb	r2, r2
 800258e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002594:	1c5a      	adds	r2, r3, #1
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800259e:	3b01      	subs	r3, #1
 80025a0:	b29a      	uxth	r2, r3
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025aa:	b29b      	uxth	r3, r3
 80025ac:	3b01      	subs	r3, #1
 80025ae:	b29a      	uxth	r2, r3
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	f47f aec2 	bne.w	8002342 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	2220      	movs	r2, #32
 80025c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	2200      	movs	r2, #0
 80025ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	2200      	movs	r2, #0
 80025d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80025d6:	2300      	movs	r3, #0
 80025d8:	e000      	b.n	80025dc <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80025da:	2302      	movs	r3, #2
  }
}
 80025dc:	4618      	mov	r0, r3
 80025de:	3728      	adds	r7, #40	; 0x28
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}
 80025e4:	00010004 	.word	0x00010004

080025e8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b088      	sub	sp, #32
 80025ec:	af02      	add	r7, sp, #8
 80025ee:	60f8      	str	r0, [r7, #12]
 80025f0:	607a      	str	r2, [r7, #4]
 80025f2:	603b      	str	r3, [r7, #0]
 80025f4:	460b      	mov	r3, r1
 80025f6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025fc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	2b08      	cmp	r3, #8
 8002602:	d006      	beq.n	8002612 <I2C_MasterRequestWrite+0x2a>
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	2b01      	cmp	r3, #1
 8002608:	d003      	beq.n	8002612 <I2C_MasterRequestWrite+0x2a>
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002610:	d108      	bne.n	8002624 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	681a      	ldr	r2, [r3, #0]
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002620:	601a      	str	r2, [r3, #0]
 8002622:	e00b      	b.n	800263c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002628:	2b12      	cmp	r3, #18
 800262a:	d107      	bne.n	800263c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800263a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	9300      	str	r3, [sp, #0]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2200      	movs	r2, #0
 8002644:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002648:	68f8      	ldr	r0, [r7, #12]
 800264a:	f000 f91d 	bl	8002888 <I2C_WaitOnFlagUntilTimeout>
 800264e:	4603      	mov	r3, r0
 8002650:	2b00      	cmp	r3, #0
 8002652:	d00d      	beq.n	8002670 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800265e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002662:	d103      	bne.n	800266c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	f44f 7200 	mov.w	r2, #512	; 0x200
 800266a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800266c:	2303      	movs	r3, #3
 800266e:	e035      	b.n	80026dc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	691b      	ldr	r3, [r3, #16]
 8002674:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002678:	d108      	bne.n	800268c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800267a:	897b      	ldrh	r3, [r7, #10]
 800267c:	b2db      	uxtb	r3, r3
 800267e:	461a      	mov	r2, r3
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002688:	611a      	str	r2, [r3, #16]
 800268a:	e01b      	b.n	80026c4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800268c:	897b      	ldrh	r3, [r7, #10]
 800268e:	11db      	asrs	r3, r3, #7
 8002690:	b2db      	uxtb	r3, r3
 8002692:	f003 0306 	and.w	r3, r3, #6
 8002696:	b2db      	uxtb	r3, r3
 8002698:	f063 030f 	orn	r3, r3, #15
 800269c:	b2da      	uxtb	r2, r3
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	687a      	ldr	r2, [r7, #4]
 80026a8:	490e      	ldr	r1, [pc, #56]	; (80026e4 <I2C_MasterRequestWrite+0xfc>)
 80026aa:	68f8      	ldr	r0, [r7, #12]
 80026ac:	f000 f943 	bl	8002936 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80026b0:	4603      	mov	r3, r0
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d001      	beq.n	80026ba <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	e010      	b.n	80026dc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80026ba:	897b      	ldrh	r3, [r7, #10]
 80026bc:	b2da      	uxtb	r2, r3
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	687a      	ldr	r2, [r7, #4]
 80026c8:	4907      	ldr	r1, [pc, #28]	; (80026e8 <I2C_MasterRequestWrite+0x100>)
 80026ca:	68f8      	ldr	r0, [r7, #12]
 80026cc:	f000 f933 	bl	8002936 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80026d0:	4603      	mov	r3, r0
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d001      	beq.n	80026da <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	e000      	b.n	80026dc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80026da:	2300      	movs	r3, #0
}
 80026dc:	4618      	mov	r0, r3
 80026de:	3718      	adds	r7, #24
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}
 80026e4:	00010008 	.word	0x00010008
 80026e8:	00010002 	.word	0x00010002

080026ec <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b088      	sub	sp, #32
 80026f0:	af02      	add	r7, sp, #8
 80026f2:	60f8      	str	r0, [r7, #12]
 80026f4:	607a      	str	r2, [r7, #4]
 80026f6:	603b      	str	r3, [r7, #0]
 80026f8:	460b      	mov	r3, r1
 80026fa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002700:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002710:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	2b08      	cmp	r3, #8
 8002716:	d006      	beq.n	8002726 <I2C_MasterRequestRead+0x3a>
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	2b01      	cmp	r3, #1
 800271c:	d003      	beq.n	8002726 <I2C_MasterRequestRead+0x3a>
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002724:	d108      	bne.n	8002738 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002734:	601a      	str	r2, [r3, #0]
 8002736:	e00b      	b.n	8002750 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800273c:	2b11      	cmp	r3, #17
 800273e:	d107      	bne.n	8002750 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800274e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	9300      	str	r3, [sp, #0]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2200      	movs	r2, #0
 8002758:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800275c:	68f8      	ldr	r0, [r7, #12]
 800275e:	f000 f893 	bl	8002888 <I2C_WaitOnFlagUntilTimeout>
 8002762:	4603      	mov	r3, r0
 8002764:	2b00      	cmp	r3, #0
 8002766:	d00d      	beq.n	8002784 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002772:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002776:	d103      	bne.n	8002780 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800277e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002780:	2303      	movs	r3, #3
 8002782:	e079      	b.n	8002878 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	691b      	ldr	r3, [r3, #16]
 8002788:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800278c:	d108      	bne.n	80027a0 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800278e:	897b      	ldrh	r3, [r7, #10]
 8002790:	b2db      	uxtb	r3, r3
 8002792:	f043 0301 	orr.w	r3, r3, #1
 8002796:	b2da      	uxtb	r2, r3
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	611a      	str	r2, [r3, #16]
 800279e:	e05f      	b.n	8002860 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80027a0:	897b      	ldrh	r3, [r7, #10]
 80027a2:	11db      	asrs	r3, r3, #7
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	f003 0306 	and.w	r3, r3, #6
 80027aa:	b2db      	uxtb	r3, r3
 80027ac:	f063 030f 	orn	r3, r3, #15
 80027b0:	b2da      	uxtb	r2, r3
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	687a      	ldr	r2, [r7, #4]
 80027bc:	4930      	ldr	r1, [pc, #192]	; (8002880 <I2C_MasterRequestRead+0x194>)
 80027be:	68f8      	ldr	r0, [r7, #12]
 80027c0:	f000 f8b9 	bl	8002936 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80027c4:	4603      	mov	r3, r0
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d001      	beq.n	80027ce <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	e054      	b.n	8002878 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80027ce:	897b      	ldrh	r3, [r7, #10]
 80027d0:	b2da      	uxtb	r2, r3
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	687a      	ldr	r2, [r7, #4]
 80027dc:	4929      	ldr	r1, [pc, #164]	; (8002884 <I2C_MasterRequestRead+0x198>)
 80027de:	68f8      	ldr	r0, [r7, #12]
 80027e0:	f000 f8a9 	bl	8002936 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80027e4:	4603      	mov	r3, r0
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d001      	beq.n	80027ee <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	e044      	b.n	8002878 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027ee:	2300      	movs	r3, #0
 80027f0:	613b      	str	r3, [r7, #16]
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	695b      	ldr	r3, [r3, #20]
 80027f8:	613b      	str	r3, [r7, #16]
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	699b      	ldr	r3, [r3, #24]
 8002800:	613b      	str	r3, [r7, #16]
 8002802:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002812:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	9300      	str	r3, [sp, #0]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2200      	movs	r2, #0
 800281c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002820:	68f8      	ldr	r0, [r7, #12]
 8002822:	f000 f831 	bl	8002888 <I2C_WaitOnFlagUntilTimeout>
 8002826:	4603      	mov	r3, r0
 8002828:	2b00      	cmp	r3, #0
 800282a:	d00d      	beq.n	8002848 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002836:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800283a:	d103      	bne.n	8002844 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002842:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8002844:	2303      	movs	r3, #3
 8002846:	e017      	b.n	8002878 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002848:	897b      	ldrh	r3, [r7, #10]
 800284a:	11db      	asrs	r3, r3, #7
 800284c:	b2db      	uxtb	r3, r3
 800284e:	f003 0306 	and.w	r3, r3, #6
 8002852:	b2db      	uxtb	r3, r3
 8002854:	f063 030e 	orn	r3, r3, #14
 8002858:	b2da      	uxtb	r2, r3
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	687a      	ldr	r2, [r7, #4]
 8002864:	4907      	ldr	r1, [pc, #28]	; (8002884 <I2C_MasterRequestRead+0x198>)
 8002866:	68f8      	ldr	r0, [r7, #12]
 8002868:	f000 f865 	bl	8002936 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800286c:	4603      	mov	r3, r0
 800286e:	2b00      	cmp	r3, #0
 8002870:	d001      	beq.n	8002876 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e000      	b.n	8002878 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002876:	2300      	movs	r3, #0
}
 8002878:	4618      	mov	r0, r3
 800287a:	3718      	adds	r7, #24
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}
 8002880:	00010008 	.word	0x00010008
 8002884:	00010002 	.word	0x00010002

08002888 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b084      	sub	sp, #16
 800288c:	af00      	add	r7, sp, #0
 800288e:	60f8      	str	r0, [r7, #12]
 8002890:	60b9      	str	r1, [r7, #8]
 8002892:	603b      	str	r3, [r7, #0]
 8002894:	4613      	mov	r3, r2
 8002896:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002898:	e025      	b.n	80028e6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028a0:	d021      	beq.n	80028e6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028a2:	f7fe fe9b 	bl	80015dc <HAL_GetTick>
 80028a6:	4602      	mov	r2, r0
 80028a8:	69bb      	ldr	r3, [r7, #24]
 80028aa:	1ad3      	subs	r3, r2, r3
 80028ac:	683a      	ldr	r2, [r7, #0]
 80028ae:	429a      	cmp	r2, r3
 80028b0:	d302      	bcc.n	80028b8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d116      	bne.n	80028e6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	2200      	movs	r2, #0
 80028bc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2220      	movs	r2, #32
 80028c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	2200      	movs	r2, #0
 80028ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d2:	f043 0220 	orr.w	r2, r3, #32
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	2200      	movs	r2, #0
 80028de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	e023      	b.n	800292e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	0c1b      	lsrs	r3, r3, #16
 80028ea:	b2db      	uxtb	r3, r3
 80028ec:	2b01      	cmp	r3, #1
 80028ee:	d10d      	bne.n	800290c <I2C_WaitOnFlagUntilTimeout+0x84>
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	695b      	ldr	r3, [r3, #20]
 80028f6:	43da      	mvns	r2, r3
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	4013      	ands	r3, r2
 80028fc:	b29b      	uxth	r3, r3
 80028fe:	2b00      	cmp	r3, #0
 8002900:	bf0c      	ite	eq
 8002902:	2301      	moveq	r3, #1
 8002904:	2300      	movne	r3, #0
 8002906:	b2db      	uxtb	r3, r3
 8002908:	461a      	mov	r2, r3
 800290a:	e00c      	b.n	8002926 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	699b      	ldr	r3, [r3, #24]
 8002912:	43da      	mvns	r2, r3
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	4013      	ands	r3, r2
 8002918:	b29b      	uxth	r3, r3
 800291a:	2b00      	cmp	r3, #0
 800291c:	bf0c      	ite	eq
 800291e:	2301      	moveq	r3, #1
 8002920:	2300      	movne	r3, #0
 8002922:	b2db      	uxtb	r3, r3
 8002924:	461a      	mov	r2, r3
 8002926:	79fb      	ldrb	r3, [r7, #7]
 8002928:	429a      	cmp	r2, r3
 800292a:	d0b6      	beq.n	800289a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800292c:	2300      	movs	r3, #0
}
 800292e:	4618      	mov	r0, r3
 8002930:	3710      	adds	r7, #16
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}

08002936 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002936:	b580      	push	{r7, lr}
 8002938:	b084      	sub	sp, #16
 800293a:	af00      	add	r7, sp, #0
 800293c:	60f8      	str	r0, [r7, #12]
 800293e:	60b9      	str	r1, [r7, #8]
 8002940:	607a      	str	r2, [r7, #4]
 8002942:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002944:	e051      	b.n	80029ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	695b      	ldr	r3, [r3, #20]
 800294c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002950:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002954:	d123      	bne.n	800299e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002964:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800296e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	2200      	movs	r2, #0
 8002974:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	2220      	movs	r2, #32
 800297a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	2200      	movs	r2, #0
 8002982:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298a:	f043 0204 	orr.w	r2, r3, #4
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	2200      	movs	r2, #0
 8002996:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e046      	b.n	8002a2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029a4:	d021      	beq.n	80029ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029a6:	f7fe fe19 	bl	80015dc <HAL_GetTick>
 80029aa:	4602      	mov	r2, r0
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	1ad3      	subs	r3, r2, r3
 80029b0:	687a      	ldr	r2, [r7, #4]
 80029b2:	429a      	cmp	r2, r3
 80029b4:	d302      	bcc.n	80029bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d116      	bne.n	80029ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	2200      	movs	r2, #0
 80029c0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	2220      	movs	r2, #32
 80029c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	2200      	movs	r2, #0
 80029ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d6:	f043 0220 	orr.w	r2, r3, #32
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	2200      	movs	r2, #0
 80029e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	e020      	b.n	8002a2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	0c1b      	lsrs	r3, r3, #16
 80029ee:	b2db      	uxtb	r3, r3
 80029f0:	2b01      	cmp	r3, #1
 80029f2:	d10c      	bne.n	8002a0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	695b      	ldr	r3, [r3, #20]
 80029fa:	43da      	mvns	r2, r3
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	4013      	ands	r3, r2
 8002a00:	b29b      	uxth	r3, r3
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	bf14      	ite	ne
 8002a06:	2301      	movne	r3, #1
 8002a08:	2300      	moveq	r3, #0
 8002a0a:	b2db      	uxtb	r3, r3
 8002a0c:	e00b      	b.n	8002a26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	699b      	ldr	r3, [r3, #24]
 8002a14:	43da      	mvns	r2, r3
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	4013      	ands	r3, r2
 8002a1a:	b29b      	uxth	r3, r3
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	bf14      	ite	ne
 8002a20:	2301      	movne	r3, #1
 8002a22:	2300      	moveq	r3, #0
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d18d      	bne.n	8002946 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002a2a:	2300      	movs	r3, #0
}
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	3710      	adds	r7, #16
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}

08002a34 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b084      	sub	sp, #16
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	60f8      	str	r0, [r7, #12]
 8002a3c:	60b9      	str	r1, [r7, #8]
 8002a3e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a40:	e02d      	b.n	8002a9e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002a42:	68f8      	ldr	r0, [r7, #12]
 8002a44:	f000 f8ce 	bl	8002be4 <I2C_IsAcknowledgeFailed>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d001      	beq.n	8002a52 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e02d      	b.n	8002aae <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a58:	d021      	beq.n	8002a9e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a5a:	f7fe fdbf 	bl	80015dc <HAL_GetTick>
 8002a5e:	4602      	mov	r2, r0
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	1ad3      	subs	r3, r2, r3
 8002a64:	68ba      	ldr	r2, [r7, #8]
 8002a66:	429a      	cmp	r2, r3
 8002a68:	d302      	bcc.n	8002a70 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d116      	bne.n	8002a9e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	2200      	movs	r2, #0
 8002a74:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	2220      	movs	r2, #32
 8002a7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	2200      	movs	r2, #0
 8002a82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a8a:	f043 0220 	orr.w	r2, r3, #32
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	2200      	movs	r2, #0
 8002a96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e007      	b.n	8002aae <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	695b      	ldr	r3, [r3, #20]
 8002aa4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002aa8:	2b80      	cmp	r3, #128	; 0x80
 8002aaa:	d1ca      	bne.n	8002a42 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002aac:	2300      	movs	r3, #0
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	3710      	adds	r7, #16
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}

08002ab6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ab6:	b580      	push	{r7, lr}
 8002ab8:	b084      	sub	sp, #16
 8002aba:	af00      	add	r7, sp, #0
 8002abc:	60f8      	str	r0, [r7, #12]
 8002abe:	60b9      	str	r1, [r7, #8]
 8002ac0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002ac2:	e02d      	b.n	8002b20 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002ac4:	68f8      	ldr	r0, [r7, #12]
 8002ac6:	f000 f88d 	bl	8002be4 <I2C_IsAcknowledgeFailed>
 8002aca:	4603      	mov	r3, r0
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d001      	beq.n	8002ad4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	e02d      	b.n	8002b30 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ada:	d021      	beq.n	8002b20 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002adc:	f7fe fd7e 	bl	80015dc <HAL_GetTick>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	1ad3      	subs	r3, r2, r3
 8002ae6:	68ba      	ldr	r2, [r7, #8]
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d302      	bcc.n	8002af2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d116      	bne.n	8002b20 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	2200      	movs	r2, #0
 8002af6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	2220      	movs	r2, #32
 8002afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	2200      	movs	r2, #0
 8002b04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0c:	f043 0220 	orr.w	r2, r3, #32
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	2200      	movs	r2, #0
 8002b18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	e007      	b.n	8002b30 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	695b      	ldr	r3, [r3, #20]
 8002b26:	f003 0304 	and.w	r3, r3, #4
 8002b2a:	2b04      	cmp	r3, #4
 8002b2c:	d1ca      	bne.n	8002ac4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002b2e:	2300      	movs	r3, #0
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	3710      	adds	r7, #16
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}

08002b38 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b084      	sub	sp, #16
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	60f8      	str	r0, [r7, #12]
 8002b40:	60b9      	str	r1, [r7, #8]
 8002b42:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002b44:	e042      	b.n	8002bcc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	695b      	ldr	r3, [r3, #20]
 8002b4c:	f003 0310 	and.w	r3, r3, #16
 8002b50:	2b10      	cmp	r3, #16
 8002b52:	d119      	bne.n	8002b88 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f06f 0210 	mvn.w	r2, #16
 8002b5c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	2200      	movs	r2, #0
 8002b62:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	2220      	movs	r2, #32
 8002b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002b84:	2301      	movs	r3, #1
 8002b86:	e029      	b.n	8002bdc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b88:	f7fe fd28 	bl	80015dc <HAL_GetTick>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	1ad3      	subs	r3, r2, r3
 8002b92:	68ba      	ldr	r2, [r7, #8]
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d302      	bcc.n	8002b9e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d116      	bne.n	8002bcc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	2220      	movs	r2, #32
 8002ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb8:	f043 0220 	orr.w	r2, r3, #32
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	e007      	b.n	8002bdc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	695b      	ldr	r3, [r3, #20]
 8002bd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bd6:	2b40      	cmp	r3, #64	; 0x40
 8002bd8:	d1b5      	bne.n	8002b46 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002bda:	2300      	movs	r3, #0
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	3710      	adds	r7, #16
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}

08002be4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b083      	sub	sp, #12
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	695b      	ldr	r3, [r3, #20]
 8002bf2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bf6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bfa:	d11b      	bne.n	8002c34 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002c04:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2220      	movs	r2, #32
 8002c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2200      	movs	r2, #0
 8002c18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c20:	f043 0204 	orr.w	r2, r3, #4
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	e000      	b.n	8002c36 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002c34:	2300      	movs	r3, #0
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	370c      	adds	r7, #12
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr
	...

08002c44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b084      	sub	sp, #16
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
 8002c4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d101      	bne.n	8002c58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c54:	2301      	movs	r3, #1
 8002c56:	e0cc      	b.n	8002df2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c58:	4b68      	ldr	r3, [pc, #416]	; (8002dfc <HAL_RCC_ClockConfig+0x1b8>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f003 030f 	and.w	r3, r3, #15
 8002c60:	683a      	ldr	r2, [r7, #0]
 8002c62:	429a      	cmp	r2, r3
 8002c64:	d90c      	bls.n	8002c80 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c66:	4b65      	ldr	r3, [pc, #404]	; (8002dfc <HAL_RCC_ClockConfig+0x1b8>)
 8002c68:	683a      	ldr	r2, [r7, #0]
 8002c6a:	b2d2      	uxtb	r2, r2
 8002c6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c6e:	4b63      	ldr	r3, [pc, #396]	; (8002dfc <HAL_RCC_ClockConfig+0x1b8>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f003 030f 	and.w	r3, r3, #15
 8002c76:	683a      	ldr	r2, [r7, #0]
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	d001      	beq.n	8002c80 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e0b8      	b.n	8002df2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 0302 	and.w	r3, r3, #2
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d020      	beq.n	8002cce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f003 0304 	and.w	r3, r3, #4
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d005      	beq.n	8002ca4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c98:	4b59      	ldr	r3, [pc, #356]	; (8002e00 <HAL_RCC_ClockConfig+0x1bc>)
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	4a58      	ldr	r2, [pc, #352]	; (8002e00 <HAL_RCC_ClockConfig+0x1bc>)
 8002c9e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002ca2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f003 0308 	and.w	r3, r3, #8
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d005      	beq.n	8002cbc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002cb0:	4b53      	ldr	r3, [pc, #332]	; (8002e00 <HAL_RCC_ClockConfig+0x1bc>)
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	4a52      	ldr	r2, [pc, #328]	; (8002e00 <HAL_RCC_ClockConfig+0x1bc>)
 8002cb6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002cba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cbc:	4b50      	ldr	r3, [pc, #320]	; (8002e00 <HAL_RCC_ClockConfig+0x1bc>)
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	494d      	ldr	r1, [pc, #308]	; (8002e00 <HAL_RCC_ClockConfig+0x1bc>)
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 0301 	and.w	r3, r3, #1
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d044      	beq.n	8002d64 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	2b01      	cmp	r3, #1
 8002ce0:	d107      	bne.n	8002cf2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ce2:	4b47      	ldr	r3, [pc, #284]	; (8002e00 <HAL_RCC_ClockConfig+0x1bc>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d119      	bne.n	8002d22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e07f      	b.n	8002df2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	2b02      	cmp	r3, #2
 8002cf8:	d003      	beq.n	8002d02 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002cfe:	2b03      	cmp	r3, #3
 8002d00:	d107      	bne.n	8002d12 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d02:	4b3f      	ldr	r3, [pc, #252]	; (8002e00 <HAL_RCC_ClockConfig+0x1bc>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d109      	bne.n	8002d22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e06f      	b.n	8002df2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d12:	4b3b      	ldr	r3, [pc, #236]	; (8002e00 <HAL_RCC_ClockConfig+0x1bc>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f003 0302 	and.w	r3, r3, #2
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d101      	bne.n	8002d22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e067      	b.n	8002df2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d22:	4b37      	ldr	r3, [pc, #220]	; (8002e00 <HAL_RCC_ClockConfig+0x1bc>)
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	f023 0203 	bic.w	r2, r3, #3
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	4934      	ldr	r1, [pc, #208]	; (8002e00 <HAL_RCC_ClockConfig+0x1bc>)
 8002d30:	4313      	orrs	r3, r2
 8002d32:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d34:	f7fe fc52 	bl	80015dc <HAL_GetTick>
 8002d38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d3a:	e00a      	b.n	8002d52 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d3c:	f7fe fc4e 	bl	80015dc <HAL_GetTick>
 8002d40:	4602      	mov	r2, r0
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	1ad3      	subs	r3, r2, r3
 8002d46:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d901      	bls.n	8002d52 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d4e:	2303      	movs	r3, #3
 8002d50:	e04f      	b.n	8002df2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d52:	4b2b      	ldr	r3, [pc, #172]	; (8002e00 <HAL_RCC_ClockConfig+0x1bc>)
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	f003 020c 	and.w	r2, r3, #12
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	009b      	lsls	r3, r3, #2
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d1eb      	bne.n	8002d3c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d64:	4b25      	ldr	r3, [pc, #148]	; (8002dfc <HAL_RCC_ClockConfig+0x1b8>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f003 030f 	and.w	r3, r3, #15
 8002d6c:	683a      	ldr	r2, [r7, #0]
 8002d6e:	429a      	cmp	r2, r3
 8002d70:	d20c      	bcs.n	8002d8c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d72:	4b22      	ldr	r3, [pc, #136]	; (8002dfc <HAL_RCC_ClockConfig+0x1b8>)
 8002d74:	683a      	ldr	r2, [r7, #0]
 8002d76:	b2d2      	uxtb	r2, r2
 8002d78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d7a:	4b20      	ldr	r3, [pc, #128]	; (8002dfc <HAL_RCC_ClockConfig+0x1b8>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 030f 	and.w	r3, r3, #15
 8002d82:	683a      	ldr	r2, [r7, #0]
 8002d84:	429a      	cmp	r2, r3
 8002d86:	d001      	beq.n	8002d8c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	e032      	b.n	8002df2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 0304 	and.w	r3, r3, #4
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d008      	beq.n	8002daa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d98:	4b19      	ldr	r3, [pc, #100]	; (8002e00 <HAL_RCC_ClockConfig+0x1bc>)
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	68db      	ldr	r3, [r3, #12]
 8002da4:	4916      	ldr	r1, [pc, #88]	; (8002e00 <HAL_RCC_ClockConfig+0x1bc>)
 8002da6:	4313      	orrs	r3, r2
 8002da8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 0308 	and.w	r3, r3, #8
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d009      	beq.n	8002dca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002db6:	4b12      	ldr	r3, [pc, #72]	; (8002e00 <HAL_RCC_ClockConfig+0x1bc>)
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	691b      	ldr	r3, [r3, #16]
 8002dc2:	00db      	lsls	r3, r3, #3
 8002dc4:	490e      	ldr	r1, [pc, #56]	; (8002e00 <HAL_RCC_ClockConfig+0x1bc>)
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002dca:	f000 fb7f 	bl	80034cc <HAL_RCC_GetSysClockFreq>
 8002dce:	4602      	mov	r2, r0
 8002dd0:	4b0b      	ldr	r3, [pc, #44]	; (8002e00 <HAL_RCC_ClockConfig+0x1bc>)
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	091b      	lsrs	r3, r3, #4
 8002dd6:	f003 030f 	and.w	r3, r3, #15
 8002dda:	490a      	ldr	r1, [pc, #40]	; (8002e04 <HAL_RCC_ClockConfig+0x1c0>)
 8002ddc:	5ccb      	ldrb	r3, [r1, r3]
 8002dde:	fa22 f303 	lsr.w	r3, r2, r3
 8002de2:	4a09      	ldr	r2, [pc, #36]	; (8002e08 <HAL_RCC_ClockConfig+0x1c4>)
 8002de4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002de6:	4b09      	ldr	r3, [pc, #36]	; (8002e0c <HAL_RCC_ClockConfig+0x1c8>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4618      	mov	r0, r3
 8002dec:	f7fe fbb2 	bl	8001554 <HAL_InitTick>

  return HAL_OK;
 8002df0:	2300      	movs	r3, #0
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	3710      	adds	r7, #16
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	bf00      	nop
 8002dfc:	40023c00 	.word	0x40023c00
 8002e00:	40023800 	.word	0x40023800
 8002e04:	0800a0e0 	.word	0x0800a0e0
 8002e08:	2000007c 	.word	0x2000007c
 8002e0c:	20000080 	.word	0x20000080

08002e10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e10:	b480      	push	{r7}
 8002e12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e14:	4b03      	ldr	r3, [pc, #12]	; (8002e24 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e16:	681b      	ldr	r3, [r3, #0]
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e20:	4770      	bx	lr
 8002e22:	bf00      	nop
 8002e24:	2000007c 	.word	0x2000007c

08002e28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002e2c:	f7ff fff0 	bl	8002e10 <HAL_RCC_GetHCLKFreq>
 8002e30:	4602      	mov	r2, r0
 8002e32:	4b05      	ldr	r3, [pc, #20]	; (8002e48 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	0a9b      	lsrs	r3, r3, #10
 8002e38:	f003 0307 	and.w	r3, r3, #7
 8002e3c:	4903      	ldr	r1, [pc, #12]	; (8002e4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e3e:	5ccb      	ldrb	r3, [r1, r3]
 8002e40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	bd80      	pop	{r7, pc}
 8002e48:	40023800 	.word	0x40023800
 8002e4c:	0800a0f0 	.word	0x0800a0f0

08002e50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002e54:	f7ff ffdc 	bl	8002e10 <HAL_RCC_GetHCLKFreq>
 8002e58:	4602      	mov	r2, r0
 8002e5a:	4b05      	ldr	r3, [pc, #20]	; (8002e70 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	0b5b      	lsrs	r3, r3, #13
 8002e60:	f003 0307 	and.w	r3, r3, #7
 8002e64:	4903      	ldr	r1, [pc, #12]	; (8002e74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e66:	5ccb      	ldrb	r3, [r1, r3]
 8002e68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	bd80      	pop	{r7, pc}
 8002e70:	40023800 	.word	0x40023800
 8002e74:	0800a0f0 	.word	0x0800a0f0

08002e78 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b08c      	sub	sp, #48	; 0x30
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002e80:	2300      	movs	r3, #0
 8002e82:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8002e84:	2300      	movs	r3, #0
 8002e86:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8002e90:	2300      	movs	r3, #0
 8002e92:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8002e94:	2300      	movs	r3, #0
 8002e96:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f003 0301 	and.w	r3, r3, #1
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d010      	beq.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8002eb0:	4b6f      	ldr	r3, [pc, #444]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002eb2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002eb6:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ebe:	496c      	ldr	r1, [pc, #432]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d101      	bne.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f003 0302 	and.w	r3, r3, #2
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d010      	beq.n	8002f00 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8002ede:	4b64      	ldr	r3, [pc, #400]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002ee0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ee4:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eec:	4960      	ldr	r1, [pc, #384]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d101      	bne.n	8002f00 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8002efc:	2301      	movs	r3, #1
 8002efe:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f003 0304 	and.w	r3, r3, #4
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d017      	beq.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002f0c:	4b58      	ldr	r3, [pc, #352]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002f0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f12:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f1a:	4955      	ldr	r1, [pc, #340]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002f2a:	d101      	bne.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d101      	bne.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f003 0308 	and.w	r3, r3, #8
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d017      	beq.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002f48:	4b49      	ldr	r3, [pc, #292]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002f4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f4e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f56:	4946      	ldr	r1, [pc, #280]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f62:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f66:	d101      	bne.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d101      	bne.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8002f74:	2301      	movs	r3, #1
 8002f76:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f003 0320 	and.w	r3, r3, #32
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	f000 808a 	beq.w	800309a <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002f86:	2300      	movs	r3, #0
 8002f88:	60bb      	str	r3, [r7, #8]
 8002f8a:	4b39      	ldr	r3, [pc, #228]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f8e:	4a38      	ldr	r2, [pc, #224]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002f90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f94:	6413      	str	r3, [r2, #64]	; 0x40
 8002f96:	4b36      	ldr	r3, [pc, #216]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f9e:	60bb      	str	r3, [r7, #8]
 8002fa0:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002fa2:	4b34      	ldr	r3, [pc, #208]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a33      	ldr	r2, [pc, #204]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002fa8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fac:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002fae:	f7fe fb15 	bl	80015dc <HAL_GetTick>
 8002fb2:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002fb4:	e008      	b.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002fb6:	f7fe fb11 	bl	80015dc <HAL_GetTick>
 8002fba:	4602      	mov	r2, r0
 8002fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fbe:	1ad3      	subs	r3, r2, r3
 8002fc0:	2b02      	cmp	r3, #2
 8002fc2:	d901      	bls.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8002fc4:	2303      	movs	r3, #3
 8002fc6:	e278      	b.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002fc8:	4b2a      	ldr	r3, [pc, #168]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d0f0      	beq.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002fd4:	4b26      	ldr	r3, [pc, #152]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002fd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fd8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fdc:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002fde:	6a3b      	ldr	r3, [r7, #32]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d02f      	beq.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fec:	6a3a      	ldr	r2, [r7, #32]
 8002fee:	429a      	cmp	r2, r3
 8002ff0:	d028      	beq.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002ff2:	4b1f      	ldr	r3, [pc, #124]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002ff4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ff6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ffa:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002ffc:	4b1e      	ldr	r3, [pc, #120]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002ffe:	2201      	movs	r2, #1
 8003000:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003002:	4b1d      	ldr	r3, [pc, #116]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8003004:	2200      	movs	r2, #0
 8003006:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003008:	4a19      	ldr	r2, [pc, #100]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800300a:	6a3b      	ldr	r3, [r7, #32]
 800300c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800300e:	4b18      	ldr	r3, [pc, #96]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003010:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003012:	f003 0301 	and.w	r3, r3, #1
 8003016:	2b01      	cmp	r3, #1
 8003018:	d114      	bne.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800301a:	f7fe fadf 	bl	80015dc <HAL_GetTick>
 800301e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003020:	e00a      	b.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003022:	f7fe fadb 	bl	80015dc <HAL_GetTick>
 8003026:	4602      	mov	r2, r0
 8003028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800302a:	1ad3      	subs	r3, r2, r3
 800302c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003030:	4293      	cmp	r3, r2
 8003032:	d901      	bls.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8003034:	2303      	movs	r3, #3
 8003036:	e240      	b.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003038:	4b0d      	ldr	r3, [pc, #52]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800303a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800303c:	f003 0302 	and.w	r3, r3, #2
 8003040:	2b00      	cmp	r3, #0
 8003042:	d0ee      	beq.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003048:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800304c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003050:	d114      	bne.n	800307c <HAL_RCCEx_PeriphCLKConfig+0x204>
 8003052:	4b07      	ldr	r3, [pc, #28]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800305e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003062:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003066:	4902      	ldr	r1, [pc, #8]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003068:	4313      	orrs	r3, r2
 800306a:	608b      	str	r3, [r1, #8]
 800306c:	e00c      	b.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x210>
 800306e:	bf00      	nop
 8003070:	40023800 	.word	0x40023800
 8003074:	40007000 	.word	0x40007000
 8003078:	42470e40 	.word	0x42470e40
 800307c:	4b4a      	ldr	r3, [pc, #296]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	4a49      	ldr	r2, [pc, #292]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003082:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003086:	6093      	str	r3, [r2, #8]
 8003088:	4b47      	ldr	r3, [pc, #284]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800308a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003090:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003094:	4944      	ldr	r1, [pc, #272]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003096:	4313      	orrs	r3, r2
 8003098:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 0310 	and.w	r3, r3, #16
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d004      	beq.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 80030ac:	4b3f      	ldr	r3, [pc, #252]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x334>)
 80030ae:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d00a      	beq.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 80030bc:	4b3a      	ldr	r3, [pc, #232]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80030be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030c2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030ca:	4937      	ldr	r1, [pc, #220]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80030cc:	4313      	orrs	r3, r2
 80030ce:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d00a      	beq.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80030de:	4b32      	ldr	r3, [pc, #200]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80030e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030e4:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030ec:	492e      	ldr	r1, [pc, #184]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80030ee:	4313      	orrs	r3, r2
 80030f0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d011      	beq.n	8003124 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003100:	4b29      	ldr	r3, [pc, #164]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003102:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003106:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800310e:	4926      	ldr	r1, [pc, #152]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003110:	4313      	orrs	r3, r2
 8003112:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800311a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800311e:	d101      	bne.n	8003124 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8003120:	2301      	movs	r3, #1
 8003122:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800312c:	2b00      	cmp	r3, #0
 800312e:	d00a      	beq.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8003130:	4b1d      	ldr	r3, [pc, #116]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003132:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003136:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800313e:	491a      	ldr	r1, [pc, #104]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003140:	4313      	orrs	r3, r2
 8003142:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800314e:	2b00      	cmp	r3, #0
 8003150:	d011      	beq.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8003152:	4b15      	ldr	r3, [pc, #84]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003154:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003158:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003160:	4911      	ldr	r1, [pc, #68]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003162:	4313      	orrs	r3, r2
 8003164:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800316c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003170:	d101      	bne.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8003172:	2301      	movs	r3, #1
 8003174:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003178:	2b01      	cmp	r3, #1
 800317a:	d005      	beq.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003184:	f040 80ff 	bne.w	8003386 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003188:	4b09      	ldr	r3, [pc, #36]	; (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800318a:	2200      	movs	r2, #0
 800318c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800318e:	f7fe fa25 	bl	80015dc <HAL_GetTick>
 8003192:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003194:	e00e      	b.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003196:	f7fe fa21 	bl	80015dc <HAL_GetTick>
 800319a:	4602      	mov	r2, r0
 800319c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800319e:	1ad3      	subs	r3, r2, r3
 80031a0:	2b02      	cmp	r3, #2
 80031a2:	d907      	bls.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80031a4:	2303      	movs	r3, #3
 80031a6:	e188      	b.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x642>
 80031a8:	40023800 	.word	0x40023800
 80031ac:	424711e0 	.word	0x424711e0
 80031b0:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80031b4:	4b7e      	ldr	r3, [pc, #504]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d1ea      	bne.n	8003196 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f003 0301 	and.w	r3, r3, #1
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d003      	beq.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d009      	beq.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d028      	beq.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d124      	bne.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80031e8:	4b71      	ldr	r3, [pc, #452]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80031ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031ee:	0c1b      	lsrs	r3, r3, #16
 80031f0:	f003 0303 	and.w	r3, r3, #3
 80031f4:	3301      	adds	r3, #1
 80031f6:	005b      	lsls	r3, r3, #1
 80031f8:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80031fa:	4b6d      	ldr	r3, [pc, #436]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80031fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003200:	0e1b      	lsrs	r3, r3, #24
 8003202:	f003 030f 	and.w	r3, r3, #15
 8003206:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	685a      	ldr	r2, [r3, #4]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	019b      	lsls	r3, r3, #6
 8003212:	431a      	orrs	r2, r3
 8003214:	69fb      	ldr	r3, [r7, #28]
 8003216:	085b      	lsrs	r3, r3, #1
 8003218:	3b01      	subs	r3, #1
 800321a:	041b      	lsls	r3, r3, #16
 800321c:	431a      	orrs	r2, r3
 800321e:	69bb      	ldr	r3, [r7, #24]
 8003220:	061b      	lsls	r3, r3, #24
 8003222:	431a      	orrs	r2, r3
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	695b      	ldr	r3, [r3, #20]
 8003228:	071b      	lsls	r3, r3, #28
 800322a:	4961      	ldr	r1, [pc, #388]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800322c:	4313      	orrs	r3, r2
 800322e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f003 0304 	and.w	r3, r3, #4
 800323a:	2b00      	cmp	r3, #0
 800323c:	d004      	beq.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003242:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003246:	d00a      	beq.n	800325e <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003250:	2b00      	cmp	r3, #0
 8003252:	d035      	beq.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003258:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800325c:	d130      	bne.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800325e:	4b54      	ldr	r3, [pc, #336]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003260:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003264:	0c1b      	lsrs	r3, r3, #16
 8003266:	f003 0303 	and.w	r3, r3, #3
 800326a:	3301      	adds	r3, #1
 800326c:	005b      	lsls	r3, r3, #1
 800326e:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003270:	4b4f      	ldr	r3, [pc, #316]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003272:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003276:	0f1b      	lsrs	r3, r3, #28
 8003278:	f003 0307 	and.w	r3, r3, #7
 800327c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	685a      	ldr	r2, [r3, #4]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	019b      	lsls	r3, r3, #6
 8003288:	431a      	orrs	r2, r3
 800328a:	69fb      	ldr	r3, [r7, #28]
 800328c:	085b      	lsrs	r3, r3, #1
 800328e:	3b01      	subs	r3, #1
 8003290:	041b      	lsls	r3, r3, #16
 8003292:	431a      	orrs	r2, r3
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	691b      	ldr	r3, [r3, #16]
 8003298:	061b      	lsls	r3, r3, #24
 800329a:	431a      	orrs	r2, r3
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	071b      	lsls	r3, r3, #28
 80032a0:	4943      	ldr	r1, [pc, #268]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80032a2:	4313      	orrs	r3, r2
 80032a4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80032a8:	4b41      	ldr	r3, [pc, #260]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80032aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80032ae:	f023 021f 	bic.w	r2, r3, #31
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032b6:	3b01      	subs	r3, #1
 80032b8:	493d      	ldr	r1, [pc, #244]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80032ba:	4313      	orrs	r3, r2
 80032bc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d029      	beq.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80032d4:	d124      	bne.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80032d6:	4b36      	ldr	r3, [pc, #216]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80032d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032dc:	0c1b      	lsrs	r3, r3, #16
 80032de:	f003 0303 	and.w	r3, r3, #3
 80032e2:	3301      	adds	r3, #1
 80032e4:	005b      	lsls	r3, r3, #1
 80032e6:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80032e8:	4b31      	ldr	r3, [pc, #196]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80032ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032ee:	0f1b      	lsrs	r3, r3, #28
 80032f0:	f003 0307 	and.w	r3, r3, #7
 80032f4:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	685a      	ldr	r2, [r3, #4]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	019b      	lsls	r3, r3, #6
 8003300:	431a      	orrs	r2, r3
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	68db      	ldr	r3, [r3, #12]
 8003306:	085b      	lsrs	r3, r3, #1
 8003308:	3b01      	subs	r3, #1
 800330a:	041b      	lsls	r3, r3, #16
 800330c:	431a      	orrs	r2, r3
 800330e:	69bb      	ldr	r3, [r7, #24]
 8003310:	061b      	lsls	r3, r3, #24
 8003312:	431a      	orrs	r2, r3
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	071b      	lsls	r3, r3, #28
 8003318:	4925      	ldr	r1, [pc, #148]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800331a:	4313      	orrs	r3, r2
 800331c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003328:	2b00      	cmp	r3, #0
 800332a:	d016      	beq.n	800335a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	685a      	ldr	r2, [r3, #4]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	019b      	lsls	r3, r3, #6
 8003336:	431a      	orrs	r2, r3
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	68db      	ldr	r3, [r3, #12]
 800333c:	085b      	lsrs	r3, r3, #1
 800333e:	3b01      	subs	r3, #1
 8003340:	041b      	lsls	r3, r3, #16
 8003342:	431a      	orrs	r2, r3
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	691b      	ldr	r3, [r3, #16]
 8003348:	061b      	lsls	r3, r3, #24
 800334a:	431a      	orrs	r2, r3
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	695b      	ldr	r3, [r3, #20]
 8003350:	071b      	lsls	r3, r3, #28
 8003352:	4917      	ldr	r1, [pc, #92]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003354:	4313      	orrs	r3, r2
 8003356:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800335a:	4b16      	ldr	r3, [pc, #88]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 800335c:	2201      	movs	r2, #1
 800335e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003360:	f7fe f93c 	bl	80015dc <HAL_GetTick>
 8003364:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003366:	e008      	b.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003368:	f7fe f938 	bl	80015dc <HAL_GetTick>
 800336c:	4602      	mov	r2, r0
 800336e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003370:	1ad3      	subs	r3, r2, r3
 8003372:	2b02      	cmp	r3, #2
 8003374:	d901      	bls.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003376:	2303      	movs	r3, #3
 8003378:	e09f      	b.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800337a:	4b0d      	ldr	r3, [pc, #52]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003382:	2b00      	cmp	r3, #0
 8003384:	d0f0      	beq.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8003386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003388:	2b01      	cmp	r3, #1
 800338a:	f040 8095 	bne.w	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800338e:	4b0a      	ldr	r3, [pc, #40]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003390:	2200      	movs	r2, #0
 8003392:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003394:	f7fe f922 	bl	80015dc <HAL_GetTick>
 8003398:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800339a:	e00f      	b.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800339c:	f7fe f91e 	bl	80015dc <HAL_GetTick>
 80033a0:	4602      	mov	r2, r0
 80033a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a4:	1ad3      	subs	r3, r2, r3
 80033a6:	2b02      	cmp	r3, #2
 80033a8:	d908      	bls.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80033aa:	2303      	movs	r3, #3
 80033ac:	e085      	b.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x642>
 80033ae:	bf00      	nop
 80033b0:	40023800 	.word	0x40023800
 80033b4:	42470068 	.word	0x42470068
 80033b8:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80033bc:	4b41      	ldr	r3, [pc, #260]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80033c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80033c8:	d0e8      	beq.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 0304 	and.w	r3, r3, #4
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d003      	beq.n	80033de <HAL_RCCEx_PeriphCLKConfig+0x566>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d009      	beq.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d02b      	beq.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d127      	bne.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 80033f2:	4b34      	ldr	r3, [pc, #208]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80033f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033f8:	0c1b      	lsrs	r3, r3, #16
 80033fa:	f003 0303 	and.w	r3, r3, #3
 80033fe:	3301      	adds	r3, #1
 8003400:	005b      	lsls	r3, r3, #1
 8003402:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	699a      	ldr	r2, [r3, #24]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	69db      	ldr	r3, [r3, #28]
 800340c:	019b      	lsls	r3, r3, #6
 800340e:	431a      	orrs	r2, r3
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	085b      	lsrs	r3, r3, #1
 8003414:	3b01      	subs	r3, #1
 8003416:	041b      	lsls	r3, r3, #16
 8003418:	431a      	orrs	r2, r3
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800341e:	061b      	lsls	r3, r3, #24
 8003420:	4928      	ldr	r1, [pc, #160]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003422:	4313      	orrs	r3, r2
 8003424:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003428:	4b26      	ldr	r3, [pc, #152]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800342a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800342e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003436:	3b01      	subs	r3, #1
 8003438:	021b      	lsls	r3, r3, #8
 800343a:	4922      	ldr	r1, [pc, #136]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800343c:	4313      	orrs	r3, r2
 800343e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800344a:	2b00      	cmp	r3, #0
 800344c:	d01d      	beq.n	800348a <HAL_RCCEx_PeriphCLKConfig+0x612>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003452:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003456:	d118      	bne.n	800348a <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003458:	4b1a      	ldr	r3, [pc, #104]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800345a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800345e:	0e1b      	lsrs	r3, r3, #24
 8003460:	f003 030f 	and.w	r3, r3, #15
 8003464:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	699a      	ldr	r2, [r3, #24]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	69db      	ldr	r3, [r3, #28]
 800346e:	019b      	lsls	r3, r3, #6
 8003470:	431a      	orrs	r2, r3
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6a1b      	ldr	r3, [r3, #32]
 8003476:	085b      	lsrs	r3, r3, #1
 8003478:	3b01      	subs	r3, #1
 800347a:	041b      	lsls	r3, r3, #16
 800347c:	431a      	orrs	r2, r3
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	061b      	lsls	r3, r3, #24
 8003482:	4910      	ldr	r1, [pc, #64]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003484:	4313      	orrs	r3, r2
 8003486:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800348a:	4b0f      	ldr	r3, [pc, #60]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 800348c:	2201      	movs	r2, #1
 800348e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003490:	f7fe f8a4 	bl	80015dc <HAL_GetTick>
 8003494:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003496:	e008      	b.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003498:	f7fe f8a0 	bl	80015dc <HAL_GetTick>
 800349c:	4602      	mov	r2, r0
 800349e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a0:	1ad3      	subs	r3, r2, r3
 80034a2:	2b02      	cmp	r3, #2
 80034a4:	d901      	bls.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80034a6:	2303      	movs	r3, #3
 80034a8:	e007      	b.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80034aa:	4b06      	ldr	r3, [pc, #24]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80034b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80034b6:	d1ef      	bne.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 80034b8:	2300      	movs	r3, #0
}
 80034ba:	4618      	mov	r0, r3
 80034bc:	3730      	adds	r7, #48	; 0x30
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}
 80034c2:	bf00      	nop
 80034c4:	40023800 	.word	0x40023800
 80034c8:	42470070 	.word	0x42470070

080034cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80034d0:	b088      	sub	sp, #32
 80034d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80034d4:	2300      	movs	r3, #0
 80034d6:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 80034d8:	2300      	movs	r3, #0
 80034da:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 80034dc:	2300      	movs	r3, #0
 80034de:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 80034e0:	2300      	movs	r3, #0
 80034e2:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 80034e4:	2300      	movs	r3, #0
 80034e6:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80034e8:	4bce      	ldr	r3, [pc, #824]	; (8003824 <HAL_RCC_GetSysClockFreq+0x358>)
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	f003 030c 	and.w	r3, r3, #12
 80034f0:	2b0c      	cmp	r3, #12
 80034f2:	f200 818d 	bhi.w	8003810 <HAL_RCC_GetSysClockFreq+0x344>
 80034f6:	a201      	add	r2, pc, #4	; (adr r2, 80034fc <HAL_RCC_GetSysClockFreq+0x30>)
 80034f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034fc:	08003531 	.word	0x08003531
 8003500:	08003811 	.word	0x08003811
 8003504:	08003811 	.word	0x08003811
 8003508:	08003811 	.word	0x08003811
 800350c:	08003537 	.word	0x08003537
 8003510:	08003811 	.word	0x08003811
 8003514:	08003811 	.word	0x08003811
 8003518:	08003811 	.word	0x08003811
 800351c:	0800353d 	.word	0x0800353d
 8003520:	08003811 	.word	0x08003811
 8003524:	08003811 	.word	0x08003811
 8003528:	08003811 	.word	0x08003811
 800352c:	080036b1 	.word	0x080036b1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003530:	4bbd      	ldr	r3, [pc, #756]	; (8003828 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003532:	61bb      	str	r3, [r7, #24]
       break;
 8003534:	e16f      	b.n	8003816 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003536:	4bbd      	ldr	r3, [pc, #756]	; (800382c <HAL_RCC_GetSysClockFreq+0x360>)
 8003538:	61bb      	str	r3, [r7, #24]
      break;
 800353a:	e16c      	b.n	8003816 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800353c:	4bb9      	ldr	r3, [pc, #740]	; (8003824 <HAL_RCC_GetSysClockFreq+0x358>)
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003544:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003546:	4bb7      	ldr	r3, [pc, #732]	; (8003824 <HAL_RCC_GetSysClockFreq+0x358>)
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800354e:	2b00      	cmp	r3, #0
 8003550:	d053      	beq.n	80035fa <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003552:	4bb4      	ldr	r3, [pc, #720]	; (8003824 <HAL_RCC_GetSysClockFreq+0x358>)
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	099b      	lsrs	r3, r3, #6
 8003558:	461a      	mov	r2, r3
 800355a:	f04f 0300 	mov.w	r3, #0
 800355e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003562:	f04f 0100 	mov.w	r1, #0
 8003566:	ea02 0400 	and.w	r4, r2, r0
 800356a:	603c      	str	r4, [r7, #0]
 800356c:	400b      	ands	r3, r1
 800356e:	607b      	str	r3, [r7, #4]
 8003570:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003574:	4620      	mov	r0, r4
 8003576:	4629      	mov	r1, r5
 8003578:	f04f 0200 	mov.w	r2, #0
 800357c:	f04f 0300 	mov.w	r3, #0
 8003580:	014b      	lsls	r3, r1, #5
 8003582:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003586:	0142      	lsls	r2, r0, #5
 8003588:	4610      	mov	r0, r2
 800358a:	4619      	mov	r1, r3
 800358c:	4623      	mov	r3, r4
 800358e:	1ac0      	subs	r0, r0, r3
 8003590:	462b      	mov	r3, r5
 8003592:	eb61 0103 	sbc.w	r1, r1, r3
 8003596:	f04f 0200 	mov.w	r2, #0
 800359a:	f04f 0300 	mov.w	r3, #0
 800359e:	018b      	lsls	r3, r1, #6
 80035a0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80035a4:	0182      	lsls	r2, r0, #6
 80035a6:	1a12      	subs	r2, r2, r0
 80035a8:	eb63 0301 	sbc.w	r3, r3, r1
 80035ac:	f04f 0000 	mov.w	r0, #0
 80035b0:	f04f 0100 	mov.w	r1, #0
 80035b4:	00d9      	lsls	r1, r3, #3
 80035b6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80035ba:	00d0      	lsls	r0, r2, #3
 80035bc:	4602      	mov	r2, r0
 80035be:	460b      	mov	r3, r1
 80035c0:	4621      	mov	r1, r4
 80035c2:	1852      	adds	r2, r2, r1
 80035c4:	4629      	mov	r1, r5
 80035c6:	eb43 0101 	adc.w	r1, r3, r1
 80035ca:	460b      	mov	r3, r1
 80035cc:	f04f 0000 	mov.w	r0, #0
 80035d0:	f04f 0100 	mov.w	r1, #0
 80035d4:	0259      	lsls	r1, r3, #9
 80035d6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80035da:	0250      	lsls	r0, r2, #9
 80035dc:	4602      	mov	r2, r0
 80035de:	460b      	mov	r3, r1
 80035e0:	4610      	mov	r0, r2
 80035e2:	4619      	mov	r1, r3
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	461a      	mov	r2, r3
 80035e8:	f04f 0300 	mov.w	r3, #0
 80035ec:	f7fc fe0a 	bl	8000204 <__aeabi_uldivmod>
 80035f0:	4602      	mov	r2, r0
 80035f2:	460b      	mov	r3, r1
 80035f4:	4613      	mov	r3, r2
 80035f6:	61fb      	str	r3, [r7, #28]
 80035f8:	e04c      	b.n	8003694 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035fa:	4b8a      	ldr	r3, [pc, #552]	; (8003824 <HAL_RCC_GetSysClockFreq+0x358>)
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	099b      	lsrs	r3, r3, #6
 8003600:	461a      	mov	r2, r3
 8003602:	f04f 0300 	mov.w	r3, #0
 8003606:	f240 10ff 	movw	r0, #511	; 0x1ff
 800360a:	f04f 0100 	mov.w	r1, #0
 800360e:	ea02 0a00 	and.w	sl, r2, r0
 8003612:	ea03 0b01 	and.w	fp, r3, r1
 8003616:	4650      	mov	r0, sl
 8003618:	4659      	mov	r1, fp
 800361a:	f04f 0200 	mov.w	r2, #0
 800361e:	f04f 0300 	mov.w	r3, #0
 8003622:	014b      	lsls	r3, r1, #5
 8003624:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003628:	0142      	lsls	r2, r0, #5
 800362a:	4610      	mov	r0, r2
 800362c:	4619      	mov	r1, r3
 800362e:	ebb0 000a 	subs.w	r0, r0, sl
 8003632:	eb61 010b 	sbc.w	r1, r1, fp
 8003636:	f04f 0200 	mov.w	r2, #0
 800363a:	f04f 0300 	mov.w	r3, #0
 800363e:	018b      	lsls	r3, r1, #6
 8003640:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003644:	0182      	lsls	r2, r0, #6
 8003646:	1a12      	subs	r2, r2, r0
 8003648:	eb63 0301 	sbc.w	r3, r3, r1
 800364c:	f04f 0000 	mov.w	r0, #0
 8003650:	f04f 0100 	mov.w	r1, #0
 8003654:	00d9      	lsls	r1, r3, #3
 8003656:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800365a:	00d0      	lsls	r0, r2, #3
 800365c:	4602      	mov	r2, r0
 800365e:	460b      	mov	r3, r1
 8003660:	eb12 020a 	adds.w	r2, r2, sl
 8003664:	eb43 030b 	adc.w	r3, r3, fp
 8003668:	f04f 0000 	mov.w	r0, #0
 800366c:	f04f 0100 	mov.w	r1, #0
 8003670:	0299      	lsls	r1, r3, #10
 8003672:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003676:	0290      	lsls	r0, r2, #10
 8003678:	4602      	mov	r2, r0
 800367a:	460b      	mov	r3, r1
 800367c:	4610      	mov	r0, r2
 800367e:	4619      	mov	r1, r3
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	461a      	mov	r2, r3
 8003684:	f04f 0300 	mov.w	r3, #0
 8003688:	f7fc fdbc 	bl	8000204 <__aeabi_uldivmod>
 800368c:	4602      	mov	r2, r0
 800368e:	460b      	mov	r3, r1
 8003690:	4613      	mov	r3, r2
 8003692:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003694:	4b63      	ldr	r3, [pc, #396]	; (8003824 <HAL_RCC_GetSysClockFreq+0x358>)
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	0c1b      	lsrs	r3, r3, #16
 800369a:	f003 0303 	and.w	r3, r3, #3
 800369e:	3301      	adds	r3, #1
 80036a0:	005b      	lsls	r3, r3, #1
 80036a2:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 80036a4:	69fa      	ldr	r2, [r7, #28]
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80036ac:	61bb      	str	r3, [r7, #24]
      break;
 80036ae:	e0b2      	b.n	8003816 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80036b0:	4b5c      	ldr	r3, [pc, #368]	; (8003824 <HAL_RCC_GetSysClockFreq+0x358>)
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80036b8:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80036ba:	4b5a      	ldr	r3, [pc, #360]	; (8003824 <HAL_RCC_GetSysClockFreq+0x358>)
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d04d      	beq.n	8003762 <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036c6:	4b57      	ldr	r3, [pc, #348]	; (8003824 <HAL_RCC_GetSysClockFreq+0x358>)
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	099b      	lsrs	r3, r3, #6
 80036cc:	461a      	mov	r2, r3
 80036ce:	f04f 0300 	mov.w	r3, #0
 80036d2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80036d6:	f04f 0100 	mov.w	r1, #0
 80036da:	ea02 0800 	and.w	r8, r2, r0
 80036de:	ea03 0901 	and.w	r9, r3, r1
 80036e2:	4640      	mov	r0, r8
 80036e4:	4649      	mov	r1, r9
 80036e6:	f04f 0200 	mov.w	r2, #0
 80036ea:	f04f 0300 	mov.w	r3, #0
 80036ee:	014b      	lsls	r3, r1, #5
 80036f0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80036f4:	0142      	lsls	r2, r0, #5
 80036f6:	4610      	mov	r0, r2
 80036f8:	4619      	mov	r1, r3
 80036fa:	ebb0 0008 	subs.w	r0, r0, r8
 80036fe:	eb61 0109 	sbc.w	r1, r1, r9
 8003702:	f04f 0200 	mov.w	r2, #0
 8003706:	f04f 0300 	mov.w	r3, #0
 800370a:	018b      	lsls	r3, r1, #6
 800370c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003710:	0182      	lsls	r2, r0, #6
 8003712:	1a12      	subs	r2, r2, r0
 8003714:	eb63 0301 	sbc.w	r3, r3, r1
 8003718:	f04f 0000 	mov.w	r0, #0
 800371c:	f04f 0100 	mov.w	r1, #0
 8003720:	00d9      	lsls	r1, r3, #3
 8003722:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003726:	00d0      	lsls	r0, r2, #3
 8003728:	4602      	mov	r2, r0
 800372a:	460b      	mov	r3, r1
 800372c:	eb12 0208 	adds.w	r2, r2, r8
 8003730:	eb43 0309 	adc.w	r3, r3, r9
 8003734:	f04f 0000 	mov.w	r0, #0
 8003738:	f04f 0100 	mov.w	r1, #0
 800373c:	0259      	lsls	r1, r3, #9
 800373e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003742:	0250      	lsls	r0, r2, #9
 8003744:	4602      	mov	r2, r0
 8003746:	460b      	mov	r3, r1
 8003748:	4610      	mov	r0, r2
 800374a:	4619      	mov	r1, r3
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	461a      	mov	r2, r3
 8003750:	f04f 0300 	mov.w	r3, #0
 8003754:	f7fc fd56 	bl	8000204 <__aeabi_uldivmod>
 8003758:	4602      	mov	r2, r0
 800375a:	460b      	mov	r3, r1
 800375c:	4613      	mov	r3, r2
 800375e:	61fb      	str	r3, [r7, #28]
 8003760:	e04a      	b.n	80037f8 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003762:	4b30      	ldr	r3, [pc, #192]	; (8003824 <HAL_RCC_GetSysClockFreq+0x358>)
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	099b      	lsrs	r3, r3, #6
 8003768:	461a      	mov	r2, r3
 800376a:	f04f 0300 	mov.w	r3, #0
 800376e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003772:	f04f 0100 	mov.w	r1, #0
 8003776:	ea02 0400 	and.w	r4, r2, r0
 800377a:	ea03 0501 	and.w	r5, r3, r1
 800377e:	4620      	mov	r0, r4
 8003780:	4629      	mov	r1, r5
 8003782:	f04f 0200 	mov.w	r2, #0
 8003786:	f04f 0300 	mov.w	r3, #0
 800378a:	014b      	lsls	r3, r1, #5
 800378c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003790:	0142      	lsls	r2, r0, #5
 8003792:	4610      	mov	r0, r2
 8003794:	4619      	mov	r1, r3
 8003796:	1b00      	subs	r0, r0, r4
 8003798:	eb61 0105 	sbc.w	r1, r1, r5
 800379c:	f04f 0200 	mov.w	r2, #0
 80037a0:	f04f 0300 	mov.w	r3, #0
 80037a4:	018b      	lsls	r3, r1, #6
 80037a6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80037aa:	0182      	lsls	r2, r0, #6
 80037ac:	1a12      	subs	r2, r2, r0
 80037ae:	eb63 0301 	sbc.w	r3, r3, r1
 80037b2:	f04f 0000 	mov.w	r0, #0
 80037b6:	f04f 0100 	mov.w	r1, #0
 80037ba:	00d9      	lsls	r1, r3, #3
 80037bc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80037c0:	00d0      	lsls	r0, r2, #3
 80037c2:	4602      	mov	r2, r0
 80037c4:	460b      	mov	r3, r1
 80037c6:	1912      	adds	r2, r2, r4
 80037c8:	eb45 0303 	adc.w	r3, r5, r3
 80037cc:	f04f 0000 	mov.w	r0, #0
 80037d0:	f04f 0100 	mov.w	r1, #0
 80037d4:	0299      	lsls	r1, r3, #10
 80037d6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80037da:	0290      	lsls	r0, r2, #10
 80037dc:	4602      	mov	r2, r0
 80037de:	460b      	mov	r3, r1
 80037e0:	4610      	mov	r0, r2
 80037e2:	4619      	mov	r1, r3
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	461a      	mov	r2, r3
 80037e8:	f04f 0300 	mov.w	r3, #0
 80037ec:	f7fc fd0a 	bl	8000204 <__aeabi_uldivmod>
 80037f0:	4602      	mov	r2, r0
 80037f2:	460b      	mov	r3, r1
 80037f4:	4613      	mov	r3, r2
 80037f6:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80037f8:	4b0a      	ldr	r3, [pc, #40]	; (8003824 <HAL_RCC_GetSysClockFreq+0x358>)
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	0f1b      	lsrs	r3, r3, #28
 80037fe:	f003 0307 	and.w	r3, r3, #7
 8003802:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8003804:	69fa      	ldr	r2, [r7, #28]
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	fbb2 f3f3 	udiv	r3, r2, r3
 800380c:	61bb      	str	r3, [r7, #24]
      break;
 800380e:	e002      	b.n	8003816 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003810:	4b05      	ldr	r3, [pc, #20]	; (8003828 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003812:	61bb      	str	r3, [r7, #24]
      break;
 8003814:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003816:	69bb      	ldr	r3, [r7, #24]
}
 8003818:	4618      	mov	r0, r3
 800381a:	3720      	adds	r7, #32
 800381c:	46bd      	mov	sp, r7
 800381e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003822:	bf00      	nop
 8003824:	40023800 	.word	0x40023800
 8003828:	00f42400 	.word	0x00f42400
 800382c:	007a1200 	.word	0x007a1200

08003830 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b086      	sub	sp, #24
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d101      	bne.n	8003842 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	e28d      	b.n	8003d5e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f003 0301 	and.w	r3, r3, #1
 800384a:	2b00      	cmp	r3, #0
 800384c:	f000 8083 	beq.w	8003956 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003850:	4b94      	ldr	r3, [pc, #592]	; (8003aa4 <HAL_RCC_OscConfig+0x274>)
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	f003 030c 	and.w	r3, r3, #12
 8003858:	2b04      	cmp	r3, #4
 800385a:	d019      	beq.n	8003890 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800385c:	4b91      	ldr	r3, [pc, #580]	; (8003aa4 <HAL_RCC_OscConfig+0x274>)
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003864:	2b08      	cmp	r3, #8
 8003866:	d106      	bne.n	8003876 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003868:	4b8e      	ldr	r3, [pc, #568]	; (8003aa4 <HAL_RCC_OscConfig+0x274>)
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003870:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003874:	d00c      	beq.n	8003890 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003876:	4b8b      	ldr	r3, [pc, #556]	; (8003aa4 <HAL_RCC_OscConfig+0x274>)
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800387e:	2b0c      	cmp	r3, #12
 8003880:	d112      	bne.n	80038a8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003882:	4b88      	ldr	r3, [pc, #544]	; (8003aa4 <HAL_RCC_OscConfig+0x274>)
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800388a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800388e:	d10b      	bne.n	80038a8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003890:	4b84      	ldr	r3, [pc, #528]	; (8003aa4 <HAL_RCC_OscConfig+0x274>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003898:	2b00      	cmp	r3, #0
 800389a:	d05b      	beq.n	8003954 <HAL_RCC_OscConfig+0x124>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d157      	bne.n	8003954 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80038a4:	2301      	movs	r3, #1
 80038a6:	e25a      	b.n	8003d5e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038b0:	d106      	bne.n	80038c0 <HAL_RCC_OscConfig+0x90>
 80038b2:	4b7c      	ldr	r3, [pc, #496]	; (8003aa4 <HAL_RCC_OscConfig+0x274>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a7b      	ldr	r2, [pc, #492]	; (8003aa4 <HAL_RCC_OscConfig+0x274>)
 80038b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038bc:	6013      	str	r3, [r2, #0]
 80038be:	e01d      	b.n	80038fc <HAL_RCC_OscConfig+0xcc>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80038c8:	d10c      	bne.n	80038e4 <HAL_RCC_OscConfig+0xb4>
 80038ca:	4b76      	ldr	r3, [pc, #472]	; (8003aa4 <HAL_RCC_OscConfig+0x274>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a75      	ldr	r2, [pc, #468]	; (8003aa4 <HAL_RCC_OscConfig+0x274>)
 80038d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80038d4:	6013      	str	r3, [r2, #0]
 80038d6:	4b73      	ldr	r3, [pc, #460]	; (8003aa4 <HAL_RCC_OscConfig+0x274>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a72      	ldr	r2, [pc, #456]	; (8003aa4 <HAL_RCC_OscConfig+0x274>)
 80038dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038e0:	6013      	str	r3, [r2, #0]
 80038e2:	e00b      	b.n	80038fc <HAL_RCC_OscConfig+0xcc>
 80038e4:	4b6f      	ldr	r3, [pc, #444]	; (8003aa4 <HAL_RCC_OscConfig+0x274>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a6e      	ldr	r2, [pc, #440]	; (8003aa4 <HAL_RCC_OscConfig+0x274>)
 80038ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038ee:	6013      	str	r3, [r2, #0]
 80038f0:	4b6c      	ldr	r3, [pc, #432]	; (8003aa4 <HAL_RCC_OscConfig+0x274>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a6b      	ldr	r2, [pc, #428]	; (8003aa4 <HAL_RCC_OscConfig+0x274>)
 80038f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d013      	beq.n	800392c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003904:	f7fd fe6a 	bl	80015dc <HAL_GetTick>
 8003908:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800390a:	e008      	b.n	800391e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800390c:	f7fd fe66 	bl	80015dc <HAL_GetTick>
 8003910:	4602      	mov	r2, r0
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	1ad3      	subs	r3, r2, r3
 8003916:	2b64      	cmp	r3, #100	; 0x64
 8003918:	d901      	bls.n	800391e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800391a:	2303      	movs	r3, #3
 800391c:	e21f      	b.n	8003d5e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800391e:	4b61      	ldr	r3, [pc, #388]	; (8003aa4 <HAL_RCC_OscConfig+0x274>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003926:	2b00      	cmp	r3, #0
 8003928:	d0f0      	beq.n	800390c <HAL_RCC_OscConfig+0xdc>
 800392a:	e014      	b.n	8003956 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800392c:	f7fd fe56 	bl	80015dc <HAL_GetTick>
 8003930:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003932:	e008      	b.n	8003946 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003934:	f7fd fe52 	bl	80015dc <HAL_GetTick>
 8003938:	4602      	mov	r2, r0
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	1ad3      	subs	r3, r2, r3
 800393e:	2b64      	cmp	r3, #100	; 0x64
 8003940:	d901      	bls.n	8003946 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003942:	2303      	movs	r3, #3
 8003944:	e20b      	b.n	8003d5e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003946:	4b57      	ldr	r3, [pc, #348]	; (8003aa4 <HAL_RCC_OscConfig+0x274>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800394e:	2b00      	cmp	r3, #0
 8003950:	d1f0      	bne.n	8003934 <HAL_RCC_OscConfig+0x104>
 8003952:	e000      	b.n	8003956 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003954:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f003 0302 	and.w	r3, r3, #2
 800395e:	2b00      	cmp	r3, #0
 8003960:	d06f      	beq.n	8003a42 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003962:	4b50      	ldr	r3, [pc, #320]	; (8003aa4 <HAL_RCC_OscConfig+0x274>)
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	f003 030c 	and.w	r3, r3, #12
 800396a:	2b00      	cmp	r3, #0
 800396c:	d017      	beq.n	800399e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800396e:	4b4d      	ldr	r3, [pc, #308]	; (8003aa4 <HAL_RCC_OscConfig+0x274>)
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003976:	2b08      	cmp	r3, #8
 8003978:	d105      	bne.n	8003986 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800397a:	4b4a      	ldr	r3, [pc, #296]	; (8003aa4 <HAL_RCC_OscConfig+0x274>)
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003982:	2b00      	cmp	r3, #0
 8003984:	d00b      	beq.n	800399e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003986:	4b47      	ldr	r3, [pc, #284]	; (8003aa4 <HAL_RCC_OscConfig+0x274>)
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800398e:	2b0c      	cmp	r3, #12
 8003990:	d11c      	bne.n	80039cc <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003992:	4b44      	ldr	r3, [pc, #272]	; (8003aa4 <HAL_RCC_OscConfig+0x274>)
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800399a:	2b00      	cmp	r3, #0
 800399c:	d116      	bne.n	80039cc <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800399e:	4b41      	ldr	r3, [pc, #260]	; (8003aa4 <HAL_RCC_OscConfig+0x274>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 0302 	and.w	r3, r3, #2
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d005      	beq.n	80039b6 <HAL_RCC_OscConfig+0x186>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	68db      	ldr	r3, [r3, #12]
 80039ae:	2b01      	cmp	r3, #1
 80039b0:	d001      	beq.n	80039b6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	e1d3      	b.n	8003d5e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039b6:	4b3b      	ldr	r3, [pc, #236]	; (8003aa4 <HAL_RCC_OscConfig+0x274>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	691b      	ldr	r3, [r3, #16]
 80039c2:	00db      	lsls	r3, r3, #3
 80039c4:	4937      	ldr	r1, [pc, #220]	; (8003aa4 <HAL_RCC_OscConfig+0x274>)
 80039c6:	4313      	orrs	r3, r2
 80039c8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039ca:	e03a      	b.n	8003a42 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	68db      	ldr	r3, [r3, #12]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d020      	beq.n	8003a16 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039d4:	4b34      	ldr	r3, [pc, #208]	; (8003aa8 <HAL_RCC_OscConfig+0x278>)
 80039d6:	2201      	movs	r2, #1
 80039d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039da:	f7fd fdff 	bl	80015dc <HAL_GetTick>
 80039de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039e0:	e008      	b.n	80039f4 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80039e2:	f7fd fdfb 	bl	80015dc <HAL_GetTick>
 80039e6:	4602      	mov	r2, r0
 80039e8:	693b      	ldr	r3, [r7, #16]
 80039ea:	1ad3      	subs	r3, r2, r3
 80039ec:	2b02      	cmp	r3, #2
 80039ee:	d901      	bls.n	80039f4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80039f0:	2303      	movs	r3, #3
 80039f2:	e1b4      	b.n	8003d5e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039f4:	4b2b      	ldr	r3, [pc, #172]	; (8003aa4 <HAL_RCC_OscConfig+0x274>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f003 0302 	and.w	r3, r3, #2
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d0f0      	beq.n	80039e2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a00:	4b28      	ldr	r3, [pc, #160]	; (8003aa4 <HAL_RCC_OscConfig+0x274>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	691b      	ldr	r3, [r3, #16]
 8003a0c:	00db      	lsls	r3, r3, #3
 8003a0e:	4925      	ldr	r1, [pc, #148]	; (8003aa4 <HAL_RCC_OscConfig+0x274>)
 8003a10:	4313      	orrs	r3, r2
 8003a12:	600b      	str	r3, [r1, #0]
 8003a14:	e015      	b.n	8003a42 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a16:	4b24      	ldr	r3, [pc, #144]	; (8003aa8 <HAL_RCC_OscConfig+0x278>)
 8003a18:	2200      	movs	r2, #0
 8003a1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a1c:	f7fd fdde 	bl	80015dc <HAL_GetTick>
 8003a20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a22:	e008      	b.n	8003a36 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a24:	f7fd fdda 	bl	80015dc <HAL_GetTick>
 8003a28:	4602      	mov	r2, r0
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	1ad3      	subs	r3, r2, r3
 8003a2e:	2b02      	cmp	r3, #2
 8003a30:	d901      	bls.n	8003a36 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003a32:	2303      	movs	r3, #3
 8003a34:	e193      	b.n	8003d5e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a36:	4b1b      	ldr	r3, [pc, #108]	; (8003aa4 <HAL_RCC_OscConfig+0x274>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f003 0302 	and.w	r3, r3, #2
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d1f0      	bne.n	8003a24 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f003 0308 	and.w	r3, r3, #8
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d036      	beq.n	8003abc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	695b      	ldr	r3, [r3, #20]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d016      	beq.n	8003a84 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a56:	4b15      	ldr	r3, [pc, #84]	; (8003aac <HAL_RCC_OscConfig+0x27c>)
 8003a58:	2201      	movs	r2, #1
 8003a5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a5c:	f7fd fdbe 	bl	80015dc <HAL_GetTick>
 8003a60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a62:	e008      	b.n	8003a76 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a64:	f7fd fdba 	bl	80015dc <HAL_GetTick>
 8003a68:	4602      	mov	r2, r0
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	1ad3      	subs	r3, r2, r3
 8003a6e:	2b02      	cmp	r3, #2
 8003a70:	d901      	bls.n	8003a76 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003a72:	2303      	movs	r3, #3
 8003a74:	e173      	b.n	8003d5e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a76:	4b0b      	ldr	r3, [pc, #44]	; (8003aa4 <HAL_RCC_OscConfig+0x274>)
 8003a78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a7a:	f003 0302 	and.w	r3, r3, #2
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d0f0      	beq.n	8003a64 <HAL_RCC_OscConfig+0x234>
 8003a82:	e01b      	b.n	8003abc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a84:	4b09      	ldr	r3, [pc, #36]	; (8003aac <HAL_RCC_OscConfig+0x27c>)
 8003a86:	2200      	movs	r2, #0
 8003a88:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a8a:	f7fd fda7 	bl	80015dc <HAL_GetTick>
 8003a8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a90:	e00e      	b.n	8003ab0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a92:	f7fd fda3 	bl	80015dc <HAL_GetTick>
 8003a96:	4602      	mov	r2, r0
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	1ad3      	subs	r3, r2, r3
 8003a9c:	2b02      	cmp	r3, #2
 8003a9e:	d907      	bls.n	8003ab0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003aa0:	2303      	movs	r3, #3
 8003aa2:	e15c      	b.n	8003d5e <HAL_RCC_OscConfig+0x52e>
 8003aa4:	40023800 	.word	0x40023800
 8003aa8:	42470000 	.word	0x42470000
 8003aac:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ab0:	4b8a      	ldr	r3, [pc, #552]	; (8003cdc <HAL_RCC_OscConfig+0x4ac>)
 8003ab2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ab4:	f003 0302 	and.w	r3, r3, #2
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d1ea      	bne.n	8003a92 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f003 0304 	and.w	r3, r3, #4
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	f000 8097 	beq.w	8003bf8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003aca:	2300      	movs	r3, #0
 8003acc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ace:	4b83      	ldr	r3, [pc, #524]	; (8003cdc <HAL_RCC_OscConfig+0x4ac>)
 8003ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d10f      	bne.n	8003afa <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ada:	2300      	movs	r3, #0
 8003adc:	60bb      	str	r3, [r7, #8]
 8003ade:	4b7f      	ldr	r3, [pc, #508]	; (8003cdc <HAL_RCC_OscConfig+0x4ac>)
 8003ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae2:	4a7e      	ldr	r2, [pc, #504]	; (8003cdc <HAL_RCC_OscConfig+0x4ac>)
 8003ae4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ae8:	6413      	str	r3, [r2, #64]	; 0x40
 8003aea:	4b7c      	ldr	r3, [pc, #496]	; (8003cdc <HAL_RCC_OscConfig+0x4ac>)
 8003aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003af2:	60bb      	str	r3, [r7, #8]
 8003af4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003af6:	2301      	movs	r3, #1
 8003af8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003afa:	4b79      	ldr	r3, [pc, #484]	; (8003ce0 <HAL_RCC_OscConfig+0x4b0>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d118      	bne.n	8003b38 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b06:	4b76      	ldr	r3, [pc, #472]	; (8003ce0 <HAL_RCC_OscConfig+0x4b0>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a75      	ldr	r2, [pc, #468]	; (8003ce0 <HAL_RCC_OscConfig+0x4b0>)
 8003b0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b12:	f7fd fd63 	bl	80015dc <HAL_GetTick>
 8003b16:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b18:	e008      	b.n	8003b2c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b1a:	f7fd fd5f 	bl	80015dc <HAL_GetTick>
 8003b1e:	4602      	mov	r2, r0
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	1ad3      	subs	r3, r2, r3
 8003b24:	2b02      	cmp	r3, #2
 8003b26:	d901      	bls.n	8003b2c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003b28:	2303      	movs	r3, #3
 8003b2a:	e118      	b.n	8003d5e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b2c:	4b6c      	ldr	r3, [pc, #432]	; (8003ce0 <HAL_RCC_OscConfig+0x4b0>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d0f0      	beq.n	8003b1a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	689b      	ldr	r3, [r3, #8]
 8003b3c:	2b01      	cmp	r3, #1
 8003b3e:	d106      	bne.n	8003b4e <HAL_RCC_OscConfig+0x31e>
 8003b40:	4b66      	ldr	r3, [pc, #408]	; (8003cdc <HAL_RCC_OscConfig+0x4ac>)
 8003b42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b44:	4a65      	ldr	r2, [pc, #404]	; (8003cdc <HAL_RCC_OscConfig+0x4ac>)
 8003b46:	f043 0301 	orr.w	r3, r3, #1
 8003b4a:	6713      	str	r3, [r2, #112]	; 0x70
 8003b4c:	e01c      	b.n	8003b88 <HAL_RCC_OscConfig+0x358>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	689b      	ldr	r3, [r3, #8]
 8003b52:	2b05      	cmp	r3, #5
 8003b54:	d10c      	bne.n	8003b70 <HAL_RCC_OscConfig+0x340>
 8003b56:	4b61      	ldr	r3, [pc, #388]	; (8003cdc <HAL_RCC_OscConfig+0x4ac>)
 8003b58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b5a:	4a60      	ldr	r2, [pc, #384]	; (8003cdc <HAL_RCC_OscConfig+0x4ac>)
 8003b5c:	f043 0304 	orr.w	r3, r3, #4
 8003b60:	6713      	str	r3, [r2, #112]	; 0x70
 8003b62:	4b5e      	ldr	r3, [pc, #376]	; (8003cdc <HAL_RCC_OscConfig+0x4ac>)
 8003b64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b66:	4a5d      	ldr	r2, [pc, #372]	; (8003cdc <HAL_RCC_OscConfig+0x4ac>)
 8003b68:	f043 0301 	orr.w	r3, r3, #1
 8003b6c:	6713      	str	r3, [r2, #112]	; 0x70
 8003b6e:	e00b      	b.n	8003b88 <HAL_RCC_OscConfig+0x358>
 8003b70:	4b5a      	ldr	r3, [pc, #360]	; (8003cdc <HAL_RCC_OscConfig+0x4ac>)
 8003b72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b74:	4a59      	ldr	r2, [pc, #356]	; (8003cdc <HAL_RCC_OscConfig+0x4ac>)
 8003b76:	f023 0301 	bic.w	r3, r3, #1
 8003b7a:	6713      	str	r3, [r2, #112]	; 0x70
 8003b7c:	4b57      	ldr	r3, [pc, #348]	; (8003cdc <HAL_RCC_OscConfig+0x4ac>)
 8003b7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b80:	4a56      	ldr	r2, [pc, #344]	; (8003cdc <HAL_RCC_OscConfig+0x4ac>)
 8003b82:	f023 0304 	bic.w	r3, r3, #4
 8003b86:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	689b      	ldr	r3, [r3, #8]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d015      	beq.n	8003bbc <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b90:	f7fd fd24 	bl	80015dc <HAL_GetTick>
 8003b94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b96:	e00a      	b.n	8003bae <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b98:	f7fd fd20 	bl	80015dc <HAL_GetTick>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	1ad3      	subs	r3, r2, r3
 8003ba2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d901      	bls.n	8003bae <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003baa:	2303      	movs	r3, #3
 8003bac:	e0d7      	b.n	8003d5e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bae:	4b4b      	ldr	r3, [pc, #300]	; (8003cdc <HAL_RCC_OscConfig+0x4ac>)
 8003bb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bb2:	f003 0302 	and.w	r3, r3, #2
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d0ee      	beq.n	8003b98 <HAL_RCC_OscConfig+0x368>
 8003bba:	e014      	b.n	8003be6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bbc:	f7fd fd0e 	bl	80015dc <HAL_GetTick>
 8003bc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bc2:	e00a      	b.n	8003bda <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003bc4:	f7fd fd0a 	bl	80015dc <HAL_GetTick>
 8003bc8:	4602      	mov	r2, r0
 8003bca:	693b      	ldr	r3, [r7, #16]
 8003bcc:	1ad3      	subs	r3, r2, r3
 8003bce:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d901      	bls.n	8003bda <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003bd6:	2303      	movs	r3, #3
 8003bd8:	e0c1      	b.n	8003d5e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bda:	4b40      	ldr	r3, [pc, #256]	; (8003cdc <HAL_RCC_OscConfig+0x4ac>)
 8003bdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bde:	f003 0302 	and.w	r3, r3, #2
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d1ee      	bne.n	8003bc4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003be6:	7dfb      	ldrb	r3, [r7, #23]
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	d105      	bne.n	8003bf8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bec:	4b3b      	ldr	r3, [pc, #236]	; (8003cdc <HAL_RCC_OscConfig+0x4ac>)
 8003bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf0:	4a3a      	ldr	r2, [pc, #232]	; (8003cdc <HAL_RCC_OscConfig+0x4ac>)
 8003bf2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bf6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	699b      	ldr	r3, [r3, #24]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	f000 80ad 	beq.w	8003d5c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003c02:	4b36      	ldr	r3, [pc, #216]	; (8003cdc <HAL_RCC_OscConfig+0x4ac>)
 8003c04:	689b      	ldr	r3, [r3, #8]
 8003c06:	f003 030c 	and.w	r3, r3, #12
 8003c0a:	2b08      	cmp	r3, #8
 8003c0c:	d060      	beq.n	8003cd0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	699b      	ldr	r3, [r3, #24]
 8003c12:	2b02      	cmp	r3, #2
 8003c14:	d145      	bne.n	8003ca2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c16:	4b33      	ldr	r3, [pc, #204]	; (8003ce4 <HAL_RCC_OscConfig+0x4b4>)
 8003c18:	2200      	movs	r2, #0
 8003c1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c1c:	f7fd fcde 	bl	80015dc <HAL_GetTick>
 8003c20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c22:	e008      	b.n	8003c36 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c24:	f7fd fcda 	bl	80015dc <HAL_GetTick>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	693b      	ldr	r3, [r7, #16]
 8003c2c:	1ad3      	subs	r3, r2, r3
 8003c2e:	2b02      	cmp	r3, #2
 8003c30:	d901      	bls.n	8003c36 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003c32:	2303      	movs	r3, #3
 8003c34:	e093      	b.n	8003d5e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c36:	4b29      	ldr	r3, [pc, #164]	; (8003cdc <HAL_RCC_OscConfig+0x4ac>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d1f0      	bne.n	8003c24 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	69da      	ldr	r2, [r3, #28]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6a1b      	ldr	r3, [r3, #32]
 8003c4a:	431a      	orrs	r2, r3
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c50:	019b      	lsls	r3, r3, #6
 8003c52:	431a      	orrs	r2, r3
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c58:	085b      	lsrs	r3, r3, #1
 8003c5a:	3b01      	subs	r3, #1
 8003c5c:	041b      	lsls	r3, r3, #16
 8003c5e:	431a      	orrs	r2, r3
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c64:	061b      	lsls	r3, r3, #24
 8003c66:	431a      	orrs	r2, r3
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c6c:	071b      	lsls	r3, r3, #28
 8003c6e:	491b      	ldr	r1, [pc, #108]	; (8003cdc <HAL_RCC_OscConfig+0x4ac>)
 8003c70:	4313      	orrs	r3, r2
 8003c72:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c74:	4b1b      	ldr	r3, [pc, #108]	; (8003ce4 <HAL_RCC_OscConfig+0x4b4>)
 8003c76:	2201      	movs	r2, #1
 8003c78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c7a:	f7fd fcaf 	bl	80015dc <HAL_GetTick>
 8003c7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c80:	e008      	b.n	8003c94 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c82:	f7fd fcab 	bl	80015dc <HAL_GetTick>
 8003c86:	4602      	mov	r2, r0
 8003c88:	693b      	ldr	r3, [r7, #16]
 8003c8a:	1ad3      	subs	r3, r2, r3
 8003c8c:	2b02      	cmp	r3, #2
 8003c8e:	d901      	bls.n	8003c94 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003c90:	2303      	movs	r3, #3
 8003c92:	e064      	b.n	8003d5e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c94:	4b11      	ldr	r3, [pc, #68]	; (8003cdc <HAL_RCC_OscConfig+0x4ac>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d0f0      	beq.n	8003c82 <HAL_RCC_OscConfig+0x452>
 8003ca0:	e05c      	b.n	8003d5c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ca2:	4b10      	ldr	r3, [pc, #64]	; (8003ce4 <HAL_RCC_OscConfig+0x4b4>)
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ca8:	f7fd fc98 	bl	80015dc <HAL_GetTick>
 8003cac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cae:	e008      	b.n	8003cc2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cb0:	f7fd fc94 	bl	80015dc <HAL_GetTick>
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	1ad3      	subs	r3, r2, r3
 8003cba:	2b02      	cmp	r3, #2
 8003cbc:	d901      	bls.n	8003cc2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003cbe:	2303      	movs	r3, #3
 8003cc0:	e04d      	b.n	8003d5e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cc2:	4b06      	ldr	r3, [pc, #24]	; (8003cdc <HAL_RCC_OscConfig+0x4ac>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d1f0      	bne.n	8003cb0 <HAL_RCC_OscConfig+0x480>
 8003cce:	e045      	b.n	8003d5c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	699b      	ldr	r3, [r3, #24]
 8003cd4:	2b01      	cmp	r3, #1
 8003cd6:	d107      	bne.n	8003ce8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	e040      	b.n	8003d5e <HAL_RCC_OscConfig+0x52e>
 8003cdc:	40023800 	.word	0x40023800
 8003ce0:	40007000 	.word	0x40007000
 8003ce4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003ce8:	4b1f      	ldr	r3, [pc, #124]	; (8003d68 <HAL_RCC_OscConfig+0x538>)
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	699b      	ldr	r3, [r3, #24]
 8003cf2:	2b01      	cmp	r3, #1
 8003cf4:	d030      	beq.n	8003d58 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d00:	429a      	cmp	r2, r3
 8003d02:	d129      	bne.n	8003d58 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d0e:	429a      	cmp	r2, r3
 8003d10:	d122      	bne.n	8003d58 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d12:	68fa      	ldr	r2, [r7, #12]
 8003d14:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003d18:	4013      	ands	r3, r2
 8003d1a:	687a      	ldr	r2, [r7, #4]
 8003d1c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003d1e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d119      	bne.n	8003d58 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d2e:	085b      	lsrs	r3, r3, #1
 8003d30:	3b01      	subs	r3, #1
 8003d32:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d34:	429a      	cmp	r2, r3
 8003d36:	d10f      	bne.n	8003d58 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d42:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d44:	429a      	cmp	r2, r3
 8003d46:	d107      	bne.n	8003d58 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d52:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d54:	429a      	cmp	r2, r3
 8003d56:	d001      	beq.n	8003d5c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	e000      	b.n	8003d5e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003d5c:	2300      	movs	r3, #0
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	3718      	adds	r7, #24
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}
 8003d66:	bf00      	nop
 8003d68:	40023800 	.word	0x40023800

08003d6c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b082      	sub	sp, #8
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d101      	bne.n	8003d7e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	e07b      	b.n	8003e76 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d108      	bne.n	8003d98 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d8e:	d009      	beq.n	8003da4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2200      	movs	r2, #0
 8003d94:	61da      	str	r2, [r3, #28]
 8003d96:	e005      	b.n	8003da4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2200      	movs	r2, #0
 8003da2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2200      	movs	r2, #0
 8003da8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003db0:	b2db      	uxtb	r3, r3
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d106      	bne.n	8003dc4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2200      	movs	r2, #0
 8003dba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003dbe:	6878      	ldr	r0, [r7, #4]
 8003dc0:	f7fd f9d8 	bl	8001174 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2202      	movs	r2, #2
 8003dc8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	681a      	ldr	r2, [r3, #0]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003dda:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003dec:	431a      	orrs	r2, r3
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	68db      	ldr	r3, [r3, #12]
 8003df2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003df6:	431a      	orrs	r2, r3
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	691b      	ldr	r3, [r3, #16]
 8003dfc:	f003 0302 	and.w	r3, r3, #2
 8003e00:	431a      	orrs	r2, r3
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	695b      	ldr	r3, [r3, #20]
 8003e06:	f003 0301 	and.w	r3, r3, #1
 8003e0a:	431a      	orrs	r2, r3
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	699b      	ldr	r3, [r3, #24]
 8003e10:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e14:	431a      	orrs	r2, r3
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	69db      	ldr	r3, [r3, #28]
 8003e1a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003e1e:	431a      	orrs	r2, r3
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6a1b      	ldr	r3, [r3, #32]
 8003e24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e28:	ea42 0103 	orr.w	r1, r2, r3
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e30:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	430a      	orrs	r2, r1
 8003e3a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	699b      	ldr	r3, [r3, #24]
 8003e40:	0c1b      	lsrs	r3, r3, #16
 8003e42:	f003 0104 	and.w	r1, r3, #4
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e4a:	f003 0210 	and.w	r2, r3, #16
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	430a      	orrs	r2, r1
 8003e54:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	69da      	ldr	r2, [r3, #28]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e64:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2201      	movs	r2, #1
 8003e70:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003e74:	2300      	movs	r3, #0
}
 8003e76:	4618      	mov	r0, r3
 8003e78:	3708      	adds	r7, #8
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}

08003e7e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e7e:	b580      	push	{r7, lr}
 8003e80:	b082      	sub	sp, #8
 8003e82:	af00      	add	r7, sp, #0
 8003e84:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d101      	bne.n	8003e90 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	e041      	b.n	8003f14 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e96:	b2db      	uxtb	r3, r3
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d106      	bne.n	8003eaa <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003ea4:	6878      	ldr	r0, [r7, #4]
 8003ea6:	f7fd f9dd 	bl	8001264 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2202      	movs	r2, #2
 8003eae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681a      	ldr	r2, [r3, #0]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	3304      	adds	r3, #4
 8003eba:	4619      	mov	r1, r3
 8003ebc:	4610      	mov	r0, r2
 8003ebe:	f000 facf 	bl	8004460 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2201      	movs	r2, #1
 8003ec6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2201      	movs	r2, #1
 8003ece:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2201      	movs	r2, #1
 8003ed6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2201      	movs	r2, #1
 8003ede:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2201      	movs	r2, #1
 8003ee6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2201      	movs	r2, #1
 8003eee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2201      	movs	r2, #1
 8003ef6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2201      	movs	r2, #1
 8003efe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2201      	movs	r2, #1
 8003f06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2201      	movs	r2, #1
 8003f0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f12:	2300      	movs	r3, #0
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	3708      	adds	r7, #8
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd80      	pop	{r7, pc}

08003f1c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b082      	sub	sp, #8
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d101      	bne.n	8003f2e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	e041      	b.n	8003fb2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f34:	b2db      	uxtb	r3, r3
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d106      	bne.n	8003f48 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003f42:	6878      	ldr	r0, [r7, #4]
 8003f44:	f7fd f9b0 	bl	80012a8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2202      	movs	r2, #2
 8003f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681a      	ldr	r2, [r3, #0]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	3304      	adds	r3, #4
 8003f58:	4619      	mov	r1, r3
 8003f5a:	4610      	mov	r0, r2
 8003f5c:	f000 fa80 	bl	8004460 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2201      	movs	r2, #1
 8003f64:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2201      	movs	r2, #1
 8003f74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2201      	movs	r2, #1
 8003f84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2201      	movs	r2, #1
 8003f94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2201      	movs	r2, #1
 8003fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003fb0:	2300      	movs	r3, #0
}
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	3708      	adds	r7, #8
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}
	...

08003fbc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b084      	sub	sp, #16
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
 8003fc4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d109      	bne.n	8003fe0 <HAL_TIM_PWM_Start+0x24>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003fd2:	b2db      	uxtb	r3, r3
 8003fd4:	2b01      	cmp	r3, #1
 8003fd6:	bf14      	ite	ne
 8003fd8:	2301      	movne	r3, #1
 8003fda:	2300      	moveq	r3, #0
 8003fdc:	b2db      	uxtb	r3, r3
 8003fde:	e022      	b.n	8004026 <HAL_TIM_PWM_Start+0x6a>
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	2b04      	cmp	r3, #4
 8003fe4:	d109      	bne.n	8003ffa <HAL_TIM_PWM_Start+0x3e>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003fec:	b2db      	uxtb	r3, r3
 8003fee:	2b01      	cmp	r3, #1
 8003ff0:	bf14      	ite	ne
 8003ff2:	2301      	movne	r3, #1
 8003ff4:	2300      	moveq	r3, #0
 8003ff6:	b2db      	uxtb	r3, r3
 8003ff8:	e015      	b.n	8004026 <HAL_TIM_PWM_Start+0x6a>
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	2b08      	cmp	r3, #8
 8003ffe:	d109      	bne.n	8004014 <HAL_TIM_PWM_Start+0x58>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004006:	b2db      	uxtb	r3, r3
 8004008:	2b01      	cmp	r3, #1
 800400a:	bf14      	ite	ne
 800400c:	2301      	movne	r3, #1
 800400e:	2300      	moveq	r3, #0
 8004010:	b2db      	uxtb	r3, r3
 8004012:	e008      	b.n	8004026 <HAL_TIM_PWM_Start+0x6a>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800401a:	b2db      	uxtb	r3, r3
 800401c:	2b01      	cmp	r3, #1
 800401e:	bf14      	ite	ne
 8004020:	2301      	movne	r3, #1
 8004022:	2300      	moveq	r3, #0
 8004024:	b2db      	uxtb	r3, r3
 8004026:	2b00      	cmp	r3, #0
 8004028:	d001      	beq.n	800402e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800402a:	2301      	movs	r3, #1
 800402c:	e07c      	b.n	8004128 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d104      	bne.n	800403e <HAL_TIM_PWM_Start+0x82>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2202      	movs	r2, #2
 8004038:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800403c:	e013      	b.n	8004066 <HAL_TIM_PWM_Start+0xaa>
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	2b04      	cmp	r3, #4
 8004042:	d104      	bne.n	800404e <HAL_TIM_PWM_Start+0x92>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2202      	movs	r2, #2
 8004048:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800404c:	e00b      	b.n	8004066 <HAL_TIM_PWM_Start+0xaa>
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	2b08      	cmp	r3, #8
 8004052:	d104      	bne.n	800405e <HAL_TIM_PWM_Start+0xa2>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2202      	movs	r2, #2
 8004058:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800405c:	e003      	b.n	8004066 <HAL_TIM_PWM_Start+0xaa>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2202      	movs	r2, #2
 8004062:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	2201      	movs	r2, #1
 800406c:	6839      	ldr	r1, [r7, #0]
 800406e:	4618      	mov	r0, r3
 8004070:	f000 fce0 	bl	8004a34 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a2d      	ldr	r2, [pc, #180]	; (8004130 <HAL_TIM_PWM_Start+0x174>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d004      	beq.n	8004088 <HAL_TIM_PWM_Start+0xcc>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a2c      	ldr	r2, [pc, #176]	; (8004134 <HAL_TIM_PWM_Start+0x178>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d101      	bne.n	800408c <HAL_TIM_PWM_Start+0xd0>
 8004088:	2301      	movs	r3, #1
 800408a:	e000      	b.n	800408e <HAL_TIM_PWM_Start+0xd2>
 800408c:	2300      	movs	r3, #0
 800408e:	2b00      	cmp	r3, #0
 8004090:	d007      	beq.n	80040a2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80040a0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a22      	ldr	r2, [pc, #136]	; (8004130 <HAL_TIM_PWM_Start+0x174>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d022      	beq.n	80040f2 <HAL_TIM_PWM_Start+0x136>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040b4:	d01d      	beq.n	80040f2 <HAL_TIM_PWM_Start+0x136>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a1f      	ldr	r2, [pc, #124]	; (8004138 <HAL_TIM_PWM_Start+0x17c>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d018      	beq.n	80040f2 <HAL_TIM_PWM_Start+0x136>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a1d      	ldr	r2, [pc, #116]	; (800413c <HAL_TIM_PWM_Start+0x180>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d013      	beq.n	80040f2 <HAL_TIM_PWM_Start+0x136>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a1c      	ldr	r2, [pc, #112]	; (8004140 <HAL_TIM_PWM_Start+0x184>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d00e      	beq.n	80040f2 <HAL_TIM_PWM_Start+0x136>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a16      	ldr	r2, [pc, #88]	; (8004134 <HAL_TIM_PWM_Start+0x178>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d009      	beq.n	80040f2 <HAL_TIM_PWM_Start+0x136>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a18      	ldr	r2, [pc, #96]	; (8004144 <HAL_TIM_PWM_Start+0x188>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d004      	beq.n	80040f2 <HAL_TIM_PWM_Start+0x136>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a16      	ldr	r2, [pc, #88]	; (8004148 <HAL_TIM_PWM_Start+0x18c>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d111      	bne.n	8004116 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	689b      	ldr	r3, [r3, #8]
 80040f8:	f003 0307 	and.w	r3, r3, #7
 80040fc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2b06      	cmp	r3, #6
 8004102:	d010      	beq.n	8004126 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	681a      	ldr	r2, [r3, #0]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f042 0201 	orr.w	r2, r2, #1
 8004112:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004114:	e007      	b.n	8004126 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	681a      	ldr	r2, [r3, #0]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f042 0201 	orr.w	r2, r2, #1
 8004124:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004126:	2300      	movs	r3, #0
}
 8004128:	4618      	mov	r0, r3
 800412a:	3710      	adds	r7, #16
 800412c:	46bd      	mov	sp, r7
 800412e:	bd80      	pop	{r7, pc}
 8004130:	40010000 	.word	0x40010000
 8004134:	40010400 	.word	0x40010400
 8004138:	40000400 	.word	0x40000400
 800413c:	40000800 	.word	0x40000800
 8004140:	40000c00 	.word	0x40000c00
 8004144:	40014000 	.word	0x40014000
 8004148:	40001800 	.word	0x40001800

0800414c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b086      	sub	sp, #24
 8004150:	af00      	add	r7, sp, #0
 8004152:	60f8      	str	r0, [r7, #12]
 8004154:	60b9      	str	r1, [r7, #8]
 8004156:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004158:	2300      	movs	r3, #0
 800415a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004162:	2b01      	cmp	r3, #1
 8004164:	d101      	bne.n	800416a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004166:	2302      	movs	r3, #2
 8004168:	e0ae      	b.n	80042c8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	2201      	movs	r2, #1
 800416e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2b0c      	cmp	r3, #12
 8004176:	f200 809f 	bhi.w	80042b8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800417a:	a201      	add	r2, pc, #4	; (adr r2, 8004180 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800417c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004180:	080041b5 	.word	0x080041b5
 8004184:	080042b9 	.word	0x080042b9
 8004188:	080042b9 	.word	0x080042b9
 800418c:	080042b9 	.word	0x080042b9
 8004190:	080041f5 	.word	0x080041f5
 8004194:	080042b9 	.word	0x080042b9
 8004198:	080042b9 	.word	0x080042b9
 800419c:	080042b9 	.word	0x080042b9
 80041a0:	08004237 	.word	0x08004237
 80041a4:	080042b9 	.word	0x080042b9
 80041a8:	080042b9 	.word	0x080042b9
 80041ac:	080042b9 	.word	0x080042b9
 80041b0:	08004277 	.word	0x08004277
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	68b9      	ldr	r1, [r7, #8]
 80041ba:	4618      	mov	r0, r3
 80041bc:	f000 f9f0 	bl	80045a0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	699a      	ldr	r2, [r3, #24]
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f042 0208 	orr.w	r2, r2, #8
 80041ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	699a      	ldr	r2, [r3, #24]
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f022 0204 	bic.w	r2, r2, #4
 80041de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	6999      	ldr	r1, [r3, #24]
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	691a      	ldr	r2, [r3, #16]
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	430a      	orrs	r2, r1
 80041f0:	619a      	str	r2, [r3, #24]
      break;
 80041f2:	e064      	b.n	80042be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	68b9      	ldr	r1, [r7, #8]
 80041fa:	4618      	mov	r0, r3
 80041fc:	f000 fa40 	bl	8004680 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	699a      	ldr	r2, [r3, #24]
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800420e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	699a      	ldr	r2, [r3, #24]
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800421e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	6999      	ldr	r1, [r3, #24]
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	691b      	ldr	r3, [r3, #16]
 800422a:	021a      	lsls	r2, r3, #8
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	430a      	orrs	r2, r1
 8004232:	619a      	str	r2, [r3, #24]
      break;
 8004234:	e043      	b.n	80042be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	68b9      	ldr	r1, [r7, #8]
 800423c:	4618      	mov	r0, r3
 800423e:	f000 fa95 	bl	800476c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	69da      	ldr	r2, [r3, #28]
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f042 0208 	orr.w	r2, r2, #8
 8004250:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	69da      	ldr	r2, [r3, #28]
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f022 0204 	bic.w	r2, r2, #4
 8004260:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	69d9      	ldr	r1, [r3, #28]
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	691a      	ldr	r2, [r3, #16]
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	430a      	orrs	r2, r1
 8004272:	61da      	str	r2, [r3, #28]
      break;
 8004274:	e023      	b.n	80042be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	68b9      	ldr	r1, [r7, #8]
 800427c:	4618      	mov	r0, r3
 800427e:	f000 fae9 	bl	8004854 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	69da      	ldr	r2, [r3, #28]
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004290:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	69da      	ldr	r2, [r3, #28]
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	69d9      	ldr	r1, [r3, #28]
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	691b      	ldr	r3, [r3, #16]
 80042ac:	021a      	lsls	r2, r3, #8
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	430a      	orrs	r2, r1
 80042b4:	61da      	str	r2, [r3, #28]
      break;
 80042b6:	e002      	b.n	80042be <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80042b8:	2301      	movs	r3, #1
 80042ba:	75fb      	strb	r3, [r7, #23]
      break;
 80042bc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	2200      	movs	r2, #0
 80042c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80042c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80042c8:	4618      	mov	r0, r3
 80042ca:	3718      	adds	r7, #24
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bd80      	pop	{r7, pc}

080042d0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b084      	sub	sp, #16
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
 80042d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80042da:	2300      	movs	r3, #0
 80042dc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042e4:	2b01      	cmp	r3, #1
 80042e6:	d101      	bne.n	80042ec <HAL_TIM_ConfigClockSource+0x1c>
 80042e8:	2302      	movs	r3, #2
 80042ea:	e0b4      	b.n	8004456 <HAL_TIM_ConfigClockSource+0x186>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2201      	movs	r2, #1
 80042f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2202      	movs	r2, #2
 80042f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800430a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004312:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	68ba      	ldr	r2, [r7, #8]
 800431a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004324:	d03e      	beq.n	80043a4 <HAL_TIM_ConfigClockSource+0xd4>
 8004326:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800432a:	f200 8087 	bhi.w	800443c <HAL_TIM_ConfigClockSource+0x16c>
 800432e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004332:	f000 8086 	beq.w	8004442 <HAL_TIM_ConfigClockSource+0x172>
 8004336:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800433a:	d87f      	bhi.n	800443c <HAL_TIM_ConfigClockSource+0x16c>
 800433c:	2b70      	cmp	r3, #112	; 0x70
 800433e:	d01a      	beq.n	8004376 <HAL_TIM_ConfigClockSource+0xa6>
 8004340:	2b70      	cmp	r3, #112	; 0x70
 8004342:	d87b      	bhi.n	800443c <HAL_TIM_ConfigClockSource+0x16c>
 8004344:	2b60      	cmp	r3, #96	; 0x60
 8004346:	d050      	beq.n	80043ea <HAL_TIM_ConfigClockSource+0x11a>
 8004348:	2b60      	cmp	r3, #96	; 0x60
 800434a:	d877      	bhi.n	800443c <HAL_TIM_ConfigClockSource+0x16c>
 800434c:	2b50      	cmp	r3, #80	; 0x50
 800434e:	d03c      	beq.n	80043ca <HAL_TIM_ConfigClockSource+0xfa>
 8004350:	2b50      	cmp	r3, #80	; 0x50
 8004352:	d873      	bhi.n	800443c <HAL_TIM_ConfigClockSource+0x16c>
 8004354:	2b40      	cmp	r3, #64	; 0x40
 8004356:	d058      	beq.n	800440a <HAL_TIM_ConfigClockSource+0x13a>
 8004358:	2b40      	cmp	r3, #64	; 0x40
 800435a:	d86f      	bhi.n	800443c <HAL_TIM_ConfigClockSource+0x16c>
 800435c:	2b30      	cmp	r3, #48	; 0x30
 800435e:	d064      	beq.n	800442a <HAL_TIM_ConfigClockSource+0x15a>
 8004360:	2b30      	cmp	r3, #48	; 0x30
 8004362:	d86b      	bhi.n	800443c <HAL_TIM_ConfigClockSource+0x16c>
 8004364:	2b20      	cmp	r3, #32
 8004366:	d060      	beq.n	800442a <HAL_TIM_ConfigClockSource+0x15a>
 8004368:	2b20      	cmp	r3, #32
 800436a:	d867      	bhi.n	800443c <HAL_TIM_ConfigClockSource+0x16c>
 800436c:	2b00      	cmp	r3, #0
 800436e:	d05c      	beq.n	800442a <HAL_TIM_ConfigClockSource+0x15a>
 8004370:	2b10      	cmp	r3, #16
 8004372:	d05a      	beq.n	800442a <HAL_TIM_ConfigClockSource+0x15a>
 8004374:	e062      	b.n	800443c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6818      	ldr	r0, [r3, #0]
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	6899      	ldr	r1, [r3, #8]
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	685a      	ldr	r2, [r3, #4]
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	68db      	ldr	r3, [r3, #12]
 8004386:	f000 fb35 	bl	80049f4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	689b      	ldr	r3, [r3, #8]
 8004390:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004398:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	68ba      	ldr	r2, [r7, #8]
 80043a0:	609a      	str	r2, [r3, #8]
      break;
 80043a2:	e04f      	b.n	8004444 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6818      	ldr	r0, [r3, #0]
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	6899      	ldr	r1, [r3, #8]
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	685a      	ldr	r2, [r3, #4]
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	68db      	ldr	r3, [r3, #12]
 80043b4:	f000 fb1e 	bl	80049f4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	689a      	ldr	r2, [r3, #8]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80043c6:	609a      	str	r2, [r3, #8]
      break;
 80043c8:	e03c      	b.n	8004444 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6818      	ldr	r0, [r3, #0]
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	6859      	ldr	r1, [r3, #4]
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	68db      	ldr	r3, [r3, #12]
 80043d6:	461a      	mov	r2, r3
 80043d8:	f000 fa92 	bl	8004900 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	2150      	movs	r1, #80	; 0x50
 80043e2:	4618      	mov	r0, r3
 80043e4:	f000 faeb 	bl	80049be <TIM_ITRx_SetConfig>
      break;
 80043e8:	e02c      	b.n	8004444 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6818      	ldr	r0, [r3, #0]
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	6859      	ldr	r1, [r3, #4]
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	68db      	ldr	r3, [r3, #12]
 80043f6:	461a      	mov	r2, r3
 80043f8:	f000 fab1 	bl	800495e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	2160      	movs	r1, #96	; 0x60
 8004402:	4618      	mov	r0, r3
 8004404:	f000 fadb 	bl	80049be <TIM_ITRx_SetConfig>
      break;
 8004408:	e01c      	b.n	8004444 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6818      	ldr	r0, [r3, #0]
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	6859      	ldr	r1, [r3, #4]
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	68db      	ldr	r3, [r3, #12]
 8004416:	461a      	mov	r2, r3
 8004418:	f000 fa72 	bl	8004900 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	2140      	movs	r1, #64	; 0x40
 8004422:	4618      	mov	r0, r3
 8004424:	f000 facb 	bl	80049be <TIM_ITRx_SetConfig>
      break;
 8004428:	e00c      	b.n	8004444 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681a      	ldr	r2, [r3, #0]
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4619      	mov	r1, r3
 8004434:	4610      	mov	r0, r2
 8004436:	f000 fac2 	bl	80049be <TIM_ITRx_SetConfig>
      break;
 800443a:	e003      	b.n	8004444 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800443c:	2301      	movs	r3, #1
 800443e:	73fb      	strb	r3, [r7, #15]
      break;
 8004440:	e000      	b.n	8004444 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004442:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2201      	movs	r2, #1
 8004448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2200      	movs	r2, #0
 8004450:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004454:	7bfb      	ldrb	r3, [r7, #15]
}
 8004456:	4618      	mov	r0, r3
 8004458:	3710      	adds	r7, #16
 800445a:	46bd      	mov	sp, r7
 800445c:	bd80      	pop	{r7, pc}
	...

08004460 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004460:	b480      	push	{r7}
 8004462:	b085      	sub	sp, #20
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
 8004468:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	4a40      	ldr	r2, [pc, #256]	; (8004574 <TIM_Base_SetConfig+0x114>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d013      	beq.n	80044a0 <TIM_Base_SetConfig+0x40>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800447e:	d00f      	beq.n	80044a0 <TIM_Base_SetConfig+0x40>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	4a3d      	ldr	r2, [pc, #244]	; (8004578 <TIM_Base_SetConfig+0x118>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d00b      	beq.n	80044a0 <TIM_Base_SetConfig+0x40>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	4a3c      	ldr	r2, [pc, #240]	; (800457c <TIM_Base_SetConfig+0x11c>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d007      	beq.n	80044a0 <TIM_Base_SetConfig+0x40>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	4a3b      	ldr	r2, [pc, #236]	; (8004580 <TIM_Base_SetConfig+0x120>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d003      	beq.n	80044a0 <TIM_Base_SetConfig+0x40>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	4a3a      	ldr	r2, [pc, #232]	; (8004584 <TIM_Base_SetConfig+0x124>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d108      	bne.n	80044b2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	68fa      	ldr	r2, [r7, #12]
 80044ae:	4313      	orrs	r3, r2
 80044b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	4a2f      	ldr	r2, [pc, #188]	; (8004574 <TIM_Base_SetConfig+0x114>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d02b      	beq.n	8004512 <TIM_Base_SetConfig+0xb2>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044c0:	d027      	beq.n	8004512 <TIM_Base_SetConfig+0xb2>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	4a2c      	ldr	r2, [pc, #176]	; (8004578 <TIM_Base_SetConfig+0x118>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d023      	beq.n	8004512 <TIM_Base_SetConfig+0xb2>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	4a2b      	ldr	r2, [pc, #172]	; (800457c <TIM_Base_SetConfig+0x11c>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d01f      	beq.n	8004512 <TIM_Base_SetConfig+0xb2>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	4a2a      	ldr	r2, [pc, #168]	; (8004580 <TIM_Base_SetConfig+0x120>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d01b      	beq.n	8004512 <TIM_Base_SetConfig+0xb2>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	4a29      	ldr	r2, [pc, #164]	; (8004584 <TIM_Base_SetConfig+0x124>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d017      	beq.n	8004512 <TIM_Base_SetConfig+0xb2>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	4a28      	ldr	r2, [pc, #160]	; (8004588 <TIM_Base_SetConfig+0x128>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d013      	beq.n	8004512 <TIM_Base_SetConfig+0xb2>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	4a27      	ldr	r2, [pc, #156]	; (800458c <TIM_Base_SetConfig+0x12c>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d00f      	beq.n	8004512 <TIM_Base_SetConfig+0xb2>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	4a26      	ldr	r2, [pc, #152]	; (8004590 <TIM_Base_SetConfig+0x130>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d00b      	beq.n	8004512 <TIM_Base_SetConfig+0xb2>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	4a25      	ldr	r2, [pc, #148]	; (8004594 <TIM_Base_SetConfig+0x134>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d007      	beq.n	8004512 <TIM_Base_SetConfig+0xb2>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	4a24      	ldr	r2, [pc, #144]	; (8004598 <TIM_Base_SetConfig+0x138>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d003      	beq.n	8004512 <TIM_Base_SetConfig+0xb2>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	4a23      	ldr	r2, [pc, #140]	; (800459c <TIM_Base_SetConfig+0x13c>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d108      	bne.n	8004524 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004518:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	68db      	ldr	r3, [r3, #12]
 800451e:	68fa      	ldr	r2, [r7, #12]
 8004520:	4313      	orrs	r3, r2
 8004522:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	695b      	ldr	r3, [r3, #20]
 800452e:	4313      	orrs	r3, r2
 8004530:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	68fa      	ldr	r2, [r7, #12]
 8004536:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	689a      	ldr	r2, [r3, #8]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	681a      	ldr	r2, [r3, #0]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	4a0a      	ldr	r2, [pc, #40]	; (8004574 <TIM_Base_SetConfig+0x114>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d003      	beq.n	8004558 <TIM_Base_SetConfig+0xf8>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	4a0c      	ldr	r2, [pc, #48]	; (8004584 <TIM_Base_SetConfig+0x124>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d103      	bne.n	8004560 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	691a      	ldr	r2, [r3, #16]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2201      	movs	r2, #1
 8004564:	615a      	str	r2, [r3, #20]
}
 8004566:	bf00      	nop
 8004568:	3714      	adds	r7, #20
 800456a:	46bd      	mov	sp, r7
 800456c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004570:	4770      	bx	lr
 8004572:	bf00      	nop
 8004574:	40010000 	.word	0x40010000
 8004578:	40000400 	.word	0x40000400
 800457c:	40000800 	.word	0x40000800
 8004580:	40000c00 	.word	0x40000c00
 8004584:	40010400 	.word	0x40010400
 8004588:	40014000 	.word	0x40014000
 800458c:	40014400 	.word	0x40014400
 8004590:	40014800 	.word	0x40014800
 8004594:	40001800 	.word	0x40001800
 8004598:	40001c00 	.word	0x40001c00
 800459c:	40002000 	.word	0x40002000

080045a0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80045a0:	b480      	push	{r7}
 80045a2:	b087      	sub	sp, #28
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
 80045a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6a1b      	ldr	r3, [r3, #32]
 80045ae:	f023 0201 	bic.w	r2, r3, #1
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6a1b      	ldr	r3, [r3, #32]
 80045ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	699b      	ldr	r3, [r3, #24]
 80045c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	f023 0303 	bic.w	r3, r3, #3
 80045d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	68fa      	ldr	r2, [r7, #12]
 80045de:	4313      	orrs	r3, r2
 80045e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	f023 0302 	bic.w	r3, r3, #2
 80045e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	689b      	ldr	r3, [r3, #8]
 80045ee:	697a      	ldr	r2, [r7, #20]
 80045f0:	4313      	orrs	r3, r2
 80045f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	4a20      	ldr	r2, [pc, #128]	; (8004678 <TIM_OC1_SetConfig+0xd8>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d003      	beq.n	8004604 <TIM_OC1_SetConfig+0x64>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	4a1f      	ldr	r2, [pc, #124]	; (800467c <TIM_OC1_SetConfig+0xdc>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d10c      	bne.n	800461e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	f023 0308 	bic.w	r3, r3, #8
 800460a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	68db      	ldr	r3, [r3, #12]
 8004610:	697a      	ldr	r2, [r7, #20]
 8004612:	4313      	orrs	r3, r2
 8004614:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	f023 0304 	bic.w	r3, r3, #4
 800461c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	4a15      	ldr	r2, [pc, #84]	; (8004678 <TIM_OC1_SetConfig+0xd8>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d003      	beq.n	800462e <TIM_OC1_SetConfig+0x8e>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	4a14      	ldr	r2, [pc, #80]	; (800467c <TIM_OC1_SetConfig+0xdc>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d111      	bne.n	8004652 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004634:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800463c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	695b      	ldr	r3, [r3, #20]
 8004642:	693a      	ldr	r2, [r7, #16]
 8004644:	4313      	orrs	r3, r2
 8004646:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	699b      	ldr	r3, [r3, #24]
 800464c:	693a      	ldr	r2, [r7, #16]
 800464e:	4313      	orrs	r3, r2
 8004650:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	693a      	ldr	r2, [r7, #16]
 8004656:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	68fa      	ldr	r2, [r7, #12]
 800465c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	685a      	ldr	r2, [r3, #4]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	697a      	ldr	r2, [r7, #20]
 800466a:	621a      	str	r2, [r3, #32]
}
 800466c:	bf00      	nop
 800466e:	371c      	adds	r7, #28
 8004670:	46bd      	mov	sp, r7
 8004672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004676:	4770      	bx	lr
 8004678:	40010000 	.word	0x40010000
 800467c:	40010400 	.word	0x40010400

08004680 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004680:	b480      	push	{r7}
 8004682:	b087      	sub	sp, #28
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
 8004688:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6a1b      	ldr	r3, [r3, #32]
 800468e:	f023 0210 	bic.w	r2, r3, #16
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6a1b      	ldr	r3, [r3, #32]
 800469a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	699b      	ldr	r3, [r3, #24]
 80046a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	021b      	lsls	r3, r3, #8
 80046be:	68fa      	ldr	r2, [r7, #12]
 80046c0:	4313      	orrs	r3, r2
 80046c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	f023 0320 	bic.w	r3, r3, #32
 80046ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	689b      	ldr	r3, [r3, #8]
 80046d0:	011b      	lsls	r3, r3, #4
 80046d2:	697a      	ldr	r2, [r7, #20]
 80046d4:	4313      	orrs	r3, r2
 80046d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	4a22      	ldr	r2, [pc, #136]	; (8004764 <TIM_OC2_SetConfig+0xe4>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d003      	beq.n	80046e8 <TIM_OC2_SetConfig+0x68>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	4a21      	ldr	r2, [pc, #132]	; (8004768 <TIM_OC2_SetConfig+0xe8>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d10d      	bne.n	8004704 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80046ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	68db      	ldr	r3, [r3, #12]
 80046f4:	011b      	lsls	r3, r3, #4
 80046f6:	697a      	ldr	r2, [r7, #20]
 80046f8:	4313      	orrs	r3, r2
 80046fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004702:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	4a17      	ldr	r2, [pc, #92]	; (8004764 <TIM_OC2_SetConfig+0xe4>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d003      	beq.n	8004714 <TIM_OC2_SetConfig+0x94>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	4a16      	ldr	r2, [pc, #88]	; (8004768 <TIM_OC2_SetConfig+0xe8>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d113      	bne.n	800473c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004714:	693b      	ldr	r3, [r7, #16]
 8004716:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800471a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800471c:	693b      	ldr	r3, [r7, #16]
 800471e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004722:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	695b      	ldr	r3, [r3, #20]
 8004728:	009b      	lsls	r3, r3, #2
 800472a:	693a      	ldr	r2, [r7, #16]
 800472c:	4313      	orrs	r3, r2
 800472e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	699b      	ldr	r3, [r3, #24]
 8004734:	009b      	lsls	r3, r3, #2
 8004736:	693a      	ldr	r2, [r7, #16]
 8004738:	4313      	orrs	r3, r2
 800473a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	693a      	ldr	r2, [r7, #16]
 8004740:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	68fa      	ldr	r2, [r7, #12]
 8004746:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	685a      	ldr	r2, [r3, #4]
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	697a      	ldr	r2, [r7, #20]
 8004754:	621a      	str	r2, [r3, #32]
}
 8004756:	bf00      	nop
 8004758:	371c      	adds	r7, #28
 800475a:	46bd      	mov	sp, r7
 800475c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004760:	4770      	bx	lr
 8004762:	bf00      	nop
 8004764:	40010000 	.word	0x40010000
 8004768:	40010400 	.word	0x40010400

0800476c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800476c:	b480      	push	{r7}
 800476e:	b087      	sub	sp, #28
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
 8004774:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6a1b      	ldr	r3, [r3, #32]
 800477a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6a1b      	ldr	r3, [r3, #32]
 8004786:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	69db      	ldr	r3, [r3, #28]
 8004792:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800479a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	f023 0303 	bic.w	r3, r3, #3
 80047a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	68fa      	ldr	r2, [r7, #12]
 80047aa:	4313      	orrs	r3, r2
 80047ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80047ae:	697b      	ldr	r3, [r7, #20]
 80047b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80047b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	689b      	ldr	r3, [r3, #8]
 80047ba:	021b      	lsls	r3, r3, #8
 80047bc:	697a      	ldr	r2, [r7, #20]
 80047be:	4313      	orrs	r3, r2
 80047c0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	4a21      	ldr	r2, [pc, #132]	; (800484c <TIM_OC3_SetConfig+0xe0>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d003      	beq.n	80047d2 <TIM_OC3_SetConfig+0x66>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	4a20      	ldr	r2, [pc, #128]	; (8004850 <TIM_OC3_SetConfig+0xe4>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d10d      	bne.n	80047ee <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80047d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	68db      	ldr	r3, [r3, #12]
 80047de:	021b      	lsls	r3, r3, #8
 80047e0:	697a      	ldr	r2, [r7, #20]
 80047e2:	4313      	orrs	r3, r2
 80047e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80047e6:	697b      	ldr	r3, [r7, #20]
 80047e8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80047ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	4a16      	ldr	r2, [pc, #88]	; (800484c <TIM_OC3_SetConfig+0xe0>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d003      	beq.n	80047fe <TIM_OC3_SetConfig+0x92>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	4a15      	ldr	r2, [pc, #84]	; (8004850 <TIM_OC3_SetConfig+0xe4>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d113      	bne.n	8004826 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80047fe:	693b      	ldr	r3, [r7, #16]
 8004800:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004804:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800480c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	695b      	ldr	r3, [r3, #20]
 8004812:	011b      	lsls	r3, r3, #4
 8004814:	693a      	ldr	r2, [r7, #16]
 8004816:	4313      	orrs	r3, r2
 8004818:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	699b      	ldr	r3, [r3, #24]
 800481e:	011b      	lsls	r3, r3, #4
 8004820:	693a      	ldr	r2, [r7, #16]
 8004822:	4313      	orrs	r3, r2
 8004824:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	693a      	ldr	r2, [r7, #16]
 800482a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	68fa      	ldr	r2, [r7, #12]
 8004830:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	685a      	ldr	r2, [r3, #4]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	697a      	ldr	r2, [r7, #20]
 800483e:	621a      	str	r2, [r3, #32]
}
 8004840:	bf00      	nop
 8004842:	371c      	adds	r7, #28
 8004844:	46bd      	mov	sp, r7
 8004846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484a:	4770      	bx	lr
 800484c:	40010000 	.word	0x40010000
 8004850:	40010400 	.word	0x40010400

08004854 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004854:	b480      	push	{r7}
 8004856:	b087      	sub	sp, #28
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
 800485c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6a1b      	ldr	r3, [r3, #32]
 8004862:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6a1b      	ldr	r3, [r3, #32]
 800486e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	69db      	ldr	r3, [r3, #28]
 800487a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004882:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800488a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	021b      	lsls	r3, r3, #8
 8004892:	68fa      	ldr	r2, [r7, #12]
 8004894:	4313      	orrs	r3, r2
 8004896:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004898:	693b      	ldr	r3, [r7, #16]
 800489a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800489e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	689b      	ldr	r3, [r3, #8]
 80048a4:	031b      	lsls	r3, r3, #12
 80048a6:	693a      	ldr	r2, [r7, #16]
 80048a8:	4313      	orrs	r3, r2
 80048aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	4a12      	ldr	r2, [pc, #72]	; (80048f8 <TIM_OC4_SetConfig+0xa4>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d003      	beq.n	80048bc <TIM_OC4_SetConfig+0x68>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	4a11      	ldr	r2, [pc, #68]	; (80048fc <TIM_OC4_SetConfig+0xa8>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d109      	bne.n	80048d0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80048c2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	695b      	ldr	r3, [r3, #20]
 80048c8:	019b      	lsls	r3, r3, #6
 80048ca:	697a      	ldr	r2, [r7, #20]
 80048cc:	4313      	orrs	r3, r2
 80048ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	697a      	ldr	r2, [r7, #20]
 80048d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	68fa      	ldr	r2, [r7, #12]
 80048da:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	685a      	ldr	r2, [r3, #4]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	693a      	ldr	r2, [r7, #16]
 80048e8:	621a      	str	r2, [r3, #32]
}
 80048ea:	bf00      	nop
 80048ec:	371c      	adds	r7, #28
 80048ee:	46bd      	mov	sp, r7
 80048f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f4:	4770      	bx	lr
 80048f6:	bf00      	nop
 80048f8:	40010000 	.word	0x40010000
 80048fc:	40010400 	.word	0x40010400

08004900 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004900:	b480      	push	{r7}
 8004902:	b087      	sub	sp, #28
 8004904:	af00      	add	r7, sp, #0
 8004906:	60f8      	str	r0, [r7, #12]
 8004908:	60b9      	str	r1, [r7, #8]
 800490a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	6a1b      	ldr	r3, [r3, #32]
 8004910:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	6a1b      	ldr	r3, [r3, #32]
 8004916:	f023 0201 	bic.w	r2, r3, #1
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	699b      	ldr	r3, [r3, #24]
 8004922:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800492a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	011b      	lsls	r3, r3, #4
 8004930:	693a      	ldr	r2, [r7, #16]
 8004932:	4313      	orrs	r3, r2
 8004934:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004936:	697b      	ldr	r3, [r7, #20]
 8004938:	f023 030a 	bic.w	r3, r3, #10
 800493c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800493e:	697a      	ldr	r2, [r7, #20]
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	4313      	orrs	r3, r2
 8004944:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	693a      	ldr	r2, [r7, #16]
 800494a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	697a      	ldr	r2, [r7, #20]
 8004950:	621a      	str	r2, [r3, #32]
}
 8004952:	bf00      	nop
 8004954:	371c      	adds	r7, #28
 8004956:	46bd      	mov	sp, r7
 8004958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495c:	4770      	bx	lr

0800495e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800495e:	b480      	push	{r7}
 8004960:	b087      	sub	sp, #28
 8004962:	af00      	add	r7, sp, #0
 8004964:	60f8      	str	r0, [r7, #12]
 8004966:	60b9      	str	r1, [r7, #8]
 8004968:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	6a1b      	ldr	r3, [r3, #32]
 800496e:	f023 0210 	bic.w	r2, r3, #16
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	699b      	ldr	r3, [r3, #24]
 800497a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	6a1b      	ldr	r3, [r3, #32]
 8004980:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004988:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	031b      	lsls	r3, r3, #12
 800498e:	697a      	ldr	r2, [r7, #20]
 8004990:	4313      	orrs	r3, r2
 8004992:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004994:	693b      	ldr	r3, [r7, #16]
 8004996:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800499a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	011b      	lsls	r3, r3, #4
 80049a0:	693a      	ldr	r2, [r7, #16]
 80049a2:	4313      	orrs	r3, r2
 80049a4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	697a      	ldr	r2, [r7, #20]
 80049aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	693a      	ldr	r2, [r7, #16]
 80049b0:	621a      	str	r2, [r3, #32]
}
 80049b2:	bf00      	nop
 80049b4:	371c      	adds	r7, #28
 80049b6:	46bd      	mov	sp, r7
 80049b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049bc:	4770      	bx	lr

080049be <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80049be:	b480      	push	{r7}
 80049c0:	b085      	sub	sp, #20
 80049c2:	af00      	add	r7, sp, #0
 80049c4:	6078      	str	r0, [r7, #4]
 80049c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	689b      	ldr	r3, [r3, #8]
 80049cc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80049d6:	683a      	ldr	r2, [r7, #0]
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	4313      	orrs	r3, r2
 80049dc:	f043 0307 	orr.w	r3, r3, #7
 80049e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	68fa      	ldr	r2, [r7, #12]
 80049e6:	609a      	str	r2, [r3, #8]
}
 80049e8:	bf00      	nop
 80049ea:	3714      	adds	r7, #20
 80049ec:	46bd      	mov	sp, r7
 80049ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f2:	4770      	bx	lr

080049f4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80049f4:	b480      	push	{r7}
 80049f6:	b087      	sub	sp, #28
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	60f8      	str	r0, [r7, #12]
 80049fc:	60b9      	str	r1, [r7, #8]
 80049fe:	607a      	str	r2, [r7, #4]
 8004a00:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	689b      	ldr	r3, [r3, #8]
 8004a06:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a0e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	021a      	lsls	r2, r3, #8
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	431a      	orrs	r2, r3
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	697a      	ldr	r2, [r7, #20]
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	697a      	ldr	r2, [r7, #20]
 8004a26:	609a      	str	r2, [r3, #8]
}
 8004a28:	bf00      	nop
 8004a2a:	371c      	adds	r7, #28
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a32:	4770      	bx	lr

08004a34 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004a34:	b480      	push	{r7}
 8004a36:	b087      	sub	sp, #28
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	60f8      	str	r0, [r7, #12]
 8004a3c:	60b9      	str	r1, [r7, #8]
 8004a3e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	f003 031f 	and.w	r3, r3, #31
 8004a46:	2201      	movs	r2, #1
 8004a48:	fa02 f303 	lsl.w	r3, r2, r3
 8004a4c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	6a1a      	ldr	r2, [r3, #32]
 8004a52:	697b      	ldr	r3, [r7, #20]
 8004a54:	43db      	mvns	r3, r3
 8004a56:	401a      	ands	r2, r3
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	6a1a      	ldr	r2, [r3, #32]
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	f003 031f 	and.w	r3, r3, #31
 8004a66:	6879      	ldr	r1, [r7, #4]
 8004a68:	fa01 f303 	lsl.w	r3, r1, r3
 8004a6c:	431a      	orrs	r2, r3
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	621a      	str	r2, [r3, #32]
}
 8004a72:	bf00      	nop
 8004a74:	371c      	adds	r7, #28
 8004a76:	46bd      	mov	sp, r7
 8004a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7c:	4770      	bx	lr
	...

08004a80 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004a80:	b480      	push	{r7}
 8004a82:	b085      	sub	sp, #20
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
 8004a88:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a90:	2b01      	cmp	r3, #1
 8004a92:	d101      	bne.n	8004a98 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004a94:	2302      	movs	r3, #2
 8004a96:	e05a      	b.n	8004b4e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2202      	movs	r2, #2
 8004aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	689b      	ldr	r3, [r3, #8]
 8004ab6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004abe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	68fa      	ldr	r2, [r7, #12]
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	68fa      	ldr	r2, [r7, #12]
 8004ad0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4a21      	ldr	r2, [pc, #132]	; (8004b5c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d022      	beq.n	8004b22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ae4:	d01d      	beq.n	8004b22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a1d      	ldr	r2, [pc, #116]	; (8004b60 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d018      	beq.n	8004b22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4a1b      	ldr	r2, [pc, #108]	; (8004b64 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d013      	beq.n	8004b22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4a1a      	ldr	r2, [pc, #104]	; (8004b68 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d00e      	beq.n	8004b22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a18      	ldr	r2, [pc, #96]	; (8004b6c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d009      	beq.n	8004b22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4a17      	ldr	r2, [pc, #92]	; (8004b70 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d004      	beq.n	8004b22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a15      	ldr	r2, [pc, #84]	; (8004b74 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d10c      	bne.n	8004b3c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b28:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	68ba      	ldr	r2, [r7, #8]
 8004b30:	4313      	orrs	r3, r2
 8004b32:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	68ba      	ldr	r2, [r7, #8]
 8004b3a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2201      	movs	r2, #1
 8004b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2200      	movs	r2, #0
 8004b48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b4c:	2300      	movs	r3, #0
}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	3714      	adds	r7, #20
 8004b52:	46bd      	mov	sp, r7
 8004b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b58:	4770      	bx	lr
 8004b5a:	bf00      	nop
 8004b5c:	40010000 	.word	0x40010000
 8004b60:	40000400 	.word	0x40000400
 8004b64:	40000800 	.word	0x40000800
 8004b68:	40000c00 	.word	0x40000c00
 8004b6c:	40010400 	.word	0x40010400
 8004b70:	40014000 	.word	0x40014000
 8004b74:	40001800 	.word	0x40001800

08004b78 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b085      	sub	sp, #20
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
 8004b80:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004b82:	2300      	movs	r3, #0
 8004b84:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b8c:	2b01      	cmp	r3, #1
 8004b8e:	d101      	bne.n	8004b94 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004b90:	2302      	movs	r3, #2
 8004b92:	e03d      	b.n	8004c10 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2201      	movs	r2, #1
 8004b98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	68db      	ldr	r3, [r3, #12]
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	689b      	ldr	r3, [r3, #8]
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	691b      	ldr	r3, [r3, #16]
 8004bde:	4313      	orrs	r3, r2
 8004be0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	695b      	ldr	r3, [r3, #20]
 8004bec:	4313      	orrs	r3, r2
 8004bee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	69db      	ldr	r3, [r3, #28]
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	68fa      	ldr	r2, [r7, #12]
 8004c04:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c0e:	2300      	movs	r3, #0
}
 8004c10:	4618      	mov	r0, r3
 8004c12:	3714      	adds	r7, #20
 8004c14:	46bd      	mov	sp, r7
 8004c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1a:	4770      	bx	lr

08004c1c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b082      	sub	sp, #8
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d101      	bne.n	8004c2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	e03f      	b.n	8004cae <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c34:	b2db      	uxtb	r3, r3
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d106      	bne.n	8004c48 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	f7fc fbb6 	bl	80013b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2224      	movs	r2, #36	; 0x24
 8004c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	68da      	ldr	r2, [r3, #12]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004c5e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004c60:	6878      	ldr	r0, [r7, #4]
 8004c62:	f000 f829 	bl	8004cb8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	691a      	ldr	r2, [r3, #16]
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004c74:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	695a      	ldr	r2, [r3, #20]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004c84:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	68da      	ldr	r2, [r3, #12]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004c94:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2220      	movs	r2, #32
 8004ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2220      	movs	r2, #32
 8004ca8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004cac:	2300      	movs	r3, #0
}
 8004cae:	4618      	mov	r0, r3
 8004cb0:	3708      	adds	r7, #8
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	bd80      	pop	{r7, pc}
	...

08004cb8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004cb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cbc:	b09f      	sub	sp, #124	; 0x7c
 8004cbe:	af00      	add	r7, sp, #0
 8004cc0:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004cc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	691b      	ldr	r3, [r3, #16]
 8004cc8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004ccc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cce:	68d9      	ldr	r1, [r3, #12]
 8004cd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cd2:	681a      	ldr	r2, [r3, #0]
 8004cd4:	ea40 0301 	orr.w	r3, r0, r1
 8004cd8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004cda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cdc:	689a      	ldr	r2, [r3, #8]
 8004cde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ce0:	691b      	ldr	r3, [r3, #16]
 8004ce2:	431a      	orrs	r2, r3
 8004ce4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ce6:	695b      	ldr	r3, [r3, #20]
 8004ce8:	431a      	orrs	r2, r3
 8004cea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cec:	69db      	ldr	r3, [r3, #28]
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8004cf2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	68db      	ldr	r3, [r3, #12]
 8004cf8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004cfc:	f021 010c 	bic.w	r1, r1, #12
 8004d00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d02:	681a      	ldr	r2, [r3, #0]
 8004d04:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004d06:	430b      	orrs	r3, r1
 8004d08:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004d0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	695b      	ldr	r3, [r3, #20]
 8004d10:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004d14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d16:	6999      	ldr	r1, [r3, #24]
 8004d18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d1a:	681a      	ldr	r2, [r3, #0]
 8004d1c:	ea40 0301 	orr.w	r3, r0, r1
 8004d20:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004d22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d24:	681a      	ldr	r2, [r3, #0]
 8004d26:	4bc5      	ldr	r3, [pc, #788]	; (800503c <UART_SetConfig+0x384>)
 8004d28:	429a      	cmp	r2, r3
 8004d2a:	d004      	beq.n	8004d36 <UART_SetConfig+0x7e>
 8004d2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d2e:	681a      	ldr	r2, [r3, #0]
 8004d30:	4bc3      	ldr	r3, [pc, #780]	; (8005040 <UART_SetConfig+0x388>)
 8004d32:	429a      	cmp	r2, r3
 8004d34:	d103      	bne.n	8004d3e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004d36:	f7fe f88b 	bl	8002e50 <HAL_RCC_GetPCLK2Freq>
 8004d3a:	6778      	str	r0, [r7, #116]	; 0x74
 8004d3c:	e002      	b.n	8004d44 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004d3e:	f7fe f873 	bl	8002e28 <HAL_RCC_GetPCLK1Freq>
 8004d42:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d46:	69db      	ldr	r3, [r3, #28]
 8004d48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d4c:	f040 80b6 	bne.w	8004ebc <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004d50:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d52:	461c      	mov	r4, r3
 8004d54:	f04f 0500 	mov.w	r5, #0
 8004d58:	4622      	mov	r2, r4
 8004d5a:	462b      	mov	r3, r5
 8004d5c:	1891      	adds	r1, r2, r2
 8004d5e:	6439      	str	r1, [r7, #64]	; 0x40
 8004d60:	415b      	adcs	r3, r3
 8004d62:	647b      	str	r3, [r7, #68]	; 0x44
 8004d64:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004d68:	1912      	adds	r2, r2, r4
 8004d6a:	eb45 0303 	adc.w	r3, r5, r3
 8004d6e:	f04f 0000 	mov.w	r0, #0
 8004d72:	f04f 0100 	mov.w	r1, #0
 8004d76:	00d9      	lsls	r1, r3, #3
 8004d78:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004d7c:	00d0      	lsls	r0, r2, #3
 8004d7e:	4602      	mov	r2, r0
 8004d80:	460b      	mov	r3, r1
 8004d82:	1911      	adds	r1, r2, r4
 8004d84:	6639      	str	r1, [r7, #96]	; 0x60
 8004d86:	416b      	adcs	r3, r5
 8004d88:	667b      	str	r3, [r7, #100]	; 0x64
 8004d8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	461a      	mov	r2, r3
 8004d90:	f04f 0300 	mov.w	r3, #0
 8004d94:	1891      	adds	r1, r2, r2
 8004d96:	63b9      	str	r1, [r7, #56]	; 0x38
 8004d98:	415b      	adcs	r3, r3
 8004d9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d9c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004da0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004da4:	f7fb fa2e 	bl	8000204 <__aeabi_uldivmod>
 8004da8:	4602      	mov	r2, r0
 8004daa:	460b      	mov	r3, r1
 8004dac:	4ba5      	ldr	r3, [pc, #660]	; (8005044 <UART_SetConfig+0x38c>)
 8004dae:	fba3 2302 	umull	r2, r3, r3, r2
 8004db2:	095b      	lsrs	r3, r3, #5
 8004db4:	011e      	lsls	r6, r3, #4
 8004db6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004db8:	461c      	mov	r4, r3
 8004dba:	f04f 0500 	mov.w	r5, #0
 8004dbe:	4622      	mov	r2, r4
 8004dc0:	462b      	mov	r3, r5
 8004dc2:	1891      	adds	r1, r2, r2
 8004dc4:	6339      	str	r1, [r7, #48]	; 0x30
 8004dc6:	415b      	adcs	r3, r3
 8004dc8:	637b      	str	r3, [r7, #52]	; 0x34
 8004dca:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004dce:	1912      	adds	r2, r2, r4
 8004dd0:	eb45 0303 	adc.w	r3, r5, r3
 8004dd4:	f04f 0000 	mov.w	r0, #0
 8004dd8:	f04f 0100 	mov.w	r1, #0
 8004ddc:	00d9      	lsls	r1, r3, #3
 8004dde:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004de2:	00d0      	lsls	r0, r2, #3
 8004de4:	4602      	mov	r2, r0
 8004de6:	460b      	mov	r3, r1
 8004de8:	1911      	adds	r1, r2, r4
 8004dea:	65b9      	str	r1, [r7, #88]	; 0x58
 8004dec:	416b      	adcs	r3, r5
 8004dee:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004df0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	461a      	mov	r2, r3
 8004df6:	f04f 0300 	mov.w	r3, #0
 8004dfa:	1891      	adds	r1, r2, r2
 8004dfc:	62b9      	str	r1, [r7, #40]	; 0x28
 8004dfe:	415b      	adcs	r3, r3
 8004e00:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e02:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004e06:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004e0a:	f7fb f9fb 	bl	8000204 <__aeabi_uldivmod>
 8004e0e:	4602      	mov	r2, r0
 8004e10:	460b      	mov	r3, r1
 8004e12:	4b8c      	ldr	r3, [pc, #560]	; (8005044 <UART_SetConfig+0x38c>)
 8004e14:	fba3 1302 	umull	r1, r3, r3, r2
 8004e18:	095b      	lsrs	r3, r3, #5
 8004e1a:	2164      	movs	r1, #100	; 0x64
 8004e1c:	fb01 f303 	mul.w	r3, r1, r3
 8004e20:	1ad3      	subs	r3, r2, r3
 8004e22:	00db      	lsls	r3, r3, #3
 8004e24:	3332      	adds	r3, #50	; 0x32
 8004e26:	4a87      	ldr	r2, [pc, #540]	; (8005044 <UART_SetConfig+0x38c>)
 8004e28:	fba2 2303 	umull	r2, r3, r2, r3
 8004e2c:	095b      	lsrs	r3, r3, #5
 8004e2e:	005b      	lsls	r3, r3, #1
 8004e30:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004e34:	441e      	add	r6, r3
 8004e36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e38:	4618      	mov	r0, r3
 8004e3a:	f04f 0100 	mov.w	r1, #0
 8004e3e:	4602      	mov	r2, r0
 8004e40:	460b      	mov	r3, r1
 8004e42:	1894      	adds	r4, r2, r2
 8004e44:	623c      	str	r4, [r7, #32]
 8004e46:	415b      	adcs	r3, r3
 8004e48:	627b      	str	r3, [r7, #36]	; 0x24
 8004e4a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004e4e:	1812      	adds	r2, r2, r0
 8004e50:	eb41 0303 	adc.w	r3, r1, r3
 8004e54:	f04f 0400 	mov.w	r4, #0
 8004e58:	f04f 0500 	mov.w	r5, #0
 8004e5c:	00dd      	lsls	r5, r3, #3
 8004e5e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004e62:	00d4      	lsls	r4, r2, #3
 8004e64:	4622      	mov	r2, r4
 8004e66:	462b      	mov	r3, r5
 8004e68:	1814      	adds	r4, r2, r0
 8004e6a:	653c      	str	r4, [r7, #80]	; 0x50
 8004e6c:	414b      	adcs	r3, r1
 8004e6e:	657b      	str	r3, [r7, #84]	; 0x54
 8004e70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	461a      	mov	r2, r3
 8004e76:	f04f 0300 	mov.w	r3, #0
 8004e7a:	1891      	adds	r1, r2, r2
 8004e7c:	61b9      	str	r1, [r7, #24]
 8004e7e:	415b      	adcs	r3, r3
 8004e80:	61fb      	str	r3, [r7, #28]
 8004e82:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004e86:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004e8a:	f7fb f9bb 	bl	8000204 <__aeabi_uldivmod>
 8004e8e:	4602      	mov	r2, r0
 8004e90:	460b      	mov	r3, r1
 8004e92:	4b6c      	ldr	r3, [pc, #432]	; (8005044 <UART_SetConfig+0x38c>)
 8004e94:	fba3 1302 	umull	r1, r3, r3, r2
 8004e98:	095b      	lsrs	r3, r3, #5
 8004e9a:	2164      	movs	r1, #100	; 0x64
 8004e9c:	fb01 f303 	mul.w	r3, r1, r3
 8004ea0:	1ad3      	subs	r3, r2, r3
 8004ea2:	00db      	lsls	r3, r3, #3
 8004ea4:	3332      	adds	r3, #50	; 0x32
 8004ea6:	4a67      	ldr	r2, [pc, #412]	; (8005044 <UART_SetConfig+0x38c>)
 8004ea8:	fba2 2303 	umull	r2, r3, r2, r3
 8004eac:	095b      	lsrs	r3, r3, #5
 8004eae:	f003 0207 	and.w	r2, r3, #7
 8004eb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4432      	add	r2, r6
 8004eb8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004eba:	e0b9      	b.n	8005030 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004ebc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ebe:	461c      	mov	r4, r3
 8004ec0:	f04f 0500 	mov.w	r5, #0
 8004ec4:	4622      	mov	r2, r4
 8004ec6:	462b      	mov	r3, r5
 8004ec8:	1891      	adds	r1, r2, r2
 8004eca:	6139      	str	r1, [r7, #16]
 8004ecc:	415b      	adcs	r3, r3
 8004ece:	617b      	str	r3, [r7, #20]
 8004ed0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004ed4:	1912      	adds	r2, r2, r4
 8004ed6:	eb45 0303 	adc.w	r3, r5, r3
 8004eda:	f04f 0000 	mov.w	r0, #0
 8004ede:	f04f 0100 	mov.w	r1, #0
 8004ee2:	00d9      	lsls	r1, r3, #3
 8004ee4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004ee8:	00d0      	lsls	r0, r2, #3
 8004eea:	4602      	mov	r2, r0
 8004eec:	460b      	mov	r3, r1
 8004eee:	eb12 0804 	adds.w	r8, r2, r4
 8004ef2:	eb43 0905 	adc.w	r9, r3, r5
 8004ef6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	4618      	mov	r0, r3
 8004efc:	f04f 0100 	mov.w	r1, #0
 8004f00:	f04f 0200 	mov.w	r2, #0
 8004f04:	f04f 0300 	mov.w	r3, #0
 8004f08:	008b      	lsls	r3, r1, #2
 8004f0a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004f0e:	0082      	lsls	r2, r0, #2
 8004f10:	4640      	mov	r0, r8
 8004f12:	4649      	mov	r1, r9
 8004f14:	f7fb f976 	bl	8000204 <__aeabi_uldivmod>
 8004f18:	4602      	mov	r2, r0
 8004f1a:	460b      	mov	r3, r1
 8004f1c:	4b49      	ldr	r3, [pc, #292]	; (8005044 <UART_SetConfig+0x38c>)
 8004f1e:	fba3 2302 	umull	r2, r3, r3, r2
 8004f22:	095b      	lsrs	r3, r3, #5
 8004f24:	011e      	lsls	r6, r3, #4
 8004f26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f28:	4618      	mov	r0, r3
 8004f2a:	f04f 0100 	mov.w	r1, #0
 8004f2e:	4602      	mov	r2, r0
 8004f30:	460b      	mov	r3, r1
 8004f32:	1894      	adds	r4, r2, r2
 8004f34:	60bc      	str	r4, [r7, #8]
 8004f36:	415b      	adcs	r3, r3
 8004f38:	60fb      	str	r3, [r7, #12]
 8004f3a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004f3e:	1812      	adds	r2, r2, r0
 8004f40:	eb41 0303 	adc.w	r3, r1, r3
 8004f44:	f04f 0400 	mov.w	r4, #0
 8004f48:	f04f 0500 	mov.w	r5, #0
 8004f4c:	00dd      	lsls	r5, r3, #3
 8004f4e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004f52:	00d4      	lsls	r4, r2, #3
 8004f54:	4622      	mov	r2, r4
 8004f56:	462b      	mov	r3, r5
 8004f58:	1814      	adds	r4, r2, r0
 8004f5a:	64bc      	str	r4, [r7, #72]	; 0x48
 8004f5c:	414b      	adcs	r3, r1
 8004f5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	4618      	mov	r0, r3
 8004f66:	f04f 0100 	mov.w	r1, #0
 8004f6a:	f04f 0200 	mov.w	r2, #0
 8004f6e:	f04f 0300 	mov.w	r3, #0
 8004f72:	008b      	lsls	r3, r1, #2
 8004f74:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004f78:	0082      	lsls	r2, r0, #2
 8004f7a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004f7e:	f7fb f941 	bl	8000204 <__aeabi_uldivmod>
 8004f82:	4602      	mov	r2, r0
 8004f84:	460b      	mov	r3, r1
 8004f86:	4b2f      	ldr	r3, [pc, #188]	; (8005044 <UART_SetConfig+0x38c>)
 8004f88:	fba3 1302 	umull	r1, r3, r3, r2
 8004f8c:	095b      	lsrs	r3, r3, #5
 8004f8e:	2164      	movs	r1, #100	; 0x64
 8004f90:	fb01 f303 	mul.w	r3, r1, r3
 8004f94:	1ad3      	subs	r3, r2, r3
 8004f96:	011b      	lsls	r3, r3, #4
 8004f98:	3332      	adds	r3, #50	; 0x32
 8004f9a:	4a2a      	ldr	r2, [pc, #168]	; (8005044 <UART_SetConfig+0x38c>)
 8004f9c:	fba2 2303 	umull	r2, r3, r2, r3
 8004fa0:	095b      	lsrs	r3, r3, #5
 8004fa2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004fa6:	441e      	add	r6, r3
 8004fa8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004faa:	4618      	mov	r0, r3
 8004fac:	f04f 0100 	mov.w	r1, #0
 8004fb0:	4602      	mov	r2, r0
 8004fb2:	460b      	mov	r3, r1
 8004fb4:	1894      	adds	r4, r2, r2
 8004fb6:	603c      	str	r4, [r7, #0]
 8004fb8:	415b      	adcs	r3, r3
 8004fba:	607b      	str	r3, [r7, #4]
 8004fbc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004fc0:	1812      	adds	r2, r2, r0
 8004fc2:	eb41 0303 	adc.w	r3, r1, r3
 8004fc6:	f04f 0400 	mov.w	r4, #0
 8004fca:	f04f 0500 	mov.w	r5, #0
 8004fce:	00dd      	lsls	r5, r3, #3
 8004fd0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004fd4:	00d4      	lsls	r4, r2, #3
 8004fd6:	4622      	mov	r2, r4
 8004fd8:	462b      	mov	r3, r5
 8004fda:	eb12 0a00 	adds.w	sl, r2, r0
 8004fde:	eb43 0b01 	adc.w	fp, r3, r1
 8004fe2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	f04f 0100 	mov.w	r1, #0
 8004fec:	f04f 0200 	mov.w	r2, #0
 8004ff0:	f04f 0300 	mov.w	r3, #0
 8004ff4:	008b      	lsls	r3, r1, #2
 8004ff6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004ffa:	0082      	lsls	r2, r0, #2
 8004ffc:	4650      	mov	r0, sl
 8004ffe:	4659      	mov	r1, fp
 8005000:	f7fb f900 	bl	8000204 <__aeabi_uldivmod>
 8005004:	4602      	mov	r2, r0
 8005006:	460b      	mov	r3, r1
 8005008:	4b0e      	ldr	r3, [pc, #56]	; (8005044 <UART_SetConfig+0x38c>)
 800500a:	fba3 1302 	umull	r1, r3, r3, r2
 800500e:	095b      	lsrs	r3, r3, #5
 8005010:	2164      	movs	r1, #100	; 0x64
 8005012:	fb01 f303 	mul.w	r3, r1, r3
 8005016:	1ad3      	subs	r3, r2, r3
 8005018:	011b      	lsls	r3, r3, #4
 800501a:	3332      	adds	r3, #50	; 0x32
 800501c:	4a09      	ldr	r2, [pc, #36]	; (8005044 <UART_SetConfig+0x38c>)
 800501e:	fba2 2303 	umull	r2, r3, r2, r3
 8005022:	095b      	lsrs	r3, r3, #5
 8005024:	f003 020f 	and.w	r2, r3, #15
 8005028:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4432      	add	r2, r6
 800502e:	609a      	str	r2, [r3, #8]
}
 8005030:	bf00      	nop
 8005032:	377c      	adds	r7, #124	; 0x7c
 8005034:	46bd      	mov	sp, r7
 8005036:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800503a:	bf00      	nop
 800503c:	40011000 	.word	0x40011000
 8005040:	40011400 	.word	0x40011400
 8005044:	51eb851f 	.word	0x51eb851f

08005048 <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b084      	sub	sp, #16
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
 8005050:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005052:	2300      	movs	r3, #0
 8005054:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 8005056:	6839      	ldr	r1, [r7, #0]
 8005058:	6878      	ldr	r0, [r7, #4]
 800505a:	f001 fcb2 	bl	80069c2 <VL53L0X_get_offset_calibration_data_micro_meter>
 800505e:	4603      	mov	r3, r0
 8005060:	73fb      	strb	r3, [r7, #15]
		pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
	return Status;
 8005062:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005066:	4618      	mov	r0, r3
 8005068:	3710      	adds	r7, #16
 800506a:	46bd      	mov	sp, r7
 800506c:	bd80      	pop	{r7, pc}
	...

08005070 <VL53L0X_DataInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev)
{
 8005070:	b5b0      	push	{r4, r5, r7, lr}
 8005072:	b096      	sub	sp, #88	; 0x58
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005078:	2300      	movs	r3, #0
 800507a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		0xFE,
		0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
 800507e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005082:	2b00      	cmp	r3, #0
 8005084:	d107      	bne.n	8005096 <VL53L0X_DataInit+0x26>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 8005086:	2200      	movs	r2, #0
 8005088:	2188      	movs	r1, #136	; 0x88
 800508a:	6878      	ldr	r0, [r7, #4]
 800508c:	f004 feaa 	bl	8009de4 <VL53L0X_WrByte>
 8005090:	4603      	mov	r3, r0
 8005092:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2200      	movs	r2, #0
 800509a:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80050a4:	f8a3 2152 	strh.w	r2, [r3, #338]	; 0x152

	/* Dmax default Parameter */
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80050ae:	f8a3 2154 	strh.w	r2, [r3, #340]	; 0x154
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	4a9e      	ldr	r2, [pc, #632]	; (8005330 <VL53L0X_DataInit+0x2c0>)
 80050b6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
		(FixPoint1616_t)((0x00016B85))); /* 1.42 No Cover Glass*/

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	4a9d      	ldr	r2, [pc, #628]	; (8005334 <VL53L0X_DataInit+0x2c4>)
 80050be:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2200      	movs	r2, #0
 80050c6:	621a      	str	r2, [r3, #32]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 80050c8:	f107 0310 	add.w	r3, r7, #16
 80050cc:	4619      	mov	r1, r3
 80050ce:	6878      	ldr	r0, [r7, #4]
 80050d0:	f000 fac2 	bl	8005658 <VL53L0X_GetDeviceParameters>
 80050d4:	4603      	mov	r3, r0
 80050d6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (Status == VL53L0X_ERROR_NONE) {
 80050da:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d112      	bne.n	8005108 <VL53L0X_DataInit+0x98>
		/* initialize PAL values */
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 80050e2:	2300      	movs	r3, #0
 80050e4:	743b      	strb	r3, [r7, #16]
		CurrentParameters.HistogramMode = VL53L0X_HISTOGRAMMODE_DISABLED;
 80050e6:	2300      	movs	r3, #0
 80050e8:	747b      	strb	r3, [r7, #17]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	f103 0410 	add.w	r4, r3, #16
 80050f0:	f107 0510 	add.w	r5, r7, #16
 80050f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80050f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80050f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80050fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80050fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80050fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005100:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8005104:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2264      	movs	r2, #100	; 0x64
 800510c:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	f44f 7261 	mov.w	r2, #900	; 0x384
 8005116:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8005120:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800512a:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2201      	movs	r2, #1
 8005132:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150

	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8005136:	2201      	movs	r2, #1
 8005138:	2180      	movs	r1, #128	; 0x80
 800513a:	6878      	ldr	r0, [r7, #4]
 800513c:	f004 fe52 	bl	8009de4 <VL53L0X_WrByte>
 8005140:	4603      	mov	r3, r0
 8005142:	461a      	mov	r2, r3
 8005144:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005148:	4313      	orrs	r3, r2
 800514a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800514e:	2201      	movs	r2, #1
 8005150:	21ff      	movs	r1, #255	; 0xff
 8005152:	6878      	ldr	r0, [r7, #4]
 8005154:	f004 fe46 	bl	8009de4 <VL53L0X_WrByte>
 8005158:	4603      	mov	r3, r0
 800515a:	461a      	mov	r2, r3
 800515c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005160:	4313      	orrs	r3, r2
 8005162:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8005166:	2200      	movs	r2, #0
 8005168:	2100      	movs	r1, #0
 800516a:	6878      	ldr	r0, [r7, #4]
 800516c:	f004 fe3a 	bl	8009de4 <VL53L0X_WrByte>
 8005170:	4603      	mov	r3, r0
 8005172:	461a      	mov	r2, r3
 8005174:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005178:	4313      	orrs	r3, r2
 800517a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 800517e:	f107 030f 	add.w	r3, r7, #15
 8005182:	461a      	mov	r2, r3
 8005184:	2191      	movs	r1, #145	; 0x91
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	f004 feae 	bl	8009ee8 <VL53L0X_RdByte>
 800518c:	4603      	mov	r3, r0
 800518e:	461a      	mov	r2, r3
 8005190:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005194:	4313      	orrs	r3, r2
 8005196:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	PALDevDataSet(Dev, StopVariable, StopVariable);
 800519a:	7bfa      	ldrb	r2, [r7, #15]
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 80051a2:	2201      	movs	r2, #1
 80051a4:	2100      	movs	r1, #0
 80051a6:	6878      	ldr	r0, [r7, #4]
 80051a8:	f004 fe1c 	bl	8009de4 <VL53L0X_WrByte>
 80051ac:	4603      	mov	r3, r0
 80051ae:	461a      	mov	r2, r3
 80051b0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80051b4:	4313      	orrs	r3, r2
 80051b6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80051ba:	2200      	movs	r2, #0
 80051bc:	21ff      	movs	r1, #255	; 0xff
 80051be:	6878      	ldr	r0, [r7, #4]
 80051c0:	f004 fe10 	bl	8009de4 <VL53L0X_WrByte>
 80051c4:	4603      	mov	r3, r0
 80051c6:	461a      	mov	r2, r3
 80051c8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80051cc:	4313      	orrs	r3, r2
 80051ce:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 80051d2:	2200      	movs	r2, #0
 80051d4:	2180      	movs	r1, #128	; 0x80
 80051d6:	6878      	ldr	r0, [r7, #4]
 80051d8:	f004 fe04 	bl	8009de4 <VL53L0X_WrByte>
 80051dc:	4603      	mov	r3, r0
 80051de:	461a      	mov	r2, r3
 80051e0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80051e4:	4313      	orrs	r3, r2
 80051e6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80051ea:	2300      	movs	r3, #0
 80051ec:	653b      	str	r3, [r7, #80]	; 0x50
 80051ee:	e014      	b.n	800521a <VL53L0X_DataInit+0x1aa>
		if (Status == VL53L0X_ERROR_NONE)
 80051f0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d114      	bne.n	8005222 <VL53L0X_DataInit+0x1b2>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 80051f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051fa:	b29b      	uxth	r3, r3
 80051fc:	2201      	movs	r2, #1
 80051fe:	4619      	mov	r1, r3
 8005200:	6878      	ldr	r0, [r7, #4]
 8005202:	f000 fd35 	bl	8005c70 <VL53L0X_SetLimitCheckEnable>
 8005206:	4603      	mov	r3, r0
 8005208:	461a      	mov	r2, r3
 800520a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800520e:	4313      	orrs	r3, r2
 8005210:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8005214:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005216:	3301      	adds	r3, #1
 8005218:	653b      	str	r3, [r7, #80]	; 0x50
 800521a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800521c:	2b05      	cmp	r3, #5
 800521e:	dde7      	ble.n	80051f0 <VL53L0X_DataInit+0x180>
 8005220:	e000      	b.n	8005224 <VL53L0X_DataInit+0x1b4>
		else
			break;
 8005222:	bf00      	nop

	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
 8005224:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005228:	2b00      	cmp	r3, #0
 800522a:	d107      	bne.n	800523c <VL53L0X_DataInit+0x1cc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 800522c:	2200      	movs	r2, #0
 800522e:	2102      	movs	r1, #2
 8005230:	6878      	ldr	r0, [r7, #4]
 8005232:	f000 fd1d 	bl	8005c70 <VL53L0X_SetLimitCheckEnable>
 8005236:	4603      	mov	r3, r0
 8005238:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 800523c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005240:	2b00      	cmp	r3, #0
 8005242:	d107      	bne.n	8005254 <VL53L0X_DataInit+0x1e4>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8005244:	2200      	movs	r2, #0
 8005246:	2103      	movs	r1, #3
 8005248:	6878      	ldr	r0, [r7, #4]
 800524a:	f000 fd11 	bl	8005c70 <VL53L0X_SetLimitCheckEnable>
 800524e:	4603      	mov	r3, r0
 8005250:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8005254:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005258:	2b00      	cmp	r3, #0
 800525a:	d107      	bne.n	800526c <VL53L0X_DataInit+0x1fc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 800525c:	2200      	movs	r2, #0
 800525e:	2104      	movs	r1, #4
 8005260:	6878      	ldr	r0, [r7, #4]
 8005262:	f000 fd05 	bl	8005c70 <VL53L0X_SetLimitCheckEnable>
 8005266:	4603      	mov	r3, r0
 8005268:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 800526c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005270:	2b00      	cmp	r3, #0
 8005272:	d107      	bne.n	8005284 <VL53L0X_DataInit+0x214>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8005274:	2200      	movs	r2, #0
 8005276:	2105      	movs	r1, #5
 8005278:	6878      	ldr	r0, [r7, #4]
 800527a:	f000 fcf9 	bl	8005c70 <VL53L0X_SetLimitCheckEnable>
 800527e:	4603      	mov	r3, r0
 8005280:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 8005284:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005288:	2b00      	cmp	r3, #0
 800528a:	d108      	bne.n	800529e <VL53L0X_DataInit+0x22e>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 800528c:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 8005290:	2100      	movs	r1, #0
 8005292:	6878      	ldr	r0, [r7, #4]
 8005294:	f000 fd9c 	bl	8005dd0 <VL53L0X_SetLimitCheckValue>
 8005298:	4603      	mov	r3, r0
 800529a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800529e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d108      	bne.n	80052b8 <VL53L0X_DataInit+0x248>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 80052a6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80052aa:	2101      	movs	r1, #1
 80052ac:	6878      	ldr	r0, [r7, #4]
 80052ae:	f000 fd8f 	bl	8005dd0 <VL53L0X_SetLimitCheckValue>
 80052b2:	4603      	mov	r3, r0
 80052b4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80052b8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d108      	bne.n	80052d2 <VL53L0X_DataInit+0x262>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 80052c0:	f44f 120c 	mov.w	r2, #2293760	; 0x230000
 80052c4:	2102      	movs	r1, #2
 80052c6:	6878      	ldr	r0, [r7, #4]
 80052c8:	f000 fd82 	bl	8005dd0 <VL53L0X_SetLimitCheckValue>
 80052cc:	4603      	mov	r3, r0
 80052ce:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				(FixPoint1616_t)(35 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80052d2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d107      	bne.n	80052ea <VL53L0X_DataInit+0x27a>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 80052da:	2200      	movs	r2, #0
 80052dc:	2103      	movs	r1, #3
 80052de:	6878      	ldr	r0, [r7, #4]
 80052e0:	f000 fd76 	bl	8005dd0 <VL53L0X_SetLimitCheckValue>
 80052e4:	4603      	mov	r3, r0
 80052e6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				(FixPoint1616_t)(0 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80052ea:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d10f      	bne.n	8005312 <VL53L0X_DataInit+0x2a2>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	22ff      	movs	r2, #255	; 0xff
 80052f6:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80052fa:	22ff      	movs	r2, #255	; 0xff
 80052fc:	2101      	movs	r1, #1
 80052fe:	6878      	ldr	r0, [r7, #4]
 8005300:	f004 fd70 	bl	8009de4 <VL53L0X_WrByte>
 8005304:	4603      	mov	r3, r0
 8005306:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			0xFF);

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2201      	movs	r2, #1
 800530e:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
	}

	if (Status == VL53L0X_ERROR_NONE)
 8005312:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005316:	2b00      	cmp	r3, #0
 8005318:	d103      	bne.n	8005322 <VL53L0X_DataInit+0x2b2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2200      	movs	r2, #0
 800531e:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115


	LOG_FUNCTION_END(Status);
	return Status;
 8005322:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8005326:	4618      	mov	r0, r3
 8005328:	3758      	adds	r7, #88	; 0x58
 800532a:	46bd      	mov	sp, r7
 800532c:	bdb0      	pop	{r4, r5, r7, pc}
 800532e:	bf00      	nop
 8005330:	00016b85 	.word	0x00016b85
 8005334:	000970a4 	.word	0x000970a4

08005338 <VL53L0X_StaticInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev)
{
 8005338:	b5b0      	push	{r4, r5, r7, lr}
 800533a:	b09e      	sub	sp, #120	; 0x78
 800533c:	af02      	add	r7, sp, #8
 800533e:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005340:	2300      	movs	r3, #0
 8005342:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 8005346:	f107 031c 	add.w	r3, r7, #28
 800534a:	2240      	movs	r2, #64	; 0x40
 800534c:	2100      	movs	r1, #0
 800534e:	4618      	mov	r0, r3
 8005350:	f004 feaa 	bl	800a0a8 <memset>
	uint8_t *pTuningSettingBuffer;
	uint16_t tempword = 0;
 8005354:	2300      	movs	r3, #0
 8005356:	837b      	strh	r3, [r7, #26]
	uint8_t tempbyte = 0;
 8005358:	2300      	movs	r3, #0
 800535a:	767b      	strb	r3, [r7, #25]
	uint8_t UseInternalTuningSettings = 0;
 800535c:	2300      	movs	r3, #0
 800535e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint32_t count = 0;
 8005362:	2300      	movs	r3, #0
 8005364:	663b      	str	r3, [r7, #96]	; 0x60
	uint8_t isApertureSpads = 0;
 8005366:	2300      	movs	r3, #0
 8005368:	763b      	strb	r3, [r7, #24]
	uint32_t refSpadCount = 0;
 800536a:	2300      	movs	r3, #0
 800536c:	617b      	str	r3, [r7, #20]
	uint8_t ApertureSpads = 0;
 800536e:	2300      	movs	r3, #0
 8005370:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t vcselPulsePeriodPCLK;
	uint32_t seqTimeoutMicroSecs;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 1);
 8005374:	2101      	movs	r1, #1
 8005376:	6878      	ldr	r0, [r7, #4]
 8005378:	f002 fa79 	bl	800786e <VL53L0X_get_info_from_device>
 800537c:	4603      	mov	r3, r0
 800537e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	/* set the ref spad from NVM */
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 8005388:	663b      	str	r3, [r7, #96]	; 0x60
		ReferenceSpadCount);
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 8005390:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		ReferenceSpadType);

	/* NVM value invalid */
	if ((ApertureSpads > 1) ||
 8005394:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005398:	2b01      	cmp	r3, #1
 800539a:	d80d      	bhi.n	80053b8 <VL53L0X_StaticInit+0x80>
 800539c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80053a0:	2b01      	cmp	r3, #1
 80053a2:	d102      	bne.n	80053aa <VL53L0X_StaticInit+0x72>
		((ApertureSpads == 1) && (count > 32)) ||
 80053a4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80053a6:	2b20      	cmp	r3, #32
 80053a8:	d806      	bhi.n	80053b8 <VL53L0X_StaticInit+0x80>
 80053aa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d10e      	bne.n	80053d0 <VL53L0X_StaticInit+0x98>
		((ApertureSpads == 0) && (count > 12)))
 80053b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80053b4:	2b0c      	cmp	r3, #12
 80053b6:	d90b      	bls.n	80053d0 <VL53L0X_StaticInit+0x98>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 80053b8:	f107 0218 	add.w	r2, r7, #24
 80053bc:	f107 0314 	add.w	r3, r7, #20
 80053c0:	4619      	mov	r1, r3
 80053c2:	6878      	ldr	r0, [r7, #4]
 80053c4:	f001 fcf8 	bl	8006db8 <VL53L0X_perform_ref_spad_management>
 80053c8:	4603      	mov	r3, r0
 80053ca:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 80053ce:	e009      	b.n	80053e4 <VL53L0X_StaticInit+0xac>
			&isApertureSpads);
	else
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 80053d0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80053d4:	461a      	mov	r2, r3
 80053d6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80053d8:	6878      	ldr	r0, [r7, #4]
 80053da:	f001 fef9 	bl	80071d0 <VL53L0X_set_reference_spads>
 80053de:	4603      	mov	r3, r0
 80053e0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Initialize tuning settings buffer to prevent compiler warning. */
	pTuningSettingBuffer = DefaultTuningSettings;
 80053e4:	4b94      	ldr	r3, [pc, #592]	; (8005638 <VL53L0X_StaticInit+0x300>)
 80053e6:	66bb      	str	r3, [r7, #104]	; 0x68

	if (Status == VL53L0X_ERROR_NONE) {
 80053e8:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d10f      	bne.n	8005410 <VL53L0X_StaticInit+0xd8>
		UseInternalTuningSettings = PALDevDataGet(Dev,
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 80053f6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			UseInternalTuningSettings);

		if (UseInternalTuningSettings == 0)
 80053fa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d104      	bne.n	800540c <VL53L0X_StaticInit+0xd4>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8005408:	66bb      	str	r3, [r7, #104]	; 0x68
 800540a:	e001      	b.n	8005410 <VL53L0X_StaticInit+0xd8>
				pTuningSettingsPointer);
		else
			pTuningSettingBuffer = DefaultTuningSettings;
 800540c:	4b8a      	ldr	r3, [pc, #552]	; (8005638 <VL53L0X_StaticInit+0x300>)
 800540e:	66bb      	str	r3, [r7, #104]	; 0x68

	}

	if (Status == VL53L0X_ERROR_NONE)
 8005410:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005414:	2b00      	cmp	r3, #0
 8005416:	d106      	bne.n	8005426 <VL53L0X_StaticInit+0xee>
		Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 8005418:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800541a:	6878      	ldr	r0, [r7, #4]
 800541c:	f003 fdcc 	bl	8008fb8 <VL53L0X_load_tuning_settings>
 8005420:	4603      	mov	r3, r0
 8005422:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Set interrupt config to new sample ready */
	if (Status == VL53L0X_ERROR_NONE) {
 8005426:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800542a:	2b00      	cmp	r3, #0
 800542c:	d10a      	bne.n	8005444 <VL53L0X_StaticInit+0x10c>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 800542e:	2300      	movs	r3, #0
 8005430:	9300      	str	r3, [sp, #0]
 8005432:	2304      	movs	r3, #4
 8005434:	2200      	movs	r2, #0
 8005436:	2100      	movs	r1, #0
 8005438:	6878      	ldr	r0, [r7, #4]
 800543a:	f001 f8f1 	bl	8006620 <VL53L0X_SetGpioConfig>
 800543e:	4603      	mov	r3, r0
 8005440:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
		VL53L0X_INTERRUPTPOLARITY_LOW);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005444:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005448:	2b00      	cmp	r3, #0
 800544a:	d121      	bne.n	8005490 <VL53L0X_StaticInit+0x158>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800544c:	2201      	movs	r2, #1
 800544e:	21ff      	movs	r1, #255	; 0xff
 8005450:	6878      	ldr	r0, [r7, #4]
 8005452:	f004 fcc7 	bl	8009de4 <VL53L0X_WrByte>
 8005456:	4603      	mov	r3, r0
 8005458:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 800545c:	f107 031a 	add.w	r3, r7, #26
 8005460:	461a      	mov	r2, r3
 8005462:	2184      	movs	r1, #132	; 0x84
 8005464:	6878      	ldr	r0, [r7, #4]
 8005466:	f004 fd69 	bl	8009f3c <VL53L0X_RdWord>
 800546a:	4603      	mov	r3, r0
 800546c:	461a      	mov	r2, r3
 800546e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8005472:	4313      	orrs	r3, r2
 8005474:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8005478:	2200      	movs	r2, #0
 800547a:	21ff      	movs	r1, #255	; 0xff
 800547c:	6878      	ldr	r0, [r7, #4]
 800547e:	f004 fcb1 	bl	8009de4 <VL53L0X_WrByte>
 8005482:	4603      	mov	r3, r0
 8005484:	461a      	mov	r2, r3
 8005486:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800548a:	4313      	orrs	r3, r2
 800548c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005490:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005494:	2b00      	cmp	r3, #0
 8005496:	d105      	bne.n	80054a4 <VL53L0X_StaticInit+0x16c>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 8005498:	8b7b      	ldrh	r3, [r7, #26]
 800549a:	011b      	lsls	r3, r3, #4
 800549c:	461a      	mov	r2, r3
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
			VL53L0X_FIXPOINT412TOFIXPOINT1616(tempword));
	}

	/* After static init, some device parameters may be changed,
	 * so update them */
	if (Status == VL53L0X_ERROR_NONE)
 80054a4:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d108      	bne.n	80054be <VL53L0X_StaticInit+0x186>
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 80054ac:	f107 031c 	add.w	r3, r7, #28
 80054b0:	4619      	mov	r1, r3
 80054b2:	6878      	ldr	r0, [r7, #4]
 80054b4:	f000 f8d0 	bl	8005658 <VL53L0X_GetDeviceParameters>
 80054b8:	4603      	mov	r3, r0
 80054ba:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	if (Status == VL53L0X_ERROR_NONE) {
 80054be:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d110      	bne.n	80054e8 <VL53L0X_StaticInit+0x1b0>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 80054c6:	f107 0319 	add.w	r3, r7, #25
 80054ca:	4619      	mov	r1, r3
 80054cc:	6878      	ldr	r0, [r7, #4]
 80054ce:	f000 f992 	bl	80057f6 <VL53L0X_GetFractionEnable>
 80054d2:	4603      	mov	r3, r0
 80054d4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (Status == VL53L0X_ERROR_NONE)
 80054d8:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d103      	bne.n	80054e8 <VL53L0X_StaticInit+0x1b0>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 80054e0:	7e7a      	ldrb	r2, [r7, #25]
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131

	}

	if (Status == VL53L0X_ERROR_NONE)
 80054e8:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d10e      	bne.n	800550e <VL53L0X_StaticInit+0x1d6>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	f103 0410 	add.w	r4, r3, #16
 80054f6:	f107 051c 	add.w	r5, r7, #28
 80054fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80054fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80054fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005500:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005502:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005504:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005506:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800550a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	/* read the sequence config and save it */
	if (Status == VL53L0X_ERROR_NONE) {
 800550e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005512:	2b00      	cmp	r3, #0
 8005514:	d111      	bne.n	800553a <VL53L0X_StaticInit+0x202>
		Status = VL53L0X_RdByte(Dev,
 8005516:	f107 0319 	add.w	r3, r7, #25
 800551a:	461a      	mov	r2, r3
 800551c:	2101      	movs	r1, #1
 800551e:	6878      	ldr	r0, [r7, #4]
 8005520:	f004 fce2 	bl	8009ee8 <VL53L0X_RdByte>
 8005524:	4603      	mov	r3, r0
 8005526:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
		if (Status == VL53L0X_ERROR_NONE)
 800552a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800552e:	2b00      	cmp	r3, #0
 8005530:	d103      	bne.n	800553a <VL53L0X_StaticInit+0x202>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 8005532:	7e7a      	ldrb	r2, [r7, #25]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	/* Disable MSRC and TCC by default */
	if (Status == VL53L0X_ERROR_NONE)
 800553a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800553e:	2b00      	cmp	r3, #0
 8005540:	d107      	bne.n	8005552 <VL53L0X_StaticInit+0x21a>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8005542:	2200      	movs	r2, #0
 8005544:	2100      	movs	r1, #0
 8005546:	6878      	ldr	r0, [r7, #4]
 8005548:	f000 f9ca 	bl	80058e0 <VL53L0X_SetSequenceStepEnable>
 800554c:	4603      	mov	r3, r0
 800554e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					VL53L0X_SEQUENCESTEP_TCC, 0);


	if (Status == VL53L0X_ERROR_NONE)
 8005552:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005556:	2b00      	cmp	r3, #0
 8005558:	d107      	bne.n	800556a <VL53L0X_StaticInit+0x232>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 800555a:	2200      	movs	r2, #0
 800555c:	2102      	movs	r1, #2
 800555e:	6878      	ldr	r0, [r7, #4]
 8005560:	f000 f9be 	bl	80058e0 <VL53L0X_SetSequenceStepEnable>
 8005564:	4603      	mov	r3, r0
 8005566:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_SEQUENCESTEP_MSRC, 0);


	/* Set PAL State to standby */
	if (Status == VL53L0X_ERROR_NONE)
 800556a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800556e:	2b00      	cmp	r3, #0
 8005570:	d103      	bne.n	800557a <VL53L0X_StaticInit+0x242>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2203      	movs	r2, #3
 8005576:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132



	/* Store pre-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 800557a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800557e:	2b00      	cmp	r3, #0
 8005580:	d109      	bne.n	8005596 <VL53L0X_StaticInit+0x25e>
		Status = VL53L0X_GetVcselPulsePeriod(
 8005582:	f107 0313 	add.w	r3, r7, #19
 8005586:	461a      	mov	r2, r3
 8005588:	2100      	movs	r1, #0
 800558a:	6878      	ldr	r0, [r7, #4]
 800558c:	f000 f990 	bl	80058b0 <VL53L0X_GetVcselPulsePeriod>
 8005590:	4603      	mov	r3, r0
 8005592:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_PRE_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005596:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800559a:	2b00      	cmp	r3, #0
 800559c:	d103      	bne.n	80055a6 <VL53L0X_StaticInit+0x26e>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800559e:	7cfa      	ldrb	r2, [r7, #19]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				PreRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store final-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 80055a6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d109      	bne.n	80055c2 <VL53L0X_StaticInit+0x28a>
		Status = VL53L0X_GetVcselPulsePeriod(
 80055ae:	f107 0313 	add.w	r3, r7, #19
 80055b2:	461a      	mov	r2, r3
 80055b4:	2101      	movs	r1, #1
 80055b6:	6878      	ldr	r0, [r7, #4]
 80055b8:	f000 f97a 	bl	80058b0 <VL53L0X_GetVcselPulsePeriod>
 80055bc:	4603      	mov	r3, r0
 80055be:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80055c2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d103      	bne.n	80055d2 <VL53L0X_StaticInit+0x29a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 80055ca:	7cfa      	ldrb	r2, [r7, #19]
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				FinalRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store pre-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 80055d2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d109      	bne.n	80055ee <VL53L0X_StaticInit+0x2b6>
		Status = get_sequence_step_timeout(
 80055da:	f107 030c 	add.w	r3, r7, #12
 80055de:	461a      	mov	r2, r3
 80055e0:	2103      	movs	r1, #3
 80055e2:	6878      	ldr	r0, [r7, #4]
 80055e4:	f002 fec4 	bl	8008370 <get_sequence_step_timeout>
 80055e8:	4603      	mov	r3, r0
 80055ea:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_PRE_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80055ee:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d103      	bne.n	80055fe <VL53L0X_StaticInit+0x2c6>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 80055f6:	68fa      	ldr	r2, [r7, #12]
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
			PreRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	/* Store final-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 80055fe:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005602:	2b00      	cmp	r3, #0
 8005604:	d109      	bne.n	800561a <VL53L0X_StaticInit+0x2e2>
		Status = get_sequence_step_timeout(
 8005606:	f107 030c 	add.w	r3, r7, #12
 800560a:	461a      	mov	r2, r3
 800560c:	2104      	movs	r1, #4
 800560e:	6878      	ldr	r0, [r7, #4]
 8005610:	f002 feae 	bl	8008370 <get_sequence_step_timeout>
 8005614:	4603      	mov	r3, r0
 8005616:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800561a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800561e:	2b00      	cmp	r3, #0
 8005620:	d103      	bne.n	800562a <VL53L0X_StaticInit+0x2f2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8005622:	68fa      	ldr	r2, [r7, #12]
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
			FinalRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800562a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
}
 800562e:	4618      	mov	r0, r3
 8005630:	3770      	adds	r7, #112	; 0x70
 8005632:	46bd      	mov	sp, r7
 8005634:	bdb0      	pop	{r4, r5, r7, pc}
 8005636:	bf00      	nop
 8005638:	20000240 	.word	0x20000240

0800563c <VL53L0X_WaitDeviceBooted>:

VL53L0X_Error VL53L0X_WaitDeviceBooted(VL53L0X_DEV Dev)
{
 800563c:	b480      	push	{r7}
 800563e:	b085      	sub	sp, #20
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NOT_IMPLEMENTED;
 8005644:	239d      	movs	r3, #157	; 0x9d
 8005646:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	/* not implemented on VL53L0X */

	LOG_FUNCTION_END(Status);
	return Status;
 8005648:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800564c:	4618      	mov	r0, r3
 800564e:	3714      	adds	r7, #20
 8005650:	46bd      	mov	sp, r7
 8005652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005656:	4770      	bx	lr

08005658 <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b084      	sub	sp, #16
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
 8005660:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005662:	2300      	movs	r3, #0
 8005664:	73fb      	strb	r3, [r7, #15]
	int i;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	4619      	mov	r1, r3
 800566a:	6878      	ldr	r0, [r7, #4]
 800566c:	f000 f8b0 	bl	80057d0 <VL53L0X_GetDeviceMode>
 8005670:	4603      	mov	r3, r0
 8005672:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8005674:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d107      	bne.n	800568c <VL53L0X_GetDeviceParameters+0x34>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	3308      	adds	r3, #8
 8005680:	4619      	mov	r1, r3
 8005682:	6878      	ldr	r0, [r7, #4]
 8005684:	f000 fa78 	bl	8005b78 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 8005688:	4603      	mov	r3, r0
 800568a:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 800568c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d102      	bne.n	800569a <VL53L0X_GetDeviceParameters+0x42>
		pDeviceParameters->XTalkCompensationEnable = 0;
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	2200      	movs	r2, #0
 8005698:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 800569a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d107      	bne.n	80056b2 <VL53L0X_GetDeviceParameters+0x5a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	3310      	adds	r3, #16
 80056a6:	4619      	mov	r1, r3
 80056a8:	6878      	ldr	r0, [r7, #4]
 80056aa:	f000 faae 	bl	8005c0a <VL53L0X_GetXTalkCompensationRateMegaCps>
 80056ae:	4603      	mov	r3, r0
 80056b0:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 80056b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d107      	bne.n	80056ca <VL53L0X_GetDeviceParameters+0x72>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	3314      	adds	r3, #20
 80056be:	4619      	mov	r1, r3
 80056c0:	6878      	ldr	r0, [r7, #4]
 80056c2:	f7ff fcc1 	bl	8005048 <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 80056c6:	4603      	mov	r3, r0
 80056c8:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 80056ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d134      	bne.n	800573c <VL53L0X_GetDeviceParameters+0xe4>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80056d2:	2300      	movs	r3, #0
 80056d4:	60bb      	str	r3, [r7, #8]
 80056d6:	e02a      	b.n	800572e <VL53L0X_GetDeviceParameters+0xd6>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 80056d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d12a      	bne.n	8005736 <VL53L0X_GetDeviceParameters+0xde>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	b299      	uxth	r1, r3
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	3308      	adds	r3, #8
 80056e8:	009b      	lsls	r3, r3, #2
 80056ea:	683a      	ldr	r2, [r7, #0]
 80056ec:	4413      	add	r3, r2
 80056ee:	3304      	adds	r3, #4
 80056f0:	461a      	mov	r2, r3
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	f000 fbce 	bl	8005e94 <VL53L0X_GetLimitCheckValue>
 80056f8:	4603      	mov	r3, r0
 80056fa:	461a      	mov	r2, r3
 80056fc:	7bfb      	ldrb	r3, [r7, #15]
 80056fe:	4313      	orrs	r3, r2
 8005700:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 8005702:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d117      	bne.n	800573a <VL53L0X_GetDeviceParameters+0xe2>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 800570a:	68bb      	ldr	r3, [r7, #8]
 800570c:	b299      	uxth	r1, r3
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	3318      	adds	r3, #24
 8005712:	683a      	ldr	r2, [r7, #0]
 8005714:	4413      	add	r3, r2
 8005716:	461a      	mov	r2, r3
 8005718:	6878      	ldr	r0, [r7, #4]
 800571a:	f000 fb35 	bl	8005d88 <VL53L0X_GetLimitCheckEnable>
 800571e:	4603      	mov	r3, r0
 8005720:	461a      	mov	r2, r3
 8005722:	7bfb      	ldrb	r3, [r7, #15]
 8005724:	4313      	orrs	r3, r2
 8005726:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	3301      	adds	r3, #1
 800572c:	60bb      	str	r3, [r7, #8]
 800572e:	68bb      	ldr	r3, [r7, #8]
 8005730:	2b05      	cmp	r3, #5
 8005732:	ddd1      	ble.n	80056d8 <VL53L0X_GetDeviceParameters+0x80>
 8005734:	e002      	b.n	800573c <VL53L0X_GetDeviceParameters+0xe4>
				break;
 8005736:	bf00      	nop
 8005738:	e000      	b.n	800573c <VL53L0X_GetDeviceParameters+0xe4>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 800573a:	bf00      	nop
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800573c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d107      	bne.n	8005754 <VL53L0X_GetDeviceParameters+0xfc>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	333c      	adds	r3, #60	; 0x3c
 8005748:	4619      	mov	r1, r3
 800574a:	6878      	ldr	r0, [r7, #4]
 800574c:	f000 fc30 	bl	8005fb0 <VL53L0X_GetWrapAroundCheckEnable>
 8005750:	4603      	mov	r3, r0
 8005752:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 8005754:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d107      	bne.n	800576c <VL53L0X_GetDeviceParameters+0x114>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	3304      	adds	r3, #4
 8005760:	4619      	mov	r1, r3
 8005762:	6878      	ldr	r0, [r7, #4]
 8005764:	f000 f879 	bl	800585a <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 8005768:	4603      	mov	r3, r0
 800576a:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800576c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005770:	4618      	mov	r0, r3
 8005772:	3710      	adds	r7, #16
 8005774:	46bd      	mov	sp, r7
 8005776:	bd80      	pop	{r7, pc}

08005778 <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev, VL53L0X_DeviceModes DeviceMode)
{
 8005778:	b480      	push	{r7}
 800577a:	b085      	sub	sp, #20
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
 8005780:	460b      	mov	r3, r1
 8005782:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005784:	2300      	movs	r3, #0
 8005786:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 8005788:	78fb      	ldrb	r3, [r7, #3]
 800578a:	2b15      	cmp	r3, #21
 800578c:	bf8c      	ite	hi
 800578e:	2201      	movhi	r2, #1
 8005790:	2200      	movls	r2, #0
 8005792:	b2d2      	uxtb	r2, r2
 8005794:	2a00      	cmp	r2, #0
 8005796:	d10e      	bne.n	80057b6 <VL53L0X_SetDeviceMode+0x3e>
 8005798:	2201      	movs	r2, #1
 800579a:	409a      	lsls	r2, r3
 800579c:	4b0b      	ldr	r3, [pc, #44]	; (80057cc <VL53L0X_SetDeviceMode+0x54>)
 800579e:	4013      	ands	r3, r2
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	bf14      	ite	ne
 80057a4:	2301      	movne	r3, #1
 80057a6:	2300      	moveq	r3, #0
 80057a8:	b2db      	uxtb	r3, r3
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d003      	beq.n	80057b6 <VL53L0X_SetDeviceMode+0x3e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	78fa      	ldrb	r2, [r7, #3]
 80057b2:	741a      	strb	r2, [r3, #16]
		break;
 80057b4:	e001      	b.n	80057ba <VL53L0X_SetDeviceMode+0x42>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 80057b6:	23f8      	movs	r3, #248	; 0xf8
 80057b8:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80057ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80057be:	4618      	mov	r0, r3
 80057c0:	3714      	adds	r7, #20
 80057c2:	46bd      	mov	sp, r7
 80057c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c8:	4770      	bx	lr
 80057ca:	bf00      	nop
 80057cc:	0030000b 	.word	0x0030000b

080057d0 <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 80057d0:	b480      	push	{r7}
 80057d2:	b085      	sub	sp, #20
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
 80057d8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80057da:	2300      	movs	r3, #0
 80057dc:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	7c1a      	ldrb	r2, [r3, #16]
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 80057e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80057ea:	4618      	mov	r0, r3
 80057ec:	3714      	adds	r7, #20
 80057ee:	46bd      	mov	sp, r7
 80057f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f4:	4770      	bx	lr

080057f6 <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 80057f6:	b580      	push	{r7, lr}
 80057f8:	b084      	sub	sp, #16
 80057fa:	af00      	add	r7, sp, #0
 80057fc:	6078      	str	r0, [r7, #4]
 80057fe:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005800:	2300      	movs	r3, #0
 8005802:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 8005804:	683a      	ldr	r2, [r7, #0]
 8005806:	2109      	movs	r1, #9
 8005808:	6878      	ldr	r0, [r7, #4]
 800580a:	f004 fb6d 	bl	8009ee8 <VL53L0X_RdByte>
 800580e:	4603      	mov	r3, r0
 8005810:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8005812:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d106      	bne.n	8005828 <VL53L0X_GetFractionEnable+0x32>
		*pEnabled = (*pEnabled & 1);
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	781b      	ldrb	r3, [r3, #0]
 800581e:	f003 0301 	and.w	r3, r3, #1
 8005822:	b2da      	uxtb	r2, r3
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8005828:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800582c:	4618      	mov	r0, r3
 800582e:	3710      	adds	r7, #16
 8005830:	46bd      	mov	sp, r7
 8005832:	bd80      	pop	{r7, pc}

08005834 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b084      	sub	sp, #16
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
 800583c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800583e:	2300      	movs	r3, #0
 8005840:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 8005842:	6839      	ldr	r1, [r7, #0]
 8005844:	6878      	ldr	r0, [r7, #4]
 8005846:	f003 fa26 	bl	8008c96 <VL53L0X_set_measurement_timing_budget_micro_seconds>
 800584a:	4603      	mov	r3, r0
 800584c:	73fb      	strb	r3, [r7, #15]
		MeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);

	return Status;
 800584e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005852:	4618      	mov	r0, r3
 8005854:	3710      	adds	r7, #16
 8005856:	46bd      	mov	sp, r7
 8005858:	bd80      	pop	{r7, pc}

0800585a <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 800585a:	b580      	push	{r7, lr}
 800585c:	b084      	sub	sp, #16
 800585e:	af00      	add	r7, sp, #0
 8005860:	6078      	str	r0, [r7, #4]
 8005862:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005864:	2300      	movs	r3, #0
 8005866:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 8005868:	6839      	ldr	r1, [r7, #0]
 800586a:	6878      	ldr	r0, [r7, #4]
 800586c:	f003 faf3 	bl	8008e56 <VL53L0X_get_measurement_timing_budget_micro_seconds>
 8005870:	4603      	mov	r3, r0
 8005872:	73fb      	strb	r3, [r7, #15]
		pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 8005874:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005878:	4618      	mov	r0, r3
 800587a:	3710      	adds	r7, #16
 800587c:	46bd      	mov	sp, r7
 800587e:	bd80      	pop	{r7, pc}

08005880 <VL53L0X_SetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_SetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b084      	sub	sp, #16
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
 8005888:	460b      	mov	r3, r1
 800588a:	70fb      	strb	r3, [r7, #3]
 800588c:	4613      	mov	r3, r2
 800588e:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005890:	2300      	movs	r3, #0
 8005892:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_vcsel_pulse_period(Dev, VcselPeriodType,
 8005894:	78ba      	ldrb	r2, [r7, #2]
 8005896:	78fb      	ldrb	r3, [r7, #3]
 8005898:	4619      	mov	r1, r3
 800589a:	6878      	ldr	r0, [r7, #4]
 800589c:	f002 ff3b 	bl	8008716 <VL53L0X_set_vcsel_pulse_period>
 80058a0:	4603      	mov	r3, r0
 80058a2:	73fb      	strb	r3, [r7, #15]
		VCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 80058a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80058a8:	4618      	mov	r0, r3
 80058aa:	3710      	adds	r7, #16
 80058ac:	46bd      	mov	sp, r7
 80058ae:	bd80      	pop	{r7, pc}

080058b0 <VL53L0X_GetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b086      	sub	sp, #24
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	60f8      	str	r0, [r7, #12]
 80058b8:	460b      	mov	r3, r1
 80058ba:	607a      	str	r2, [r7, #4]
 80058bc:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80058be:	2300      	movs	r3, #0
 80058c0:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 80058c2:	7afb      	ldrb	r3, [r7, #11]
 80058c4:	687a      	ldr	r2, [r7, #4]
 80058c6:	4619      	mov	r1, r3
 80058c8:	68f8      	ldr	r0, [r7, #12]
 80058ca:	f003 f9ad 	bl	8008c28 <VL53L0X_get_vcsel_pulse_period>
 80058ce:	4603      	mov	r3, r0
 80058d0:	75fb      	strb	r3, [r7, #23]
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 80058d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80058d6:	4618      	mov	r0, r3
 80058d8:	3718      	adds	r7, #24
 80058da:	46bd      	mov	sp, r7
 80058dc:	bd80      	pop	{r7, pc}
	...

080058e0 <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b086      	sub	sp, #24
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
 80058e8:	460b      	mov	r3, r1
 80058ea:	70fb      	strb	r3, [r7, #3]
 80058ec:	4613      	mov	r3, r2
 80058ee:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80058f0:	2300      	movs	r3, #0
 80058f2:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 80058f4:	2300      	movs	r3, #0
 80058f6:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfigNew = 0;
 80058f8:	2300      	movs	r3, #0
 80058fa:	75bb      	strb	r3, [r7, #22]
	uint32_t MeasurementTimingBudgetMicroSeconds;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80058fc:	f107 030f 	add.w	r3, r7, #15
 8005900:	461a      	mov	r2, r3
 8005902:	2101      	movs	r1, #1
 8005904:	6878      	ldr	r0, [r7, #4]
 8005906:	f004 faef 	bl	8009ee8 <VL53L0X_RdByte>
 800590a:	4603      	mov	r3, r0
 800590c:	75fb      	strb	r3, [r7, #23]
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;
 800590e:	7bfb      	ldrb	r3, [r7, #15]
 8005910:	75bb      	strb	r3, [r7, #22]

	if (Status == VL53L0X_ERROR_NONE) {
 8005912:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d15a      	bne.n	80059d0 <VL53L0X_SetSequenceStepEnable+0xf0>
		if (SequenceStepEnabled == 1) {
 800591a:	78bb      	ldrb	r3, [r7, #2]
 800591c:	2b01      	cmp	r3, #1
 800591e:	d12b      	bne.n	8005978 <VL53L0X_SetSequenceStepEnable+0x98>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 8005920:	78fb      	ldrb	r3, [r7, #3]
 8005922:	2b04      	cmp	r3, #4
 8005924:	d825      	bhi.n	8005972 <VL53L0X_SetSequenceStepEnable+0x92>
 8005926:	a201      	add	r2, pc, #4	; (adr r2, 800592c <VL53L0X_SetSequenceStepEnable+0x4c>)
 8005928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800592c:	08005941 	.word	0x08005941
 8005930:	0800594b 	.word	0x0800594b
 8005934:	08005955 	.word	0x08005955
 8005938:	0800595f 	.word	0x0800595f
 800593c:	08005969 	.word	0x08005969
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 8005940:	7dbb      	ldrb	r3, [r7, #22]
 8005942:	f043 0310 	orr.w	r3, r3, #16
 8005946:	75bb      	strb	r3, [r7, #22]
				break;
 8005948:	e043      	b.n	80059d2 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew |= 0x28;
 800594a:	7dbb      	ldrb	r3, [r7, #22]
 800594c:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8005950:	75bb      	strb	r3, [r7, #22]
				break;
 8005952:	e03e      	b.n	80059d2 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew |= 0x04;
 8005954:	7dbb      	ldrb	r3, [r7, #22]
 8005956:	f043 0304 	orr.w	r3, r3, #4
 800595a:	75bb      	strb	r3, [r7, #22]
				break;
 800595c:	e039      	b.n	80059d2 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew |= 0x40;
 800595e:	7dbb      	ldrb	r3, [r7, #22]
 8005960:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005964:	75bb      	strb	r3, [r7, #22]
				break;
 8005966:	e034      	b.n	80059d2 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew |= 0x80;
 8005968:	7dbb      	ldrb	r3, [r7, #22]
 800596a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800596e:	75bb      	strb	r3, [r7, #22]
				break;
 8005970:	e02f      	b.n	80059d2 <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005972:	23fc      	movs	r3, #252	; 0xfc
 8005974:	75fb      	strb	r3, [r7, #23]
 8005976:	e02c      	b.n	80059d2 <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		} else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
 8005978:	78fb      	ldrb	r3, [r7, #3]
 800597a:	2b04      	cmp	r3, #4
 800597c:	d825      	bhi.n	80059ca <VL53L0X_SetSequenceStepEnable+0xea>
 800597e:	a201      	add	r2, pc, #4	; (adr r2, 8005984 <VL53L0X_SetSequenceStepEnable+0xa4>)
 8005980:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005984:	08005999 	.word	0x08005999
 8005988:	080059a3 	.word	0x080059a3
 800598c:	080059ad 	.word	0x080059ad
 8005990:	080059b7 	.word	0x080059b7
 8005994:	080059c1 	.word	0x080059c1
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 8005998:	7dbb      	ldrb	r3, [r7, #22]
 800599a:	f023 0310 	bic.w	r3, r3, #16
 800599e:	75bb      	strb	r3, [r7, #22]
				break;
 80059a0:	e017      	b.n	80059d2 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew &= 0xd7;
 80059a2:	7dbb      	ldrb	r3, [r7, #22]
 80059a4:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 80059a8:	75bb      	strb	r3, [r7, #22]
				break;
 80059aa:	e012      	b.n	80059d2 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew &= 0xfb;
 80059ac:	7dbb      	ldrb	r3, [r7, #22]
 80059ae:	f023 0304 	bic.w	r3, r3, #4
 80059b2:	75bb      	strb	r3, [r7, #22]
				break;
 80059b4:	e00d      	b.n	80059d2 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew &= 0xbf;
 80059b6:	7dbb      	ldrb	r3, [r7, #22]
 80059b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059bc:	75bb      	strb	r3, [r7, #22]
				break;
 80059be:	e008      	b.n	80059d2 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew &= 0x7f;
 80059c0:	7dbb      	ldrb	r3, [r7, #22]
 80059c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80059c6:	75bb      	strb	r3, [r7, #22]
				break;
 80059c8:	e003      	b.n	80059d2 <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 80059ca:	23fc      	movs	r3, #252	; 0xfc
 80059cc:	75fb      	strb	r3, [r7, #23]
 80059ce:	e000      	b.n	80059d2 <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		}
 80059d0:	bf00      	nop
	}

	if (SequenceConfigNew != SequenceConfig) {
 80059d2:	7bfb      	ldrb	r3, [r7, #15]
 80059d4:	7dba      	ldrb	r2, [r7, #22]
 80059d6:	429a      	cmp	r2, r3
 80059d8:	d01e      	beq.n	8005a18 <VL53L0X_SetSequenceStepEnable+0x138>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
 80059da:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d107      	bne.n	80059f2 <VL53L0X_SetSequenceStepEnable+0x112>
			Status = VL53L0X_WrByte(Dev,
 80059e2:	7dbb      	ldrb	r3, [r7, #22]
 80059e4:	461a      	mov	r2, r3
 80059e6:	2101      	movs	r1, #1
 80059e8:	6878      	ldr	r0, [r7, #4]
 80059ea:	f004 f9fb 	bl	8009de4 <VL53L0X_WrByte>
 80059ee:	4603      	mov	r3, r0
 80059f0:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 80059f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d103      	bne.n	8005a02 <VL53L0X_SetSequenceStepEnable+0x122>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	7dba      	ldrb	r2, [r7, #22]
 80059fe:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130


		/* Recalculate timing budget */
		if (Status == VL53L0X_ERROR_NONE) {
 8005a02:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d106      	bne.n	8005a18 <VL53L0X_SetSequenceStepEnable+0x138>
			VL53L0X_GETPARAMETERFIELD(Dev,
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	695b      	ldr	r3, [r3, #20]
 8005a0e:	613b      	str	r3, [r7, #16]
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 8005a10:	6939      	ldr	r1, [r7, #16]
 8005a12:	6878      	ldr	r0, [r7, #4]
 8005a14:	f7ff ff0e 	bl	8005834 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
		}
	}

	LOG_FUNCTION_END(Status);

	return Status;
 8005a18:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	3718      	adds	r7, #24
 8005a20:	46bd      	mov	sp, r7
 8005a22:	bd80      	pop	{r7, pc}

08005a24 <sequence_step_enabled>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 8005a24:	b480      	push	{r7}
 8005a26:	b087      	sub	sp, #28
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	60f8      	str	r0, [r7, #12]
 8005a2c:	607b      	str	r3, [r7, #4]
 8005a2e:	460b      	mov	r3, r1
 8005a30:	72fb      	strb	r3, [r7, #11]
 8005a32:	4613      	mov	r3, r2
 8005a34:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005a36:	2300      	movs	r3, #0
 8005a38:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 8005a40:	7afb      	ldrb	r3, [r7, #11]
 8005a42:	2b04      	cmp	r3, #4
 8005a44:	d836      	bhi.n	8005ab4 <sequence_step_enabled+0x90>
 8005a46:	a201      	add	r2, pc, #4	; (adr r2, 8005a4c <sequence_step_enabled+0x28>)
 8005a48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a4c:	08005a61 	.word	0x08005a61
 8005a50:	08005a73 	.word	0x08005a73
 8005a54:	08005a85 	.word	0x08005a85
 8005a58:	08005a97 	.word	0x08005a97
 8005a5c:	08005aa9 	.word	0x08005aa9
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 8005a60:	7abb      	ldrb	r3, [r7, #10]
 8005a62:	111b      	asrs	r3, r3, #4
 8005a64:	b2db      	uxtb	r3, r3
 8005a66:	f003 0301 	and.w	r3, r3, #1
 8005a6a:	b2da      	uxtb	r2, r3
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	701a      	strb	r2, [r3, #0]
		break;
 8005a70:	e022      	b.n	8005ab8 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 8005a72:	7abb      	ldrb	r3, [r7, #10]
 8005a74:	10db      	asrs	r3, r3, #3
 8005a76:	b2db      	uxtb	r3, r3
 8005a78:	f003 0301 	and.w	r3, r3, #1
 8005a7c:	b2da      	uxtb	r2, r3
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	701a      	strb	r2, [r3, #0]
		break;
 8005a82:	e019      	b.n	8005ab8 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 8005a84:	7abb      	ldrb	r3, [r7, #10]
 8005a86:	109b      	asrs	r3, r3, #2
 8005a88:	b2db      	uxtb	r3, r3
 8005a8a:	f003 0301 	and.w	r3, r3, #1
 8005a8e:	b2da      	uxtb	r2, r3
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	701a      	strb	r2, [r3, #0]
		break;
 8005a94:	e010      	b.n	8005ab8 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 8005a96:	7abb      	ldrb	r3, [r7, #10]
 8005a98:	119b      	asrs	r3, r3, #6
 8005a9a:	b2db      	uxtb	r3, r3
 8005a9c:	f003 0301 	and.w	r3, r3, #1
 8005aa0:	b2da      	uxtb	r2, r3
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	701a      	strb	r2, [r3, #0]
		break;
 8005aa6:	e007      	b.n	8005ab8 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 8005aa8:	7abb      	ldrb	r3, [r7, #10]
 8005aaa:	09db      	lsrs	r3, r3, #7
 8005aac:	b2da      	uxtb	r2, r3
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	701a      	strb	r2, [r3, #0]
		break;
 8005ab2:	e001      	b.n	8005ab8 <sequence_step_enabled+0x94>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005ab4:	23fc      	movs	r3, #252	; 0xfc
 8005ab6:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005ab8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005abc:	4618      	mov	r0, r3
 8005abe:	371c      	adds	r7, #28
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac6:	4770      	bx	lr

08005ac8 <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b084      	sub	sp, #16
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
 8005ad0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	73bb      	strb	r3, [r7, #14]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8005ada:	f107 030e 	add.w	r3, r7, #14
 8005ade:	461a      	mov	r2, r3
 8005ae0:	2101      	movs	r1, #1
 8005ae2:	6878      	ldr	r0, [r7, #4]
 8005ae4:	f004 fa00 	bl	8009ee8 <VL53L0X_RdByte>
 8005ae8:	4603      	mov	r3, r0
 8005aea:	73fb      	strb	r3, [r7, #15]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 8005aec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d107      	bne.n	8005b04 <VL53L0X_GetSequenceStepEnables+0x3c>
		Status = sequence_step_enabled(Dev,
 8005af4:	7bba      	ldrb	r2, [r7, #14]
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	2100      	movs	r1, #0
 8005afa:	6878      	ldr	r0, [r7, #4]
 8005afc:	f7ff ff92 	bl	8005a24 <sequence_step_enabled>
 8005b00:	4603      	mov	r3, r0
 8005b02:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8005b04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d108      	bne.n	8005b1e <VL53L0X_GetSequenceStepEnables+0x56>
		Status = sequence_step_enabled(Dev,
 8005b0c:	7bba      	ldrb	r2, [r7, #14]
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	3302      	adds	r3, #2
 8005b12:	2101      	movs	r1, #1
 8005b14:	6878      	ldr	r0, [r7, #4]
 8005b16:	f7ff ff85 	bl	8005a24 <sequence_step_enabled>
 8005b1a:	4603      	mov	r3, r0
 8005b1c:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8005b1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d108      	bne.n	8005b38 <VL53L0X_GetSequenceStepEnables+0x70>
		Status = sequence_step_enabled(Dev,
 8005b26:	7bba      	ldrb	r2, [r7, #14]
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	3301      	adds	r3, #1
 8005b2c:	2102      	movs	r1, #2
 8005b2e:	6878      	ldr	r0, [r7, #4]
 8005b30:	f7ff ff78 	bl	8005a24 <sequence_step_enabled>
 8005b34:	4603      	mov	r3, r0
 8005b36:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8005b38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d108      	bne.n	8005b52 <VL53L0X_GetSequenceStepEnables+0x8a>
		Status = sequence_step_enabled(Dev,
 8005b40:	7bba      	ldrb	r2, [r7, #14]
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	3303      	adds	r3, #3
 8005b46:	2103      	movs	r1, #3
 8005b48:	6878      	ldr	r0, [r7, #4]
 8005b4a:	f7ff ff6b 	bl	8005a24 <sequence_step_enabled>
 8005b4e:	4603      	mov	r3, r0
 8005b50:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8005b52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d108      	bne.n	8005b6c <VL53L0X_GetSequenceStepEnables+0xa4>
		Status = sequence_step_enabled(Dev,
 8005b5a:	7bba      	ldrb	r2, [r7, #14]
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	3304      	adds	r3, #4
 8005b60:	2104      	movs	r1, #4
 8005b62:	6878      	ldr	r0, [r7, #4]
 8005b64:	f7ff ff5e 	bl	8005a24 <sequence_step_enabled>
 8005b68:	4603      	mov	r3, r0
 8005b6a:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005b6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005b70:	4618      	mov	r0, r3
 8005b72:	3710      	adds	r7, #16
 8005b74:	46bd      	mov	sp, r7
 8005b76:	bd80      	pop	{r7, pc}

08005b78 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b084      	sub	sp, #16
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
 8005b80:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005b82:	2300      	movs	r3, #0
 8005b84:	73fb      	strb	r3, [r7, #15]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 8005b86:	f107 030c 	add.w	r3, r7, #12
 8005b8a:	461a      	mov	r2, r3
 8005b8c:	21f8      	movs	r1, #248	; 0xf8
 8005b8e:	6878      	ldr	r0, [r7, #4]
 8005b90:	f004 f9d4 	bl	8009f3c <VL53L0X_RdWord>
 8005b94:	4603      	mov	r3, r0
 8005b96:	73fb      	strb	r3, [r7, #15]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 8005b98:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d108      	bne.n	8005bb2 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
		Status = VL53L0X_RdDWord(Dev,
 8005ba0:	f107 0308 	add.w	r3, r7, #8
 8005ba4:	461a      	mov	r2, r3
 8005ba6:	2104      	movs	r1, #4
 8005ba8:	6878      	ldr	r0, [r7, #4]
 8005baa:	f004 f9ff 	bl	8009fac <VL53L0X_RdDWord>
 8005bae:	4603      	mov	r3, r0
 8005bb0:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005bb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d10c      	bne.n	8005bd4 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5c>
		if (osc_calibrate_val != 0) {
 8005bba:	89bb      	ldrh	r3, [r7, #12]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d005      	beq.n	8005bcc <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x54>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	89ba      	ldrh	r2, [r7, #12]
 8005bc4:	fbb3 f2f2 	udiv	r2, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	681a      	ldr	r2, [r3, #0]
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	619a      	str	r2, [r3, #24]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005bd4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005bd8:	4618      	mov	r0, r3
 8005bda:	3710      	adds	r7, #16
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	bd80      	pop	{r7, pc}

08005be0 <VL53L0X_GetXTalkCompensationEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
	uint8_t *pXTalkCompensationEnable)
{
 8005be0:	b480      	push	{r7}
 8005be2:	b085      	sub	sp, #20
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
 8005be8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005bea:	2300      	movs	r3, #0
 8005bec:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp8;
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	7f1b      	ldrb	r3, [r3, #28]
 8005bf2:	73bb      	strb	r3, [r7, #14]
	*pXTalkCompensationEnable = Temp8;
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	7bba      	ldrb	r2, [r7, #14]
 8005bf8:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8005bfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005bfe:	4618      	mov	r0, r3
 8005c00:	3714      	adds	r7, #20
 8005c02:	46bd      	mov	sp, r7
 8005c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c08:	4770      	bx	lr

08005c0a <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 8005c0a:	b580      	push	{r7, lr}
 8005c0c:	b086      	sub	sp, #24
 8005c0e:	af00      	add	r7, sp, #0
 8005c10:	6078      	str	r0, [r7, #4]
 8005c12:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005c14:	2300      	movs	r3, #0
 8005c16:	75fb      	strb	r3, [r7, #23]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 8005c18:	f107 030e 	add.w	r3, r7, #14
 8005c1c:	461a      	mov	r2, r3
 8005c1e:	2120      	movs	r1, #32
 8005c20:	6878      	ldr	r0, [r7, #4]
 8005c22:	f004 f98b 	bl	8009f3c <VL53L0X_RdWord>
 8005c26:	4603      	mov	r3, r0
 8005c28:	75fb      	strb	r3, [r7, #23]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 8005c2a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d118      	bne.n	8005c64 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
		if (Value == 0) {
 8005c32:	89fb      	ldrh	r3, [r7, #14]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d109      	bne.n	8005c4c <VL53L0X_GetXTalkCompensationRateMegaCps+0x42>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6a1b      	ldr	r3, [r3, #32]
 8005c3c:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	693a      	ldr	r2, [r7, #16]
 8005c42:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2200      	movs	r2, #0
 8005c48:	771a      	strb	r2, [r3, #28]
 8005c4a:	e00b      	b.n	8005c64 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 8005c4c:	89fb      	ldrh	r3, [r7, #14]
 8005c4e:	00db      	lsls	r3, r3, #3
 8005c50:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	693a      	ldr	r2, [r7, #16]
 8005c56:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	693a      	ldr	r2, [r7, #16]
 8005c5c:	621a      	str	r2, [r3, #32]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2201      	movs	r2, #1
 8005c62:	771a      	strb	r2, [r3, #28]
				1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005c64:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005c68:	4618      	mov	r0, r3
 8005c6a:	3718      	adds	r7, #24
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	bd80      	pop	{r7, pc}

08005c70 <VL53L0X_SetLimitCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b086      	sub	sp, #24
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
 8005c78:	460b      	mov	r3, r1
 8005c7a:	807b      	strh	r3, [r7, #2]
 8005c7c:	4613      	mov	r3, r2
 8005c7e:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005c80:	2300      	movs	r3, #0
 8005c82:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t TempFix1616 = 0;
 8005c84:	2300      	movs	r3, #0
 8005c86:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 8005c88:	2300      	movs	r3, #0
 8005c8a:	73fb      	strb	r3, [r7, #15]
	uint8_t LimitCheckDisable = 0;
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8005c90:	887b      	ldrh	r3, [r7, #2]
 8005c92:	2b05      	cmp	r3, #5
 8005c94:	d902      	bls.n	8005c9c <VL53L0X_SetLimitCheckEnable+0x2c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005c96:	23fc      	movs	r3, #252	; 0xfc
 8005c98:	75fb      	strb	r3, [r7, #23]
 8005c9a:	e05b      	b.n	8005d54 <VL53L0X_SetLimitCheckEnable+0xe4>
	} else {
		if (LimitCheckEnable == 0) {
 8005c9c:	787b      	ldrb	r3, [r7, #1]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d106      	bne.n	8005cb0 <VL53L0X_SetLimitCheckEnable+0x40>
			TempFix1616 = 0;
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	73fb      	strb	r3, [r7, #15]
			LimitCheckDisable = 1;
 8005caa:	2301      	movs	r3, #1
 8005cac:	73bb      	strb	r3, [r7, #14]
 8005cae:	e00a      	b.n	8005cc6 <VL53L0X_SetLimitCheckEnable+0x56>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8005cb0:	887b      	ldrh	r3, [r7, #2]
 8005cb2:	687a      	ldr	r2, [r7, #4]
 8005cb4:	330c      	adds	r3, #12
 8005cb6:	009b      	lsls	r3, r3, #2
 8005cb8:	4413      	add	r3, r2
 8005cba:	685b      	ldr	r3, [r3, #4]
 8005cbc:	613b      	str	r3, [r7, #16]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	73bb      	strb	r3, [r7, #14]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	73fb      	strb	r3, [r7, #15]
		}

		switch (LimitCheckId) {
 8005cc6:	887b      	ldrh	r3, [r7, #2]
 8005cc8:	2b05      	cmp	r3, #5
 8005cca:	d841      	bhi.n	8005d50 <VL53L0X_SetLimitCheckEnable+0xe0>
 8005ccc:	a201      	add	r2, pc, #4	; (adr r2, 8005cd4 <VL53L0X_SetLimitCheckEnable+0x64>)
 8005cce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cd2:	bf00      	nop
 8005cd4:	08005ced 	.word	0x08005ced
 8005cd8:	08005cf7 	.word	0x08005cf7
 8005cdc:	08005d0d 	.word	0x08005d0d
 8005ce0:	08005d17 	.word	0x08005d17
 8005ce4:	08005d21 	.word	0x08005d21
 8005ce8:	08005d39 	.word	0x08005d39

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	7bfa      	ldrb	r2, [r7, #15]
 8005cf0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckEnableInt);

			break;
 8005cf4:	e02e      	b.n	8005d54 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 8005cf6:	693b      	ldr	r3, [r7, #16]
 8005cf8:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8005cfa:	b29b      	uxth	r3, r3
 8005cfc:	461a      	mov	r2, r3
 8005cfe:	2144      	movs	r1, #68	; 0x44
 8005d00:	6878      	ldr	r0, [r7, #4]
 8005d02:	f004 f893 	bl	8009e2c <VL53L0X_WrWord>
 8005d06:	4603      	mov	r3, r0
 8005d08:	75fb      	strb	r3, [r7, #23]

			break;
 8005d0a:	e023      	b.n	8005d54 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	7bfa      	ldrb	r2, [r7, #15]
 8005d10:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckEnableInt);

			break;
 8005d14:	e01e      	b.n	8005d54 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	7bfa      	ldrb	r2, [r7, #15]
 8005d1a:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckEnableInt);

			break;
 8005d1e:	e019      	b.n	8005d54 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
 8005d20:	7bbb      	ldrb	r3, [r7, #14]
 8005d22:	005b      	lsls	r3, r3, #1
 8005d24:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8005d26:	7b7b      	ldrb	r3, [r7, #13]
 8005d28:	22fe      	movs	r2, #254	; 0xfe
 8005d2a:	2160      	movs	r1, #96	; 0x60
 8005d2c:	6878      	ldr	r0, [r7, #4]
 8005d2e:	f004 f8a7 	bl	8009e80 <VL53L0X_UpdateByte>
 8005d32:	4603      	mov	r3, r0
 8005d34:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xFE, Temp8);

			break;
 8005d36:	e00d      	b.n	8005d54 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
 8005d38:	7bbb      	ldrb	r3, [r7, #14]
 8005d3a:	011b      	lsls	r3, r3, #4
 8005d3c:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8005d3e:	7b7b      	ldrb	r3, [r7, #13]
 8005d40:	22ef      	movs	r2, #239	; 0xef
 8005d42:	2160      	movs	r1, #96	; 0x60
 8005d44:	6878      	ldr	r0, [r7, #4]
 8005d46:	f004 f89b 	bl	8009e80 <VL53L0X_UpdateByte>
 8005d4a:	4603      	mov	r3, r0
 8005d4c:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xEF, Temp8);

			break;
 8005d4e:	e001      	b.n	8005d54 <VL53L0X_SetLimitCheckEnable+0xe4>


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005d50:	23fc      	movs	r3, #252	; 0xfc
 8005d52:	75fb      	strb	r3, [r7, #23]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005d54:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d10f      	bne.n	8005d7c <VL53L0X_SetLimitCheckEnable+0x10c>
		if (LimitCheckEnable == 0) {
 8005d5c:	787b      	ldrb	r3, [r7, #1]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d106      	bne.n	8005d70 <VL53L0X_SetLimitCheckEnable+0x100>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8005d62:	887b      	ldrh	r3, [r7, #2]
 8005d64:	687a      	ldr	r2, [r7, #4]
 8005d66:	4413      	add	r3, r2
 8005d68:	2200      	movs	r2, #0
 8005d6a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8005d6e:	e005      	b.n	8005d7c <VL53L0X_SetLimitCheckEnable+0x10c>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8005d70:	887b      	ldrh	r3, [r7, #2]
 8005d72:	687a      	ldr	r2, [r7, #4]
 8005d74:	4413      	add	r3, r2
 8005d76:	2201      	movs	r2, #1
 8005d78:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				LimitCheckId, 1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005d7c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005d80:	4618      	mov	r0, r3
 8005d82:	3718      	adds	r7, #24
 8005d84:	46bd      	mov	sp, r7
 8005d86:	bd80      	pop	{r7, pc}

08005d88 <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 8005d88:	b480      	push	{r7}
 8005d8a:	b087      	sub	sp, #28
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	60f8      	str	r0, [r7, #12]
 8005d90:	460b      	mov	r3, r1
 8005d92:	607a      	str	r2, [r7, #4]
 8005d94:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005d96:	2300      	movs	r3, #0
 8005d98:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8005d9a:	897b      	ldrh	r3, [r7, #10]
 8005d9c:	2b05      	cmp	r3, #5
 8005d9e:	d905      	bls.n	8005dac <VL53L0X_GetLimitCheckEnable+0x24>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005da0:	23fc      	movs	r3, #252	; 0xfc
 8005da2:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2200      	movs	r2, #0
 8005da8:	701a      	strb	r2, [r3, #0]
 8005daa:	e008      	b.n	8005dbe <VL53L0X_GetLimitCheckEnable+0x36>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8005dac:	897b      	ldrh	r3, [r7, #10]
 8005dae:	68fa      	ldr	r2, [r7, #12]
 8005db0:	4413      	add	r3, r2
 8005db2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005db6:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	7dba      	ldrb	r2, [r7, #22]
 8005dbc:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005dbe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	371c      	adds	r7, #28
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dcc:	4770      	bx	lr
	...

08005dd0 <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b086      	sub	sp, #24
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	60f8      	str	r0, [r7, #12]
 8005dd8:	460b      	mov	r3, r1
 8005dda:	607a      	str	r2, [r7, #4]
 8005ddc:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005dde:	2300      	movs	r3, #0
 8005de0:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 8005de2:	897b      	ldrh	r3, [r7, #10]
 8005de4:	68fa      	ldr	r2, [r7, #12]
 8005de6:	4413      	add	r3, r2
 8005de8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005dec:	75bb      	strb	r3, [r7, #22]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 8005dee:	7dbb      	ldrb	r3, [r7, #22]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d107      	bne.n	8005e04 <VL53L0X_SetLimitCheckValue+0x34>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8005df4:	897b      	ldrh	r3, [r7, #10]
 8005df6:	68fa      	ldr	r2, [r7, #12]
 8005df8:	330c      	adds	r3, #12
 8005dfa:	009b      	lsls	r3, r3, #2
 8005dfc:	4413      	add	r3, r2
 8005dfe:	687a      	ldr	r2, [r7, #4]
 8005e00:	605a      	str	r2, [r3, #4]
 8005e02:	e040      	b.n	8005e86 <VL53L0X_SetLimitCheckValue+0xb6>
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 8005e04:	897b      	ldrh	r3, [r7, #10]
 8005e06:	2b05      	cmp	r3, #5
 8005e08:	d830      	bhi.n	8005e6c <VL53L0X_SetLimitCheckValue+0x9c>
 8005e0a:	a201      	add	r2, pc, #4	; (adr r2, 8005e10 <VL53L0X_SetLimitCheckValue+0x40>)
 8005e0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e10:	08005e29 	.word	0x08005e29
 8005e14:	08005e31 	.word	0x08005e31
 8005e18:	08005e47 	.word	0x08005e47
 8005e1c:	08005e4f 	.word	0x08005e4f
 8005e20:	08005e57 	.word	0x08005e57
 8005e24:	08005e57 	.word	0x08005e57

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	687a      	ldr	r2, [r7, #4]
 8005e2c:	635a      	str	r2, [r3, #52]	; 0x34
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 8005e2e:	e01f      	b.n	8005e70 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8005e34:	b29b      	uxth	r3, r3
 8005e36:	461a      	mov	r2, r3
 8005e38:	2144      	movs	r1, #68	; 0x44
 8005e3a:	68f8      	ldr	r0, [r7, #12]
 8005e3c:	f003 fff6 	bl	8009e2c <VL53L0X_WrWord>
 8005e40:	4603      	mov	r3, r0
 8005e42:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8005e44:	e014      	b.n	8005e70 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	687a      	ldr	r2, [r7, #4]
 8005e4a:	63da      	str	r2, [r3, #60]	; 0x3c
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckValue);

			break;
 8005e4c:	e010      	b.n	8005e70 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	687a      	ldr	r2, [r7, #4]
 8005e52:	641a      	str	r2, [r3, #64]	; 0x40
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckValue);

			break;
 8005e54:	e00c      	b.n	8005e70 <VL53L0X_SetLimitCheckValue+0xa0>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8005e5a:	b29b      	uxth	r3, r3
 8005e5c:	461a      	mov	r2, r3
 8005e5e:	2164      	movs	r1, #100	; 0x64
 8005e60:	68f8      	ldr	r0, [r7, #12]
 8005e62:	f003 ffe3 	bl	8009e2c <VL53L0X_WrWord>
 8005e66:	4603      	mov	r3, r0
 8005e68:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8005e6a:	e001      	b.n	8005e70 <VL53L0X_SetLimitCheckValue+0xa0>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005e6c:	23fc      	movs	r3, #252	; 0xfc
 8005e6e:	75fb      	strb	r3, [r7, #23]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 8005e70:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d106      	bne.n	8005e86 <VL53L0X_SetLimitCheckValue+0xb6>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8005e78:	897b      	ldrh	r3, [r7, #10]
 8005e7a:	68fa      	ldr	r2, [r7, #12]
 8005e7c:	330c      	adds	r3, #12
 8005e7e:	009b      	lsls	r3, r3, #2
 8005e80:	4413      	add	r3, r2
 8005e82:	687a      	ldr	r2, [r7, #4]
 8005e84:	605a      	str	r2, [r3, #4]
				LimitCheckId, LimitCheckValue);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005e86:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	3718      	adds	r7, #24
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	bd80      	pop	{r7, pc}
 8005e92:	bf00      	nop

08005e94 <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b088      	sub	sp, #32
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	60f8      	str	r0, [r7, #12]
 8005e9c:	460b      	mov	r3, r1
 8005e9e:	607a      	str	r2, [r7, #4]
 8005ea0:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	77bb      	strb	r3, [r7, #30]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 8005eaa:	897b      	ldrh	r3, [r7, #10]
 8005eac:	2b05      	cmp	r3, #5
 8005eae:	d847      	bhi.n	8005f40 <VL53L0X_GetLimitCheckValue+0xac>
 8005eb0:	a201      	add	r2, pc, #4	; (adr r2, 8005eb8 <VL53L0X_GetLimitCheckValue+0x24>)
 8005eb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eb6:	bf00      	nop
 8005eb8:	08005ed1 	.word	0x08005ed1
 8005ebc:	08005edd 	.word	0x08005edd
 8005ec0:	08005f03 	.word	0x08005f03
 8005ec4:	08005f0f 	.word	0x08005f0f
 8005ec8:	08005f1b 	.word	0x08005f1b
 8005ecc:	08005f1b 	.word	0x08005f1b

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ed4:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	77bb      	strb	r3, [r7, #30]
		break;
 8005eda:	e033      	b.n	8005f44 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8005edc:	f107 0316 	add.w	r3, r7, #22
 8005ee0:	461a      	mov	r2, r3
 8005ee2:	2144      	movs	r1, #68	; 0x44
 8005ee4:	68f8      	ldr	r0, [r7, #12]
 8005ee6:	f004 f829 	bl	8009f3c <VL53L0X_RdWord>
 8005eea:	4603      	mov	r3, r0
 8005eec:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8005eee:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d102      	bne.n	8005efc <VL53L0X_GetLimitCheckValue+0x68>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8005ef6:	8afb      	ldrh	r3, [r7, #22]
 8005ef8:	025b      	lsls	r3, r3, #9
 8005efa:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 8005efc:	2301      	movs	r3, #1
 8005efe:	77bb      	strb	r3, [r7, #30]
		break;
 8005f00:	e020      	b.n	8005f44 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f06:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 8005f08:	2300      	movs	r3, #0
 8005f0a:	77bb      	strb	r3, [r7, #30]
		break;
 8005f0c:	e01a      	b.n	8005f44 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f12:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, TempFix1616);
		EnableZeroValue = 0;
 8005f14:	2300      	movs	r3, #0
 8005f16:	77bb      	strb	r3, [r7, #30]
		break;
 8005f18:	e014      	b.n	8005f44 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8005f1a:	f107 0316 	add.w	r3, r7, #22
 8005f1e:	461a      	mov	r2, r3
 8005f20:	2164      	movs	r1, #100	; 0x64
 8005f22:	68f8      	ldr	r0, [r7, #12]
 8005f24:	f004 f80a 	bl	8009f3c <VL53L0X_RdWord>
 8005f28:	4603      	mov	r3, r0
 8005f2a:	77fb      	strb	r3, [r7, #31]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8005f2c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d102      	bne.n	8005f3a <VL53L0X_GetLimitCheckValue+0xa6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8005f34:	8afb      	ldrh	r3, [r7, #22]
 8005f36:	025b      	lsls	r3, r3, #9
 8005f38:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	77bb      	strb	r3, [r7, #30]
		break;
 8005f3e:	e001      	b.n	8005f44 <VL53L0X_GetLimitCheckValue+0xb0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005f40:	23fc      	movs	r3, #252	; 0xfc
 8005f42:	77fb      	strb	r3, [r7, #31]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005f44:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d12a      	bne.n	8005fa2 <VL53L0X_GetLimitCheckValue+0x10e>

		if (EnableZeroValue == 1) {
 8005f4c:	7fbb      	ldrb	r3, [r7, #30]
 8005f4e:	2b01      	cmp	r3, #1
 8005f50:	d124      	bne.n	8005f9c <VL53L0X_GetLimitCheckValue+0x108>

			if (TempFix1616 == 0) {
 8005f52:	69bb      	ldr	r3, [r7, #24]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d110      	bne.n	8005f7a <VL53L0X_GetLimitCheckValue+0xe6>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 8005f58:	897b      	ldrh	r3, [r7, #10]
 8005f5a:	68fa      	ldr	r2, [r7, #12]
 8005f5c:	330c      	adds	r3, #12
 8005f5e:	009b      	lsls	r3, r3, #2
 8005f60:	4413      	add	r3, r2
 8005f62:	685b      	ldr	r3, [r3, #4]
 8005f64:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	69ba      	ldr	r2, [r7, #24]
 8005f6a:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8005f6c:	897b      	ldrh	r3, [r7, #10]
 8005f6e:	68fa      	ldr	r2, [r7, #12]
 8005f70:	4413      	add	r3, r2
 8005f72:	2200      	movs	r2, #0
 8005f74:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8005f78:	e013      	b.n	8005fa2 <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	69ba      	ldr	r2, [r7, #24]
 8005f7e:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8005f80:	897b      	ldrh	r3, [r7, #10]
 8005f82:	68fa      	ldr	r2, [r7, #12]
 8005f84:	330c      	adds	r3, #12
 8005f86:	009b      	lsls	r3, r3, #2
 8005f88:	4413      	add	r3, r2
 8005f8a:	69ba      	ldr	r2, [r7, #24]
 8005f8c:	605a      	str	r2, [r3, #4]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8005f8e:	897b      	ldrh	r3, [r7, #10]
 8005f90:	68fa      	ldr	r2, [r7, #12]
 8005f92:	4413      	add	r3, r2
 8005f94:	2201      	movs	r2, #1
 8005f96:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8005f9a:	e002      	b.n	8005fa2 <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	69ba      	ldr	r2, [r7, #24]
 8005fa0:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005fa2:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	3720      	adds	r7, #32
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bd80      	pop	{r7, pc}
 8005fae:	bf00      	nop

08005fb0 <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b084      	sub	sp, #16
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
 8005fb8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005fba:	2300      	movs	r3, #0
 8005fbc:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 8005fbe:	f107 030e 	add.w	r3, r7, #14
 8005fc2:	461a      	mov	r2, r3
 8005fc4:	2101      	movs	r1, #1
 8005fc6:	6878      	ldr	r0, [r7, #4]
 8005fc8:	f003 ff8e 	bl	8009ee8 <VL53L0X_RdByte>
 8005fcc:	4603      	mov	r3, r0
 8005fce:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 8005fd0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d10e      	bne.n	8005ff6 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		PALDevDataSet(Dev, SequenceConfig, data);
 8005fd8:	7bba      	ldrb	r2, [r7, #14]
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		if (data & (0x01 << 7))
 8005fe0:	7bbb      	ldrb	r3, [r7, #14]
 8005fe2:	b25b      	sxtb	r3, r3
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	da03      	bge.n	8005ff0 <VL53L0X_GetWrapAroundCheckEnable+0x40>
			*pWrapAroundCheckEnable = 0x01;
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	2201      	movs	r2, #1
 8005fec:	701a      	strb	r2, [r3, #0]
 8005fee:	e002      	b.n	8005ff6 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		else
			*pWrapAroundCheckEnable = 0x00;
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8005ff6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d104      	bne.n	8006008 <VL53L0X_GetWrapAroundCheckEnable+0x58>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	781a      	ldrb	r2, [r3, #0]
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006008:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800600c:	4618      	mov	r0, r3
 800600e:	3710      	adds	r7, #16
 8006010:	46bd      	mov	sp, r7
 8006012:	bd80      	pop	{r7, pc}

08006014 <VL53L0X_PerformSingleMeasurement>:

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev)
{
 8006014:	b580      	push	{r7, lr}
 8006016:	b084      	sub	sp, #16
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800601c:	2300      	movs	r3, #0
 800601e:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8006020:	f107 030e 	add.w	r3, r7, #14
 8006024:	4619      	mov	r1, r3
 8006026:	6878      	ldr	r0, [r7, #4]
 8006028:	f7ff fbd2 	bl	80057d0 <VL53L0X_GetDeviceMode>
 800602c:	4603      	mov	r3, r0
 800602e:	73fb      	strb	r3, [r7, #15]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8006030:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d107      	bne.n	8006048 <VL53L0X_PerformSingleMeasurement+0x34>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8006038:	7bbb      	ldrb	r3, [r7, #14]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d104      	bne.n	8006048 <VL53L0X_PerformSingleMeasurement+0x34>
		Status = VL53L0X_StartMeasurement(Dev);
 800603e:	6878      	ldr	r0, [r7, #4]
 8006040:	f000 f898 	bl	8006174 <VL53L0X_StartMeasurement>
 8006044:	4603      	mov	r3, r0
 8006046:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8006048:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d104      	bne.n	800605a <VL53L0X_PerformSingleMeasurement+0x46>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8006050:	6878      	ldr	r0, [r7, #4]
 8006052:	f001 fb3f 	bl	80076d4 <VL53L0X_measurement_poll_for_completion>
 8006056:	4603      	mov	r3, r0
 8006058:	73fb      	strb	r3, [r7, #15]


	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 800605a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d106      	bne.n	8006070 <VL53L0X_PerformSingleMeasurement+0x5c>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8006062:	7bbb      	ldrb	r3, [r7, #14]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d103      	bne.n	8006070 <VL53L0X_PerformSingleMeasurement+0x5c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2203      	movs	r2, #3
 800606c:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132


	LOG_FUNCTION_END(Status);
	return Status;
 8006070:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006074:	4618      	mov	r0, r3
 8006076:	3710      	adds	r7, #16
 8006078:	46bd      	mov	sp, r7
 800607a:	bd80      	pop	{r7, pc}

0800607c <VL53L0X_PerformRefCalibration>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev, uint8_t *pVhvSettings,
	uint8_t *pPhaseCal)
{
 800607c:	b580      	push	{r7, lr}
 800607e:	b086      	sub	sp, #24
 8006080:	af00      	add	r7, sp, #0
 8006082:	60f8      	str	r0, [r7, #12]
 8006084:	60b9      	str	r1, [r7, #8]
 8006086:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006088:	2300      	movs	r3, #0
 800608a:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 800608c:	2301      	movs	r3, #1
 800608e:	687a      	ldr	r2, [r7, #4]
 8006090:	68b9      	ldr	r1, [r7, #8]
 8006092:	68f8      	ldr	r0, [r7, #12]
 8006094:	f001 fae1 	bl	800765a <VL53L0X_perform_ref_calibration>
 8006098:	4603      	mov	r3, r0
 800609a:	75fb      	strb	r3, [r7, #23]
		pPhaseCal, 1);

	LOG_FUNCTION_END(Status);
	return Status;
 800609c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80060a0:	4618      	mov	r0, r3
 80060a2:	3718      	adds	r7, #24
 80060a4:	46bd      	mov	sp, r7
 80060a6:	bd80      	pop	{r7, pc}

080060a8 <VL53L0X_CheckAndLoadInterruptSettings>:
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
	uint8_t StartNotStopFlag)
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b086      	sub	sp, #24
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
 80060b0:	460b      	mov	r3, r1
 80060b2:	70fb      	strb	r3, [r7, #3]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80060b4:	2300      	movs	r3, #0
 80060b6:	75fb      	strb	r3, [r7, #23]

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 80060be:	75bb      	strb	r3, [r7, #22]
		Pin0GpioFunctionality);

	if ((InterruptConfig ==
 80060c0:	7dbb      	ldrb	r3, [r7, #22]
 80060c2:	2b01      	cmp	r3, #1
 80060c4:	d005      	beq.n	80060d2 <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW) ||
 80060c6:	7dbb      	ldrb	r3, [r7, #22]
 80060c8:	2b02      	cmp	r3, #2
 80060ca:	d002      	beq.n	80060d2 <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 80060cc:	7dbb      	ldrb	r3, [r7, #22]
 80060ce:	2b03      	cmp	r3, #3
 80060d0:	d147      	bne.n	8006162 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT)) {

		Status = VL53L0X_GetInterruptThresholds(Dev,
 80060d2:	f107 030c 	add.w	r3, r7, #12
 80060d6:	f107 0210 	add.w	r2, r7, #16
 80060da:	2101      	movs	r1, #1
 80060dc:	6878      	ldr	r0, [r7, #4]
 80060de:	f000 fbc3 	bl	8006868 <VL53L0X_GetInterruptThresholds>
 80060e2:	4603      	mov	r3, r0
 80060e4:	75fb      	strb	r3, [r7, #23]
			VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
			&ThresholdLow, &ThresholdHigh);

		if (((ThresholdLow > 255*65536) ||
 80060e6:	693b      	ldr	r3, [r7, #16]
 80060e8:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 80060ec:	d803      	bhi.n	80060f6 <VL53L0X_CheckAndLoadInterruptSettings+0x4e>
			(ThresholdHigh > 255*65536)) &&
 80060ee:	68fb      	ldr	r3, [r7, #12]
		if (((ThresholdLow > 255*65536) ||
 80060f0:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 80060f4:	d935      	bls.n	8006162 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(ThresholdHigh > 255*65536)) &&
 80060f6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d131      	bne.n	8006162 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 80060fe:	78fb      	ldrb	r3, [r7, #3]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d006      	beq.n	8006112 <VL53L0X_CheckAndLoadInterruptSettings+0x6a>
				Status = VL53L0X_load_tuning_settings(Dev,
 8006104:	491a      	ldr	r1, [pc, #104]	; (8006170 <VL53L0X_CheckAndLoadInterruptSettings+0xc8>)
 8006106:	6878      	ldr	r0, [r7, #4]
 8006108:	f002 ff56 	bl	8008fb8 <VL53L0X_load_tuning_settings>
 800610c:	4603      	mov	r3, r0
 800610e:	75fb      	strb	r3, [r7, #23]
 8006110:	e027      	b.n	8006162 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
					InterruptThresholdSettings);
			} else {
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 8006112:	2204      	movs	r2, #4
 8006114:	21ff      	movs	r1, #255	; 0xff
 8006116:	6878      	ldr	r0, [r7, #4]
 8006118:	f003 fe64 	bl	8009de4 <VL53L0X_WrByte>
 800611c:	4603      	mov	r3, r0
 800611e:	461a      	mov	r2, r3
 8006120:	7dfb      	ldrb	r3, [r7, #23]
 8006122:	4313      	orrs	r3, r2
 8006124:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 8006126:	2200      	movs	r2, #0
 8006128:	2170      	movs	r1, #112	; 0x70
 800612a:	6878      	ldr	r0, [r7, #4]
 800612c:	f003 fe5a 	bl	8009de4 <VL53L0X_WrByte>
 8006130:	4603      	mov	r3, r0
 8006132:	461a      	mov	r2, r3
 8006134:	7dfb      	ldrb	r3, [r7, #23]
 8006136:	4313      	orrs	r3, r2
 8006138:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800613a:	2200      	movs	r2, #0
 800613c:	21ff      	movs	r1, #255	; 0xff
 800613e:	6878      	ldr	r0, [r7, #4]
 8006140:	f003 fe50 	bl	8009de4 <VL53L0X_WrByte>
 8006144:	4603      	mov	r3, r0
 8006146:	461a      	mov	r2, r3
 8006148:	7dfb      	ldrb	r3, [r7, #23]
 800614a:	4313      	orrs	r3, r2
 800614c:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800614e:	2200      	movs	r2, #0
 8006150:	2180      	movs	r1, #128	; 0x80
 8006152:	6878      	ldr	r0, [r7, #4]
 8006154:	f003 fe46 	bl	8009de4 <VL53L0X_WrByte>
 8006158:	4603      	mov	r3, r0
 800615a:	461a      	mov	r2, r3
 800615c:	7dfb      	ldrb	r3, [r7, #23]
 800615e:	4313      	orrs	r3, r2
 8006160:	75fb      	strb	r3, [r7, #23]
		}


	}

	return Status;
 8006162:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8006166:	4618      	mov	r0, r3
 8006168:	3718      	adds	r7, #24
 800616a:	46bd      	mov	sp, r7
 800616c:	bd80      	pop	{r7, pc}
 800616e:	bf00      	nop
 8006170:	20000088 	.word	0x20000088

08006174 <VL53L0X_StartMeasurement>:


VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
 8006174:	b580      	push	{r7, lr}
 8006176:	b086      	sub	sp, #24
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800617c:	2300      	movs	r3, #0
 800617e:	75fb      	strb	r3, [r7, #23]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 8006180:	2301      	movs	r3, #1
 8006182:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8006184:	f107 030e 	add.w	r3, r7, #14
 8006188:	4619      	mov	r1, r3
 800618a:	6878      	ldr	r0, [r7, #4]
 800618c:	f7ff fb20 	bl	80057d0 <VL53L0X_GetDeviceMode>

	Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 8006190:	2201      	movs	r2, #1
 8006192:	2180      	movs	r1, #128	; 0x80
 8006194:	6878      	ldr	r0, [r7, #4]
 8006196:	f003 fe25 	bl	8009de4 <VL53L0X_WrByte>
 800619a:	4603      	mov	r3, r0
 800619c:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800619e:	2201      	movs	r2, #1
 80061a0:	21ff      	movs	r1, #255	; 0xff
 80061a2:	6878      	ldr	r0, [r7, #4]
 80061a4:	f003 fe1e 	bl	8009de4 <VL53L0X_WrByte>
 80061a8:	4603      	mov	r3, r0
 80061aa:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 80061ac:	2200      	movs	r2, #0
 80061ae:	2100      	movs	r1, #0
 80061b0:	6878      	ldr	r0, [r7, #4]
 80061b2:	f003 fe17 	bl	8009de4 <VL53L0X_WrByte>
 80061b6:	4603      	mov	r3, r0
 80061b8:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x91, PALDevDataGet(Dev, StopVariable));
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 80061c0:	461a      	mov	r2, r3
 80061c2:	2191      	movs	r1, #145	; 0x91
 80061c4:	6878      	ldr	r0, [r7, #4]
 80061c6:	f003 fe0d 	bl	8009de4 <VL53L0X_WrByte>
 80061ca:	4603      	mov	r3, r0
 80061cc:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 80061ce:	2201      	movs	r2, #1
 80061d0:	2100      	movs	r1, #0
 80061d2:	6878      	ldr	r0, [r7, #4]
 80061d4:	f003 fe06 	bl	8009de4 <VL53L0X_WrByte>
 80061d8:	4603      	mov	r3, r0
 80061da:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80061dc:	2200      	movs	r2, #0
 80061de:	21ff      	movs	r1, #255	; 0xff
 80061e0:	6878      	ldr	r0, [r7, #4]
 80061e2:	f003 fdff 	bl	8009de4 <VL53L0X_WrByte>
 80061e6:	4603      	mov	r3, r0
 80061e8:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
 80061ea:	2200      	movs	r2, #0
 80061ec:	2180      	movs	r1, #128	; 0x80
 80061ee:	6878      	ldr	r0, [r7, #4]
 80061f0:	f003 fdf8 	bl	8009de4 <VL53L0X_WrByte>
 80061f4:	4603      	mov	r3, r0
 80061f6:	75fb      	strb	r3, [r7, #23]

	switch (DeviceMode) {
 80061f8:	7bbb      	ldrb	r3, [r7, #14]
 80061fa:	2b03      	cmp	r3, #3
 80061fc:	d054      	beq.n	80062a8 <VL53L0X_StartMeasurement+0x134>
 80061fe:	2b03      	cmp	r3, #3
 8006200:	dc6c      	bgt.n	80062dc <VL53L0X_StartMeasurement+0x168>
 8006202:	2b00      	cmp	r3, #0
 8006204:	d002      	beq.n	800620c <VL53L0X_StartMeasurement+0x98>
 8006206:	2b01      	cmp	r3, #1
 8006208:	d034      	beq.n	8006274 <VL53L0X_StartMeasurement+0x100>
 800620a:	e067      	b.n	80062dc <VL53L0X_StartMeasurement+0x168>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 800620c:	2201      	movs	r2, #1
 800620e:	2100      	movs	r1, #0
 8006210:	6878      	ldr	r0, [r7, #4]
 8006212:	f003 fde7 	bl	8009de4 <VL53L0X_WrByte>
 8006216:	4603      	mov	r3, r0
 8006218:	75fb      	strb	r3, [r7, #23]

		Byte = StartStopByte;
 800621a:	7bfb      	ldrb	r3, [r7, #15]
 800621c:	737b      	strb	r3, [r7, #13]
		if (Status == VL53L0X_ERROR_NONE) {
 800621e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d15d      	bne.n	80062e2 <VL53L0X_StartMeasurement+0x16e>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 8006226:	2300      	movs	r3, #0
 8006228:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 800622a:	693b      	ldr	r3, [r7, #16]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d008      	beq.n	8006242 <VL53L0X_StartMeasurement+0xce>
					Status = VL53L0X_RdByte(Dev,
 8006230:	f107 030d 	add.w	r3, r7, #13
 8006234:	461a      	mov	r2, r3
 8006236:	2100      	movs	r1, #0
 8006238:	6878      	ldr	r0, [r7, #4]
 800623a:	f003 fe55 	bl	8009ee8 <VL53L0X_RdByte>
 800623e:	4603      	mov	r3, r0
 8006240:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 8006242:	693b      	ldr	r3, [r7, #16]
 8006244:	3301      	adds	r3, #1
 8006246:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 8006248:	7b7a      	ldrb	r2, [r7, #13]
 800624a:	7bfb      	ldrb	r3, [r7, #15]
 800624c:	4013      	ands	r3, r2
 800624e:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8006250:	7bfa      	ldrb	r2, [r7, #15]
 8006252:	429a      	cmp	r2, r3
 8006254:	d107      	bne.n	8006266 <VL53L0X_StartMeasurement+0xf2>
				&& (Status == VL53L0X_ERROR_NONE)
 8006256:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d103      	bne.n	8006266 <VL53L0X_StartMeasurement+0xf2>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 800625e:	693b      	ldr	r3, [r7, #16]
 8006260:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8006264:	d3e1      	bcc.n	800622a <VL53L0X_StartMeasurement+0xb6>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 8006266:	693b      	ldr	r3, [r7, #16]
 8006268:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800626c:	d339      	bcc.n	80062e2 <VL53L0X_StartMeasurement+0x16e>
				Status = VL53L0X_ERROR_TIME_OUT;
 800626e:	23f9      	movs	r3, #249	; 0xf9
 8006270:	75fb      	strb	r3, [r7, #23]

		}

		break;
 8006272:	e036      	b.n	80062e2 <VL53L0X_StartMeasurement+0x16e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8006274:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d105      	bne.n	8006288 <VL53L0X_StartMeasurement+0x114>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 800627c:	2101      	movs	r1, #1
 800627e:	6878      	ldr	r0, [r7, #4]
 8006280:	f7ff ff12 	bl	80060a8 <VL53L0X_CheckAndLoadInterruptSettings>
 8006284:	4603      	mov	r3, r0
 8006286:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8006288:	2202      	movs	r2, #2
 800628a:	2100      	movs	r1, #0
 800628c:	6878      	ldr	r0, [r7, #4]
 800628e:	f003 fda9 	bl	8009de4 <VL53L0X_WrByte>
 8006292:	4603      	mov	r3, r0
 8006294:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 8006296:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d123      	bne.n	80062e6 <VL53L0X_StartMeasurement+0x172>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2204      	movs	r2, #4
 80062a2:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 80062a6:	e01e      	b.n	80062e6 <VL53L0X_StartMeasurement+0x172>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 80062a8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d105      	bne.n	80062bc <VL53L0X_StartMeasurement+0x148>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 80062b0:	2101      	movs	r1, #1
 80062b2:	6878      	ldr	r0, [r7, #4]
 80062b4:	f7ff fef8 	bl	80060a8 <VL53L0X_CheckAndLoadInterruptSettings>
 80062b8:	4603      	mov	r3, r0
 80062ba:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 80062bc:	2204      	movs	r2, #4
 80062be:	2100      	movs	r1, #0
 80062c0:	6878      	ldr	r0, [r7, #4]
 80062c2:	f003 fd8f 	bl	8009de4 <VL53L0X_WrByte>
 80062c6:	4603      	mov	r3, r0
 80062c8:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 80062ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d10b      	bne.n	80062ea <VL53L0X_StartMeasurement+0x176>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2204      	movs	r2, #4
 80062d6:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 80062da:	e006      	b.n	80062ea <VL53L0X_StartMeasurement+0x176>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 80062dc:	23f8      	movs	r3, #248	; 0xf8
 80062de:	75fb      	strb	r3, [r7, #23]
 80062e0:	e004      	b.n	80062ec <VL53L0X_StartMeasurement+0x178>
		break;
 80062e2:	bf00      	nop
 80062e4:	e002      	b.n	80062ec <VL53L0X_StartMeasurement+0x178>
		break;
 80062e6:	bf00      	nop
 80062e8:	e000      	b.n	80062ec <VL53L0X_StartMeasurement+0x178>
		break;
 80062ea:	bf00      	nop
	}


	LOG_FUNCTION_END(Status);
	return Status;
 80062ec:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80062f0:	4618      	mov	r0, r3
 80062f2:	3718      	adds	r7, #24
 80062f4:	46bd      	mov	sp, r7
 80062f6:	bd80      	pop	{r7, pc}

080062f8 <VL53L0X_GetMeasurementDataReady>:
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b084      	sub	sp, #16
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
 8006300:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006302:	2300      	movs	r3, #0
 8006304:	73fb      	strb	r3, [r7, #15]
	uint8_t SysRangeStatusRegister;
	uint8_t InterruptConfig;
	uint32_t InterruptMask;
	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 800630c:	73bb      	strb	r3, [r7, #14]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 800630e:	7bbb      	ldrb	r3, [r7, #14]
 8006310:	2b04      	cmp	r3, #4
 8006312:	d112      	bne.n	800633a <VL53L0X_GetMeasurementDataReady+0x42>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 8006314:	f107 0308 	add.w	r3, r7, #8
 8006318:	4619      	mov	r1, r3
 800631a:	6878      	ldr	r0, [r7, #4]
 800631c:	f000 fb1a 	bl	8006954 <VL53L0X_GetInterruptMaskStatus>
 8006320:	4603      	mov	r3, r0
 8006322:	73fb      	strb	r3, [r7, #15]
		if (InterruptMask ==
 8006324:	68bb      	ldr	r3, [r7, #8]
 8006326:	2b04      	cmp	r3, #4
 8006328:	d103      	bne.n	8006332 <VL53L0X_GetMeasurementDataReady+0x3a>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	2201      	movs	r2, #1
 800632e:	701a      	strb	r2, [r3, #0]
 8006330:	e01c      	b.n	800636c <VL53L0X_GetMeasurementDataReady+0x74>
		else
			*pMeasurementDataReady = 0;
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	2200      	movs	r2, #0
 8006336:	701a      	strb	r2, [r3, #0]
 8006338:	e018      	b.n	800636c <VL53L0X_GetMeasurementDataReady+0x74>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 800633a:	f107 030d 	add.w	r3, r7, #13
 800633e:	461a      	mov	r2, r3
 8006340:	2114      	movs	r1, #20
 8006342:	6878      	ldr	r0, [r7, #4]
 8006344:	f003 fdd0 	bl	8009ee8 <VL53L0X_RdByte>
 8006348:	4603      	mov	r3, r0
 800634a:	73fb      	strb	r3, [r7, #15]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 800634c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d10b      	bne.n	800636c <VL53L0X_GetMeasurementDataReady+0x74>
			if (SysRangeStatusRegister & 0x01)
 8006354:	7b7b      	ldrb	r3, [r7, #13]
 8006356:	f003 0301 	and.w	r3, r3, #1
 800635a:	2b00      	cmp	r3, #0
 800635c:	d003      	beq.n	8006366 <VL53L0X_GetMeasurementDataReady+0x6e>
				*pMeasurementDataReady = 1;
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	2201      	movs	r2, #1
 8006362:	701a      	strb	r2, [r3, #0]
 8006364:	e002      	b.n	800636c <VL53L0X_GetMeasurementDataReady+0x74>
			else
				*pMeasurementDataReady = 0;
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	2200      	movs	r2, #0
 800636a:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800636c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006370:	4618      	mov	r0, r3
 8006372:	3710      	adds	r7, #16
 8006374:	46bd      	mov	sp, r7
 8006376:	bd80      	pop	{r7, pc}

08006378 <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8006378:	b5b0      	push	{r4, r5, r7, lr}
 800637a:	b096      	sub	sp, #88	; 0x58
 800637c:	af02      	add	r7, sp, #8
 800637e:	6078      	str	r0, [r7, #4]
 8006380:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006382:	2300      	movs	r3, #0
 8006384:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 8006388:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800638c:	230c      	movs	r3, #12
 800638e:	2114      	movs	r1, #20
 8006390:	6878      	ldr	r0, [r7, #4]
 8006392:	f003 fcfb 	bl	8009d8c <VL53L0X_ReadMulti>
 8006396:	4603      	mov	r3, r0
 8006398:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if (Status == VL53L0X_ERROR_NONE) {
 800639c:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	f040 80d1 	bne.w	8006548 <VL53L0X_GetRangingMeasurementData+0x1d0>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	2200      	movs	r2, #0
 80063aa:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	2200      	movs	r2, #0
 80063b0:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 80063b2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80063b6:	b29b      	uxth	r3, r3
 80063b8:	021b      	lsls	r3, r3, #8
 80063ba:	b29a      	uxth	r2, r3
 80063bc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80063c0:	b29b      	uxth	r3, r3
 80063c2:	4413      	add	r3, r2
 80063c4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	2200      	movs	r2, #0
 80063cc:	605a      	str	r2, [r3, #4]

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 80063ce:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80063d2:	b29b      	uxth	r3, r3
 80063d4:	021b      	lsls	r3, r3, #8
 80063d6:	b29a      	uxth	r2, r3
 80063d8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80063dc:	b29b      	uxth	r3, r3
 80063de:	4413      	add	r3, r2
 80063e0:	b29b      	uxth	r3, r3
 80063e2:	025b      	lsls	r3, r3, #9
 80063e4:	647b      	str	r3, [r7, #68]	; 0x44
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80063ea:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 80063ec:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80063f0:	b29b      	uxth	r3, r3
 80063f2:	021b      	lsls	r3, r3, #8
 80063f4:	b29a      	uxth	r2, r3
 80063f6:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80063fa:	b29b      	uxth	r3, r3
 80063fc:	4413      	add	r3, r2
 80063fe:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 8006402:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006406:	025b      	lsls	r3, r3, #9
 8006408:	461a      	mov	r2, r3
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 800640e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8006412:	b29b      	uxth	r3, r3
 8006414:	021b      	lsls	r3, r3, #8
 8006416:	b29a      	uxth	r2, r3
 8006418:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800641c:	b29b      	uxth	r3, r3
 800641e:	4413      	add	r3, r2
 8006420:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800642a:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 800642c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006430:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	f8b3 3152 	ldrh.w	r3, [r3, #338]	; 0x152
 800643a:	87bb      	strh	r3, [r7, #60]	; 0x3c
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 8006442:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 8006446:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8006448:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800644c:	d046      	beq.n	80064dc <VL53L0X_GetRangingMeasurementData+0x164>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 800644e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8006450:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8006454:	fb02 f303 	mul.w	r3, r2, r3
 8006458:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800645c:	4a57      	ldr	r2, [pc, #348]	; (80065bc <VL53L0X_GetRangingMeasurementData+0x244>)
 800645e:	fb82 1203 	smull	r1, r2, r2, r3
 8006462:	1192      	asrs	r2, r2, #6
 8006464:	17db      	asrs	r3, r3, #31
 8006466:	1ad3      	subs	r3, r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 8006468:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	6a1b      	ldr	r3, [r3, #32]
 8006470:	873b      	strh	r3, [r7, #56]	; 0x38
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	7f1b      	ldrb	r3, [r3, #28]
 8006476:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 800647a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800647e:	2b00      	cmp	r3, #0
 8006480:	d02c      	beq.n	80064dc <VL53L0X_GetRangingMeasurementData+0x164>

				if ((SignalRate
					- ((XTalkCompensationRateMegaCps
					* EffectiveSpadRtnCount) >> 8))
 8006482:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006484:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8006488:	fb02 f303 	mul.w	r3, r2, r3
 800648c:	121a      	asrs	r2, r3, #8
					<= 0) {
 800648e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
				if ((SignalRate
 8006490:	429a      	cmp	r2, r3
 8006492:	d10d      	bne.n	80064b0 <VL53L0X_GetRangingMeasurementData+0x138>
					if (RangeFractionalEnable)
 8006494:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8006498:	2b00      	cmp	r3, #0
 800649a:	d004      	beq.n	80064a6 <VL53L0X_GetRangingMeasurementData+0x12e>
						XtalkRangeMilliMeter = 8888;
 800649c:	f242 23b8 	movw	r3, #8888	; 0x22b8
 80064a0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80064a4:	e016      	b.n	80064d4 <VL53L0X_GetRangingMeasurementData+0x15c>
					else
						XtalkRangeMilliMeter = 8888
 80064a6:	f648 23e0 	movw	r3, #35552	; 0x8ae0
 80064aa:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80064ae:	e011      	b.n	80064d4 <VL53L0X_GetRangingMeasurementData+0x15c>
							<< 2;
				} else {
					XtalkRangeMilliMeter =
					(tmpuint16 * SignalRate)
 80064b0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80064b4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80064b6:	fb02 f203 	mul.w	r2, r2, r3
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 80064ba:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80064bc:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 80064c0:	fb01 f303 	mul.w	r3, r1, r3
						>> 8));
 80064c4:	121b      	asrs	r3, r3, #8
 80064c6:	4619      	mov	r1, r3
						- ((XTalkCompensationRateMegaCps
 80064c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80064ca:	1a5b      	subs	r3, r3, r1
						/ (SignalRate
 80064cc:	fbb2 f3f3 	udiv	r3, r2, r3
					XtalkRangeMilliMeter =
 80064d0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				}

				tmpuint16 = XtalkRangeMilliMeter;
 80064d4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80064d8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			}

		}

		if (RangeFractionalEnable) {
 80064dc:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d00d      	beq.n	8006500 <VL53L0X_GetRangingMeasurementData+0x188>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 80064e4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80064e8:	089b      	lsrs	r3, r3, #2
 80064ea:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 80064f0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80064f4:	b2db      	uxtb	r3, r3
 80064f6:	019b      	lsls	r3, r3, #6
 80064f8:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	75da      	strb	r2, [r3, #23]
 80064fe:	e006      	b.n	800650e <VL53L0X_GetRangingMeasurementData+0x196>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8006506:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	2200      	movs	r2, #0
 800650c:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 800650e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8006512:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 8006516:	f107 0336 	add.w	r3, r7, #54	; 0x36
 800651a:	9301      	str	r3, [sp, #4]
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	9300      	str	r3, [sp, #0]
 8006520:	4613      	mov	r3, r2
 8006522:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006524:	6878      	ldr	r0, [r7, #4]
 8006526:	f003 f9e5 	bl	80098f4 <VL53L0X_get_pal_range_status>
 800652a:	4603      	mov	r3, r0
 800652c:	461a      	mov	r2, r3
 800652e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8006532:	4313      	orrs	r3, r2
 8006534:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 8006538:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800653c:	2b00      	cmp	r3, #0
 800653e:	d103      	bne.n	8006548 <VL53L0X_GetRangingMeasurementData+0x1d0>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 8006540:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006548:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800654c:	2b00      	cmp	r3, #0
 800654e:	d12f      	bne.n	80065b0 <VL53L0X_GetRangingMeasurementData+0x238>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	f107 040c 	add.w	r4, r7, #12
 8006556:	f103 0550 	add.w	r5, r3, #80	; 0x50
 800655a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800655c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800655e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8006562:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	891b      	ldrh	r3, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 800656a:	82bb      	strh	r3, [r7, #20]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	7ddb      	ldrb	r3, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 8006570:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	895b      	ldrh	r3, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 8006578:	82fb      	strh	r3, [r7, #22]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	685b      	ldr	r3, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 800657e:	613b      	str	r3, [r7, #16]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	68db      	ldr	r3, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 8006584:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	691b      	ldr	r3, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 800658a:	61fb      	str	r3, [r7, #28]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	8a9b      	ldrh	r3, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 8006590:	843b      	strh	r3, [r7, #32]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	7e1b      	ldrb	r3, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 8006596:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	f103 0450 	add.w	r4, r3, #80	; 0x50
 80065a0:	f107 050c 	add.w	r5, r7, #12
 80065a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80065a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80065a8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80065ac:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80065b0:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 80065b4:	4618      	mov	r0, r3
 80065b6:	3750      	adds	r7, #80	; 0x50
 80065b8:	46bd      	mov	sp, r7
 80065ba:	bdb0      	pop	{r4, r5, r7, pc}
 80065bc:	10624dd3 	.word	0x10624dd3

080065c0 <VL53L0X_PerformSingleRangingMeasurement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b084      	sub	sp, #16
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
 80065c8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80065ca:	2300      	movs	r3, #0
 80065cc:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* This function will do a complete single ranging
	 * Here we fix the mode! */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 80065ce:	2100      	movs	r1, #0
 80065d0:	6878      	ldr	r0, [r7, #4]
 80065d2:	f7ff f8d1 	bl	8005778 <VL53L0X_SetDeviceMode>
 80065d6:	4603      	mov	r3, r0
 80065d8:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80065da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d104      	bne.n	80065ec <VL53L0X_PerformSingleRangingMeasurement+0x2c>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 80065e2:	6878      	ldr	r0, [r7, #4]
 80065e4:	f7ff fd16 	bl	8006014 <VL53L0X_PerformSingleMeasurement>
 80065e8:	4603      	mov	r3, r0
 80065ea:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 80065ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d105      	bne.n	8006600 <VL53L0X_PerformSingleRangingMeasurement+0x40>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 80065f4:	6839      	ldr	r1, [r7, #0]
 80065f6:	6878      	ldr	r0, [r7, #4]
 80065f8:	f7ff febe 	bl	8006378 <VL53L0X_GetRangingMeasurementData>
 80065fc:	4603      	mov	r3, r0
 80065fe:	73fb      	strb	r3, [r7, #15]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 8006600:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d105      	bne.n	8006614 <VL53L0X_PerformSingleRangingMeasurement+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8006608:	2100      	movs	r1, #0
 800660a:	6878      	ldr	r0, [r7, #4]
 800660c:	f000 f962 	bl	80068d4 <VL53L0X_ClearInterruptMask>
 8006610:	4603      	mov	r3, r0
 8006612:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(Status);
	return Status;
 8006614:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006618:	4618      	mov	r0, r3
 800661a:	3710      	adds	r7, #16
 800661c:	46bd      	mov	sp, r7
 800661e:	bd80      	pop	{r7, pc}

08006620 <VL53L0X_SetGpioConfig>:
/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
	VL53L0X_DeviceModes DeviceMode, VL53L0X_GpioFunctionality Functionality,
	VL53L0X_InterruptPolarity Polarity)
{
 8006620:	b580      	push	{r7, lr}
 8006622:	b084      	sub	sp, #16
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
 8006628:	4608      	mov	r0, r1
 800662a:	4611      	mov	r1, r2
 800662c:	461a      	mov	r2, r3
 800662e:	4603      	mov	r3, r0
 8006630:	70fb      	strb	r3, [r7, #3]
 8006632:	460b      	mov	r3, r1
 8006634:	70bb      	strb	r3, [r7, #2]
 8006636:	4613      	mov	r3, r2
 8006638:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800663a:	2300      	movs	r3, #0
 800663c:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	if (Pin != 0) {
 800663e:	78fb      	ldrb	r3, [r7, #3]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d002      	beq.n	800664a <VL53L0X_SetGpioConfig+0x2a>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 8006644:	23f6      	movs	r3, #246	; 0xf6
 8006646:	73fb      	strb	r3, [r7, #15]
 8006648:	e107      	b.n	800685a <VL53L0X_SetGpioConfig+0x23a>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 800664a:	78bb      	ldrb	r3, [r7, #2]
 800664c:	2b14      	cmp	r3, #20
 800664e:	d110      	bne.n	8006672 <VL53L0X_SetGpioConfig+0x52>
		if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 8006650:	7e3b      	ldrb	r3, [r7, #24]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d102      	bne.n	800665c <VL53L0X_SetGpioConfig+0x3c>
			data = 0x10;
 8006656:	2310      	movs	r3, #16
 8006658:	73bb      	strb	r3, [r7, #14]
 800665a:	e001      	b.n	8006660 <VL53L0X_SetGpioConfig+0x40>
		else
			data = 1;
 800665c:	2301      	movs	r3, #1
 800665e:	73bb      	strb	r3, [r7, #14]

		Status = VL53L0X_WrByte(Dev,
 8006660:	7bbb      	ldrb	r3, [r7, #14]
 8006662:	461a      	mov	r2, r3
 8006664:	2184      	movs	r1, #132	; 0x84
 8006666:	6878      	ldr	r0, [r7, #4]
 8006668:	f003 fbbc 	bl	8009de4 <VL53L0X_WrByte>
 800666c:	4603      	mov	r3, r0
 800666e:	73fb      	strb	r3, [r7, #15]
 8006670:	e0f3      	b.n	800685a <VL53L0X_SetGpioConfig+0x23a>
		VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);

	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 8006672:	78bb      	ldrb	r3, [r7, #2]
 8006674:	2b15      	cmp	r3, #21
 8006676:	f040 8097 	bne.w	80067a8 <VL53L0X_SetGpioConfig+0x188>

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800667a:	2201      	movs	r2, #1
 800667c:	21ff      	movs	r1, #255	; 0xff
 800667e:	6878      	ldr	r0, [r7, #4]
 8006680:	f003 fbb0 	bl	8009de4 <VL53L0X_WrByte>
 8006684:	4603      	mov	r3, r0
 8006686:	461a      	mov	r2, r3
 8006688:	7bfb      	ldrb	r3, [r7, #15]
 800668a:	4313      	orrs	r3, r2
 800668c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800668e:	2200      	movs	r2, #0
 8006690:	2100      	movs	r1, #0
 8006692:	6878      	ldr	r0, [r7, #4]
 8006694:	f003 fba6 	bl	8009de4 <VL53L0X_WrByte>
 8006698:	4603      	mov	r3, r0
 800669a:	461a      	mov	r2, r3
 800669c:	7bfb      	ldrb	r3, [r7, #15]
 800669e:	4313      	orrs	r3, r2
 80066a0:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80066a2:	2200      	movs	r2, #0
 80066a4:	21ff      	movs	r1, #255	; 0xff
 80066a6:	6878      	ldr	r0, [r7, #4]
 80066a8:	f003 fb9c 	bl	8009de4 <VL53L0X_WrByte>
 80066ac:	4603      	mov	r3, r0
 80066ae:	461a      	mov	r2, r3
 80066b0:	7bfb      	ldrb	r3, [r7, #15]
 80066b2:	4313      	orrs	r3, r2
 80066b4:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 80066b6:	2201      	movs	r2, #1
 80066b8:	2180      	movs	r1, #128	; 0x80
 80066ba:	6878      	ldr	r0, [r7, #4]
 80066bc:	f003 fb92 	bl	8009de4 <VL53L0X_WrByte>
 80066c0:	4603      	mov	r3, r0
 80066c2:	461a      	mov	r2, r3
 80066c4:	7bfb      	ldrb	r3, [r7, #15]
 80066c6:	4313      	orrs	r3, r2
 80066c8:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 80066ca:	2202      	movs	r2, #2
 80066cc:	2185      	movs	r1, #133	; 0x85
 80066ce:	6878      	ldr	r0, [r7, #4]
 80066d0:	f003 fb88 	bl	8009de4 <VL53L0X_WrByte>
 80066d4:	4603      	mov	r3, r0
 80066d6:	461a      	mov	r2, r3
 80066d8:	7bfb      	ldrb	r3, [r7, #15]
 80066da:	4313      	orrs	r3, r2
 80066dc:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 80066de:	2204      	movs	r2, #4
 80066e0:	21ff      	movs	r1, #255	; 0xff
 80066e2:	6878      	ldr	r0, [r7, #4]
 80066e4:	f003 fb7e 	bl	8009de4 <VL53L0X_WrByte>
 80066e8:	4603      	mov	r3, r0
 80066ea:	461a      	mov	r2, r3
 80066ec:	7bfb      	ldrb	r3, [r7, #15]
 80066ee:	4313      	orrs	r3, r2
 80066f0:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 80066f2:	2200      	movs	r2, #0
 80066f4:	21cd      	movs	r1, #205	; 0xcd
 80066f6:	6878      	ldr	r0, [r7, #4]
 80066f8:	f003 fb74 	bl	8009de4 <VL53L0X_WrByte>
 80066fc:	4603      	mov	r3, r0
 80066fe:	461a      	mov	r2, r3
 8006700:	7bfb      	ldrb	r3, [r7, #15]
 8006702:	4313      	orrs	r3, r2
 8006704:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 8006706:	2211      	movs	r2, #17
 8006708:	21cc      	movs	r1, #204	; 0xcc
 800670a:	6878      	ldr	r0, [r7, #4]
 800670c:	f003 fb6a 	bl	8009de4 <VL53L0X_WrByte>
 8006710:	4603      	mov	r3, r0
 8006712:	461a      	mov	r2, r3
 8006714:	7bfb      	ldrb	r3, [r7, #15]
 8006716:	4313      	orrs	r3, r2
 8006718:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 800671a:	2207      	movs	r2, #7
 800671c:	21ff      	movs	r1, #255	; 0xff
 800671e:	6878      	ldr	r0, [r7, #4]
 8006720:	f003 fb60 	bl	8009de4 <VL53L0X_WrByte>
 8006724:	4603      	mov	r3, r0
 8006726:	461a      	mov	r2, r3
 8006728:	7bfb      	ldrb	r3, [r7, #15]
 800672a:	4313      	orrs	r3, r2
 800672c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 800672e:	2200      	movs	r2, #0
 8006730:	21be      	movs	r1, #190	; 0xbe
 8006732:	6878      	ldr	r0, [r7, #4]
 8006734:	f003 fb56 	bl	8009de4 <VL53L0X_WrByte>
 8006738:	4603      	mov	r3, r0
 800673a:	461a      	mov	r2, r3
 800673c:	7bfb      	ldrb	r3, [r7, #15]
 800673e:	4313      	orrs	r3, r2
 8006740:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 8006742:	2206      	movs	r2, #6
 8006744:	21ff      	movs	r1, #255	; 0xff
 8006746:	6878      	ldr	r0, [r7, #4]
 8006748:	f003 fb4c 	bl	8009de4 <VL53L0X_WrByte>
 800674c:	4603      	mov	r3, r0
 800674e:	461a      	mov	r2, r3
 8006750:	7bfb      	ldrb	r3, [r7, #15]
 8006752:	4313      	orrs	r3, r2
 8006754:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 8006756:	2209      	movs	r2, #9
 8006758:	21cc      	movs	r1, #204	; 0xcc
 800675a:	6878      	ldr	r0, [r7, #4]
 800675c:	f003 fb42 	bl	8009de4 <VL53L0X_WrByte>
 8006760:	4603      	mov	r3, r0
 8006762:	461a      	mov	r2, r3
 8006764:	7bfb      	ldrb	r3, [r7, #15]
 8006766:	4313      	orrs	r3, r2
 8006768:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800676a:	2200      	movs	r2, #0
 800676c:	21ff      	movs	r1, #255	; 0xff
 800676e:	6878      	ldr	r0, [r7, #4]
 8006770:	f003 fb38 	bl	8009de4 <VL53L0X_WrByte>
 8006774:	4603      	mov	r3, r0
 8006776:	461a      	mov	r2, r3
 8006778:	7bfb      	ldrb	r3, [r7, #15]
 800677a:	4313      	orrs	r3, r2
 800677c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800677e:	2201      	movs	r2, #1
 8006780:	21ff      	movs	r1, #255	; 0xff
 8006782:	6878      	ldr	r0, [r7, #4]
 8006784:	f003 fb2e 	bl	8009de4 <VL53L0X_WrByte>
 8006788:	4603      	mov	r3, r0
 800678a:	461a      	mov	r2, r3
 800678c:	7bfb      	ldrb	r3, [r7, #15]
 800678e:	4313      	orrs	r3, r2
 8006790:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8006792:	2200      	movs	r2, #0
 8006794:	2100      	movs	r1, #0
 8006796:	6878      	ldr	r0, [r7, #4]
 8006798:	f003 fb24 	bl	8009de4 <VL53L0X_WrByte>
 800679c:	4603      	mov	r3, r0
 800679e:	461a      	mov	r2, r3
 80067a0:	7bfb      	ldrb	r3, [r7, #15]
 80067a2:	4313      	orrs	r3, r2
 80067a4:	73fb      	strb	r3, [r7, #15]
 80067a6:	e058      	b.n	800685a <VL53L0X_SetGpioConfig+0x23a>

	} else {

		if (Status == VL53L0X_ERROR_NONE) {
 80067a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d121      	bne.n	80067f4 <VL53L0X_SetGpioConfig+0x1d4>
			switch (Functionality) {
 80067b0:	787b      	ldrb	r3, [r7, #1]
 80067b2:	2b04      	cmp	r3, #4
 80067b4:	d81b      	bhi.n	80067ee <VL53L0X_SetGpioConfig+0x1ce>
 80067b6:	a201      	add	r2, pc, #4	; (adr r2, 80067bc <VL53L0X_SetGpioConfig+0x19c>)
 80067b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067bc:	080067d1 	.word	0x080067d1
 80067c0:	080067d7 	.word	0x080067d7
 80067c4:	080067dd 	.word	0x080067dd
 80067c8:	080067e3 	.word	0x080067e3
 80067cc:	080067e9 	.word	0x080067e9
			case VL53L0X_GPIOFUNCTIONALITY_OFF:
				data = 0x00;
 80067d0:	2300      	movs	r3, #0
 80067d2:	73bb      	strb	r3, [r7, #14]
				break;
 80067d4:	e00f      	b.n	80067f6 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
				data = 0x01;
 80067d6:	2301      	movs	r3, #1
 80067d8:	73bb      	strb	r3, [r7, #14]
				break;
 80067da:	e00c      	b.n	80067f6 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
				data = 0x02;
 80067dc:	2302      	movs	r3, #2
 80067de:	73bb      	strb	r3, [r7, #14]
				break;
 80067e0:	e009      	b.n	80067f6 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
				data = 0x03;
 80067e2:	2303      	movs	r3, #3
 80067e4:	73bb      	strb	r3, [r7, #14]
				break;
 80067e6:	e006      	b.n	80067f6 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
				data = 0x04;
 80067e8:	2304      	movs	r3, #4
 80067ea:	73bb      	strb	r3, [r7, #14]
				break;
 80067ec:	e003      	b.n	80067f6 <VL53L0X_SetGpioConfig+0x1d6>
			default:
				Status =
 80067ee:	23f5      	movs	r3, #245	; 0xf5
 80067f0:	73fb      	strb	r3, [r7, #15]
 80067f2:	e000      	b.n	80067f6 <VL53L0X_SetGpioConfig+0x1d6>
				VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
			}
		}
 80067f4:	bf00      	nop

		if (Status == VL53L0X_ERROR_NONE)
 80067f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d107      	bne.n	800680e <VL53L0X_SetGpioConfig+0x1ee>
			Status = VL53L0X_WrByte(Dev,
 80067fe:	7bbb      	ldrb	r3, [r7, #14]
 8006800:	461a      	mov	r2, r3
 8006802:	210a      	movs	r1, #10
 8006804:	6878      	ldr	r0, [r7, #4]
 8006806:	f003 faed 	bl	8009de4 <VL53L0X_WrByte>
 800680a:	4603      	mov	r3, r0
 800680c:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

		if (Status == VL53L0X_ERROR_NONE) {
 800680e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d10f      	bne.n	8006836 <VL53L0X_SetGpioConfig+0x216>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 8006816:	7e3b      	ldrb	r3, [r7, #24]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d102      	bne.n	8006822 <VL53L0X_SetGpioConfig+0x202>
				data = 0;
 800681c:	2300      	movs	r3, #0
 800681e:	73bb      	strb	r3, [r7, #14]
 8006820:	e001      	b.n	8006826 <VL53L0X_SetGpioConfig+0x206>
			else
				data = (uint8_t)(1 << 4);
 8006822:	2310      	movs	r3, #16
 8006824:	73bb      	strb	r3, [r7, #14]

			Status = VL53L0X_UpdateByte(Dev,
 8006826:	7bbb      	ldrb	r3, [r7, #14]
 8006828:	22ef      	movs	r2, #239	; 0xef
 800682a:	2184      	movs	r1, #132	; 0x84
 800682c:	6878      	ldr	r0, [r7, #4]
 800682e:	f003 fb27 	bl	8009e80 <VL53L0X_UpdateByte>
 8006832:	4603      	mov	r3, r0
 8006834:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, 0xEF, data);
		}

		if (Status == VL53L0X_ERROR_NONE)
 8006836:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d103      	bne.n	8006846 <VL53L0X_SetGpioConfig+0x226>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	787a      	ldrb	r2, [r7, #1]
 8006842:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
				Pin0GpioFunctionality, Functionality);

		if (Status == VL53L0X_ERROR_NONE)
 8006846:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d105      	bne.n	800685a <VL53L0X_SetGpioConfig+0x23a>
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800684e:	2100      	movs	r1, #0
 8006850:	6878      	ldr	r0, [r7, #4]
 8006852:	f000 f83f 	bl	80068d4 <VL53L0X_ClearInterruptMask>
 8006856:	4603      	mov	r3, r0
 8006858:	73fb      	strb	r3, [r7, #15]

	}

	LOG_FUNCTION_END(Status);
	return Status;
 800685a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800685e:	4618      	mov	r0, r3
 8006860:	3710      	adds	r7, #16
 8006862:	46bd      	mov	sp, r7
 8006864:	bd80      	pop	{r7, pc}
 8006866:	bf00      	nop

08006868 <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b086      	sub	sp, #24
 800686c:	af00      	add	r7, sp, #0
 800686e:	60f8      	str	r0, [r7, #12]
 8006870:	607a      	str	r2, [r7, #4]
 8006872:	603b      	str	r3, [r7, #0]
 8006874:	460b      	mov	r3, r1
 8006876:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006878:	2300      	movs	r3, #0
 800687a:	75fb      	strb	r3, [r7, #23]
	uint16_t Threshold16;
	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 800687c:	f107 0314 	add.w	r3, r7, #20
 8006880:	461a      	mov	r2, r3
 8006882:	210e      	movs	r1, #14
 8006884:	68f8      	ldr	r0, [r7, #12]
 8006886:	f003 fb59 	bl	8009f3c <VL53L0X_RdWord>
 800688a:	4603      	mov	r3, r0
 800688c:	75fb      	strb	r3, [r7, #23]
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 800688e:	8abb      	ldrh	r3, [r7, #20]
 8006890:	045b      	lsls	r3, r3, #17
 8006892:	461a      	mov	r2, r3
 8006894:	4b0e      	ldr	r3, [pc, #56]	; (80068d0 <VL53L0X_GetInterruptThresholds+0x68>)
 8006896:	4013      	ands	r3, r2
 8006898:	687a      	ldr	r2, [r7, #4]
 800689a:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 800689c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d10f      	bne.n	80068c4 <VL53L0X_GetInterruptThresholds+0x5c>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 80068a4:	f107 0314 	add.w	r3, r7, #20
 80068a8:	461a      	mov	r2, r3
 80068aa:	210c      	movs	r1, #12
 80068ac:	68f8      	ldr	r0, [r7, #12]
 80068ae:	f003 fb45 	bl	8009f3c <VL53L0X_RdWord>
 80068b2:	4603      	mov	r3, r0
 80068b4:	75fb      	strb	r3, [r7, #23]
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 80068b6:	8abb      	ldrh	r3, [r7, #20]
 80068b8:	045b      	lsls	r3, r3, #17
 80068ba:	461a      	mov	r2, r3
 80068bc:	4b04      	ldr	r3, [pc, #16]	; (80068d0 <VL53L0X_GetInterruptThresholds+0x68>)
 80068be:	4013      	ands	r3, r2
		*pThresholdHigh =
 80068c0:	683a      	ldr	r2, [r7, #0]
 80068c2:	6013      	str	r3, [r2, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80068c4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80068c8:	4618      	mov	r0, r3
 80068ca:	3718      	adds	r7, #24
 80068cc:	46bd      	mov	sp, r7
 80068ce:	bd80      	pop	{r7, pc}
 80068d0:	1ffe0000 	.word	0x1ffe0000

080068d4 <VL53L0X_ClearInterruptMask>:
	return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b084      	sub	sp, #16
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
 80068dc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80068de:	2300      	movs	r3, #0
 80068e0:	73fb      	strb	r3, [r7, #15]
	uint8_t LoopCount;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 80068e2:	2300      	movs	r3, #0
 80068e4:	73bb      	strb	r3, [r7, #14]
	do {
		Status = VL53L0X_WrByte(Dev,
 80068e6:	2201      	movs	r2, #1
 80068e8:	210b      	movs	r1, #11
 80068ea:	6878      	ldr	r0, [r7, #4]
 80068ec:	f003 fa7a 	bl	8009de4 <VL53L0X_WrByte>
 80068f0:	4603      	mov	r3, r0
 80068f2:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 80068f4:	2200      	movs	r2, #0
 80068f6:	210b      	movs	r1, #11
 80068f8:	6878      	ldr	r0, [r7, #4]
 80068fa:	f003 fa73 	bl	8009de4 <VL53L0X_WrByte>
 80068fe:	4603      	mov	r3, r0
 8006900:	461a      	mov	r2, r3
 8006902:	7bfb      	ldrb	r3, [r7, #15]
 8006904:	4313      	orrs	r3, r2
 8006906:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 8006908:	f107 030d 	add.w	r3, r7, #13
 800690c:	461a      	mov	r2, r3
 800690e:	2113      	movs	r1, #19
 8006910:	6878      	ldr	r0, [r7, #4]
 8006912:	f003 fae9 	bl	8009ee8 <VL53L0X_RdByte>
 8006916:	4603      	mov	r3, r0
 8006918:	461a      	mov	r2, r3
 800691a:	7bfb      	ldrb	r3, [r7, #15]
 800691c:	4313      	orrs	r3, r2
 800691e:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 8006920:	7bbb      	ldrb	r3, [r7, #14]
 8006922:	3301      	adds	r3, #1
 8006924:	73bb      	strb	r3, [r7, #14]
	} while (((Byte & 0x07) != 0x00)
 8006926:	7b7b      	ldrb	r3, [r7, #13]
 8006928:	f003 0307 	and.w	r3, r3, #7
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 800692c:	2b00      	cmp	r3, #0
 800692e:	d006      	beq.n	800693e <VL53L0X_ClearInterruptMask+0x6a>
			&& (LoopCount < 3)
 8006930:	7bbb      	ldrb	r3, [r7, #14]
 8006932:	2b02      	cmp	r3, #2
 8006934:	d803      	bhi.n	800693e <VL53L0X_ClearInterruptMask+0x6a>
			&& (Status == VL53L0X_ERROR_NONE));
 8006936:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d0d3      	beq.n	80068e6 <VL53L0X_ClearInterruptMask+0x12>


	if (LoopCount >= 3)
 800693e:	7bbb      	ldrb	r3, [r7, #14]
 8006940:	2b02      	cmp	r3, #2
 8006942:	d901      	bls.n	8006948 <VL53L0X_ClearInterruptMask+0x74>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 8006944:	23f4      	movs	r3, #244	; 0xf4
 8006946:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8006948:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800694c:	4618      	mov	r0, r3
 800694e:	3710      	adds	r7, #16
 8006950:	46bd      	mov	sp, r7
 8006952:	bd80      	pop	{r7, pc}

08006954 <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b084      	sub	sp, #16
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
 800695c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800695e:	2300      	movs	r3, #0
 8006960:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 8006962:	f107 030e 	add.w	r3, r7, #14
 8006966:	461a      	mov	r2, r3
 8006968:	2113      	movs	r1, #19
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	f003 fabc 	bl	8009ee8 <VL53L0X_RdByte>
 8006970:	4603      	mov	r3, r0
 8006972:	73fb      	strb	r3, [r7, #15]
	*pInterruptMaskStatus = Byte & 0x07;
 8006974:	7bbb      	ldrb	r3, [r7, #14]
 8006976:	f003 0207 	and.w	r2, r3, #7
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 800697e:	7bbb      	ldrb	r3, [r7, #14]
 8006980:	f003 0318 	and.w	r3, r3, #24
 8006984:	2b00      	cmp	r3, #0
 8006986:	d001      	beq.n	800698c <VL53L0X_GetInterruptMaskStatus+0x38>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 8006988:	23fa      	movs	r3, #250	; 0xfa
 800698a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 800698c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006990:	4618      	mov	r0, r3
 8006992:	3710      	adds	r7, #16
 8006994:	46bd      	mov	sp, r7
 8006996:	bd80      	pop	{r7, pc}

08006998 <VL53L0X_PerformRefSpadManagement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b086      	sub	sp, #24
 800699c:	af00      	add	r7, sp, #0
 800699e:	60f8      	str	r0, [r7, #12]
 80069a0:	60b9      	str	r1, [r7, #8]
 80069a2:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80069a4:	2300      	movs	r3, #0
 80069a6:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 80069a8:	687a      	ldr	r2, [r7, #4]
 80069aa:	68b9      	ldr	r1, [r7, #8]
 80069ac:	68f8      	ldr	r0, [r7, #12]
 80069ae:	f000 fa03 	bl	8006db8 <VL53L0X_perform_ref_spad_management>
 80069b2:	4603      	mov	r3, r0
 80069b4:	75fb      	strb	r3, [r7, #23]
		isApertureSpads);

	LOG_FUNCTION_END(Status);

	return Status;
 80069b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80069ba:	4618      	mov	r0, r3
 80069bc:	3718      	adds	r7, #24
 80069be:	46bd      	mov	sp, r7
 80069c0:	bd80      	pop	{r7, pc}

080069c2 <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 80069c2:	b580      	push	{r7, lr}
 80069c4:	b084      	sub	sp, #16
 80069c6:	af00      	add	r7, sp, #0
 80069c8:	6078      	str	r0, [r7, #4]
 80069ca:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80069cc:	2300      	movs	r3, #0
 80069ce:	73fb      	strb	r3, [r7, #15]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 80069d0:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80069d4:	81bb      	strh	r3, [r7, #12]
	int16_t cOffsetRange = 4096;
 80069d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80069da:	817b      	strh	r3, [r7, #10]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 80069dc:	f107 0308 	add.w	r3, r7, #8
 80069e0:	461a      	mov	r2, r3
 80069e2:	2128      	movs	r1, #40	; 0x28
 80069e4:	6878      	ldr	r0, [r7, #4]
 80069e6:	f003 faa9 	bl	8009f3c <VL53L0X_RdWord>
 80069ea:	4603      	mov	r3, r0
 80069ec:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 80069ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d11e      	bne.n	8006a34 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 80069f6:	893b      	ldrh	r3, [r7, #8]
 80069f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80069fc:	b29b      	uxth	r3, r3
 80069fe:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 8006a00:	893b      	ldrh	r3, [r7, #8]
 8006a02:	461a      	mov	r2, r3
 8006a04:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006a08:	429a      	cmp	r2, r3
 8006a0a:	dd0b      	ble.n	8006a24 <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 8006a0c:	893a      	ldrh	r2, [r7, #8]
 8006a0e:	897b      	ldrh	r3, [r7, #10]
 8006a10:	1ad3      	subs	r3, r2, r3
 8006a12:	b29b      	uxth	r3, r3
 8006a14:	b21b      	sxth	r3, r3
 8006a16:	461a      	mov	r2, r3
					* 250;
 8006a18:	23fa      	movs	r3, #250	; 0xfa
 8006a1a:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	601a      	str	r2, [r3, #0]
 8006a22:	e007      	b.n	8006a34 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 8006a24:	893b      	ldrh	r3, [r7, #8]
 8006a26:	b21b      	sxth	r3, r3
 8006a28:	461a      	mov	r2, r3
 8006a2a:	23fa      	movs	r3, #250	; 0xfa
 8006a2c:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	601a      	str	r2, [r3, #0]

	}

	return Status;
 8006a34:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006a38:	4618      	mov	r0, r3
 8006a3a:	3710      	adds	r7, #16
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	bd80      	pop	{r7, pc}

08006a40 <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 8006a40:	b480      	push	{r7}
 8006a42:	b08b      	sub	sp, #44	; 0x2c
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	60f8      	str	r0, [r7, #12]
 8006a48:	60b9      	str	r1, [r7, #8]
 8006a4a:	607a      	str	r2, [r7, #4]
 8006a4c:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 8006a4e:	2308      	movs	r3, #8
 8006a50:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
 8006a52:	2300      	movs	r3, #0
 8006a54:	77bb      	strb	r3, [r7, #30]
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	f04f 32ff 	mov.w	r2, #4294967295
 8006a5c:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 8006a5e:	687a      	ldr	r2, [r7, #4]
 8006a60:	69bb      	ldr	r3, [r7, #24]
 8006a62:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a66:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	69ba      	ldr	r2, [r7, #24]
 8006a6c:	fbb3 f2f2 	udiv	r2, r3, r2
 8006a70:	69b9      	ldr	r1, [r7, #24]
 8006a72:	fb01 f202 	mul.w	r2, r1, r2
 8006a76:	1a9b      	subs	r3, r3, r2
 8006a78:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8006a7a:	697b      	ldr	r3, [r7, #20]
 8006a7c:	627b      	str	r3, [r7, #36]	; 0x24
 8006a7e:	e030      	b.n	8006ae2 <get_next_good_spad+0xa2>
				coarseIndex++) {
		fineIndex = 0;
 8006a80:	2300      	movs	r3, #0
 8006a82:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 8006a84:	68fa      	ldr	r2, [r7, #12]
 8006a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a88:	4413      	add	r3, r2
 8006a8a:	781b      	ldrb	r3, [r3, #0]
 8006a8c:	77fb      	strb	r3, [r7, #31]

		if (coarseIndex == startIndex) {
 8006a8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a90:	697b      	ldr	r3, [r7, #20]
 8006a92:	429a      	cmp	r2, r3
 8006a94:	d11e      	bne.n	8006ad4 <get_next_good_spad+0x94>
			/* locate the bit position of the provided current
			 * spad bit before iterating */
			dataByte >>= fineOffset;
 8006a96:	7ffa      	ldrb	r2, [r7, #31]
 8006a98:	693b      	ldr	r3, [r7, #16]
 8006a9a:	fa42 f303 	asr.w	r3, r2, r3
 8006a9e:	77fb      	strb	r3, [r7, #31]
			fineIndex = fineOffset;
 8006aa0:	693b      	ldr	r3, [r7, #16]
 8006aa2:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 8006aa4:	e016      	b.n	8006ad4 <get_next_good_spad+0x94>
			if ((dataByte & 0x1) == 1) {
 8006aa6:	7ffb      	ldrb	r3, [r7, #31]
 8006aa8:	f003 0301 	and.w	r3, r3, #1
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d00b      	beq.n	8006ac8 <get_next_good_spad+0x88>
				success = 1;
 8006ab0:	2301      	movs	r3, #1
 8006ab2:	77bb      	strb	r3, [r7, #30]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 8006ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ab6:	69ba      	ldr	r2, [r7, #24]
 8006ab8:	fb02 f203 	mul.w	r2, r2, r3
 8006abc:	6a3b      	ldr	r3, [r7, #32]
 8006abe:	4413      	add	r3, r2
 8006ac0:	461a      	mov	r2, r3
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	601a      	str	r2, [r3, #0]
				break;
 8006ac6:	e009      	b.n	8006adc <get_next_good_spad+0x9c>
			}
			dataByte >>= 1;
 8006ac8:	7ffb      	ldrb	r3, [r7, #31]
 8006aca:	085b      	lsrs	r3, r3, #1
 8006acc:	77fb      	strb	r3, [r7, #31]
			fineIndex++;
 8006ace:	6a3b      	ldr	r3, [r7, #32]
 8006ad0:	3301      	adds	r3, #1
 8006ad2:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 8006ad4:	6a3a      	ldr	r2, [r7, #32]
 8006ad6:	69bb      	ldr	r3, [r7, #24]
 8006ad8:	429a      	cmp	r2, r3
 8006ada:	d3e4      	bcc.n	8006aa6 <get_next_good_spad+0x66>
				coarseIndex++) {
 8006adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ade:	3301      	adds	r3, #1
 8006ae0:	627b      	str	r3, [r7, #36]	; 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8006ae2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ae4:	68bb      	ldr	r3, [r7, #8]
 8006ae6:	429a      	cmp	r2, r3
 8006ae8:	d202      	bcs.n	8006af0 <get_next_good_spad+0xb0>
 8006aea:	7fbb      	ldrb	r3, [r7, #30]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d0c7      	beq.n	8006a80 <get_next_good_spad+0x40>
		}
	}
}
 8006af0:	bf00      	nop
 8006af2:	372c      	adds	r7, #44	; 0x2c
 8006af4:	46bd      	mov	sp, r7
 8006af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afa:	4770      	bx	lr

08006afc <is_aperture>:


uint8_t is_aperture(uint32_t spadIndex)
{
 8006afc:	b480      	push	{r7}
 8006afe:	b085      	sub	sp, #20
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
 8006b04:	2301      	movs	r3, #1
 8006b06:	73fb      	strb	r3, [r7, #15]
	quadrant = spadIndex >> 6;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	099b      	lsrs	r3, r3, #6
 8006b0c:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 8006b0e:	4a07      	ldr	r2, [pc, #28]	; (8006b2c <is_aperture+0x30>)
 8006b10:	68bb      	ldr	r3, [r7, #8]
 8006b12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d101      	bne.n	8006b1e <is_aperture+0x22>
		isAperture = 0;
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	73fb      	strb	r3, [r7, #15]

	return isAperture;
 8006b1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b20:	4618      	mov	r0, r3
 8006b22:	3714      	adds	r7, #20
 8006b24:	46bd      	mov	sp, r7
 8006b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2a:	4770      	bx	lr
 8006b2c:	20000334 	.word	0x20000334

08006b30 <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 8006b30:	b480      	push	{r7}
 8006b32:	b089      	sub	sp, #36	; 0x24
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	60f8      	str	r0, [r7, #12]
 8006b38:	60b9      	str	r1, [r7, #8]
 8006b3a:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	77fb      	strb	r3, [r7, #31]
	uint32_t cSpadsPerByte = 8;
 8006b40:	2308      	movs	r3, #8
 8006b42:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 8006b44:	687a      	ldr	r2, [r7, #4]
 8006b46:	69bb      	ldr	r3, [r7, #24]
 8006b48:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b4c:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	69ba      	ldr	r2, [r7, #24]
 8006b52:	fbb3 f2f2 	udiv	r2, r3, r2
 8006b56:	69b9      	ldr	r1, [r7, #24]
 8006b58:	fb01 f202 	mul.w	r2, r1, r2
 8006b5c:	1a9b      	subs	r3, r3, r2
 8006b5e:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 8006b60:	697a      	ldr	r2, [r7, #20]
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	429a      	cmp	r2, r3
 8006b66:	d302      	bcc.n	8006b6e <enable_spad_bit+0x3e>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 8006b68:	23ce      	movs	r3, #206	; 0xce
 8006b6a:	77fb      	strb	r3, [r7, #31]
 8006b6c:	e010      	b.n	8006b90 <enable_spad_bit+0x60>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 8006b6e:	68fa      	ldr	r2, [r7, #12]
 8006b70:	697b      	ldr	r3, [r7, #20]
 8006b72:	4413      	add	r3, r2
 8006b74:	781b      	ldrb	r3, [r3, #0]
 8006b76:	b25a      	sxtb	r2, r3
 8006b78:	2101      	movs	r1, #1
 8006b7a:	693b      	ldr	r3, [r7, #16]
 8006b7c:	fa01 f303 	lsl.w	r3, r1, r3
 8006b80:	b25b      	sxtb	r3, r3
 8006b82:	4313      	orrs	r3, r2
 8006b84:	b259      	sxtb	r1, r3
 8006b86:	68fa      	ldr	r2, [r7, #12]
 8006b88:	697b      	ldr	r3, [r7, #20]
 8006b8a:	4413      	add	r3, r2
 8006b8c:	b2ca      	uxtb	r2, r1
 8006b8e:	701a      	strb	r2, [r3, #0]

	return status;
 8006b90:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8006b94:	4618      	mov	r0, r3
 8006b96:	3724      	adds	r7, #36	; 0x24
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9e:	4770      	bx	lr

08006ba0 <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b084      	sub	sp, #16
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
 8006ba8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 8006baa:	2306      	movs	r3, #6
 8006bac:	683a      	ldr	r2, [r7, #0]
 8006bae:	21b0      	movs	r1, #176	; 0xb0
 8006bb0:	6878      	ldr	r0, [r7, #4]
 8006bb2:	f003 f8bb 	bl	8009d2c <VL53L0X_WriteMulti>
 8006bb6:	4603      	mov	r3, r0
 8006bb8:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 8006bba:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	3710      	adds	r7, #16
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	bd80      	pop	{r7, pc}

08006bc6 <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 8006bc6:	b580      	push	{r7, lr}
 8006bc8:	b084      	sub	sp, #16
 8006bca:	af00      	add	r7, sp, #0
 8006bcc:	6078      	str	r0, [r7, #4]
 8006bce:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 8006bd0:	2306      	movs	r3, #6
 8006bd2:	683a      	ldr	r2, [r7, #0]
 8006bd4:	21b0      	movs	r1, #176	; 0xb0
 8006bd6:	6878      	ldr	r0, [r7, #4]
 8006bd8:	f003 f8d8 	bl	8009d8c <VL53L0X_ReadMulti>
 8006bdc:	4603      	mov	r3, r0
 8006bde:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
 8006be0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006be4:	4618      	mov	r0, r3
 8006be6:	3710      	adds	r7, #16
 8006be8:	46bd      	mov	sp, r7
 8006bea:	bd80      	pop	{r7, pc}

08006bec <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b08c      	sub	sp, #48	; 0x30
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	60f8      	str	r0, [r7, #12]
 8006bf4:	607a      	str	r2, [r7, #4]
 8006bf6:	603b      	str	r3, [r7, #0]
 8006bf8:	460b      	mov	r3, r1
 8006bfa:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 8006c02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c04:	61fb      	str	r3, [r7, #28]
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
 8006c06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c08:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c0e:	e02b      	b.n	8006c68 <enable_ref_spads+0x7c>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 8006c10:	f107 031c 	add.w	r3, r7, #28
 8006c14:	6a3a      	ldr	r2, [r7, #32]
 8006c16:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006c18:	6878      	ldr	r0, [r7, #4]
 8006c1a:	f7ff ff11 	bl	8006a40 <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 8006c1e:	69fb      	ldr	r3, [r7, #28]
 8006c20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c24:	d103      	bne.n	8006c2e <enable_ref_spads+0x42>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 8006c26:	23ce      	movs	r3, #206	; 0xce
 8006c28:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 8006c2c:	e020      	b.n	8006c70 <enable_ref_spads+0x84>
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 8006c2e:	69fb      	ldr	r3, [r7, #28]
 8006c30:	461a      	mov	r2, r3
 8006c32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c34:	4413      	add	r3, r2
 8006c36:	4618      	mov	r0, r3
 8006c38:	f7ff ff60 	bl	8006afc <is_aperture>
 8006c3c:	4603      	mov	r3, r0
 8006c3e:	461a      	mov	r2, r3
 8006c40:	7afb      	ldrb	r3, [r7, #11]
 8006c42:	4293      	cmp	r3, r2
 8006c44:	d003      	beq.n	8006c4e <enable_ref_spads+0x62>
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 8006c46:	23ce      	movs	r3, #206	; 0xce
 8006c48:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 8006c4c:	e010      	b.n	8006c70 <enable_ref_spads+0x84>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 8006c4e:	69fb      	ldr	r3, [r7, #28]
 8006c50:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 8006c52:	6a3a      	ldr	r2, [r7, #32]
 8006c54:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006c56:	6838      	ldr	r0, [r7, #0]
 8006c58:	f7ff ff6a 	bl	8006b30 <enable_spad_bit>
		currentSpad++;
 8006c5c:	6a3b      	ldr	r3, [r7, #32]
 8006c5e:	3301      	adds	r3, #1
 8006c60:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 8006c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c64:	3301      	adds	r3, #1
 8006c66:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c6c:	429a      	cmp	r2, r3
 8006c6e:	d3cf      	bcc.n	8006c10 <enable_ref_spads+0x24>
	}
	*lastSpad = currentSpad;
 8006c70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c72:	6a3a      	ldr	r2, [r7, #32]
 8006c74:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 8006c76:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d106      	bne.n	8006c8c <enable_ref_spads+0xa0>
		status = set_ref_spad_map(Dev, spadArray);
 8006c7e:	6839      	ldr	r1, [r7, #0]
 8006c80:	68f8      	ldr	r0, [r7, #12]
 8006c82:	f7ff ff8d 	bl	8006ba0 <set_ref_spad_map>
 8006c86:	4603      	mov	r3, r0
 8006c88:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


	if (status == VL53L0X_ERROR_NONE) {
 8006c8c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d121      	bne.n	8006cd8 <enable_ref_spads+0xec>
		status = get_ref_spad_map(Dev, checkSpadArray);
 8006c94:	f107 0314 	add.w	r3, r7, #20
 8006c98:	4619      	mov	r1, r3
 8006c9a:	68f8      	ldr	r0, [r7, #12]
 8006c9c:	f7ff ff93 	bl	8006bc6 <get_ref_spad_map>
 8006ca0:	4603      	mov	r3, r0
 8006ca2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		i = 0;
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	627b      	str	r3, [r7, #36]	; 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 8006caa:	e011      	b.n	8006cd0 <enable_ref_spads+0xe4>
			if (spadArray[i] != checkSpadArray[i]) {
 8006cac:	683a      	ldr	r2, [r7, #0]
 8006cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cb0:	4413      	add	r3, r2
 8006cb2:	781a      	ldrb	r2, [r3, #0]
 8006cb4:	f107 0114 	add.w	r1, r7, #20
 8006cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cba:	440b      	add	r3, r1
 8006cbc:	781b      	ldrb	r3, [r3, #0]
 8006cbe:	429a      	cmp	r2, r3
 8006cc0:	d003      	beq.n	8006cca <enable_ref_spads+0xde>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 8006cc2:	23ce      	movs	r3, #206	; 0xce
 8006cc4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 8006cc8:	e006      	b.n	8006cd8 <enable_ref_spads+0xec>
			}
			i++;
 8006cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ccc:	3301      	adds	r3, #1
 8006cce:	627b      	str	r3, [r7, #36]	; 0x24
		while (i < size) {
 8006cd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cd4:	429a      	cmp	r2, r3
 8006cd6:	d3e9      	bcc.n	8006cac <enable_ref_spads+0xc0>
		}
	}
	return status;
 8006cd8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8006cdc:	4618      	mov	r0, r3
 8006cde:	3730      	adds	r7, #48	; 0x30
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	bd80      	pop	{r7, pc}

08006ce4 <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b08a      	sub	sp, #40	; 0x28
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
 8006cec:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8006cee:	2300      	movs	r3, #0
 8006cf0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8006d00:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
 8006d04:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d107      	bne.n	8006d1c <perform_ref_signal_measurement+0x38>
		status = VL53L0X_WrByte(Dev,
 8006d0c:	22c0      	movs	r2, #192	; 0xc0
 8006d0e:	2101      	movs	r1, #1
 8006d10:	6878      	ldr	r0, [r7, #4]
 8006d12:	f003 f867 	bl	8009de4 <VL53L0X_WrByte>
 8006d16:	4603      	mov	r3, r0
 8006d18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 8006d1c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d108      	bne.n	8006d36 <perform_ref_signal_measurement+0x52>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 8006d24:	f107 0308 	add.w	r3, r7, #8
 8006d28:	4619      	mov	r1, r3
 8006d2a:	6878      	ldr	r0, [r7, #4]
 8006d2c:	f7ff fc48 	bl	80065c0 <VL53L0X_PerformSingleRangingMeasurement>
 8006d30:	4603      	mov	r3, r0
 8006d32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 8006d36:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d107      	bne.n	8006d4e <perform_ref_signal_measurement+0x6a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8006d3e:	2201      	movs	r2, #1
 8006d40:	21ff      	movs	r1, #255	; 0xff
 8006d42:	6878      	ldr	r0, [r7, #4]
 8006d44:	f003 f84e 	bl	8009de4 <VL53L0X_WrByte>
 8006d48:	4603      	mov	r3, r0
 8006d4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE)
 8006d4e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d107      	bne.n	8006d66 <perform_ref_signal_measurement+0x82>
		status = VL53L0X_RdWord(Dev,
 8006d56:	683a      	ldr	r2, [r7, #0]
 8006d58:	21b6      	movs	r1, #182	; 0xb6
 8006d5a:	6878      	ldr	r0, [r7, #4]
 8006d5c:	f003 f8ee 	bl	8009f3c <VL53L0X_RdWord>
 8006d60:	4603      	mov	r3, r0
 8006d62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 8006d66:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d107      	bne.n	8006d7e <perform_ref_signal_measurement+0x9a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8006d6e:	2200      	movs	r2, #0
 8006d70:	21ff      	movs	r1, #255	; 0xff
 8006d72:	6878      	ldr	r0, [r7, #4]
 8006d74:	f003 f836 	bl	8009de4 <VL53L0X_WrByte>
 8006d78:	4603      	mov	r3, r0
 8006d7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE) {
 8006d7e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d112      	bne.n	8006dac <perform_ref_signal_measurement+0xc8>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8006d86:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006d8a:	461a      	mov	r2, r3
 8006d8c:	2101      	movs	r1, #1
 8006d8e:	6878      	ldr	r0, [r7, #4]
 8006d90:	f003 f828 	bl	8009de4 <VL53L0X_WrByte>
 8006d94:	4603      	mov	r3, r0
 8006d96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 8006d9a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d104      	bne.n	8006dac <perform_ref_signal_measurement+0xc8>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8006da8:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
	}

	return status;
 8006dac:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8006db0:	4618      	mov	r0, r3
 8006db2:	3728      	adds	r7, #40	; 0x28
 8006db4:	46bd      	mov	sp, r7
 8006db6:	bd80      	pop	{r7, pc}

08006db8 <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
 8006db8:	b590      	push	{r4, r7, lr}
 8006dba:	b09d      	sub	sp, #116	; 0x74
 8006dbc:	af06      	add	r7, sp, #24
 8006dbe:	60f8      	str	r0, [r7, #12]
 8006dc0:	60b9      	str	r1, [r7, #8]
 8006dc2:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 8006dca:	23b4      	movs	r3, #180	; 0xb4
 8006dcc:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	uint32_t minimumSpadCount = 3;
 8006dd0:	2303      	movs	r3, #3
 8006dd2:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t maxSpadCount = 44;
 8006dd4:	232c      	movs	r3, #44	; 0x2c
 8006dd6:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t currentSpadIndex = 0;
 8006dd8:	2300      	movs	r3, #0
 8006dda:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t lastSpadIndex = 0;
 8006ddc:	2300      	movs	r3, #0
 8006dde:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 8006de0:	2300      	movs	r3, #0
 8006de2:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 8006de4:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8006de8:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 8006dea:	2300      	movs	r3, #0
 8006dec:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t index = 0;
 8006dee:	2300      	movs	r3, #0
 8006df0:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t spadArraySize = 6;
 8006df2:	2306      	movs	r3, #6
 8006df4:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t signalRateDiff = 0;
 8006df6:	2300      	movs	r3, #0
 8006df8:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t lastSignalRateDiff = 0;
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t complete = 0;
 8006dfe:	2300      	movs	r3, #0
 8006e00:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint8_t VhvSettings = 0;
 8006e04:	2300      	movs	r3, #0
 8006e06:	747b      	strb	r3, [r7, #17]
	uint8_t PhaseCal = 0;
 8006e08:	2300      	movs	r3, #0
 8006e0a:	743b      	strb	r3, [r7, #16]
	uint32_t refSpadCount_int = 0;
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t	 isApertureSpads_int = 0;
 8006e10:	2300      	movs	r3, #0
 8006e12:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	f8b3 313c 	ldrh.w	r3, [r3, #316]	; 0x13c
 8006e1c:	85fb      	strh	r3, [r7, #46]	; 0x2e
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
 8006e1e:	2300      	movs	r3, #0
 8006e20:	64bb      	str	r3, [r7, #72]	; 0x48
 8006e22:	e009      	b.n	8006e38 <VL53L0X_perform_ref_spad_management+0x80>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8006e24:	68fa      	ldr	r2, [r7, #12]
 8006e26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e28:	4413      	add	r3, r2
 8006e2a:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8006e2e:	2200      	movs	r2, #0
 8006e30:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 8006e32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e34:	3301      	adds	r3, #1
 8006e36:	64bb      	str	r3, [r7, #72]	; 0x48
 8006e38:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e3c:	429a      	cmp	r2, r3
 8006e3e:	d3f1      	bcc.n	8006e24 <VL53L0X_perform_ref_spad_management+0x6c>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8006e40:	2201      	movs	r2, #1
 8006e42:	21ff      	movs	r1, #255	; 0xff
 8006e44:	68f8      	ldr	r0, [r7, #12]
 8006e46:	f002 ffcd 	bl	8009de4 <VL53L0X_WrByte>
 8006e4a:	4603      	mov	r3, r0
 8006e4c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8006e50:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d107      	bne.n	8006e68 <VL53L0X_perform_ref_spad_management+0xb0>
		Status = VL53L0X_WrByte(Dev,
 8006e58:	2200      	movs	r2, #0
 8006e5a:	214f      	movs	r1, #79	; 0x4f
 8006e5c:	68f8      	ldr	r0, [r7, #12]
 8006e5e:	f002 ffc1 	bl	8009de4 <VL53L0X_WrByte>
 8006e62:	4603      	mov	r3, r0
 8006e64:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8006e68:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d107      	bne.n	8006e80 <VL53L0X_perform_ref_spad_management+0xc8>
		Status = VL53L0X_WrByte(Dev,
 8006e70:	222c      	movs	r2, #44	; 0x2c
 8006e72:	214e      	movs	r1, #78	; 0x4e
 8006e74:	68f8      	ldr	r0, [r7, #12]
 8006e76:	f002 ffb5 	bl	8009de4 <VL53L0X_WrByte>
 8006e7a:	4603      	mov	r3, r0
 8006e7c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8006e80:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d107      	bne.n	8006e98 <VL53L0X_perform_ref_spad_management+0xe0>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8006e88:	2200      	movs	r2, #0
 8006e8a:	21ff      	movs	r1, #255	; 0xff
 8006e8c:	68f8      	ldr	r0, [r7, #12]
 8006e8e:	f002 ffa9 	bl	8009de4 <VL53L0X_WrByte>
 8006e92:	4603      	mov	r3, r0
 8006e94:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8006e98:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d109      	bne.n	8006eb4 <VL53L0X_perform_ref_spad_management+0xfc>
		Status = VL53L0X_WrByte(Dev,
 8006ea0:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8006ea4:	461a      	mov	r2, r3
 8006ea6:	21b6      	movs	r1, #182	; 0xb6
 8006ea8:	68f8      	ldr	r0, [r7, #12]
 8006eaa:	f002 ff9b 	bl	8009de4 <VL53L0X_WrByte>
 8006eae:	4603      	mov	r3, r0
 8006eb0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
 8006eb4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d107      	bne.n	8006ecc <VL53L0X_perform_ref_spad_management+0x114>
		Status = VL53L0X_WrByte(Dev,
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	2180      	movs	r1, #128	; 0x80
 8006ec0:	68f8      	ldr	r0, [r7, #12]
 8006ec2:	f002 ff8f 	bl	8009de4 <VL53L0X_WrByte>
 8006ec6:	4603      	mov	r3, r0
 8006ec8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
 8006ecc:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d10a      	bne.n	8006eea <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 8006ed4:	f107 0210 	add.w	r2, r7, #16
 8006ed8:	f107 0111 	add.w	r1, r7, #17
 8006edc:	2300      	movs	r3, #0
 8006ede:	68f8      	ldr	r0, [r7, #12]
 8006ee0:	f000 fbbb 	bl	800765a <VL53L0X_perform_ref_calibration>
 8006ee4:	4603      	mov	r3, r0
 8006ee6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
 8006eea:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d121      	bne.n	8006f36 <VL53L0X_perform_ref_spad_management+0x17e>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	653b      	str	r3, [r7, #80]	; 0x50
		lastSpadIndex = currentSpadIndex;
 8006ef6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ef8:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 8006efa:	2300      	movs	r3, #0
 8006efc:	64fb      	str	r3, [r7, #76]	; 0x4c
		Status = enable_ref_spads(Dev,
 8006efe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f00:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	f503 7492 	add.w	r4, r3, #292	; 0x124
		Status = enable_ref_spads(Dev,
 8006f0e:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8006f12:	f107 0218 	add.w	r2, r7, #24
 8006f16:	9204      	str	r2, [sp, #16]
 8006f18:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006f1a:	9203      	str	r2, [sp, #12]
 8006f1c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006f1e:	9202      	str	r2, [sp, #8]
 8006f20:	9301      	str	r3, [sp, #4]
 8006f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f24:	9300      	str	r3, [sp, #0]
 8006f26:	4623      	mov	r3, r4
 8006f28:	4602      	mov	r2, r0
 8006f2a:	68f8      	ldr	r0, [r7, #12]
 8006f2c:	f7ff fe5e 	bl	8006bec <enable_ref_spads>
 8006f30:	4603      	mov	r3, r0
 8006f32:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006f36:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d174      	bne.n	8007028 <VL53L0X_perform_ref_spad_management+0x270>
		currentSpadIndex = lastSpadIndex;
 8006f3e:	69bb      	ldr	r3, [r7, #24]
 8006f40:	653b      	str	r3, [r7, #80]	; 0x50

		Status = perform_ref_signal_measurement(Dev,
 8006f42:	f107 0312 	add.w	r3, r7, #18
 8006f46:	4619      	mov	r1, r3
 8006f48:	68f8      	ldr	r0, [r7, #12]
 8006f4a:	f7ff fecb 	bl	8006ce4 <perform_ref_signal_measurement>
 8006f4e:	4603      	mov	r3, r0
 8006f50:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 8006f54:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d161      	bne.n	8007020 <VL53L0X_perform_ref_spad_management+0x268>
			(peakSignalRateRef > targetRefRate)) {
 8006f5c:	8a7b      	ldrh	r3, [r7, #18]
		if ((Status == VL53L0X_ERROR_NONE) &&
 8006f5e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006f60:	429a      	cmp	r2, r3
 8006f62:	d25d      	bcs.n	8007020 <VL53L0X_perform_ref_spad_management+0x268>
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs */

			for (index = 0; index < spadArraySize; index++)
 8006f64:	2300      	movs	r3, #0
 8006f66:	64bb      	str	r3, [r7, #72]	; 0x48
 8006f68:	e009      	b.n	8006f7e <VL53L0X_perform_ref_spad_management+0x1c6>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8006f6a:	68fa      	ldr	r2, [r7, #12]
 8006f6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f6e:	4413      	add	r3, r2
 8006f70:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8006f74:	2200      	movs	r2, #0
 8006f76:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 8006f78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f7a:	3301      	adds	r3, #1
 8006f7c:	64bb      	str	r3, [r7, #72]	; 0x48
 8006f7e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f82:	429a      	cmp	r2, r3
 8006f84:	d3f1      	bcc.n	8006f6a <VL53L0X_perform_ref_spad_management+0x1b2>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
 8006f86:	e002      	b.n	8006f8e <VL53L0X_perform_ref_spad_management+0x1d6>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 8006f88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f8a:	3301      	adds	r3, #1
 8006f8c:	653b      	str	r3, [r7, #80]	; 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 8006f8e:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 8006f92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f94:	4413      	add	r3, r2
 8006f96:	4618      	mov	r0, r3
 8006f98:	f7ff fdb0 	bl	8006afc <is_aperture>
 8006f9c:	4603      	mov	r3, r0
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d103      	bne.n	8006faa <VL53L0X_perform_ref_spad_management+0x1f2>
				== 0) && (currentSpadIndex < maxSpadCount)) {
 8006fa2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006fa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fa6:	429a      	cmp	r2, r3
 8006fa8:	d3ee      	bcc.n	8006f88 <VL53L0X_perform_ref_spad_management+0x1d0>
			}

			needAptSpads = 1;
 8006faa:	2301      	movs	r3, #1
 8006fac:	64fb      	str	r3, [r7, #76]	; 0x4c

			Status = enable_ref_spads(Dev,
 8006fae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fb0:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	f503 7492 	add.w	r4, r3, #292	; 0x124
			Status = enable_ref_spads(Dev,
 8006fbe:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8006fc2:	f107 0218 	add.w	r2, r7, #24
 8006fc6:	9204      	str	r2, [sp, #16]
 8006fc8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006fca:	9203      	str	r2, [sp, #12]
 8006fcc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006fce:	9202      	str	r2, [sp, #8]
 8006fd0:	9301      	str	r3, [sp, #4]
 8006fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fd4:	9300      	str	r3, [sp, #0]
 8006fd6:	4623      	mov	r3, r4
 8006fd8:	4602      	mov	r2, r0
 8006fda:	68f8      	ldr	r0, [r7, #12]
 8006fdc:	f7ff fe06 	bl	8006bec <enable_ref_spads>
 8006fe0:	4603      	mov	r3, r0
 8006fe2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 8006fe6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d11b      	bne.n	8007026 <VL53L0X_perform_ref_spad_management+0x26e>
				currentSpadIndex = lastSpadIndex;
 8006fee:	69bb      	ldr	r3, [r7, #24]
 8006ff0:	653b      	str	r3, [r7, #80]	; 0x50
				Status = perform_ref_signal_measurement(Dev,
 8006ff2:	f107 0312 	add.w	r3, r7, #18
 8006ff6:	4619      	mov	r1, r3
 8006ff8:	68f8      	ldr	r0, [r7, #12]
 8006ffa:	f7ff fe73 	bl	8006ce4 <perform_ref_signal_measurement>
 8006ffe:	4603      	mov	r3, r0
 8007000:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 8007004:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007008:	2b00      	cmp	r3, #0
 800700a:	d10c      	bne.n	8007026 <VL53L0X_perform_ref_spad_management+0x26e>
					(peakSignalRateRef > targetRefRate)) {
 800700c:	8a7b      	ldrh	r3, [r7, #18]
				if ((Status == VL53L0X_ERROR_NONE) &&
 800700e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007010:	429a      	cmp	r2, r3
 8007012:	d208      	bcs.n	8007026 <VL53L0X_perform_ref_spad_management+0x26e>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
 8007014:	2301      	movs	r3, #1
 8007016:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					refSpadCount_int = minimumSpadCount;
 800701a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800701c:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 800701e:	e002      	b.n	8007026 <VL53L0X_perform_ref_spad_management+0x26e>
				}
			}
		} else {
			needAptSpads = 0;
 8007020:	2300      	movs	r3, #0
 8007022:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007024:	e000      	b.n	8007028 <VL53L0X_perform_ref_spad_management+0x270>
			if (Status == VL53L0X_ERROR_NONE) {
 8007026:	bf00      	nop
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8007028:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800702c:	2b00      	cmp	r3, #0
 800702e:	f040 80af 	bne.w	8007190 <VL53L0X_perform_ref_spad_management+0x3d8>
		(peakSignalRateRef < targetRefRate)) {
 8007032:	8a7b      	ldrh	r3, [r7, #18]
	if ((Status == VL53L0X_ERROR_NONE) &&
 8007034:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007036:	429a      	cmp	r2, r3
 8007038:	f240 80aa 	bls.w	8007190 <VL53L0X_perform_ref_spad_management+0x3d8>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
 800703c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800703e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		refSpadCount_int	= minimumSpadCount;
 8007042:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007044:	63fb      	str	r3, [r7, #60]	; 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	f503 7192 	add.w	r1, r3, #292	; 0x124
 800704c:	f107 031c 	add.w	r3, r7, #28
 8007050:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007052:	4618      	mov	r0, r3
 8007054:	f003 f81a 	bl	800a08c <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 8007058:	8a7b      	ldrh	r3, [r7, #18]
 800705a:	461a      	mov	r2, r3
 800705c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800705e:	1ad3      	subs	r3, r2, r3
 8007060:	2b00      	cmp	r3, #0
 8007062:	bfb8      	it	lt
 8007064:	425b      	neglt	r3, r3
 8007066:	647b      	str	r3, [r7, #68]	; 0x44
			targetRefRate);
		complete = 0;
 8007068:	2300      	movs	r3, #0
 800706a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

		while (!complete) {
 800706e:	e086      	b.n	800717e <VL53L0X_perform_ref_spad_management+0x3c6>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	f503 7095 	add.w	r0, r3, #298	; 0x12a
			get_next_good_spad(
 8007076:	f107 0314 	add.w	r3, r7, #20
 800707a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800707c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800707e:	f7ff fcdf 	bl	8006a40 <get_next_good_spad>
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
 8007082:	697b      	ldr	r3, [r7, #20]
 8007084:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007088:	d103      	bne.n	8007092 <VL53L0X_perform_ref_spad_management+0x2da>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 800708a:	23ce      	movs	r3, #206	; 0xce
 800708c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 8007090:	e07e      	b.n	8007190 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 8007092:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8007096:	697a      	ldr	r2, [r7, #20]
 8007098:	4413      	add	r3, r2
 800709a:	4618      	mov	r0, r3
 800709c:	f7ff fd2e 	bl	8006afc <is_aperture>
 80070a0:	4603      	mov	r3, r0
 80070a2:	461a      	mov	r2, r3
 80070a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070a6:	4293      	cmp	r3, r2
 80070a8:	d003      	beq.n	80070b2 <VL53L0X_perform_ref_spad_management+0x2fa>
					needAptSpads) {
				/* At this point we have enabled the maximum
				 * number of Aperture spads.
				 */
				complete = 1;
 80070aa:	2301      	movs	r3, #1
 80070ac:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
				break;
 80070b0:	e06e      	b.n	8007190 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			(refSpadCount_int)++;
 80070b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070b4:	3301      	adds	r3, #1
 80070b6:	63fb      	str	r3, [r7, #60]	; 0x3c

			currentSpadIndex = nextGoodSpad;
 80070b8:	697b      	ldr	r3, [r7, #20]
 80070ba:	653b      	str	r3, [r7, #80]	; 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	f503 7392 	add.w	r3, r3, #292	; 0x124
			Status = enable_spad_bit(
 80070c2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80070c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80070c6:	4618      	mov	r0, r3
 80070c8:	f7ff fd32 	bl	8006b30 <enable_spad_bit>
 80070cc:	4603      	mov	r3, r0
 80070ce:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 80070d2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d10c      	bne.n	80070f4 <VL53L0X_perform_ref_spad_management+0x33c>
				currentSpadIndex++;
 80070da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80070dc:	3301      	adds	r3, #1
 80070de:	653b      	str	r3, [r7, #80]	; 0x50
				/* Proceed to apply the additional spad and
				 * perform measurement. */
				Status = set_ref_spad_map(Dev,
					Dev->Data.SpadData.RefSpadEnables);
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	f503 7392 	add.w	r3, r3, #292	; 0x124
				Status = set_ref_spad_map(Dev,
 80070e6:	4619      	mov	r1, r3
 80070e8:	68f8      	ldr	r0, [r7, #12]
 80070ea:	f7ff fd59 	bl	8006ba0 <set_ref_spad_map>
 80070ee:	4603      	mov	r3, r0
 80070f0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}

			if (Status != VL53L0X_ERROR_NONE)
 80070f4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d146      	bne.n	800718a <VL53L0X_perform_ref_spad_management+0x3d2>
				break;

			Status = perform_ref_signal_measurement(Dev,
 80070fc:	f107 0312 	add.w	r3, r7, #18
 8007100:	4619      	mov	r1, r3
 8007102:	68f8      	ldr	r0, [r7, #12]
 8007104:	f7ff fdee 	bl	8006ce4 <perform_ref_signal_measurement>
 8007108:	4603      	mov	r3, r0
 800710a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 800710e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007112:	2b00      	cmp	r3, #0
 8007114:	d13b      	bne.n	800718e <VL53L0X_perform_ref_spad_management+0x3d6>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 8007116:	8a7b      	ldrh	r3, [r7, #18]
 8007118:	461a      	mov	r2, r3
 800711a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800711c:	1ad3      	subs	r3, r2, r3
 800711e:	2b00      	cmp	r3, #0
 8007120:	bfb8      	it	lt
 8007122:	425b      	neglt	r3, r3
 8007124:	627b      	str	r3, [r7, #36]	; 0x24

			if (peakSignalRateRef > targetRefRate) {
 8007126:	8a7b      	ldrh	r3, [r7, #18]
 8007128:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800712a:	429a      	cmp	r2, r3
 800712c:	d21c      	bcs.n	8007168 <VL53L0X_perform_ref_spad_management+0x3b0>
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
 800712e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007130:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007132:	429a      	cmp	r2, r3
 8007134:	d914      	bls.n	8007160 <VL53L0X_perform_ref_spad_management+0x3a8>
					/* Previous spad map produced a closer
					 * measurement, so choose this. */
					Status = set_ref_spad_map(Dev,
 8007136:	f107 031c 	add.w	r3, r7, #28
 800713a:	4619      	mov	r1, r3
 800713c:	68f8      	ldr	r0, [r7, #12]
 800713e:	f7ff fd2f 	bl	8006ba0 <set_ref_spad_map>
 8007142:	4603      	mov	r3, r0
 8007144:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	f503 7392 	add.w	r3, r3, #292	; 0x124
					memcpy(
 800714e:	f107 011c 	add.w	r1, r7, #28
 8007152:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007154:	4618      	mov	r0, r3
 8007156:	f002 ff99 	bl	800a08c <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 800715a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800715c:	3b01      	subs	r3, #1
 800715e:	63fb      	str	r3, [r7, #60]	; 0x3c
				}
				complete = 1;
 8007160:	2301      	movs	r3, #1
 8007162:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007166:	e00a      	b.n	800717e <VL53L0X_perform_ref_spad_management+0x3c6>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 8007168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800716a:	647b      	str	r3, [r7, #68]	; 0x44
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	f503 7192 	add.w	r1, r3, #292	; 0x124
				memcpy(lastSpadArray,
 8007172:	f107 031c 	add.w	r3, r7, #28
 8007176:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007178:	4618      	mov	r0, r3
 800717a:	f002 ff87 	bl	800a08c <memcpy>
		while (!complete) {
 800717e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007182:	2b00      	cmp	r3, #0
 8007184:	f43f af74 	beq.w	8007070 <VL53L0X_perform_ref_spad_management+0x2b8>
 8007188:	e002      	b.n	8007190 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 800718a:	bf00      	nop
 800718c:	e000      	b.n	8007190 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 800718e:	bf00      	nop
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007190:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007194:	2b00      	cmp	r3, #0
 8007196:	d115      	bne.n	80071c4 <VL53L0X_perform_ref_spad_management+0x40c>
		*refSpadCount = refSpadCount_int;
 8007198:	68bb      	ldr	r3, [r7, #8]
 800719a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800719c:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 80071a4:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	2201      	movs	r2, #1
 80071aa:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80071ae:	68bb      	ldr	r3, [r7, #8]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	b2da      	uxtb	r2, r3
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	781a      	ldrb	r2, [r3, #0]
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
 80071c4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 80071c8:	4618      	mov	r0, r3
 80071ca:	375c      	adds	r7, #92	; 0x5c
 80071cc:	46bd      	mov	sp, r7
 80071ce:	bd90      	pop	{r4, r7, pc}

080071d0 <VL53L0X_set_reference_spads>:

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 80071d0:	b590      	push	{r4, r7, lr}
 80071d2:	b093      	sub	sp, #76	; 0x4c
 80071d4:	af06      	add	r7, sp, #24
 80071d6:	60f8      	str	r0, [r7, #12]
 80071d8:	60b9      	str	r1, [r7, #8]
 80071da:	4613      	mov	r3, r2
 80071dc:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80071de:	2300      	movs	r3, #0
 80071e0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t currentSpadIndex = 0;
 80071e4:	2300      	movs	r3, #0
 80071e6:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t startSelect = 0xB4;
 80071e8:	23b4      	movs	r3, #180	; 0xb4
 80071ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t spadArraySize = 6;
 80071ee:	2306      	movs	r3, #6
 80071f0:	61fb      	str	r3, [r7, #28]
	uint32_t maxSpadCount = 44;
 80071f2:	232c      	movs	r3, #44	; 0x2c
 80071f4:	61bb      	str	r3, [r7, #24]
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80071f6:	2201      	movs	r2, #1
 80071f8:	21ff      	movs	r1, #255	; 0xff
 80071fa:	68f8      	ldr	r0, [r7, #12]
 80071fc:	f002 fdf2 	bl	8009de4 <VL53L0X_WrByte>
 8007200:	4603      	mov	r3, r0
 8007202:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 8007206:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800720a:	2b00      	cmp	r3, #0
 800720c:	d107      	bne.n	800721e <VL53L0X_set_reference_spads+0x4e>
		Status = VL53L0X_WrByte(Dev,
 800720e:	2200      	movs	r2, #0
 8007210:	214f      	movs	r1, #79	; 0x4f
 8007212:	68f8      	ldr	r0, [r7, #12]
 8007214:	f002 fde6 	bl	8009de4 <VL53L0X_WrByte>
 8007218:	4603      	mov	r3, r0
 800721a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 800721e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007222:	2b00      	cmp	r3, #0
 8007224:	d107      	bne.n	8007236 <VL53L0X_set_reference_spads+0x66>
		Status = VL53L0X_WrByte(Dev,
 8007226:	222c      	movs	r2, #44	; 0x2c
 8007228:	214e      	movs	r1, #78	; 0x4e
 800722a:	68f8      	ldr	r0, [r7, #12]
 800722c:	f002 fdda 	bl	8009de4 <VL53L0X_WrByte>
 8007230:	4603      	mov	r3, r0
 8007232:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8007236:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800723a:	2b00      	cmp	r3, #0
 800723c:	d107      	bne.n	800724e <VL53L0X_set_reference_spads+0x7e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800723e:	2200      	movs	r2, #0
 8007240:	21ff      	movs	r1, #255	; 0xff
 8007242:	68f8      	ldr	r0, [r7, #12]
 8007244:	f002 fdce 	bl	8009de4 <VL53L0X_WrByte>
 8007248:	4603      	mov	r3, r0
 800724a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 800724e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007252:	2b00      	cmp	r3, #0
 8007254:	d109      	bne.n	800726a <VL53L0X_set_reference_spads+0x9a>
		Status = VL53L0X_WrByte(Dev,
 8007256:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800725a:	461a      	mov	r2, r3
 800725c:	21b6      	movs	r1, #182	; 0xb6
 800725e:	68f8      	ldr	r0, [r7, #12]
 8007260:	f002 fdc0 	bl	8009de4 <VL53L0X_WrByte>
 8007264:	4603      	mov	r3, r0
 8007266:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
 800726a:	2300      	movs	r3, #0
 800726c:	627b      	str	r3, [r7, #36]	; 0x24
 800726e:	e009      	b.n	8007284 <VL53L0X_set_reference_spads+0xb4>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8007270:	68fa      	ldr	r2, [r7, #12]
 8007272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007274:	4413      	add	r3, r2
 8007276:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800727a:	2200      	movs	r2, #0
 800727c:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 800727e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007280:	3301      	adds	r3, #1
 8007282:	627b      	str	r3, [r7, #36]	; 0x24
 8007284:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007286:	69fb      	ldr	r3, [r7, #28]
 8007288:	429a      	cmp	r2, r3
 800728a:	d3f1      	bcc.n	8007270 <VL53L0X_set_reference_spads+0xa0>

	if (isApertureSpads) {
 800728c:	79fb      	ldrb	r3, [r7, #7]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d011      	beq.n	80072b6 <VL53L0X_set_reference_spads+0xe6>
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 8007292:	e002      	b.n	800729a <VL53L0X_set_reference_spads+0xca>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
 8007294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007296:	3301      	adds	r3, #1
 8007298:	62bb      	str	r3, [r7, #40]	; 0x28
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 800729a:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800729e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072a0:	4413      	add	r3, r2
 80072a2:	4618      	mov	r0, r3
 80072a4:	f7ff fc2a 	bl	8006afc <is_aperture>
 80072a8:	4603      	mov	r3, r0
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d103      	bne.n	80072b6 <VL53L0X_set_reference_spads+0xe6>
 80072ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80072b0:	69bb      	ldr	r3, [r7, #24]
 80072b2:	429a      	cmp	r2, r3
 80072b4:	d3ee      	bcc.n	8007294 <VL53L0X_set_reference_spads+0xc4>
		}
	}
	Status = enable_ref_spads(Dev,
				isApertureSpads,
				Dev->Data.SpadData.RefGoodSpadMap,
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	f503 7095 	add.w	r0, r3, #298	; 0x12a
				Dev->Data.SpadData.RefSpadEnables,
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	f503 7492 	add.w	r4, r3, #292	; 0x124
	Status = enable_ref_spads(Dev,
 80072c2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80072c6:	79f9      	ldrb	r1, [r7, #7]
 80072c8:	f107 0214 	add.w	r2, r7, #20
 80072cc:	9204      	str	r2, [sp, #16]
 80072ce:	68ba      	ldr	r2, [r7, #8]
 80072d0:	9203      	str	r2, [sp, #12]
 80072d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80072d4:	9202      	str	r2, [sp, #8]
 80072d6:	9301      	str	r3, [sp, #4]
 80072d8:	69fb      	ldr	r3, [r7, #28]
 80072da:	9300      	str	r3, [sp, #0]
 80072dc:	4623      	mov	r3, r4
 80072de:	4602      	mov	r2, r0
 80072e0:	68f8      	ldr	r0, [r7, #12]
 80072e2:	f7ff fc83 	bl	8006bec <enable_ref_spads>
 80072e6:	4603      	mov	r3, r0
 80072e8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 80072ec:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d10c      	bne.n	800730e <VL53L0X_set_reference_spads+0x13e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	2201      	movs	r2, #1
 80072f8:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80072fc:	68bb      	ldr	r3, [r7, #8]
 80072fe:	b2da      	uxtb	r2, r3
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	79fa      	ldrb	r2, [r7, #7]
 800730a:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
 800730e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8007312:	4618      	mov	r0, r3
 8007314:	3734      	adds	r7, #52	; 0x34
 8007316:	46bd      	mov	sp, r7
 8007318:	bd90      	pop	{r4, r7, pc}

0800731a <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 800731a:	b580      	push	{r7, lr}
 800731c:	b084      	sub	sp, #16
 800731e:	af00      	add	r7, sp, #0
 8007320:	6078      	str	r0, [r7, #4]
 8007322:	460b      	mov	r3, r1
 8007324:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007326:	2300      	movs	r3, #0
 8007328:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800732a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d10a      	bne.n	8007348 <VL53L0X_perform_single_ref_calibration+0x2e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 8007332:	78fb      	ldrb	r3, [r7, #3]
 8007334:	f043 0301 	orr.w	r3, r3, #1
 8007338:	b2db      	uxtb	r3, r3
 800733a:	461a      	mov	r2, r3
 800733c:	2100      	movs	r1, #0
 800733e:	6878      	ldr	r0, [r7, #4]
 8007340:	f002 fd50 	bl	8009de4 <VL53L0X_WrByte>
 8007344:	4603      	mov	r3, r0
 8007346:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 8007348:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d104      	bne.n	800735a <VL53L0X_perform_single_ref_calibration+0x40>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8007350:	6878      	ldr	r0, [r7, #4]
 8007352:	f000 f9bf 	bl	80076d4 <VL53L0X_measurement_poll_for_completion>
 8007356:	4603      	mov	r3, r0
 8007358:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800735a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d105      	bne.n	800736e <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8007362:	2100      	movs	r1, #0
 8007364:	6878      	ldr	r0, [r7, #4]
 8007366:	f7ff fab5 	bl	80068d4 <VL53L0X_ClearInterruptMask>
 800736a:	4603      	mov	r3, r0
 800736c:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800736e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d106      	bne.n	8007384 <VL53L0X_perform_single_ref_calibration+0x6a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 8007376:	2200      	movs	r2, #0
 8007378:	2100      	movs	r1, #0
 800737a:	6878      	ldr	r0, [r7, #4]
 800737c:	f002 fd32 	bl	8009de4 <VL53L0X_WrByte>
 8007380:	4603      	mov	r3, r0
 8007382:	73fb      	strb	r3, [r7, #15]

	return Status;
 8007384:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007388:	4618      	mov	r0, r3
 800738a:	3710      	adds	r7, #16
 800738c:	46bd      	mov	sp, r7
 800738e:	bd80      	pop	{r7, pc}

08007390 <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 8007390:	b580      	push	{r7, lr}
 8007392:	b084      	sub	sp, #16
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
 8007398:	4608      	mov	r0, r1
 800739a:	4611      	mov	r1, r2
 800739c:	461a      	mov	r2, r3
 800739e:	4603      	mov	r3, r0
 80073a0:	70fb      	strb	r3, [r7, #3]
 80073a2:	460b      	mov	r3, r1
 80073a4:	70bb      	strb	r3, [r7, #2]
 80073a6:	4613      	mov	r3, r2
 80073a8:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80073aa:	2300      	movs	r3, #0
 80073ac:	73fb      	strb	r3, [r7, #15]
	uint8_t PhaseCalint = 0;
 80073ae:	2300      	movs	r3, #0
 80073b0:	73bb      	strb	r3, [r7, #14]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80073b2:	2201      	movs	r2, #1
 80073b4:	21ff      	movs	r1, #255	; 0xff
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	f002 fd14 	bl	8009de4 <VL53L0X_WrByte>
 80073bc:	4603      	mov	r3, r0
 80073be:	461a      	mov	r2, r3
 80073c0:	7bfb      	ldrb	r3, [r7, #15]
 80073c2:	4313      	orrs	r3, r2
 80073c4:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80073c6:	2200      	movs	r2, #0
 80073c8:	2100      	movs	r1, #0
 80073ca:	6878      	ldr	r0, [r7, #4]
 80073cc:	f002 fd0a 	bl	8009de4 <VL53L0X_WrByte>
 80073d0:	4603      	mov	r3, r0
 80073d2:	461a      	mov	r2, r3
 80073d4:	7bfb      	ldrb	r3, [r7, #15]
 80073d6:	4313      	orrs	r3, r2
 80073d8:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80073da:	2200      	movs	r2, #0
 80073dc:	21ff      	movs	r1, #255	; 0xff
 80073de:	6878      	ldr	r0, [r7, #4]
 80073e0:	f002 fd00 	bl	8009de4 <VL53L0X_WrByte>
 80073e4:	4603      	mov	r3, r0
 80073e6:	461a      	mov	r2, r3
 80073e8:	7bfb      	ldrb	r3, [r7, #15]
 80073ea:	4313      	orrs	r3, r2
 80073ec:	73fb      	strb	r3, [r7, #15]

	if (read_not_write) {
 80073ee:	78fb      	ldrb	r3, [r7, #3]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d01e      	beq.n	8007432 <VL53L0X_ref_calibration_io+0xa2>
		if (vhv_enable)
 80073f4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d009      	beq.n	8007410 <VL53L0X_ref_calibration_io+0x80>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 80073fc:	69ba      	ldr	r2, [r7, #24]
 80073fe:	21cb      	movs	r1, #203	; 0xcb
 8007400:	6878      	ldr	r0, [r7, #4]
 8007402:	f002 fd71 	bl	8009ee8 <VL53L0X_RdByte>
 8007406:	4603      	mov	r3, r0
 8007408:	461a      	mov	r2, r3
 800740a:	7bfb      	ldrb	r3, [r7, #15]
 800740c:	4313      	orrs	r3, r2
 800740e:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 8007410:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007414:	2b00      	cmp	r3, #0
 8007416:	d02a      	beq.n	800746e <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 8007418:	f107 030e 	add.w	r3, r7, #14
 800741c:	461a      	mov	r2, r3
 800741e:	21ee      	movs	r1, #238	; 0xee
 8007420:	6878      	ldr	r0, [r7, #4]
 8007422:	f002 fd61 	bl	8009ee8 <VL53L0X_RdByte>
 8007426:	4603      	mov	r3, r0
 8007428:	461a      	mov	r2, r3
 800742a:	7bfb      	ldrb	r3, [r7, #15]
 800742c:	4313      	orrs	r3, r2
 800742e:	73fb      	strb	r3, [r7, #15]
 8007430:	e01d      	b.n	800746e <VL53L0X_ref_calibration_io+0xde>
	} else {
		if (vhv_enable)
 8007432:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d00a      	beq.n	8007450 <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 800743a:	78bb      	ldrb	r3, [r7, #2]
 800743c:	461a      	mov	r2, r3
 800743e:	21cb      	movs	r1, #203	; 0xcb
 8007440:	6878      	ldr	r0, [r7, #4]
 8007442:	f002 fccf 	bl	8009de4 <VL53L0X_WrByte>
 8007446:	4603      	mov	r3, r0
 8007448:	461a      	mov	r2, r3
 800744a:	7bfb      	ldrb	r3, [r7, #15]
 800744c:	4313      	orrs	r3, r2
 800744e:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 8007450:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007454:	2b00      	cmp	r3, #0
 8007456:	d00a      	beq.n	800746e <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 8007458:	787b      	ldrb	r3, [r7, #1]
 800745a:	2280      	movs	r2, #128	; 0x80
 800745c:	21ee      	movs	r1, #238	; 0xee
 800745e:	6878      	ldr	r0, [r7, #4]
 8007460:	f002 fd0e 	bl	8009e80 <VL53L0X_UpdateByte>
 8007464:	4603      	mov	r3, r0
 8007466:	461a      	mov	r2, r3
 8007468:	7bfb      	ldrb	r3, [r7, #15]
 800746a:	4313      	orrs	r3, r2
 800746c:	73fb      	strb	r3, [r7, #15]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800746e:	2201      	movs	r2, #1
 8007470:	21ff      	movs	r1, #255	; 0xff
 8007472:	6878      	ldr	r0, [r7, #4]
 8007474:	f002 fcb6 	bl	8009de4 <VL53L0X_WrByte>
 8007478:	4603      	mov	r3, r0
 800747a:	461a      	mov	r2, r3
 800747c:	7bfb      	ldrb	r3, [r7, #15]
 800747e:	4313      	orrs	r3, r2
 8007480:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8007482:	2201      	movs	r2, #1
 8007484:	2100      	movs	r1, #0
 8007486:	6878      	ldr	r0, [r7, #4]
 8007488:	f002 fcac 	bl	8009de4 <VL53L0X_WrByte>
 800748c:	4603      	mov	r3, r0
 800748e:	461a      	mov	r2, r3
 8007490:	7bfb      	ldrb	r3, [r7, #15]
 8007492:	4313      	orrs	r3, r2
 8007494:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8007496:	2200      	movs	r2, #0
 8007498:	21ff      	movs	r1, #255	; 0xff
 800749a:	6878      	ldr	r0, [r7, #4]
 800749c:	f002 fca2 	bl	8009de4 <VL53L0X_WrByte>
 80074a0:	4603      	mov	r3, r0
 80074a2:	461a      	mov	r2, r3
 80074a4:	7bfb      	ldrb	r3, [r7, #15]
 80074a6:	4313      	orrs	r3, r2
 80074a8:	73fb      	strb	r3, [r7, #15]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 80074aa:	7bbb      	ldrb	r3, [r7, #14]
 80074ac:	f023 0310 	bic.w	r3, r3, #16
 80074b0:	b2da      	uxtb	r2, r3
 80074b2:	69fb      	ldr	r3, [r7, #28]
 80074b4:	701a      	strb	r2, [r3, #0]

	return Status;
 80074b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80074ba:	4618      	mov	r0, r3
 80074bc:	3710      	adds	r7, #16
 80074be:	46bd      	mov	sp, r7
 80074c0:	bd80      	pop	{r7, pc}

080074c2 <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 80074c2:	b580      	push	{r7, lr}
 80074c4:	b08a      	sub	sp, #40	; 0x28
 80074c6:	af04      	add	r7, sp, #16
 80074c8:	60f8      	str	r0, [r7, #12]
 80074ca:	60b9      	str	r1, [r7, #8]
 80074cc:	4611      	mov	r1, r2
 80074ce:	461a      	mov	r2, r3
 80074d0:	460b      	mov	r3, r1
 80074d2:	71fb      	strb	r3, [r7, #7]
 80074d4:	4613      	mov	r3, r2
 80074d6:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80074d8:	2300      	movs	r3, #0
 80074da:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 80074dc:	2300      	movs	r3, #0
 80074de:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 80074e0:	2300      	movs	r3, #0
 80074e2:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 80074e4:	2300      	movs	r3, #0
 80074e6:	753b      	strb	r3, [r7, #20]
	uint8_t PhaseCalInt = 0;
 80074e8:	2300      	movs	r3, #0
 80074ea:	74fb      	strb	r3, [r7, #19]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 80074ec:	79bb      	ldrb	r3, [r7, #6]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d003      	beq.n	80074fa <VL53L0X_perform_vhv_calibration+0x38>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 80074f8:	75bb      	strb	r3, [r7, #22]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 80074fa:	2201      	movs	r2, #1
 80074fc:	2101      	movs	r1, #1
 80074fe:	68f8      	ldr	r0, [r7, #12]
 8007500:	f002 fc70 	bl	8009de4 <VL53L0X_WrByte>
 8007504:	4603      	mov	r3, r0
 8007506:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 8007508:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d105      	bne.n	800751c <VL53L0X_perform_vhv_calibration+0x5a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 8007510:	2140      	movs	r1, #64	; 0x40
 8007512:	68f8      	ldr	r0, [r7, #12]
 8007514:	f7ff ff01 	bl	800731a <VL53L0X_perform_single_ref_calibration>
 8007518:	4603      	mov	r3, r0
 800751a:	75fb      	strb	r3, [r7, #23]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 800751c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d115      	bne.n	8007550 <VL53L0X_perform_vhv_calibration+0x8e>
 8007524:	79fb      	ldrb	r3, [r7, #7]
 8007526:	2b01      	cmp	r3, #1
 8007528:	d112      	bne.n	8007550 <VL53L0X_perform_vhv_calibration+0x8e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 800752a:	7d39      	ldrb	r1, [r7, #20]
 800752c:	7d7a      	ldrb	r2, [r7, #21]
 800752e:	2300      	movs	r3, #0
 8007530:	9303      	str	r3, [sp, #12]
 8007532:	2301      	movs	r3, #1
 8007534:	9302      	str	r3, [sp, #8]
 8007536:	f107 0313 	add.w	r3, r7, #19
 800753a:	9301      	str	r3, [sp, #4]
 800753c:	68bb      	ldr	r3, [r7, #8]
 800753e:	9300      	str	r3, [sp, #0]
 8007540:	460b      	mov	r3, r1
 8007542:	2101      	movs	r1, #1
 8007544:	68f8      	ldr	r0, [r7, #12]
 8007546:	f7ff ff23 	bl	8007390 <VL53L0X_ref_calibration_io>
 800754a:	4603      	mov	r3, r0
 800754c:	75fb      	strb	r3, [r7, #23]
 800754e:	e002      	b.n	8007556 <VL53L0X_perform_vhv_calibration+0x94>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 8007550:	68bb      	ldr	r3, [r7, #8]
 8007552:	2200      	movs	r2, #0
 8007554:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8007556:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d112      	bne.n	8007584 <VL53L0X_perform_vhv_calibration+0xc2>
 800755e:	79bb      	ldrb	r3, [r7, #6]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d00f      	beq.n	8007584 <VL53L0X_perform_vhv_calibration+0xc2>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8007564:	7dbb      	ldrb	r3, [r7, #22]
 8007566:	461a      	mov	r2, r3
 8007568:	2101      	movs	r1, #1
 800756a:	68f8      	ldr	r0, [r7, #12]
 800756c:	f002 fc3a 	bl	8009de4 <VL53L0X_WrByte>
 8007570:	4603      	mov	r3, r0
 8007572:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8007574:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007578:	2b00      	cmp	r3, #0
 800757a:	d103      	bne.n	8007584 <VL53L0X_perform_vhv_calibration+0xc2>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	7dba      	ldrb	r2, [r7, #22]
 8007580:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8007584:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007588:	4618      	mov	r0, r3
 800758a:	3718      	adds	r7, #24
 800758c:	46bd      	mov	sp, r7
 800758e:	bd80      	pop	{r7, pc}

08007590 <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8007590:	b580      	push	{r7, lr}
 8007592:	b08a      	sub	sp, #40	; 0x28
 8007594:	af04      	add	r7, sp, #16
 8007596:	60f8      	str	r0, [r7, #12]
 8007598:	60b9      	str	r1, [r7, #8]
 800759a:	4611      	mov	r1, r2
 800759c:	461a      	mov	r2, r3
 800759e:	460b      	mov	r3, r1
 80075a0:	71fb      	strb	r3, [r7, #7]
 80075a2:	4613      	mov	r3, r2
 80075a4:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80075a6:	2300      	movs	r3, #0
 80075a8:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 80075aa:	2300      	movs	r3, #0
 80075ac:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 80075ae:	2300      	movs	r3, #0
 80075b0:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 80075b2:	2300      	movs	r3, #0
 80075b4:	753b      	strb	r3, [r7, #20]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 80075b6:	79bb      	ldrb	r3, [r7, #6]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d003      	beq.n	80075c4 <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 80075c2:	75bb      	strb	r3, [r7, #22]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 80075c4:	2202      	movs	r2, #2
 80075c6:	2101      	movs	r1, #1
 80075c8:	68f8      	ldr	r0, [r7, #12]
 80075ca:	f002 fc0b 	bl	8009de4 <VL53L0X_WrByte>
 80075ce:	4603      	mov	r3, r0
 80075d0:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 80075d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d105      	bne.n	80075e6 <VL53L0X_perform_phase_calibration+0x56>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 80075da:	2100      	movs	r1, #0
 80075dc:	68f8      	ldr	r0, [r7, #12]
 80075de:	f7ff fe9c 	bl	800731a <VL53L0X_perform_single_ref_calibration>
 80075e2:	4603      	mov	r3, r0
 80075e4:	75fb      	strb	r3, [r7, #23]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 80075e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d115      	bne.n	800761a <VL53L0X_perform_phase_calibration+0x8a>
 80075ee:	79fb      	ldrb	r3, [r7, #7]
 80075f0:	2b01      	cmp	r3, #1
 80075f2:	d112      	bne.n	800761a <VL53L0X_perform_phase_calibration+0x8a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 80075f4:	7d39      	ldrb	r1, [r7, #20]
 80075f6:	7d7a      	ldrb	r2, [r7, #21]
 80075f8:	2301      	movs	r3, #1
 80075fa:	9303      	str	r3, [sp, #12]
 80075fc:	2300      	movs	r3, #0
 80075fe:	9302      	str	r3, [sp, #8]
 8007600:	68bb      	ldr	r3, [r7, #8]
 8007602:	9301      	str	r3, [sp, #4]
 8007604:	f107 0313 	add.w	r3, r7, #19
 8007608:	9300      	str	r3, [sp, #0]
 800760a:	460b      	mov	r3, r1
 800760c:	2101      	movs	r1, #1
 800760e:	68f8      	ldr	r0, [r7, #12]
 8007610:	f7ff febe 	bl	8007390 <VL53L0X_ref_calibration_io>
 8007614:	4603      	mov	r3, r0
 8007616:	75fb      	strb	r3, [r7, #23]
 8007618:	e002      	b.n	8007620 <VL53L0X_perform_phase_calibration+0x90>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 800761a:	68bb      	ldr	r3, [r7, #8]
 800761c:	2200      	movs	r2, #0
 800761e:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8007620:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d112      	bne.n	800764e <VL53L0X_perform_phase_calibration+0xbe>
 8007628:	79bb      	ldrb	r3, [r7, #6]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d00f      	beq.n	800764e <VL53L0X_perform_phase_calibration+0xbe>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800762e:	7dbb      	ldrb	r3, [r7, #22]
 8007630:	461a      	mov	r2, r3
 8007632:	2101      	movs	r1, #1
 8007634:	68f8      	ldr	r0, [r7, #12]
 8007636:	f002 fbd5 	bl	8009de4 <VL53L0X_WrByte>
 800763a:	4603      	mov	r3, r0
 800763c:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800763e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007642:	2b00      	cmp	r3, #0
 8007644:	d103      	bne.n	800764e <VL53L0X_perform_phase_calibration+0xbe>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	7dba      	ldrb	r2, [r7, #22]
 800764a:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 800764e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007652:	4618      	mov	r0, r3
 8007654:	3718      	adds	r7, #24
 8007656:	46bd      	mov	sp, r7
 8007658:	bd80      	pop	{r7, pc}

0800765a <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 800765a:	b580      	push	{r7, lr}
 800765c:	b086      	sub	sp, #24
 800765e:	af00      	add	r7, sp, #0
 8007660:	60f8      	str	r0, [r7, #12]
 8007662:	60b9      	str	r1, [r7, #8]
 8007664:	607a      	str	r2, [r7, #4]
 8007666:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007668:	2300      	movs	r3, #0
 800766a:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800766c:	2300      	movs	r3, #0
 800766e:	75bb      	strb	r3, [r7, #22]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8007676:	75bb      	strb	r3, [r7, #22]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
 8007678:	78fa      	ldrb	r2, [r7, #3]
 800767a:	2300      	movs	r3, #0
 800767c:	68b9      	ldr	r1, [r7, #8]
 800767e:	68f8      	ldr	r0, [r7, #12]
 8007680:	f7ff ff1f 	bl	80074c2 <VL53L0X_perform_vhv_calibration>
 8007684:	4603      	mov	r3, r0
 8007686:	75fb      	strb	r3, [r7, #23]
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 8007688:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d107      	bne.n	80076a0 <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
 8007690:	78fa      	ldrb	r2, [r7, #3]
 8007692:	2300      	movs	r3, #0
 8007694:	6879      	ldr	r1, [r7, #4]
 8007696:	68f8      	ldr	r0, [r7, #12]
 8007698:	f7ff ff7a 	bl	8007590 <VL53L0X_perform_phase_calibration>
 800769c:	4603      	mov	r3, r0
 800769e:	75fb      	strb	r3, [r7, #23]
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 80076a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d10f      	bne.n	80076c8 <VL53L0X_perform_ref_calibration+0x6e>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80076a8:	7dbb      	ldrb	r3, [r7, #22]
 80076aa:	461a      	mov	r2, r3
 80076ac:	2101      	movs	r1, #1
 80076ae:	68f8      	ldr	r0, [r7, #12]
 80076b0:	f002 fb98 	bl	8009de4 <VL53L0X_WrByte>
 80076b4:	4603      	mov	r3, r0
 80076b6:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 80076b8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d103      	bne.n	80076c8 <VL53L0X_perform_ref_calibration+0x6e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	7dba      	ldrb	r2, [r7, #22]
 80076c4:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 80076c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80076cc:	4618      	mov	r0, r3
 80076ce:	3718      	adds	r7, #24
 80076d0:	46bd      	mov	sp, r7
 80076d2:	bd80      	pop	{r7, pc}

080076d4 <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b086      	sub	sp, #24
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80076dc:	2300      	movs	r3, #0
 80076de:	75fb      	strb	r3, [r7, #23]
	uint8_t NewDataReady = 0;
 80076e0:	2300      	movs	r3, #0
 80076e2:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	LoopNb = 0;
 80076e4:	2300      	movs	r3, #0
 80076e6:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 80076e8:	f107 030f 	add.w	r3, r7, #15
 80076ec:	4619      	mov	r1, r3
 80076ee:	6878      	ldr	r0, [r7, #4]
 80076f0:	f7fe fe02 	bl	80062f8 <VL53L0X_GetMeasurementDataReady>
 80076f4:	4603      	mov	r3, r0
 80076f6:	75fb      	strb	r3, [r7, #23]
		if (Status != 0)
 80076f8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d110      	bne.n	8007722 <VL53L0X_measurement_poll_for_completion+0x4e>
			break; /* the error is set */

		if (NewDataReady == 1)
 8007700:	7bfb      	ldrb	r3, [r7, #15]
 8007702:	2b01      	cmp	r3, #1
 8007704:	d00f      	beq.n	8007726 <VL53L0X_measurement_poll_for_completion+0x52>
			break; /* done note that status == 0 */

		LoopNb++;
 8007706:	693b      	ldr	r3, [r7, #16]
 8007708:	3301      	adds	r3, #1
 800770a:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 800770c:	693b      	ldr	r3, [r7, #16]
 800770e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8007712:	d302      	bcc.n	800771a <VL53L0X_measurement_poll_for_completion+0x46>
			Status = VL53L0X_ERROR_TIME_OUT;
 8007714:	23f9      	movs	r3, #249	; 0xf9
 8007716:	75fb      	strb	r3, [r7, #23]
			break;
 8007718:	e006      	b.n	8007728 <VL53L0X_measurement_poll_for_completion+0x54>
		}

		VL53L0X_PollingDelay(Dev);
 800771a:	6878      	ldr	r0, [r7, #4]
 800771c:	f002 fc82 	bl	800a024 <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8007720:	e7e2      	b.n	80076e8 <VL53L0X_measurement_poll_for_completion+0x14>
			break; /* the error is set */
 8007722:	bf00      	nop
 8007724:	e000      	b.n	8007728 <VL53L0X_measurement_poll_for_completion+0x54>
			break; /* done note that status == 0 */
 8007726:	bf00      	nop
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
 8007728:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800772c:	4618      	mov	r0, r3
 800772e:	3718      	adds	r7, #24
 8007730:	46bd      	mov	sp, r7
 8007732:	bd80      	pop	{r7, pc}

08007734 <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 8007734:	b480      	push	{r7}
 8007736:	b085      	sub	sp, #20
 8007738:	af00      	add	r7, sp, #0
 800773a:	4603      	mov	r3, r0
 800773c:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 800773e:	2300      	movs	r3, #0
 8007740:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 8007742:	79fb      	ldrb	r3, [r7, #7]
 8007744:	3301      	adds	r3, #1
 8007746:	b2db      	uxtb	r3, r3
 8007748:	005b      	lsls	r3, r3, #1
 800774a:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 800774c:	7bfb      	ldrb	r3, [r7, #15]
}
 800774e:	4618      	mov	r0, r3
 8007750:	3714      	adds	r7, #20
 8007752:	46bd      	mov	sp, r7
 8007754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007758:	4770      	bx	lr

0800775a <VL53L0X_encode_vcsel_period>:

uint8_t VL53L0X_encode_vcsel_period(uint8_t vcsel_period_pclks)
{
 800775a:	b480      	push	{r7}
 800775c:	b085      	sub	sp, #20
 800775e:	af00      	add	r7, sp, #0
 8007760:	4603      	mov	r3, r0
 8007762:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real period
	 * in PLL clocks
	 */

	uint8_t vcsel_period_reg = 0;
 8007764:	2300      	movs	r3, #0
 8007766:	73fb      	strb	r3, [r7, #15]

	vcsel_period_reg = (vcsel_period_pclks >> 1) - 1;
 8007768:	79fb      	ldrb	r3, [r7, #7]
 800776a:	085b      	lsrs	r3, r3, #1
 800776c:	b2db      	uxtb	r3, r3
 800776e:	3b01      	subs	r3, #1
 8007770:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_reg;
 8007772:	7bfb      	ldrb	r3, [r7, #15]
}
 8007774:	4618      	mov	r0, r3
 8007776:	3714      	adds	r7, #20
 8007778:	46bd      	mov	sp, r7
 800777a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777e:	4770      	bx	lr

08007780 <VL53L0X_isqrt>:


uint32_t VL53L0X_isqrt(uint32_t num)
{
 8007780:	b480      	push	{r7}
 8007782:	b085      	sub	sp, #20
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 8007788:	2300      	movs	r3, #0
 800778a:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 800778c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007790:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 8007792:	e002      	b.n	800779a <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 8007794:	68bb      	ldr	r3, [r7, #8]
 8007796:	089b      	lsrs	r3, r3, #2
 8007798:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 800779a:	68ba      	ldr	r2, [r7, #8]
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	429a      	cmp	r2, r3
 80077a0:	d8f8      	bhi.n	8007794 <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 80077a2:	e017      	b.n	80077d4 <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 80077a4:	68fa      	ldr	r2, [r7, #12]
 80077a6:	68bb      	ldr	r3, [r7, #8]
 80077a8:	4413      	add	r3, r2
 80077aa:	687a      	ldr	r2, [r7, #4]
 80077ac:	429a      	cmp	r2, r3
 80077ae:	d30b      	bcc.n	80077c8 <VL53L0X_isqrt+0x48>
			num -= res + bit;
 80077b0:	68fa      	ldr	r2, [r7, #12]
 80077b2:	68bb      	ldr	r3, [r7, #8]
 80077b4:	4413      	add	r3, r2
 80077b6:	687a      	ldr	r2, [r7, #4]
 80077b8:	1ad3      	subs	r3, r2, r3
 80077ba:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	085b      	lsrs	r3, r3, #1
 80077c0:	68ba      	ldr	r2, [r7, #8]
 80077c2:	4413      	add	r3, r2
 80077c4:	60fb      	str	r3, [r7, #12]
 80077c6:	e002      	b.n	80077ce <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	085b      	lsrs	r3, r3, #1
 80077cc:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 80077ce:	68bb      	ldr	r3, [r7, #8]
 80077d0:	089b      	lsrs	r3, r3, #2
 80077d2:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 80077d4:	68bb      	ldr	r3, [r7, #8]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d1e4      	bne.n	80077a4 <VL53L0X_isqrt+0x24>
	}

	return res;
 80077da:	68fb      	ldr	r3, [r7, #12]
}
 80077dc:	4618      	mov	r0, r3
 80077de:	3714      	adds	r7, #20
 80077e0:	46bd      	mov	sp, r7
 80077e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e6:	4770      	bx	lr

080077e8 <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b086      	sub	sp, #24
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80077f0:	2300      	movs	r3, #0
 80077f2:	75fb      	strb	r3, [r7, #23]
	uint8_t strobe;
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 80077f4:	2200      	movs	r2, #0
 80077f6:	2183      	movs	r1, #131	; 0x83
 80077f8:	6878      	ldr	r0, [r7, #4]
 80077fa:	f002 faf3 	bl	8009de4 <VL53L0X_WrByte>
 80077fe:	4603      	mov	r3, r0
 8007800:	461a      	mov	r2, r3
 8007802:	7dfb      	ldrb	r3, [r7, #23]
 8007804:	4313      	orrs	r3, r2
 8007806:	75fb      	strb	r3, [r7, #23]

	/* polling
	 * use timeout to avoid deadlock*/
	if (Status == VL53L0X_ERROR_NONE) {
 8007808:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d11e      	bne.n	800784e <VL53L0X_device_read_strobe+0x66>
		LoopNb = 0;
 8007810:	2300      	movs	r3, #0
 8007812:	613b      	str	r3, [r7, #16]
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 8007814:	f107 030f 	add.w	r3, r7, #15
 8007818:	461a      	mov	r2, r3
 800781a:	2183      	movs	r1, #131	; 0x83
 800781c:	6878      	ldr	r0, [r7, #4]
 800781e:	f002 fb63 	bl	8009ee8 <VL53L0X_RdByte>
 8007822:	4603      	mov	r3, r0
 8007824:	75fb      	strb	r3, [r7, #23]
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 8007826:	7bfb      	ldrb	r3, [r7, #15]
 8007828:	2b00      	cmp	r3, #0
 800782a:	d10a      	bne.n	8007842 <VL53L0X_device_read_strobe+0x5a>
 800782c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d106      	bne.n	8007842 <VL53L0X_device_read_strobe+0x5a>
					break;

			LoopNb = LoopNb + 1;
 8007834:	693b      	ldr	r3, [r7, #16]
 8007836:	3301      	adds	r3, #1
 8007838:	613b      	str	r3, [r7, #16]
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 800783a:	693b      	ldr	r3, [r7, #16]
 800783c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8007840:	d3e8      	bcc.n	8007814 <VL53L0X_device_read_strobe+0x2c>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 8007842:	693b      	ldr	r3, [r7, #16]
 8007844:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8007848:	d301      	bcc.n	800784e <VL53L0X_device_read_strobe+0x66>
			Status = VL53L0X_ERROR_TIME_OUT;
 800784a:	23f9      	movs	r3, #249	; 0xf9
 800784c:	75fb      	strb	r3, [r7, #23]

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 800784e:	2201      	movs	r2, #1
 8007850:	2183      	movs	r1, #131	; 0x83
 8007852:	6878      	ldr	r0, [r7, #4]
 8007854:	f002 fac6 	bl	8009de4 <VL53L0X_WrByte>
 8007858:	4603      	mov	r3, r0
 800785a:	461a      	mov	r2, r3
 800785c:	7dfb      	ldrb	r3, [r7, #23]
 800785e:	4313      	orrs	r3, r2
 8007860:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);
	return Status;
 8007862:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8007866:	4618      	mov	r0, r3
 8007868:	3718      	adds	r7, #24
 800786a:	46bd      	mov	sp, r7
 800786c:	bd80      	pop	{r7, pc}

0800786e <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 800786e:	b580      	push	{r7, lr}
 8007870:	b098      	sub	sp, #96	; 0x60
 8007872:	af00      	add	r7, sp, #0
 8007874:	6078      	str	r0, [r7, #4]
 8007876:	460b      	mov	r3, r1
 8007878:	70fb      	strb	r3, [r7, #3]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800787a:	2300      	movs	r3, #0
 800787c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t byte;
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
 8007880:	2300      	movs	r3, #0
 8007882:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t ReferenceSpadType = 0;
 8007886:	2300      	movs	r3, #0
 8007888:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	uint32_t PartUIDUpper = 0;
 800788c:	2300      	movs	r3, #0
 800788e:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PartUIDLower = 0;
 8007890:	2300      	movs	r3, #0
 8007892:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t OffsetFixed1104_mm = 0;
 8007894:	2300      	movs	r3, #0
 8007896:	64bb      	str	r3, [r7, #72]	; 0x48
	int16_t OffsetMicroMeters = 0;
 8007898:	2300      	movs	r3, #0
 800789a:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 800789e:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 80078a2:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t DistMeasFixed1104_400_mm = 0;
 80078a4:	2300      	movs	r3, #0
 80078a6:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 80078a8:	2300      	movs	r3, #0
 80078aa:	653b      	str	r3, [r7, #80]	; 0x50
	char ProductId[19];
	char *ProductId_tmp;
	uint8_t ReadDataFromDeviceDone;
	FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 80078ac:	2300      	movs	r3, #0
 80078ae:	643b      	str	r3, [r7, #64]	; 0x40
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 80078b6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done*/
	if (ReadDataFromDeviceDone != 7) {
 80078ba:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80078be:	2b07      	cmp	r3, #7
 80078c0:	f000 8408 	beq.w	80080d4 <VL53L0X_get_info_from_device+0x866>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 80078c4:	2201      	movs	r2, #1
 80078c6:	2180      	movs	r1, #128	; 0x80
 80078c8:	6878      	ldr	r0, [r7, #4]
 80078ca:	f002 fa8b 	bl	8009de4 <VL53L0X_WrByte>
 80078ce:	4603      	mov	r3, r0
 80078d0:	461a      	mov	r2, r3
 80078d2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80078d6:	4313      	orrs	r3, r2
 80078d8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80078dc:	2201      	movs	r2, #1
 80078de:	21ff      	movs	r1, #255	; 0xff
 80078e0:	6878      	ldr	r0, [r7, #4]
 80078e2:	f002 fa7f 	bl	8009de4 <VL53L0X_WrByte>
 80078e6:	4603      	mov	r3, r0
 80078e8:	461a      	mov	r2, r3
 80078ea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80078ee:	4313      	orrs	r3, r2
 80078f0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80078f4:	2200      	movs	r2, #0
 80078f6:	2100      	movs	r1, #0
 80078f8:	6878      	ldr	r0, [r7, #4]
 80078fa:	f002 fa73 	bl	8009de4 <VL53L0X_WrByte>
 80078fe:	4603      	mov	r3, r0
 8007900:	461a      	mov	r2, r3
 8007902:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007906:	4313      	orrs	r3, r2
 8007908:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 800790c:	2206      	movs	r2, #6
 800790e:	21ff      	movs	r1, #255	; 0xff
 8007910:	6878      	ldr	r0, [r7, #4]
 8007912:	f002 fa67 	bl	8009de4 <VL53L0X_WrByte>
 8007916:	4603      	mov	r3, r0
 8007918:	461a      	mov	r2, r3
 800791a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800791e:	4313      	orrs	r3, r2
 8007920:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8007924:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8007928:	461a      	mov	r2, r3
 800792a:	2183      	movs	r1, #131	; 0x83
 800792c:	6878      	ldr	r0, [r7, #4]
 800792e:	f002 fadb 	bl	8009ee8 <VL53L0X_RdByte>
 8007932:	4603      	mov	r3, r0
 8007934:	461a      	mov	r2, r3
 8007936:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800793a:	4313      	orrs	r3, r2
 800793c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 8007940:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007944:	f043 0304 	orr.w	r3, r3, #4
 8007948:	b2db      	uxtb	r3, r3
 800794a:	461a      	mov	r2, r3
 800794c:	2183      	movs	r1, #131	; 0x83
 800794e:	6878      	ldr	r0, [r7, #4]
 8007950:	f002 fa48 	bl	8009de4 <VL53L0X_WrByte>
 8007954:	4603      	mov	r3, r0
 8007956:	461a      	mov	r2, r3
 8007958:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800795c:	4313      	orrs	r3, r2
 800795e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 8007962:	2207      	movs	r2, #7
 8007964:	21ff      	movs	r1, #255	; 0xff
 8007966:	6878      	ldr	r0, [r7, #4]
 8007968:	f002 fa3c 	bl	8009de4 <VL53L0X_WrByte>
 800796c:	4603      	mov	r3, r0
 800796e:	461a      	mov	r2, r3
 8007970:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007974:	4313      	orrs	r3, r2
 8007976:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 800797a:	2201      	movs	r2, #1
 800797c:	2181      	movs	r1, #129	; 0x81
 800797e:	6878      	ldr	r0, [r7, #4]
 8007980:	f002 fa30 	bl	8009de4 <VL53L0X_WrByte>
 8007984:	4603      	mov	r3, r0
 8007986:	461a      	mov	r2, r3
 8007988:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800798c:	4313      	orrs	r3, r2
 800798e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_PollingDelay(Dev);
 8007992:	6878      	ldr	r0, [r7, #4]
 8007994:	f002 fb46 	bl	800a024 <VL53L0X_PollingDelay>
 8007998:	4603      	mov	r3, r0
 800799a:	461a      	mov	r2, r3
 800799c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80079a0:	4313      	orrs	r3, r2
 80079a2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 80079a6:	2201      	movs	r2, #1
 80079a8:	2180      	movs	r1, #128	; 0x80
 80079aa:	6878      	ldr	r0, [r7, #4]
 80079ac:	f002 fa1a 	bl	8009de4 <VL53L0X_WrByte>
 80079b0:	4603      	mov	r3, r0
 80079b2:	461a      	mov	r2, r3
 80079b4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80079b8:	4313      	orrs	r3, r2
 80079ba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		if (((option & 1) == 1) &&
 80079be:	78fb      	ldrb	r3, [r7, #3]
 80079c0:	f003 0301 	and.w	r3, r3, #1
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	f000 8098 	beq.w	8007afa <VL53L0X_get_info_from_device+0x28c>
			((ReadDataFromDeviceDone & 1) == 0)) {
 80079ca:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80079ce:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	f040 8091 	bne.w	8007afa <VL53L0X_get_info_from_device+0x28c>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 80079d8:	226b      	movs	r2, #107	; 0x6b
 80079da:	2194      	movs	r1, #148	; 0x94
 80079dc:	6878      	ldr	r0, [r7, #4]
 80079de:	f002 fa01 	bl	8009de4 <VL53L0X_WrByte>
 80079e2:	4603      	mov	r3, r0
 80079e4:	461a      	mov	r2, r3
 80079e6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80079ea:	4313      	orrs	r3, r2
 80079ec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80079f0:	6878      	ldr	r0, [r7, #4]
 80079f2:	f7ff fef9 	bl	80077e8 <VL53L0X_device_read_strobe>
 80079f6:	4603      	mov	r3, r0
 80079f8:	461a      	mov	r2, r3
 80079fa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80079fe:	4313      	orrs	r3, r2
 8007a00:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8007a04:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007a08:	461a      	mov	r2, r3
 8007a0a:	2190      	movs	r1, #144	; 0x90
 8007a0c:	6878      	ldr	r0, [r7, #4]
 8007a0e:	f002 facd 	bl	8009fac <VL53L0X_RdDWord>
 8007a12:	4603      	mov	r3, r0
 8007a14:	461a      	mov	r2, r3
 8007a16:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007a1a:	4313      	orrs	r3, r2
 8007a1c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 8007a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a22:	0a1b      	lsrs	r3, r3, #8
 8007a24:	b2db      	uxtb	r3, r3
 8007a26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a2a:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 8007a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a30:	0bdb      	lsrs	r3, r3, #15
 8007a32:	b2db      	uxtb	r3, r3
 8007a34:	f003 0301 	and.w	r3, r3, #1
 8007a38:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 8007a3c:	2224      	movs	r2, #36	; 0x24
 8007a3e:	2194      	movs	r1, #148	; 0x94
 8007a40:	6878      	ldr	r0, [r7, #4]
 8007a42:	f002 f9cf 	bl	8009de4 <VL53L0X_WrByte>
 8007a46:	4603      	mov	r3, r0
 8007a48:	461a      	mov	r2, r3
 8007a4a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007a4e:	4313      	orrs	r3, r2
 8007a50:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8007a54:	6878      	ldr	r0, [r7, #4]
 8007a56:	f7ff fec7 	bl	80077e8 <VL53L0X_device_read_strobe>
 8007a5a:	4603      	mov	r3, r0
 8007a5c:	461a      	mov	r2, r3
 8007a5e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007a62:	4313      	orrs	r3, r2
 8007a64:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8007a68:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007a6c:	461a      	mov	r2, r3
 8007a6e:	2190      	movs	r1, #144	; 0x90
 8007a70:	6878      	ldr	r0, [r7, #4]
 8007a72:	f002 fa9b 	bl	8009fac <VL53L0X_RdDWord>
 8007a76:	4603      	mov	r3, r0
 8007a78:	461a      	mov	r2, r3
 8007a7a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007a7e:	4313      	orrs	r3, r2
 8007a80:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 8007a84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a86:	0e1b      	lsrs	r3, r3, #24
 8007a88:	b2db      	uxtb	r3, r3
 8007a8a:	723b      	strb	r3, [r7, #8]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 8007a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a8e:	0c1b      	lsrs	r3, r3, #16
 8007a90:	b2db      	uxtb	r3, r3
 8007a92:	727b      	strb	r3, [r7, #9]
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 8007a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a96:	0a1b      	lsrs	r3, r3, #8
 8007a98:	b2db      	uxtb	r3, r3
 8007a9a:	72bb      	strb	r3, [r7, #10]
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 8007a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a9e:	b2db      	uxtb	r3, r3
 8007aa0:	72fb      	strb	r3, [r7, #11]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 8007aa2:	2225      	movs	r2, #37	; 0x25
 8007aa4:	2194      	movs	r1, #148	; 0x94
 8007aa6:	6878      	ldr	r0, [r7, #4]
 8007aa8:	f002 f99c 	bl	8009de4 <VL53L0X_WrByte>
 8007aac:	4603      	mov	r3, r0
 8007aae:	461a      	mov	r2, r3
 8007ab0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007ab4:	4313      	orrs	r3, r2
 8007ab6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8007aba:	6878      	ldr	r0, [r7, #4]
 8007abc:	f7ff fe94 	bl	80077e8 <VL53L0X_device_read_strobe>
 8007ac0:	4603      	mov	r3, r0
 8007ac2:	461a      	mov	r2, r3
 8007ac4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007ac8:	4313      	orrs	r3, r2
 8007aca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8007ace:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007ad2:	461a      	mov	r2, r3
 8007ad4:	2190      	movs	r1, #144	; 0x90
 8007ad6:	6878      	ldr	r0, [r7, #4]
 8007ad8:	f002 fa68 	bl	8009fac <VL53L0X_RdDWord>
 8007adc:	4603      	mov	r3, r0
 8007ade:	461a      	mov	r2, r3
 8007ae0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007ae4:	4313      	orrs	r3, r2
 8007ae6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 8007aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aec:	0e1b      	lsrs	r3, r3, #24
 8007aee:	b2db      	uxtb	r3, r3
 8007af0:	733b      	strb	r3, [r7, #12]
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 8007af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007af4:	0c1b      	lsrs	r3, r3, #16
 8007af6:	b2db      	uxtb	r3, r3
 8007af8:	737b      	strb	r3, [r7, #13]
				& 0xff);
		}

		if (((option & 2) == 2) &&
 8007afa:	78fb      	ldrb	r3, [r7, #3]
 8007afc:	f003 0302 	and.w	r3, r3, #2
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	f000 8189 	beq.w	8007e18 <VL53L0X_get_info_from_device+0x5aa>
			((ReadDataFromDeviceDone & 2) == 0)) {
 8007b06:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007b0a:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	f040 8182 	bne.w	8007e18 <VL53L0X_get_info_from_device+0x5aa>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 8007b14:	2202      	movs	r2, #2
 8007b16:	2194      	movs	r1, #148	; 0x94
 8007b18:	6878      	ldr	r0, [r7, #4]
 8007b1a:	f002 f963 	bl	8009de4 <VL53L0X_WrByte>
 8007b1e:	4603      	mov	r3, r0
 8007b20:	461a      	mov	r2, r3
 8007b22:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007b26:	4313      	orrs	r3, r2
 8007b28:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8007b2c:	6878      	ldr	r0, [r7, #4]
 8007b2e:	f7ff fe5b 	bl	80077e8 <VL53L0X_device_read_strobe>
 8007b32:	4603      	mov	r3, r0
 8007b34:	461a      	mov	r2, r3
 8007b36:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007b3a:	4313      	orrs	r3, r2
 8007b3c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 8007b40:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8007b44:	461a      	mov	r2, r3
 8007b46:	2190      	movs	r1, #144	; 0x90
 8007b48:	6878      	ldr	r0, [r7, #4]
 8007b4a:	f002 f9cd 	bl	8009ee8 <VL53L0X_RdByte>
 8007b4e:	4603      	mov	r3, r0
 8007b50:	461a      	mov	r2, r3
 8007b52:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007b56:	4313      	orrs	r3, r2
 8007b58:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8007b5c:	227b      	movs	r2, #123	; 0x7b
 8007b5e:	2194      	movs	r1, #148	; 0x94
 8007b60:	6878      	ldr	r0, [r7, #4]
 8007b62:	f002 f93f 	bl	8009de4 <VL53L0X_WrByte>
 8007b66:	4603      	mov	r3, r0
 8007b68:	461a      	mov	r2, r3
 8007b6a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007b6e:	4313      	orrs	r3, r2
 8007b70:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8007b74:	6878      	ldr	r0, [r7, #4]
 8007b76:	f7ff fe37 	bl	80077e8 <VL53L0X_device_read_strobe>
 8007b7a:	4603      	mov	r3, r0
 8007b7c:	461a      	mov	r2, r3
 8007b7e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007b82:	4313      	orrs	r3, r2
 8007b84:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 8007b88:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8007b8c:	461a      	mov	r2, r3
 8007b8e:	2190      	movs	r1, #144	; 0x90
 8007b90:	6878      	ldr	r0, [r7, #4]
 8007b92:	f002 f9a9 	bl	8009ee8 <VL53L0X_RdByte>
 8007b96:	4603      	mov	r3, r0
 8007b98:	461a      	mov	r2, r3
 8007b9a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007b9e:	4313      	orrs	r3, r2
 8007ba0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 8007ba4:	2277      	movs	r2, #119	; 0x77
 8007ba6:	2194      	movs	r1, #148	; 0x94
 8007ba8:	6878      	ldr	r0, [r7, #4]
 8007baa:	f002 f91b 	bl	8009de4 <VL53L0X_WrByte>
 8007bae:	4603      	mov	r3, r0
 8007bb0:	461a      	mov	r2, r3
 8007bb2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007bb6:	4313      	orrs	r3, r2
 8007bb8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8007bbc:	6878      	ldr	r0, [r7, #4]
 8007bbe:	f7ff fe13 	bl	80077e8 <VL53L0X_device_read_strobe>
 8007bc2:	4603      	mov	r3, r0
 8007bc4:	461a      	mov	r2, r3
 8007bc6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007bca:	4313      	orrs	r3, r2
 8007bcc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8007bd0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007bd4:	461a      	mov	r2, r3
 8007bd6:	2190      	movs	r1, #144	; 0x90
 8007bd8:	6878      	ldr	r0, [r7, #4]
 8007bda:	f002 f9e7 	bl	8009fac <VL53L0X_RdDWord>
 8007bde:	4603      	mov	r3, r0
 8007be0:	461a      	mov	r2, r3
 8007be2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007be6:	4313      	orrs	r3, r2
 8007be8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 8007bec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bee:	0e5b      	lsrs	r3, r3, #25
 8007bf0:	b2db      	uxtb	r3, r3
 8007bf2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007bf6:	b2db      	uxtb	r3, r3
 8007bf8:	743b      	strb	r3, [r7, #16]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 8007bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bfc:	0c9b      	lsrs	r3, r3, #18
 8007bfe:	b2db      	uxtb	r3, r3
 8007c00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c04:	b2db      	uxtb	r3, r3
 8007c06:	747b      	strb	r3, [r7, #17]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 8007c08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c0a:	0adb      	lsrs	r3, r3, #11
 8007c0c:	b2db      	uxtb	r3, r3
 8007c0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c12:	b2db      	uxtb	r3, r3
 8007c14:	74bb      	strb	r3, [r7, #18]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 8007c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c18:	091b      	lsrs	r3, r3, #4
 8007c1a:	b2db      	uxtb	r3, r3
 8007c1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c20:	b2db      	uxtb	r3, r3
 8007c22:	74fb      	strb	r3, [r7, #19]

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 8007c24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c26:	b2db      	uxtb	r3, r3
 8007c28:	00db      	lsls	r3, r3, #3
 8007c2a:	b2db      	uxtb	r3, r3
 8007c2c:	f003 0378 	and.w	r3, r3, #120	; 0x78
 8007c30:	b2db      	uxtb	r3, r3
 8007c32:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 8007c36:	2278      	movs	r2, #120	; 0x78
 8007c38:	2194      	movs	r1, #148	; 0x94
 8007c3a:	6878      	ldr	r0, [r7, #4]
 8007c3c:	f002 f8d2 	bl	8009de4 <VL53L0X_WrByte>
 8007c40:	4603      	mov	r3, r0
 8007c42:	461a      	mov	r2, r3
 8007c44:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007c48:	4313      	orrs	r3, r2
 8007c4a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8007c4e:	6878      	ldr	r0, [r7, #4]
 8007c50:	f7ff fdca 	bl	80077e8 <VL53L0X_device_read_strobe>
 8007c54:	4603      	mov	r3, r0
 8007c56:	461a      	mov	r2, r3
 8007c58:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007c5c:	4313      	orrs	r3, r2
 8007c5e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8007c62:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007c66:	461a      	mov	r2, r3
 8007c68:	2190      	movs	r1, #144	; 0x90
 8007c6a:	6878      	ldr	r0, [r7, #4]
 8007c6c:	f002 f99e 	bl	8009fac <VL53L0X_RdDWord>
 8007c70:	4603      	mov	r3, r0
 8007c72:	461a      	mov	r2, r3
 8007c74:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007c78:	4313      	orrs	r3, r2
 8007c7a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 8007c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c80:	0f5b      	lsrs	r3, r3, #29
 8007c82:	b2db      	uxtb	r3, r3
 8007c84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c88:	b2da      	uxtb	r2, r3
			ProductId[4] = (char)(byte +
 8007c8a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007c8e:	4413      	add	r3, r2
 8007c90:	b2db      	uxtb	r3, r3
 8007c92:	753b      	strb	r3, [r7, #20]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 8007c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c96:	0d9b      	lsrs	r3, r3, #22
 8007c98:	b2db      	uxtb	r3, r3
 8007c9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c9e:	b2db      	uxtb	r3, r3
 8007ca0:	757b      	strb	r3, [r7, #21]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 8007ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ca4:	0bdb      	lsrs	r3, r3, #15
 8007ca6:	b2db      	uxtb	r3, r3
 8007ca8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007cac:	b2db      	uxtb	r3, r3
 8007cae:	75bb      	strb	r3, [r7, #22]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 8007cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cb2:	0a1b      	lsrs	r3, r3, #8
 8007cb4:	b2db      	uxtb	r3, r3
 8007cb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007cba:	b2db      	uxtb	r3, r3
 8007cbc:	75fb      	strb	r3, [r7, #23]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 8007cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cc0:	085b      	lsrs	r3, r3, #1
 8007cc2:	b2db      	uxtb	r3, r3
 8007cc4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007cc8:	b2db      	uxtb	r3, r3
 8007cca:	763b      	strb	r3, [r7, #24]

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 8007ccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cce:	b2db      	uxtb	r3, r3
 8007cd0:	019b      	lsls	r3, r3, #6
 8007cd2:	b2db      	uxtb	r3, r3
 8007cd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cd8:	b2db      	uxtb	r3, r3
 8007cda:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 8007cde:	2279      	movs	r2, #121	; 0x79
 8007ce0:	2194      	movs	r1, #148	; 0x94
 8007ce2:	6878      	ldr	r0, [r7, #4]
 8007ce4:	f002 f87e 	bl	8009de4 <VL53L0X_WrByte>
 8007ce8:	4603      	mov	r3, r0
 8007cea:	461a      	mov	r2, r3
 8007cec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007cf0:	4313      	orrs	r3, r2
 8007cf2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 8007cf6:	6878      	ldr	r0, [r7, #4]
 8007cf8:	f7ff fd76 	bl	80077e8 <VL53L0X_device_read_strobe>
 8007cfc:	4603      	mov	r3, r0
 8007cfe:	461a      	mov	r2, r3
 8007d00:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007d04:	4313      	orrs	r3, r2
 8007d06:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8007d0a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007d0e:	461a      	mov	r2, r3
 8007d10:	2190      	movs	r1, #144	; 0x90
 8007d12:	6878      	ldr	r0, [r7, #4]
 8007d14:	f002 f94a 	bl	8009fac <VL53L0X_RdDWord>
 8007d18:	4603      	mov	r3, r0
 8007d1a:	461a      	mov	r2, r3
 8007d1c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007d20:	4313      	orrs	r3, r2
 8007d22:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 8007d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d28:	0e9b      	lsrs	r3, r3, #26
 8007d2a:	b2db      	uxtb	r3, r3
 8007d2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d30:	b2da      	uxtb	r2, r3
			ProductId[9] = (char)(byte +
 8007d32:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007d36:	4413      	add	r3, r2
 8007d38:	b2db      	uxtb	r3, r3
 8007d3a:	767b      	strb	r3, [r7, #25]
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 8007d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d3e:	0cdb      	lsrs	r3, r3, #19
 8007d40:	b2db      	uxtb	r3, r3
 8007d42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d46:	b2db      	uxtb	r3, r3
 8007d48:	76bb      	strb	r3, [r7, #26]
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 8007d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d4c:	0b1b      	lsrs	r3, r3, #12
 8007d4e:	b2db      	uxtb	r3, r3
 8007d50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d54:	b2db      	uxtb	r3, r3
 8007d56:	76fb      	strb	r3, [r7, #27]
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 8007d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d5a:	095b      	lsrs	r3, r3, #5
 8007d5c:	b2db      	uxtb	r3, r3
 8007d5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d62:	b2db      	uxtb	r3, r3
 8007d64:	773b      	strb	r3, [r7, #28]

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 8007d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d68:	b2db      	uxtb	r3, r3
 8007d6a:	009b      	lsls	r3, r3, #2
 8007d6c:	b2db      	uxtb	r3, r3
 8007d6e:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8007d72:	b2db      	uxtb	r3, r3
 8007d74:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 8007d78:	227a      	movs	r2, #122	; 0x7a
 8007d7a:	2194      	movs	r1, #148	; 0x94
 8007d7c:	6878      	ldr	r0, [r7, #4]
 8007d7e:	f002 f831 	bl	8009de4 <VL53L0X_WrByte>
 8007d82:	4603      	mov	r3, r0
 8007d84:	461a      	mov	r2, r3
 8007d86:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007d8a:	4313      	orrs	r3, r2
 8007d8c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 8007d90:	6878      	ldr	r0, [r7, #4]
 8007d92:	f7ff fd29 	bl	80077e8 <VL53L0X_device_read_strobe>
 8007d96:	4603      	mov	r3, r0
 8007d98:	461a      	mov	r2, r3
 8007d9a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007d9e:	4313      	orrs	r3, r2
 8007da0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8007da4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007da8:	461a      	mov	r2, r3
 8007daa:	2190      	movs	r1, #144	; 0x90
 8007dac:	6878      	ldr	r0, [r7, #4]
 8007dae:	f002 f8fd 	bl	8009fac <VL53L0X_RdDWord>
 8007db2:	4603      	mov	r3, r0
 8007db4:	461a      	mov	r2, r3
 8007db6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007dba:	4313      	orrs	r3, r2
 8007dbc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 8007dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dc2:	0f9b      	lsrs	r3, r3, #30
 8007dc4:	b2db      	uxtb	r3, r3
 8007dc6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007dca:	b2da      	uxtb	r2, r3
			ProductId[13] = (char)(byte +
 8007dcc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007dd0:	4413      	add	r3, r2
 8007dd2:	b2db      	uxtb	r3, r3
 8007dd4:	777b      	strb	r3, [r7, #29]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 8007dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dd8:	0ddb      	lsrs	r3, r3, #23
 8007dda:	b2db      	uxtb	r3, r3
 8007ddc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007de0:	b2db      	uxtb	r3, r3
 8007de2:	77bb      	strb	r3, [r7, #30]
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 8007de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007de6:	0c1b      	lsrs	r3, r3, #16
 8007de8:	b2db      	uxtb	r3, r3
 8007dea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007dee:	b2db      	uxtb	r3, r3
 8007df0:	77fb      	strb	r3, [r7, #31]
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 8007df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007df4:	0a5b      	lsrs	r3, r3, #9
 8007df6:	b2db      	uxtb	r3, r3
 8007df8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007dfc:	b2db      	uxtb	r3, r3
 8007dfe:	f887 3020 	strb.w	r3, [r7, #32]
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 8007e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e04:	089b      	lsrs	r3, r3, #2
 8007e06:	b2db      	uxtb	r3, r3
 8007e08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e0c:	b2db      	uxtb	r3, r3
 8007e0e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			ProductId[18] = '\0';
 8007e12:	2300      	movs	r3, #0
 8007e14:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

		}

		if (((option & 4) == 4) &&
 8007e18:	78fb      	ldrb	r3, [r7, #3]
 8007e1a:	f003 0304 	and.w	r3, r3, #4
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	f000 80f1 	beq.w	8008006 <VL53L0X_get_info_from_device+0x798>
			((ReadDataFromDeviceDone & 4) == 0)) {
 8007e24:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007e28:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	f040 80ea 	bne.w	8008006 <VL53L0X_get_info_from_device+0x798>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8007e32:	227b      	movs	r2, #123	; 0x7b
 8007e34:	2194      	movs	r1, #148	; 0x94
 8007e36:	6878      	ldr	r0, [r7, #4]
 8007e38:	f001 ffd4 	bl	8009de4 <VL53L0X_WrByte>
 8007e3c:	4603      	mov	r3, r0
 8007e3e:	461a      	mov	r2, r3
 8007e40:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007e44:	4313      	orrs	r3, r2
 8007e46:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8007e4a:	6878      	ldr	r0, [r7, #4]
 8007e4c:	f7ff fccc 	bl	80077e8 <VL53L0X_device_read_strobe>
 8007e50:	4603      	mov	r3, r0
 8007e52:	461a      	mov	r2, r3
 8007e54:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007e58:	4313      	orrs	r3, r2
 8007e5a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 8007e5e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007e62:	461a      	mov	r2, r3
 8007e64:	2190      	movs	r1, #144	; 0x90
 8007e66:	6878      	ldr	r0, [r7, #4]
 8007e68:	f002 f8a0 	bl	8009fac <VL53L0X_RdDWord>
 8007e6c:	4603      	mov	r3, r0
 8007e6e:	461a      	mov	r2, r3
 8007e70:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007e74:	4313      	orrs	r3, r2
 8007e76:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 8007e7a:	227c      	movs	r2, #124	; 0x7c
 8007e7c:	2194      	movs	r1, #148	; 0x94
 8007e7e:	6878      	ldr	r0, [r7, #4]
 8007e80:	f001 ffb0 	bl	8009de4 <VL53L0X_WrByte>
 8007e84:	4603      	mov	r3, r0
 8007e86:	461a      	mov	r2, r3
 8007e88:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007e8c:	4313      	orrs	r3, r2
 8007e8e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8007e92:	6878      	ldr	r0, [r7, #4]
 8007e94:	f7ff fca8 	bl	80077e8 <VL53L0X_device_read_strobe>
 8007e98:	4603      	mov	r3, r0
 8007e9a:	461a      	mov	r2, r3
 8007e9c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007ea0:	4313      	orrs	r3, r2
 8007ea2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 8007ea6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007eaa:	461a      	mov	r2, r3
 8007eac:	2190      	movs	r1, #144	; 0x90
 8007eae:	6878      	ldr	r0, [r7, #4]
 8007eb0:	f002 f87c 	bl	8009fac <VL53L0X_RdDWord>
 8007eb4:	4603      	mov	r3, r0
 8007eb6:	461a      	mov	r2, r3
 8007eb8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007ebc:	4313      	orrs	r3, r2
 8007ebe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 8007ec2:	2273      	movs	r2, #115	; 0x73
 8007ec4:	2194      	movs	r1, #148	; 0x94
 8007ec6:	6878      	ldr	r0, [r7, #4]
 8007ec8:	f001 ff8c 	bl	8009de4 <VL53L0X_WrByte>
 8007ecc:	4603      	mov	r3, r0
 8007ece:	461a      	mov	r2, r3
 8007ed0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007ed4:	4313      	orrs	r3, r2
 8007ed6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8007eda:	6878      	ldr	r0, [r7, #4]
 8007edc:	f7ff fc84 	bl	80077e8 <VL53L0X_device_read_strobe>
 8007ee0:	4603      	mov	r3, r0
 8007ee2:	461a      	mov	r2, r3
 8007ee4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007ee8:	4313      	orrs	r3, r2
 8007eea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8007eee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007ef2:	461a      	mov	r2, r3
 8007ef4:	2190      	movs	r1, #144	; 0x90
 8007ef6:	6878      	ldr	r0, [r7, #4]
 8007ef8:	f002 f858 	bl	8009fac <VL53L0X_RdDWord>
 8007efc:	4603      	mov	r3, r0
 8007efe:	461a      	mov	r2, r3
 8007f00:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007f04:	4313      	orrs	r3, r2
 8007f06:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x0000000ff) << 8;
 8007f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f0c:	021b      	lsls	r3, r3, #8
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 8007f0e:	b29b      	uxth	r3, r3
 8007f10:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 8007f12:	2274      	movs	r2, #116	; 0x74
 8007f14:	2194      	movs	r1, #148	; 0x94
 8007f16:	6878      	ldr	r0, [r7, #4]
 8007f18:	f001 ff64 	bl	8009de4 <VL53L0X_WrByte>
 8007f1c:	4603      	mov	r3, r0
 8007f1e:	461a      	mov	r2, r3
 8007f20:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007f24:	4313      	orrs	r3, r2
 8007f26:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8007f2a:	6878      	ldr	r0, [r7, #4]
 8007f2c:	f7ff fc5c 	bl	80077e8 <VL53L0X_device_read_strobe>
 8007f30:	4603      	mov	r3, r0
 8007f32:	461a      	mov	r2, r3
 8007f34:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007f38:	4313      	orrs	r3, r2
 8007f3a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8007f3e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007f42:	461a      	mov	r2, r3
 8007f44:	2190      	movs	r1, #144	; 0x90
 8007f46:	6878      	ldr	r0, [r7, #4]
 8007f48:	f002 f830 	bl	8009fac <VL53L0X_RdDWord>
 8007f4c:	4603      	mov	r3, r0
 8007f4e:	461a      	mov	r2, r3
 8007f50:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007f54:	4313      	orrs	r3, r2
 8007f56:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 8007f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f5c:	0e1b      	lsrs	r3, r3, #24
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 8007f5e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007f60:	4313      	orrs	r3, r2
 8007f62:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 8007f64:	2275      	movs	r2, #117	; 0x75
 8007f66:	2194      	movs	r1, #148	; 0x94
 8007f68:	6878      	ldr	r0, [r7, #4]
 8007f6a:	f001 ff3b 	bl	8009de4 <VL53L0X_WrByte>
 8007f6e:	4603      	mov	r3, r0
 8007f70:	461a      	mov	r2, r3
 8007f72:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007f76:	4313      	orrs	r3, r2
 8007f78:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8007f7c:	6878      	ldr	r0, [r7, #4]
 8007f7e:	f7ff fc33 	bl	80077e8 <VL53L0X_device_read_strobe>
 8007f82:	4603      	mov	r3, r0
 8007f84:	461a      	mov	r2, r3
 8007f86:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007f8a:	4313      	orrs	r3, r2
 8007f8c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8007f90:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007f94:	461a      	mov	r2, r3
 8007f96:	2190      	movs	r1, #144	; 0x90
 8007f98:	6878      	ldr	r0, [r7, #4]
 8007f9a:	f002 f807 	bl	8009fac <VL53L0X_RdDWord>
 8007f9e:	4603      	mov	r3, r0
 8007fa0:	461a      	mov	r2, r3
 8007fa2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007fa6:	4313      	orrs	r3, r2
 8007fa8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
							<< 8;
 8007fac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fae:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
 8007fb0:	b29b      	uxth	r3, r3
 8007fb2:	657b      	str	r3, [r7, #84]	; 0x54

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 8007fb4:	2276      	movs	r2, #118	; 0x76
 8007fb6:	2194      	movs	r1, #148	; 0x94
 8007fb8:	6878      	ldr	r0, [r7, #4]
 8007fba:	f001 ff13 	bl	8009de4 <VL53L0X_WrByte>
 8007fbe:	4603      	mov	r3, r0
 8007fc0:	461a      	mov	r2, r3
 8007fc2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007fc6:	4313      	orrs	r3, r2
 8007fc8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8007fcc:	6878      	ldr	r0, [r7, #4]
 8007fce:	f7ff fc0b 	bl	80077e8 <VL53L0X_device_read_strobe>
 8007fd2:	4603      	mov	r3, r0
 8007fd4:	461a      	mov	r2, r3
 8007fd6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007fda:	4313      	orrs	r3, r2
 8007fdc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8007fe0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007fe4:	461a      	mov	r2, r3
 8007fe6:	2190      	movs	r1, #144	; 0x90
 8007fe8:	6878      	ldr	r0, [r7, #4]
 8007fea:	f001 ffdf 	bl	8009fac <VL53L0X_RdDWord>
 8007fee:	4603      	mov	r3, r0
 8007ff0:	461a      	mov	r2, r3
 8007ff2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007ff6:	4313      	orrs	r3, r2
 8007ff8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 8007ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ffe:	0e1b      	lsrs	r3, r3, #24
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 8008000:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008002:	4313      	orrs	r3, r2
 8008004:	657b      	str	r3, [r7, #84]	; 0x54
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 8008006:	2200      	movs	r2, #0
 8008008:	2181      	movs	r1, #129	; 0x81
 800800a:	6878      	ldr	r0, [r7, #4]
 800800c:	f001 feea 	bl	8009de4 <VL53L0X_WrByte>
 8008010:	4603      	mov	r3, r0
 8008012:	461a      	mov	r2, r3
 8008014:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008018:	4313      	orrs	r3, r2
 800801a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 800801e:	2206      	movs	r2, #6
 8008020:	21ff      	movs	r1, #255	; 0xff
 8008022:	6878      	ldr	r0, [r7, #4]
 8008024:	f001 fede 	bl	8009de4 <VL53L0X_WrByte>
 8008028:	4603      	mov	r3, r0
 800802a:	461a      	mov	r2, r3
 800802c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008030:	4313      	orrs	r3, r2
 8008032:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8008036:	f107 0337 	add.w	r3, r7, #55	; 0x37
 800803a:	461a      	mov	r2, r3
 800803c:	2183      	movs	r1, #131	; 0x83
 800803e:	6878      	ldr	r0, [r7, #4]
 8008040:	f001 ff52 	bl	8009ee8 <VL53L0X_RdByte>
 8008044:	4603      	mov	r3, r0
 8008046:	461a      	mov	r2, r3
 8008048:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800804c:	4313      	orrs	r3, r2
 800804e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 8008052:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008056:	f023 0304 	bic.w	r3, r3, #4
 800805a:	b2db      	uxtb	r3, r3
 800805c:	461a      	mov	r2, r3
 800805e:	2183      	movs	r1, #131	; 0x83
 8008060:	6878      	ldr	r0, [r7, #4]
 8008062:	f001 febf 	bl	8009de4 <VL53L0X_WrByte>
 8008066:	4603      	mov	r3, r0
 8008068:	461a      	mov	r2, r3
 800806a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800806e:	4313      	orrs	r3, r2
 8008070:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8008074:	2201      	movs	r2, #1
 8008076:	21ff      	movs	r1, #255	; 0xff
 8008078:	6878      	ldr	r0, [r7, #4]
 800807a:	f001 feb3 	bl	8009de4 <VL53L0X_WrByte>
 800807e:	4603      	mov	r3, r0
 8008080:	461a      	mov	r2, r3
 8008082:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008086:	4313      	orrs	r3, r2
 8008088:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800808c:	2201      	movs	r2, #1
 800808e:	2100      	movs	r1, #0
 8008090:	6878      	ldr	r0, [r7, #4]
 8008092:	f001 fea7 	bl	8009de4 <VL53L0X_WrByte>
 8008096:	4603      	mov	r3, r0
 8008098:	461a      	mov	r2, r3
 800809a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800809e:	4313      	orrs	r3, r2
 80080a0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80080a4:	2200      	movs	r2, #0
 80080a6:	21ff      	movs	r1, #255	; 0xff
 80080a8:	6878      	ldr	r0, [r7, #4]
 80080aa:	f001 fe9b 	bl	8009de4 <VL53L0X_WrByte>
 80080ae:	4603      	mov	r3, r0
 80080b0:	461a      	mov	r2, r3
 80080b2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80080b6:	4313      	orrs	r3, r2
 80080b8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 80080bc:	2200      	movs	r2, #0
 80080be:	2180      	movs	r1, #128	; 0x80
 80080c0:	6878      	ldr	r0, [r7, #4]
 80080c2:	f001 fe8f 	bl	8009de4 <VL53L0X_WrByte>
 80080c6:	4603      	mov	r3, r0
 80080c8:	461a      	mov	r2, r3
 80080ca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80080ce:	4313      	orrs	r3, r2
 80080d0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 80080d4:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 80080d8:	2b00      	cmp	r3, #0
 80080da:	f040 808f 	bne.w	80081fc <VL53L0X_get_info_from_device+0x98e>
 80080de:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80080e2:	2b07      	cmp	r3, #7
 80080e4:	f000 808a 	beq.w	80081fc <VL53L0X_get_info_from_device+0x98e>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 80080e8:	78fb      	ldrb	r3, [r7, #3]
 80080ea:	f003 0301 	and.w	r3, r3, #1
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d024      	beq.n	800813c <VL53L0X_get_info_from_device+0x8ce>
			((ReadDataFromDeviceDone & 1) == 0)) {
 80080f2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80080f6:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d11e      	bne.n	800813c <VL53L0X_get_info_from_device+0x8ce>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 8008104:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
				ReferenceSpadCount, ReferenceSpadCount);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 800810e:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
				ReferenceSpadType, ReferenceSpadType);

			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8008112:	2300      	movs	r3, #0
 8008114:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008116:	e00e      	b.n	8008136 <VL53L0X_get_info_from_device+0x8c8>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
 8008118:	f107 0208 	add.w	r2, r7, #8
 800811c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800811e:	4413      	add	r3, r2
 8008120:	7819      	ldrb	r1, [r3, #0]
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 8008122:	687a      	ldr	r2, [r7, #4]
 8008124:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008126:	4413      	add	r3, r2
 8008128:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 800812c:	460a      	mov	r2, r1
 800812e:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8008130:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008132:	3301      	adds	r3, #1
 8008134:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008136:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008138:	2b05      	cmp	r3, #5
 800813a:	dded      	ble.n	8008118 <VL53L0X_get_info_from_device+0x8aa>
			}
		}

		if (((option & 2) == 2) &&
 800813c:	78fb      	ldrb	r3, [r7, #3]
 800813e:	f003 0302 	and.w	r3, r3, #2
 8008142:	2b00      	cmp	r3, #0
 8008144:	d018      	beq.n	8008178 <VL53L0X_get_info_from_device+0x90a>
			((ReadDataFromDeviceDone & 2) == 0)) {
 8008146:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800814a:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 800814e:	2b00      	cmp	r3, #0
 8008150:	d112      	bne.n	8008178 <VL53L0X_get_info_from_device+0x90a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8008152:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
					ModuleId, ModuleId);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800815c:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
					Revision, Revision);

			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	33f3      	adds	r3, #243	; 0xf3
 800816a:	63bb      	str	r3, [r7, #56]	; 0x38
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 800816c:	f107 0310 	add.w	r3, r7, #16
 8008170:	4619      	mov	r1, r3
 8008172:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008174:	f001 ffa0 	bl	800a0b8 <strcpy>

		}

		if (((option & 4) == 4) &&
 8008178:	78fb      	ldrb	r3, [r7, #3]
 800817a:	f003 0304 	and.w	r3, r3, #4
 800817e:	2b00      	cmp	r3, #0
 8008180:	d030      	beq.n	80081e4 <VL53L0X_get_info_from_device+0x976>
			((ReadDataFromDeviceDone & 4) == 0)) {
 8008182:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008186:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 800818a:	2b00      	cmp	r3, #0
 800818c:	d12a      	bne.n	80081e4 <VL53L0X_get_info_from_device+0x976>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800818e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8008196:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 800819e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80081a0:	025b      	lsls	r3, r3, #9
 80081a2:	643b      	str	r3, [r7, #64]	; 0x40
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80081a8:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
 80081ac:	2300      	movs	r3, #0
 80081ae:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			if (DistMeasFixed1104_400_mm != 0) {
 80081b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d011      	beq.n	80081dc <VL53L0X_get_info_from_device+0x96e>
					OffsetFixed1104_mm =
 80081b8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80081ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80081bc:	1ad3      	subs	r3, r2, r3
 80081be:	64bb      	str	r3, [r7, #72]	; 0x48
						DistMeasFixed1104_400_mm -
						DistMeasTgtFixed1104_mm;
					OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 80081c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80081c2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80081c6:	fb02 f303 	mul.w	r3, r2, r3
 80081ca:	091b      	lsrs	r3, r3, #4
					OffsetMicroMeters = (OffsetFixed1104_mm
 80081cc:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
					OffsetMicroMeters *= -1;
 80081d0:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80081d4:	425b      	negs	r3, r3
 80081d6:	b29b      	uxth	r3, r3
 80081d8:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			}

			PALDevDataSet(Dev,
 80081dc:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	60da      	str	r2, [r3, #12]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 80081e4:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80081e8:	78fb      	ldrb	r3, [r7, #3]
 80081ea:	4313      	orrs	r3, r2
 80081ec:	b2db      	uxtb	r3, r3
 80081ee:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 80081f2:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80081fc:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 8008200:	4618      	mov	r0, r3
 8008202:	3760      	adds	r7, #96	; 0x60
 8008204:	46bd      	mov	sp, r7
 8008206:	bd80      	pop	{r7, pc}

08008208 <VL53L0X_calc_macro_period_ps>:


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev, uint8_t vcsel_period_pclks)
{
 8008208:	b480      	push	{r7}
 800820a:	b087      	sub	sp, #28
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
 8008210:	460b      	mov	r3, r1
 8008212:	70fb      	strb	r3, [r7, #3]
	LOG_FUNCTION_START("");

	/* The above calculation will produce rounding errors,
	   therefore set fixed value
	*/
	PLL_period_ps = 1655;
 8008214:	f240 6277 	movw	r2, #1655	; 0x677
 8008218:	f04f 0300 	mov.w	r3, #0
 800821c:	e9c7 2304 	strd	r2, r3, [r7, #16]

	macro_period_vclks = 2304;
 8008220:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8008224:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 8008226:	78fb      	ldrb	r3, [r7, #3]
 8008228:	68fa      	ldr	r2, [r7, #12]
 800822a:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 800822e:	693a      	ldr	r2, [r7, #16]
 8008230:	fb02 f303 	mul.w	r3, r2, r3
 8008234:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
	return macro_period_ps;
 8008236:	68bb      	ldr	r3, [r7, #8]
}
 8008238:	4618      	mov	r0, r3
 800823a:	371c      	adds	r7, #28
 800823c:	46bd      	mov	sp, r7
 800823e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008242:	4770      	bx	lr

08008244 <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 8008244:	b480      	push	{r7}
 8008246:	b087      	sub	sp, #28
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 800824c:	2300      	movs	r3, #0
 800824e:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 8008250:	2300      	movs	r3, #0
 8008252:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 8008254:	2300      	movs	r3, #0
 8008256:	81fb      	strh	r3, [r7, #14]

	if (timeout_macro_clks > 0) {
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	2b00      	cmp	r3, #0
 800825c:	d017      	beq.n	800828e <VL53L0X_encode_timeout+0x4a>
		ls_byte = timeout_macro_clks - 1;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	3b01      	subs	r3, #1
 8008262:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 8008264:	e005      	b.n	8008272 <VL53L0X_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 8008266:	693b      	ldr	r3, [r7, #16]
 8008268:	085b      	lsrs	r3, r3, #1
 800826a:	613b      	str	r3, [r7, #16]
			ms_byte++;
 800826c:	89fb      	ldrh	r3, [r7, #14]
 800826e:	3301      	adds	r3, #1
 8008270:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 8008272:	693b      	ldr	r3, [r7, #16]
 8008274:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008278:	2b00      	cmp	r3, #0
 800827a:	d1f4      	bne.n	8008266 <VL53L0X_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 800827c:	89fb      	ldrh	r3, [r7, #14]
 800827e:	021b      	lsls	r3, r3, #8
 8008280:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 8008282:	693b      	ldr	r3, [r7, #16]
 8008284:	b29b      	uxth	r3, r3
 8008286:	b2db      	uxtb	r3, r3
 8008288:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 800828a:	4413      	add	r3, r2
 800828c:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 800828e:	8afb      	ldrh	r3, [r7, #22]

}
 8008290:	4618      	mov	r0, r3
 8008292:	371c      	adds	r7, #28
 8008294:	46bd      	mov	sp, r7
 8008296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829a:	4770      	bx	lr

0800829c <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 800829c:	b480      	push	{r7}
 800829e:	b085      	sub	sp, #20
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	4603      	mov	r3, r0
 80082a4:	80fb      	strh	r3, [r7, #6]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 80082a6:	2300      	movs	r3, #0
 80082a8:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 80082aa:	88fb      	ldrh	r3, [r7, #6]
 80082ac:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 80082ae:	88fa      	ldrh	r2, [r7, #6]
 80082b0:	0a12      	lsrs	r2, r2, #8
 80082b2:	b292      	uxth	r2, r2
 80082b4:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 80082b6:	3301      	adds	r3, #1
 80082b8:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 80082ba:	68fb      	ldr	r3, [r7, #12]
}
 80082bc:	4618      	mov	r0, r3
 80082be:	3714      	adds	r7, #20
 80082c0:	46bd      	mov	sp, r7
 80082c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c6:	4770      	bx	lr

080082c8 <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b088      	sub	sp, #32
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	60f8      	str	r0, [r7, #12]
 80082d0:	60b9      	str	r1, [r7, #8]
 80082d2:	4613      	mov	r3, r2
 80082d4:	71fb      	strb	r3, [r7, #7]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 80082d6:	2300      	movs	r3, #0
 80082d8:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 80082da:	79fb      	ldrb	r3, [r7, #7]
 80082dc:	4619      	mov	r1, r3
 80082de:	68f8      	ldr	r0, [r7, #12]
 80082e0:	f7ff ff92 	bl	8008208 <VL53L0X_calc_macro_period_ps>
 80082e4:	61b8      	str	r0, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 80082e6:	69bb      	ldr	r3, [r7, #24]
 80082e8:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80082ec:	4a0a      	ldr	r2, [pc, #40]	; (8008318 <VL53L0X_calc_timeout_mclks+0x50>)
 80082ee:	fba2 2303 	umull	r2, r3, r2, r3
 80082f2:	099b      	lsrs	r3, r3, #6
 80082f4:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 80082f6:	68bb      	ldr	r3, [r7, #8]
 80082f8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80082fc:	fb02 f203 	mul.w	r2, r2, r3
		+ (macro_period_ns / 2)) / macro_period_ns);
 8008300:	697b      	ldr	r3, [r7, #20]
 8008302:	085b      	lsrs	r3, r3, #1
 8008304:	441a      	add	r2, r3
	timeout_period_mclks =
 8008306:	697b      	ldr	r3, [r7, #20]
 8008308:	fbb2 f3f3 	udiv	r3, r2, r3
 800830c:	61fb      	str	r3, [r7, #28]

    return timeout_period_mclks;
 800830e:	69fb      	ldr	r3, [r7, #28]
}
 8008310:	4618      	mov	r0, r3
 8008312:	3720      	adds	r7, #32
 8008314:	46bd      	mov	sp, r7
 8008316:	bd80      	pop	{r7, pc}
 8008318:	10624dd3 	.word	0x10624dd3

0800831c <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 800831c:	b580      	push	{r7, lr}
 800831e:	b086      	sub	sp, #24
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
 8008324:	460b      	mov	r3, r1
 8008326:	807b      	strh	r3, [r7, #2]
 8008328:	4613      	mov	r3, r2
 800832a:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 800832c:	2300      	movs	r3, #0
 800832e:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 8008330:	787b      	ldrb	r3, [r7, #1]
 8008332:	4619      	mov	r1, r3
 8008334:	6878      	ldr	r0, [r7, #4]
 8008336:	f7ff ff67 	bl	8008208 <VL53L0X_calc_macro_period_ps>
 800833a:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 800833c:	693b      	ldr	r3, [r7, #16]
 800833e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8008342:	4a0a      	ldr	r2, [pc, #40]	; (800836c <VL53L0X_calc_timeout_us+0x50>)
 8008344:	fba2 2303 	umull	r2, r3, r2, r3
 8008348:	099b      	lsrs	r3, r3, #6
 800834a:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 800834c:	887b      	ldrh	r3, [r7, #2]
 800834e:	68fa      	ldr	r2, [r7, #12]
 8008350:	fb02 f303 	mul.w	r3, r2, r3
 8008354:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
	actual_timeout_period_us =
 8008358:	4a04      	ldr	r2, [pc, #16]	; (800836c <VL53L0X_calc_timeout_us+0x50>)
 800835a:	fba2 2303 	umull	r2, r3, r2, r3
 800835e:	099b      	lsrs	r3, r3, #6
 8008360:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 8008362:	697b      	ldr	r3, [r7, #20]
}
 8008364:	4618      	mov	r0, r3
 8008366:	3718      	adds	r7, #24
 8008368:	46bd      	mov	sp, r7
 800836a:	bd80      	pop	{r7, pc}
 800836c:	10624dd3 	.word	0x10624dd3

08008370 <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 8008370:	b580      	push	{r7, lr}
 8008372:	b08c      	sub	sp, #48	; 0x30
 8008374:	af00      	add	r7, sp, #0
 8008376:	60f8      	str	r0, [r7, #12]
 8008378:	460b      	mov	r3, r1
 800837a:	607a      	str	r2, [r7, #4]
 800837c:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800837e:	2300      	movs	r3, #0
 8008380:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 8008384:	2300      	movs	r3, #0
 8008386:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t TimeoutMicroSeconds = 0;
 800838a:	2300      	movs	r3, #0
 800838c:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 800838e:	2300      	movs	r3, #0
 8008390:	83fb      	strh	r3, [r7, #30]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 8008392:	2300      	movs	r3, #0
 8008394:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 8008396:	7afb      	ldrb	r3, [r7, #11]
 8008398:	2b00      	cmp	r3, #0
 800839a:	d005      	beq.n	80083a8 <get_sequence_step_timeout+0x38>
 800839c:	7afb      	ldrb	r3, [r7, #11]
 800839e:	2b01      	cmp	r3, #1
 80083a0:	d002      	beq.n	80083a8 <get_sequence_step_timeout+0x38>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 80083a2:	7afb      	ldrb	r3, [r7, #11]
 80083a4:	2b02      	cmp	r3, #2
 80083a6:	d128      	bne.n	80083fa <get_sequence_step_timeout+0x8a>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80083a8:	f107 0321 	add.w	r3, r7, #33	; 0x21
 80083ac:	461a      	mov	r2, r3
 80083ae:	2100      	movs	r1, #0
 80083b0:	68f8      	ldr	r0, [r7, #12]
 80083b2:	f7fd fa7d 	bl	80058b0 <VL53L0X_GetVcselPulsePeriod>
 80083b6:	4603      	mov	r3, r0
 80083b8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 80083bc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d109      	bne.n	80083d8 <get_sequence_step_timeout+0x68>
			Status = VL53L0X_RdByte(Dev,
 80083c4:	f107 0320 	add.w	r3, r7, #32
 80083c8:	461a      	mov	r2, r3
 80083ca:	2146      	movs	r1, #70	; 0x46
 80083cc:	68f8      	ldr	r0, [r7, #12]
 80083ce:	f001 fd8b 	bl	8009ee8 <VL53L0X_RdByte>
 80083d2:	4603      	mov	r3, r0
 80083d4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 80083d8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80083dc:	b29b      	uxth	r3, r3
 80083de:	4618      	mov	r0, r3
 80083e0:	f7ff ff5c 	bl	800829c <VL53L0X_decode_timeout>
 80083e4:	4603      	mov	r3, r0
 80083e6:	847b      	strh	r3, [r7, #34]	; 0x22

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 80083e8:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 80083ec:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80083ee:	4619      	mov	r1, r3
 80083f0:	68f8      	ldr	r0, [r7, #12]
 80083f2:	f7ff ff93 	bl	800831c <VL53L0X_calc_timeout_us>
 80083f6:	62b8      	str	r0, [r7, #40]	; 0x28
 80083f8:	e092      	b.n	8008520 <get_sequence_step_timeout+0x1b0>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 80083fa:	7afb      	ldrb	r3, [r7, #11]
 80083fc:	2b03      	cmp	r3, #3
 80083fe:	d135      	bne.n	800846c <get_sequence_step_timeout+0xfc>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8008400:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8008404:	461a      	mov	r2, r3
 8008406:	2100      	movs	r1, #0
 8008408:	68f8      	ldr	r0, [r7, #12]
 800840a:	f7fd fa51 	bl	80058b0 <VL53L0X_GetVcselPulsePeriod>
 800840e:	4603      	mov	r3, r0
 8008410:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 8008414:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008418:	2b00      	cmp	r3, #0
 800841a:	f040 8081 	bne.w	8008520 <get_sequence_step_timeout+0x1b0>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800841e:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8008422:	461a      	mov	r2, r3
 8008424:	2100      	movs	r1, #0
 8008426:	68f8      	ldr	r0, [r7, #12]
 8008428:	f7fd fa42 	bl	80058b0 <VL53L0X_GetVcselPulsePeriod>
 800842c:	4603      	mov	r3, r0
 800842e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 8008432:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008436:	2b00      	cmp	r3, #0
 8008438:	d109      	bne.n	800844e <get_sequence_step_timeout+0xde>
				Status = VL53L0X_RdWord(Dev,
 800843a:	f107 031e 	add.w	r3, r7, #30
 800843e:	461a      	mov	r2, r3
 8008440:	2151      	movs	r1, #81	; 0x51
 8008442:	68f8      	ldr	r0, [r7, #12]
 8008444:	f001 fd7a 	bl	8009f3c <VL53L0X_RdWord>
 8008448:	4603      	mov	r3, r0
 800844a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 800844e:	8bfb      	ldrh	r3, [r7, #30]
 8008450:	4618      	mov	r0, r3
 8008452:	f7ff ff23 	bl	800829c <VL53L0X_decode_timeout>
 8008456:	4603      	mov	r3, r0
 8008458:	84fb      	strh	r3, [r7, #38]	; 0x26
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800845a:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800845e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008460:	4619      	mov	r1, r3
 8008462:	68f8      	ldr	r0, [r7, #12]
 8008464:	f7ff ff5a 	bl	800831c <VL53L0X_calc_timeout_us>
 8008468:	62b8      	str	r0, [r7, #40]	; 0x28
 800846a:	e059      	b.n	8008520 <get_sequence_step_timeout+0x1b0>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 800846c:	7afb      	ldrb	r3, [r7, #11]
 800846e:	2b04      	cmp	r3, #4
 8008470:	d156      	bne.n	8008520 <get_sequence_step_timeout+0x1b0>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8008472:	f107 0314 	add.w	r3, r7, #20
 8008476:	4619      	mov	r1, r3
 8008478:	68f8      	ldr	r0, [r7, #12]
 800847a:	f7fd fb25 	bl	8005ac8 <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 800847e:	2300      	movs	r3, #0
 8008480:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (SchedulerSequenceSteps.PreRangeOn) {
 8008482:	7dfb      	ldrb	r3, [r7, #23]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d01d      	beq.n	80084c4 <get_sequence_step_timeout+0x154>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8008488:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800848c:	461a      	mov	r2, r3
 800848e:	2100      	movs	r1, #0
 8008490:	68f8      	ldr	r0, [r7, #12]
 8008492:	f7fd fa0d 	bl	80058b0 <VL53L0X_GetVcselPulsePeriod>
 8008496:	4603      	mov	r3, r0
 8008498:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_VCSEL_PERIOD_PRE_RANGE,
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS) */
			if (Status == VL53L0X_ERROR_NONE) {
 800849c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d10f      	bne.n	80084c4 <get_sequence_step_timeout+0x154>
				Status = VL53L0X_RdWord(Dev,
 80084a4:	f107 031e 	add.w	r3, r7, #30
 80084a8:	461a      	mov	r2, r3
 80084aa:	2151      	movs	r1, #81	; 0x51
 80084ac:	68f8      	ldr	r0, [r7, #12]
 80084ae:	f001 fd45 	bl	8009f3c <VL53L0X_RdWord>
 80084b2:	4603      	mov	r3, r0
 80084b4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 80084b8:	8bfb      	ldrh	r3, [r7, #30]
 80084ba:	4618      	mov	r0, r3
 80084bc:	f7ff feee 	bl	800829c <VL53L0X_decode_timeout>
 80084c0:	4603      	mov	r3, r0
 80084c2:	84fb      	strh	r3, [r7, #38]	; 0x26
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 80084c4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d109      	bne.n	80084e0 <get_sequence_step_timeout+0x170>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80084cc:	f107 0321 	add.w	r3, r7, #33	; 0x21
 80084d0:	461a      	mov	r2, r3
 80084d2:	2101      	movs	r1, #1
 80084d4:	68f8      	ldr	r0, [r7, #12]
 80084d6:	f7fd f9eb 	bl	80058b0 <VL53L0X_GetVcselPulsePeriod>
 80084da:	4603      	mov	r3, r0
 80084dc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 80084e0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d10f      	bne.n	8008508 <get_sequence_step_timeout+0x198>
			Status = VL53L0X_RdWord(Dev,
 80084e8:	f107 031c 	add.w	r3, r7, #28
 80084ec:	461a      	mov	r2, r3
 80084ee:	2171      	movs	r1, #113	; 0x71
 80084f0:	68f8      	ldr	r0, [r7, #12]
 80084f2:	f001 fd23 	bl	8009f3c <VL53L0X_RdWord>
 80084f6:	4603      	mov	r3, r0
 80084f8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 80084fc:	8bbb      	ldrh	r3, [r7, #28]
 80084fe:	4618      	mov	r0, r3
 8008500:	f7ff fecc 	bl	800829c <VL53L0X_decode_timeout>
 8008504:	4603      	mov	r3, r0
 8008506:	84bb      	strh	r3, [r7, #36]	; 0x24
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 8008508:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800850a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800850c:	1ad3      	subs	r3, r2, r3
 800850e:	84bb      	strh	r3, [r7, #36]	; 0x24
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8008510:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8008514:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008516:	4619      	mov	r1, r3
 8008518:	68f8      	ldr	r0, [r7, #12]
 800851a:	f7ff feff 	bl	800831c <VL53L0X_calc_timeout_us>
 800851e:	62b8      	str	r0, [r7, #40]	; 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008524:	601a      	str	r2, [r3, #0]

	return Status;
 8008526:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800852a:	4618      	mov	r0, r3
 800852c:	3730      	adds	r7, #48	; 0x30
 800852e:	46bd      	mov	sp, r7
 8008530:	bd80      	pop	{r7, pc}

08008532 <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 8008532:	b580      	push	{r7, lr}
 8008534:	b08a      	sub	sp, #40	; 0x28
 8008536:	af00      	add	r7, sp, #0
 8008538:	60f8      	str	r0, [r7, #12]
 800853a:	460b      	mov	r3, r1
 800853c:	607a      	str	r2, [r7, #4]
 800853e:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008540:	2300      	movs	r3, #0
 8008542:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t MsrcRangeTimeOutMClks;
	uint32_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 8008546:	7afb      	ldrb	r3, [r7, #11]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d005      	beq.n	8008558 <set_sequence_step_timeout+0x26>
 800854c:	7afb      	ldrb	r3, [r7, #11]
 800854e:	2b01      	cmp	r3, #1
 8008550:	d002      	beq.n	8008558 <set_sequence_step_timeout+0x26>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 8008552:	7afb      	ldrb	r3, [r7, #11]
 8008554:	2b02      	cmp	r3, #2
 8008556:	d138      	bne.n	80085ca <set_sequence_step_timeout+0x98>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8008558:	f107 031b 	add.w	r3, r7, #27
 800855c:	461a      	mov	r2, r3
 800855e:	2100      	movs	r1, #0
 8008560:	68f8      	ldr	r0, [r7, #12]
 8008562:	f7fd f9a5 	bl	80058b0 <VL53L0X_GetVcselPulsePeriod>
 8008566:	4603      	mov	r3, r0
 8008568:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 800856c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008570:	2b00      	cmp	r3, #0
 8008572:	d11a      	bne.n	80085aa <set_sequence_step_timeout+0x78>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 8008574:	7efb      	ldrb	r3, [r7, #27]
 8008576:	461a      	mov	r2, r3
 8008578:	6879      	ldr	r1, [r7, #4]
 800857a:	68f8      	ldr	r0, [r7, #12]
 800857c:	f7ff fea4 	bl	80082c8 <VL53L0X_calc_timeout_mclks>
 8008580:	4603      	mov	r3, r0
 8008582:	83bb      	strh	r3, [r7, #28]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 8008584:	8bbb      	ldrh	r3, [r7, #28]
 8008586:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800858a:	d903      	bls.n	8008594 <set_sequence_step_timeout+0x62>
				MsrcEncodedTimeOut = 255;
 800858c:	23ff      	movs	r3, #255	; 0xff
 800858e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8008592:	e004      	b.n	800859e <set_sequence_step_timeout+0x6c>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 8008594:	8bbb      	ldrh	r3, [r7, #28]
 8008596:	b2db      	uxtb	r3, r3
				MsrcEncodedTimeOut =
 8008598:	3b01      	subs	r3, #1
 800859a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800859e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80085a2:	b29a      	uxth	r2, r3
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 80085aa:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	f040 80ab 	bne.w	800870a <set_sequence_step_timeout+0x1d8>
			Status = VL53L0X_WrByte(Dev,
 80085b4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80085b8:	461a      	mov	r2, r3
 80085ba:	2146      	movs	r1, #70	; 0x46
 80085bc:	68f8      	ldr	r0, [r7, #12]
 80085be:	f001 fc11 	bl	8009de4 <VL53L0X_WrByte>
 80085c2:	4603      	mov	r3, r0
 80085c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (Status == VL53L0X_ERROR_NONE) {
 80085c8:	e09f      	b.n	800870a <set_sequence_step_timeout+0x1d8>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 80085ca:	7afb      	ldrb	r3, [r7, #11]
 80085cc:	2b03      	cmp	r3, #3
 80085ce:	d135      	bne.n	800863c <set_sequence_step_timeout+0x10a>

			if (Status == VL53L0X_ERROR_NONE) {
 80085d0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d11b      	bne.n	8008610 <set_sequence_step_timeout+0xde>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80085d8:	f107 031b 	add.w	r3, r7, #27
 80085dc:	461a      	mov	r2, r3
 80085de:	2100      	movs	r1, #0
 80085e0:	68f8      	ldr	r0, [r7, #12]
 80085e2:	f7fd f965 	bl	80058b0 <VL53L0X_GetVcselPulsePeriod>
 80085e6:	4603      	mov	r3, r0
 80085e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 80085ec:	7efb      	ldrb	r3, [r7, #27]
 80085ee:	461a      	mov	r2, r3
 80085f0:	6879      	ldr	r1, [r7, #4]
 80085f2:	68f8      	ldr	r0, [r7, #12]
 80085f4:	f7ff fe68 	bl	80082c8 <VL53L0X_calc_timeout_mclks>
 80085f8:	4603      	mov	r3, r0
				PreRangeTimeOutMClks =
 80085fa:	84bb      	strh	r3, [r7, #36]	; 0x24
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 80085fc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80085fe:	4618      	mov	r0, r3
 8008600:	f7ff fe20 	bl	8008244 <VL53L0X_encode_timeout>
 8008604:	4603      	mov	r3, r0
 8008606:	833b      	strh	r3, [r7, #24]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8008608:	8b3a      	ldrh	r2, [r7, #24]
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 8008610:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008614:	2b00      	cmp	r3, #0
 8008616:	d108      	bne.n	800862a <set_sequence_step_timeout+0xf8>
				Status = VL53L0X_WrWord(Dev,
 8008618:	8b3b      	ldrh	r3, [r7, #24]
 800861a:	461a      	mov	r2, r3
 800861c:	2151      	movs	r1, #81	; 0x51
 800861e:	68f8      	ldr	r0, [r7, #12]
 8008620:	f001 fc04 	bl	8009e2c <VL53L0X_WrWord>
 8008624:	4603      	mov	r3, r0
 8008626:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 800862a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800862e:	2b00      	cmp	r3, #0
 8008630:	d16b      	bne.n	800870a <set_sequence_step_timeout+0x1d8>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	687a      	ldr	r2, [r7, #4]
 8008636:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 800863a:	e066      	b.n	800870a <set_sequence_step_timeout+0x1d8>
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 800863c:	7afb      	ldrb	r3, [r7, #11]
 800863e:	2b04      	cmp	r3, #4
 8008640:	d160      	bne.n	8008704 <set_sequence_step_timeout+0x1d2>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 8008642:	f107 0310 	add.w	r3, r7, #16
 8008646:	4619      	mov	r1, r3
 8008648:	68f8      	ldr	r0, [r7, #12]
 800864a:	f7fd fa3d 	bl	8005ac8 <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 800864e:	2300      	movs	r3, #0
 8008650:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (SchedulerSequenceSteps.PreRangeOn) {
 8008652:	7cfb      	ldrb	r3, [r7, #19]
 8008654:	2b00      	cmp	r3, #0
 8008656:	d01d      	beq.n	8008694 <set_sequence_step_timeout+0x162>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8008658:	f107 031b 	add.w	r3, r7, #27
 800865c:	461a      	mov	r2, r3
 800865e:	2100      	movs	r1, #0
 8008660:	68f8      	ldr	r0, [r7, #12]
 8008662:	f7fd f925 	bl	80058b0 <VL53L0X_GetVcselPulsePeriod>
 8008666:	4603      	mov	r3, r0
 8008668:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS) */
				if (Status == VL53L0X_ERROR_NONE) {
 800866c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008670:	2b00      	cmp	r3, #0
 8008672:	d10f      	bne.n	8008694 <set_sequence_step_timeout+0x162>
					Status = VL53L0X_RdWord(Dev, 0x51,
 8008674:	f107 0318 	add.w	r3, r7, #24
 8008678:	461a      	mov	r2, r3
 800867a:	2151      	movs	r1, #81	; 0x51
 800867c:	68f8      	ldr	r0, [r7, #12]
 800867e:	f001 fc5d 	bl	8009f3c <VL53L0X_RdWord>
 8008682:	4603      	mov	r3, r0
 8008684:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 8008688:	8b3b      	ldrh	r3, [r7, #24]
 800868a:	4618      	mov	r0, r3
 800868c:	f7ff fe06 	bl	800829c <VL53L0X_decode_timeout>
 8008690:	4603      	mov	r3, r0
					PreRangeTimeOutMClks =
 8008692:	84bb      	strh	r3, [r7, #36]	; 0x24
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 8008694:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008698:	2b00      	cmp	r3, #0
 800869a:	d109      	bne.n	80086b0 <set_sequence_step_timeout+0x17e>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800869c:	f107 031b 	add.w	r3, r7, #27
 80086a0:	461a      	mov	r2, r3
 80086a2:	2101      	movs	r1, #1
 80086a4:	68f8      	ldr	r0, [r7, #12]
 80086a6:	f7fd f903 	bl	80058b0 <VL53L0X_GetVcselPulsePeriod>
 80086aa:	4603      	mov	r3, r0
 80086ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
						&CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 80086b0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d128      	bne.n	800870a <set_sequence_step_timeout+0x1d8>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 80086b8:	7efb      	ldrb	r3, [r7, #27]
 80086ba:	461a      	mov	r2, r3
 80086bc:	6879      	ldr	r1, [r7, #4]
 80086be:	68f8      	ldr	r0, [r7, #12]
 80086c0:	f7ff fe02 	bl	80082c8 <VL53L0X_calc_timeout_mclks>
 80086c4:	6238      	str	r0, [r7, #32]
					TimeOutMicroSecs,
					(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 80086c6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80086c8:	6a3a      	ldr	r2, [r7, #32]
 80086ca:	4413      	add	r3, r2
 80086cc:	623b      	str	r3, [r7, #32]

				FinalRangeEncodedTimeOut =
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);
 80086ce:	6a38      	ldr	r0, [r7, #32]
 80086d0:	f7ff fdb8 	bl	8008244 <VL53L0X_encode_timeout>
 80086d4:	4603      	mov	r3, r0
 80086d6:	83fb      	strh	r3, [r7, #30]

				if (Status == VL53L0X_ERROR_NONE) {
 80086d8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d108      	bne.n	80086f2 <set_sequence_step_timeout+0x1c0>
					Status = VL53L0X_WrWord(Dev, 0x71,
 80086e0:	8bfb      	ldrh	r3, [r7, #30]
 80086e2:	461a      	mov	r2, r3
 80086e4:	2171      	movs	r1, #113	; 0x71
 80086e6:	68f8      	ldr	r0, [r7, #12]
 80086e8:	f001 fba0 	bl	8009e2c <VL53L0X_WrWord>
 80086ec:	4603      	mov	r3, r0
 80086ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
 80086f2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d107      	bne.n	800870a <set_sequence_step_timeout+0x1d8>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	687a      	ldr	r2, [r7, #4]
 80086fe:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 8008702:	e002      	b.n	800870a <set_sequence_step_timeout+0x1d8>
						FinalRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008704:	23fc      	movs	r3, #252	; 0xfc
 8008706:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	}
	return Status;
 800870a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800870e:	4618      	mov	r0, r3
 8008710:	3728      	adds	r7, #40	; 0x28
 8008712:	46bd      	mov	sp, r7
 8008714:	bd80      	pop	{r7, pc}

08008716 <VL53L0X_set_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_set_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 8008716:	b580      	push	{r7, lr}
 8008718:	b08a      	sub	sp, #40	; 0x28
 800871a:	af00      	add	r7, sp, #0
 800871c:	6078      	str	r0, [r7, #4]
 800871e:	460b      	mov	r3, r1
 8008720:	70fb      	strb	r3, [r7, #3]
 8008722:	4613      	mov	r3, r2
 8008724:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008726:	2300      	movs	r3, #0
 8008728:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t vcsel_period_reg;
	uint8_t MinPreVcselPeriodPCLK = 12;
 800872c:	230c      	movs	r3, #12
 800872e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t MaxPreVcselPeriodPCLK = 18;
 8008732:	2312      	movs	r3, #18
 8008734:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t MinFinalVcselPeriodPCLK = 8;
 8008738:	2308      	movs	r3, #8
 800873a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint8_t MaxFinalVcselPeriodPCLK = 14;
 800873e:	230e      	movs	r3, #14
 8008740:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t MeasurementTimingBudgetMicroSeconds;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t PreRangeTimeoutMicroSeconds;
	uint32_t MsrcTimeoutMicroSeconds;
	uint8_t PhaseCalInt = 0;
 8008744:	2300      	movs	r3, #0
 8008746:	73fb      	strb	r3, [r7, #15]

	/* Check if valid clock period requested */

	if ((VCSELPulsePeriodPCLK % 2) != 0) {
 8008748:	78bb      	ldrb	r3, [r7, #2]
 800874a:	f003 0301 	and.w	r3, r3, #1
 800874e:	b2db      	uxtb	r3, r3
 8008750:	2b00      	cmp	r3, #0
 8008752:	d003      	beq.n	800875c <VL53L0X_set_vcsel_pulse_period+0x46>
		/* Value must be an even number */
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008754:	23fc      	movs	r3, #252	; 0xfc
 8008756:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800875a:	e020      	b.n	800879e <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE &&
 800875c:	78fb      	ldrb	r3, [r7, #3]
 800875e:	2b00      	cmp	r3, #0
 8008760:	d10d      	bne.n	800877e <VL53L0X_set_vcsel_pulse_period+0x68>
 8008762:	78ba      	ldrb	r2, [r7, #2]
 8008764:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008768:	429a      	cmp	r2, r3
 800876a:	d304      	bcc.n	8008776 <VL53L0X_set_vcsel_pulse_period+0x60>
		(VCSELPulsePeriodPCLK < MinPreVcselPeriodPCLK ||
 800876c:	78ba      	ldrb	r2, [r7, #2]
 800876e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8008772:	429a      	cmp	r2, r3
 8008774:	d903      	bls.n	800877e <VL53L0X_set_vcsel_pulse_period+0x68>
		VCSELPulsePeriodPCLK > MaxPreVcselPeriodPCLK)) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008776:	23fc      	movs	r3, #252	; 0xfc
 8008778:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800877c:	e00f      	b.n	800879e <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE &&
 800877e:	78fb      	ldrb	r3, [r7, #3]
 8008780:	2b01      	cmp	r3, #1
 8008782:	d10c      	bne.n	800879e <VL53L0X_set_vcsel_pulse_period+0x88>
 8008784:	78ba      	ldrb	r2, [r7, #2]
 8008786:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800878a:	429a      	cmp	r2, r3
 800878c:	d304      	bcc.n	8008798 <VL53L0X_set_vcsel_pulse_period+0x82>
		(VCSELPulsePeriodPCLK < MinFinalVcselPeriodPCLK ||
 800878e:	78ba      	ldrb	r2, [r7, #2]
 8008790:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008794:	429a      	cmp	r2, r3
 8008796:	d902      	bls.n	800879e <VL53L0X_set_vcsel_pulse_period+0x88>
		 VCSELPulsePeriodPCLK > MaxFinalVcselPeriodPCLK)) {

		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008798:	23fc      	movs	r3, #252	; 0xfc
 800879a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Apply specific settings for the requested clock period */

	if (Status != VL53L0X_ERROR_NONE)
 800879e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d002      	beq.n	80087ac <VL53L0X_set_vcsel_pulse_period+0x96>
		return Status;
 80087a6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80087aa:	e239      	b.n	8008c20 <VL53L0X_set_vcsel_pulse_period+0x50a>


	if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE) {
 80087ac:	78fb      	ldrb	r3, [r7, #3]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d150      	bne.n	8008854 <VL53L0X_set_vcsel_pulse_period+0x13e>

		/* Set phase check limits */
		if (VCSELPulsePeriodPCLK == 12) {
 80087b2:	78bb      	ldrb	r3, [r7, #2]
 80087b4:	2b0c      	cmp	r3, #12
 80087b6:	d110      	bne.n	80087da <VL53L0X_set_vcsel_pulse_period+0xc4>

			Status = VL53L0X_WrByte(Dev,
 80087b8:	2218      	movs	r2, #24
 80087ba:	2157      	movs	r1, #87	; 0x57
 80087bc:	6878      	ldr	r0, [r7, #4]
 80087be:	f001 fb11 	bl	8009de4 <VL53L0X_WrByte>
 80087c2:	4603      	mov	r3, r0
 80087c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x18);
			Status = VL53L0X_WrByte(Dev,
 80087c8:	2208      	movs	r2, #8
 80087ca:	2156      	movs	r1, #86	; 0x56
 80087cc:	6878      	ldr	r0, [r7, #4]
 80087ce:	f001 fb09 	bl	8009de4 <VL53L0X_WrByte>
 80087d2:	4603      	mov	r3, r0
 80087d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80087d8:	e17f      	b.n	8008ada <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 14) {
 80087da:	78bb      	ldrb	r3, [r7, #2]
 80087dc:	2b0e      	cmp	r3, #14
 80087de:	d110      	bne.n	8008802 <VL53L0X_set_vcsel_pulse_period+0xec>

			Status = VL53L0X_WrByte(Dev,
 80087e0:	2230      	movs	r2, #48	; 0x30
 80087e2:	2157      	movs	r1, #87	; 0x57
 80087e4:	6878      	ldr	r0, [r7, #4]
 80087e6:	f001 fafd 	bl	8009de4 <VL53L0X_WrByte>
 80087ea:	4603      	mov	r3, r0
 80087ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x30);
			Status = VL53L0X_WrByte(Dev,
 80087f0:	2208      	movs	r2, #8
 80087f2:	2156      	movs	r1, #86	; 0x56
 80087f4:	6878      	ldr	r0, [r7, #4]
 80087f6:	f001 faf5 	bl	8009de4 <VL53L0X_WrByte>
 80087fa:	4603      	mov	r3, r0
 80087fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008800:	e16b      	b.n	8008ada <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 16) {
 8008802:	78bb      	ldrb	r3, [r7, #2]
 8008804:	2b10      	cmp	r3, #16
 8008806:	d110      	bne.n	800882a <VL53L0X_set_vcsel_pulse_period+0x114>

			Status = VL53L0X_WrByte(Dev,
 8008808:	2240      	movs	r2, #64	; 0x40
 800880a:	2157      	movs	r1, #87	; 0x57
 800880c:	6878      	ldr	r0, [r7, #4]
 800880e:	f001 fae9 	bl	8009de4 <VL53L0X_WrByte>
 8008812:	4603      	mov	r3, r0
 8008814:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x40);
			Status = VL53L0X_WrByte(Dev,
 8008818:	2208      	movs	r2, #8
 800881a:	2156      	movs	r1, #86	; 0x56
 800881c:	6878      	ldr	r0, [r7, #4]
 800881e:	f001 fae1 	bl	8009de4 <VL53L0X_WrByte>
 8008822:	4603      	mov	r3, r0
 8008824:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008828:	e157      	b.n	8008ada <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 18) {
 800882a:	78bb      	ldrb	r3, [r7, #2]
 800882c:	2b12      	cmp	r3, #18
 800882e:	f040 8154 	bne.w	8008ada <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 8008832:	2250      	movs	r2, #80	; 0x50
 8008834:	2157      	movs	r1, #87	; 0x57
 8008836:	6878      	ldr	r0, [r7, #4]
 8008838:	f001 fad4 	bl	8009de4 <VL53L0X_WrByte>
 800883c:	4603      	mov	r3, r0
 800883e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x50);
			Status = VL53L0X_WrByte(Dev,
 8008842:	2208      	movs	r2, #8
 8008844:	2156      	movs	r1, #86	; 0x56
 8008846:	6878      	ldr	r0, [r7, #4]
 8008848:	f001 facc 	bl	8009de4 <VL53L0X_WrByte>
 800884c:	4603      	mov	r3, r0
 800884e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008852:	e142      	b.n	8008ada <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		}
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE) {
 8008854:	78fb      	ldrb	r3, [r7, #3]
 8008856:	2b01      	cmp	r3, #1
 8008858:	f040 813f 	bne.w	8008ada <VL53L0X_set_vcsel_pulse_period+0x3c4>

		if (VCSELPulsePeriodPCLK == 8) {
 800885c:	78bb      	ldrb	r3, [r7, #2]
 800885e:	2b08      	cmp	r3, #8
 8008860:	d14c      	bne.n	80088fc <VL53L0X_set_vcsel_pulse_period+0x1e6>

			Status = VL53L0X_WrByte(Dev,
 8008862:	2210      	movs	r2, #16
 8008864:	2148      	movs	r1, #72	; 0x48
 8008866:	6878      	ldr	r0, [r7, #4]
 8008868:	f001 fabc 	bl	8009de4 <VL53L0X_WrByte>
 800886c:	4603      	mov	r3, r0
 800886e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x10);
			Status = VL53L0X_WrByte(Dev,
 8008872:	2208      	movs	r2, #8
 8008874:	2147      	movs	r1, #71	; 0x47
 8008876:	6878      	ldr	r0, [r7, #4]
 8008878:	f001 fab4 	bl	8009de4 <VL53L0X_WrByte>
 800887c:	4603      	mov	r3, r0
 800887e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 8008882:	2202      	movs	r2, #2
 8008884:	2132      	movs	r1, #50	; 0x32
 8008886:	6878      	ldr	r0, [r7, #4]
 8008888:	f001 faac 	bl	8009de4 <VL53L0X_WrByte>
 800888c:	4603      	mov	r3, r0
 800888e:	461a      	mov	r2, r3
 8008890:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008894:	4313      	orrs	r3, r2
 8008896:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x02);
			Status |= VL53L0X_WrByte(Dev,
 800889a:	220c      	movs	r2, #12
 800889c:	2130      	movs	r1, #48	; 0x30
 800889e:	6878      	ldr	r0, [r7, #4]
 80088a0:	f001 faa0 	bl	8009de4 <VL53L0X_WrByte>
 80088a4:	4603      	mov	r3, r0
 80088a6:	461a      	mov	r2, r3
 80088a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80088ac:	4313      	orrs	r3, r2
 80088ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x0C);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 80088b2:	2201      	movs	r2, #1
 80088b4:	21ff      	movs	r1, #255	; 0xff
 80088b6:	6878      	ldr	r0, [r7, #4]
 80088b8:	f001 fa94 	bl	8009de4 <VL53L0X_WrByte>
 80088bc:	4603      	mov	r3, r0
 80088be:	461a      	mov	r2, r3
 80088c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80088c4:	4313      	orrs	r3, r2
 80088c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 80088ca:	2230      	movs	r2, #48	; 0x30
 80088cc:	2130      	movs	r1, #48	; 0x30
 80088ce:	6878      	ldr	r0, [r7, #4]
 80088d0:	f001 fa88 	bl	8009de4 <VL53L0X_WrByte>
 80088d4:	4603      	mov	r3, r0
 80088d6:	461a      	mov	r2, r3
 80088d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80088dc:	4313      	orrs	r3, r2
 80088de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x30);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80088e2:	2200      	movs	r2, #0
 80088e4:	21ff      	movs	r1, #255	; 0xff
 80088e6:	6878      	ldr	r0, [r7, #4]
 80088e8:	f001 fa7c 	bl	8009de4 <VL53L0X_WrByte>
 80088ec:	4603      	mov	r3, r0
 80088ee:	461a      	mov	r2, r3
 80088f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80088f4:	4313      	orrs	r3, r2
 80088f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80088fa:	e0ee      	b.n	8008ada <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 10) {
 80088fc:	78bb      	ldrb	r3, [r7, #2]
 80088fe:	2b0a      	cmp	r3, #10
 8008900:	d14c      	bne.n	800899c <VL53L0X_set_vcsel_pulse_period+0x286>

			Status = VL53L0X_WrByte(Dev,
 8008902:	2228      	movs	r2, #40	; 0x28
 8008904:	2148      	movs	r1, #72	; 0x48
 8008906:	6878      	ldr	r0, [r7, #4]
 8008908:	f001 fa6c 	bl	8009de4 <VL53L0X_WrByte>
 800890c:	4603      	mov	r3, r0
 800890e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x28);
			Status = VL53L0X_WrByte(Dev,
 8008912:	2208      	movs	r2, #8
 8008914:	2147      	movs	r1, #71	; 0x47
 8008916:	6878      	ldr	r0, [r7, #4]
 8008918:	f001 fa64 	bl	8009de4 <VL53L0X_WrByte>
 800891c:	4603      	mov	r3, r0
 800891e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 8008922:	2203      	movs	r2, #3
 8008924:	2132      	movs	r1, #50	; 0x32
 8008926:	6878      	ldr	r0, [r7, #4]
 8008928:	f001 fa5c 	bl	8009de4 <VL53L0X_WrByte>
 800892c:	4603      	mov	r3, r0
 800892e:	461a      	mov	r2, r3
 8008930:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008934:	4313      	orrs	r3, r2
 8008936:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800893a:	2209      	movs	r2, #9
 800893c:	2130      	movs	r1, #48	; 0x30
 800893e:	6878      	ldr	r0, [r7, #4]
 8008940:	f001 fa50 	bl	8009de4 <VL53L0X_WrByte>
 8008944:	4603      	mov	r3, r0
 8008946:	461a      	mov	r2, r3
 8008948:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800894c:	4313      	orrs	r3, r2
 800894e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x09);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8008952:	2201      	movs	r2, #1
 8008954:	21ff      	movs	r1, #255	; 0xff
 8008956:	6878      	ldr	r0, [r7, #4]
 8008958:	f001 fa44 	bl	8009de4 <VL53L0X_WrByte>
 800895c:	4603      	mov	r3, r0
 800895e:	461a      	mov	r2, r3
 8008960:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008964:	4313      	orrs	r3, r2
 8008966:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800896a:	2220      	movs	r2, #32
 800896c:	2130      	movs	r1, #48	; 0x30
 800896e:	6878      	ldr	r0, [r7, #4]
 8008970:	f001 fa38 	bl	8009de4 <VL53L0X_WrByte>
 8008974:	4603      	mov	r3, r0
 8008976:	461a      	mov	r2, r3
 8008978:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800897c:	4313      	orrs	r3, r2
 800897e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8008982:	2200      	movs	r2, #0
 8008984:	21ff      	movs	r1, #255	; 0xff
 8008986:	6878      	ldr	r0, [r7, #4]
 8008988:	f001 fa2c 	bl	8009de4 <VL53L0X_WrByte>
 800898c:	4603      	mov	r3, r0
 800898e:	461a      	mov	r2, r3
 8008990:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008994:	4313      	orrs	r3, r2
 8008996:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800899a:	e09e      	b.n	8008ada <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 12) {
 800899c:	78bb      	ldrb	r3, [r7, #2]
 800899e:	2b0c      	cmp	r3, #12
 80089a0:	d14c      	bne.n	8008a3c <VL53L0X_set_vcsel_pulse_period+0x326>

			Status = VL53L0X_WrByte(Dev,
 80089a2:	2238      	movs	r2, #56	; 0x38
 80089a4:	2148      	movs	r1, #72	; 0x48
 80089a6:	6878      	ldr	r0, [r7, #4]
 80089a8:	f001 fa1c 	bl	8009de4 <VL53L0X_WrByte>
 80089ac:	4603      	mov	r3, r0
 80089ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x38);
			Status = VL53L0X_WrByte(Dev,
 80089b2:	2208      	movs	r2, #8
 80089b4:	2147      	movs	r1, #71	; 0x47
 80089b6:	6878      	ldr	r0, [r7, #4]
 80089b8:	f001 fa14 	bl	8009de4 <VL53L0X_WrByte>
 80089bc:	4603      	mov	r3, r0
 80089be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 80089c2:	2203      	movs	r2, #3
 80089c4:	2132      	movs	r1, #50	; 0x32
 80089c6:	6878      	ldr	r0, [r7, #4]
 80089c8:	f001 fa0c 	bl	8009de4 <VL53L0X_WrByte>
 80089cc:	4603      	mov	r3, r0
 80089ce:	461a      	mov	r2, r3
 80089d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80089d4:	4313      	orrs	r3, r2
 80089d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 80089da:	2208      	movs	r2, #8
 80089dc:	2130      	movs	r1, #48	; 0x30
 80089de:	6878      	ldr	r0, [r7, #4]
 80089e0:	f001 fa00 	bl	8009de4 <VL53L0X_WrByte>
 80089e4:	4603      	mov	r3, r0
 80089e6:	461a      	mov	r2, r3
 80089e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80089ec:	4313      	orrs	r3, r2
 80089ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x08);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 80089f2:	2201      	movs	r2, #1
 80089f4:	21ff      	movs	r1, #255	; 0xff
 80089f6:	6878      	ldr	r0, [r7, #4]
 80089f8:	f001 f9f4 	bl	8009de4 <VL53L0X_WrByte>
 80089fc:	4603      	mov	r3, r0
 80089fe:	461a      	mov	r2, r3
 8008a00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008a04:	4313      	orrs	r3, r2
 8008a06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 8008a0a:	2220      	movs	r2, #32
 8008a0c:	2130      	movs	r1, #48	; 0x30
 8008a0e:	6878      	ldr	r0, [r7, #4]
 8008a10:	f001 f9e8 	bl	8009de4 <VL53L0X_WrByte>
 8008a14:	4603      	mov	r3, r0
 8008a16:	461a      	mov	r2, r3
 8008a18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008a1c:	4313      	orrs	r3, r2
 8008a1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8008a22:	2200      	movs	r2, #0
 8008a24:	21ff      	movs	r1, #255	; 0xff
 8008a26:	6878      	ldr	r0, [r7, #4]
 8008a28:	f001 f9dc 	bl	8009de4 <VL53L0X_WrByte>
 8008a2c:	4603      	mov	r3, r0
 8008a2e:	461a      	mov	r2, r3
 8008a30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008a34:	4313      	orrs	r3, r2
 8008a36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008a3a:	e04e      	b.n	8008ada <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 14) {
 8008a3c:	78bb      	ldrb	r3, [r7, #2]
 8008a3e:	2b0e      	cmp	r3, #14
 8008a40:	d14b      	bne.n	8008ada <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 8008a42:	2248      	movs	r2, #72	; 0x48
 8008a44:	2148      	movs	r1, #72	; 0x48
 8008a46:	6878      	ldr	r0, [r7, #4]
 8008a48:	f001 f9cc 	bl	8009de4 <VL53L0X_WrByte>
 8008a4c:	4603      	mov	r3, r0
 8008a4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x048);
			Status = VL53L0X_WrByte(Dev,
 8008a52:	2208      	movs	r2, #8
 8008a54:	2147      	movs	r1, #71	; 0x47
 8008a56:	6878      	ldr	r0, [r7, #4]
 8008a58:	f001 f9c4 	bl	8009de4 <VL53L0X_WrByte>
 8008a5c:	4603      	mov	r3, r0
 8008a5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 8008a62:	2203      	movs	r2, #3
 8008a64:	2132      	movs	r1, #50	; 0x32
 8008a66:	6878      	ldr	r0, [r7, #4]
 8008a68:	f001 f9bc 	bl	8009de4 <VL53L0X_WrByte>
 8008a6c:	4603      	mov	r3, r0
 8008a6e:	461a      	mov	r2, r3
 8008a70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008a74:	4313      	orrs	r3, r2
 8008a76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 8008a7a:	2207      	movs	r2, #7
 8008a7c:	2130      	movs	r1, #48	; 0x30
 8008a7e:	6878      	ldr	r0, [r7, #4]
 8008a80:	f001 f9b0 	bl	8009de4 <VL53L0X_WrByte>
 8008a84:	4603      	mov	r3, r0
 8008a86:	461a      	mov	r2, r3
 8008a88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008a8c:	4313      	orrs	r3, r2
 8008a8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x07);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8008a92:	2201      	movs	r2, #1
 8008a94:	21ff      	movs	r1, #255	; 0xff
 8008a96:	6878      	ldr	r0, [r7, #4]
 8008a98:	f001 f9a4 	bl	8009de4 <VL53L0X_WrByte>
 8008a9c:	4603      	mov	r3, r0
 8008a9e:	461a      	mov	r2, r3
 8008aa0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008aa4:	4313      	orrs	r3, r2
 8008aa6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 8008aaa:	2220      	movs	r2, #32
 8008aac:	2130      	movs	r1, #48	; 0x30
 8008aae:	6878      	ldr	r0, [r7, #4]
 8008ab0:	f001 f998 	bl	8009de4 <VL53L0X_WrByte>
 8008ab4:	4603      	mov	r3, r0
 8008ab6:	461a      	mov	r2, r3
 8008ab8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008abc:	4313      	orrs	r3, r2
 8008abe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8008ac2:	2200      	movs	r2, #0
 8008ac4:	21ff      	movs	r1, #255	; 0xff
 8008ac6:	6878      	ldr	r0, [r7, #4]
 8008ac8:	f001 f98c 	bl	8009de4 <VL53L0X_WrByte>
 8008acc:	4603      	mov	r3, r0
 8008ace:	461a      	mov	r2, r3
 8008ad0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008ad4:	4313      	orrs	r3, r2
 8008ad6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}


	/* Re-calculate and apply timeouts, in macro periods */

	if (Status == VL53L0X_ERROR_NONE) {
 8008ada:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d17f      	bne.n	8008be2 <VL53L0X_set_vcsel_pulse_period+0x4cc>
		vcsel_period_reg = VL53L0X_encode_vcsel_period((uint8_t)
 8008ae2:	78bb      	ldrb	r3, [r7, #2]
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	f7fe fe38 	bl	800775a <VL53L0X_encode_vcsel_period>
 8008aea:	4603      	mov	r3, r0
 8008aec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		* using the new VCSEL period.
		*
		* For the MSRC timeout, the same applies - this timeout being
		* dependant on the pre-range vcsel period.
		*/
		switch (VcselPeriodType) {
 8008af0:	78fb      	ldrb	r3, [r7, #3]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d002      	beq.n	8008afc <VL53L0X_set_vcsel_pulse_period+0x3e6>
 8008af6:	2b01      	cmp	r3, #1
 8008af8:	d045      	beq.n	8008b86 <VL53L0X_set_vcsel_pulse_period+0x470>
 8008afa:	e06e      	b.n	8008bda <VL53L0X_set_vcsel_pulse_period+0x4c4>
		case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
			Status = get_sequence_step_timeout(Dev,
 8008afc:	f107 0314 	add.w	r3, r7, #20
 8008b00:	461a      	mov	r2, r3
 8008b02:	2103      	movs	r1, #3
 8008b04:	6878      	ldr	r0, [r7, #4]
 8008b06:	f7ff fc33 	bl	8008370 <get_sequence_step_timeout>
 8008b0a:	4603      	mov	r3, r0
 8008b0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 8008b10:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d109      	bne.n	8008b2c <VL53L0X_set_vcsel_pulse_period+0x416>
				Status = get_sequence_step_timeout(Dev,
 8008b18:	f107 0310 	add.w	r3, r7, #16
 8008b1c:	461a      	mov	r2, r3
 8008b1e:	2102      	movs	r1, #2
 8008b20:	6878      	ldr	r0, [r7, #4]
 8008b22:	f7ff fc25 	bl	8008370 <get_sequence_step_timeout>
 8008b26:	4603      	mov	r3, r0
 8008b28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					&MsrcTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 8008b2c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d109      	bne.n	8008b48 <VL53L0X_set_vcsel_pulse_period+0x432>
				Status = VL53L0X_WrByte(Dev,
 8008b34:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8008b38:	461a      	mov	r2, r3
 8008b3a:	2150      	movs	r1, #80	; 0x50
 8008b3c:	6878      	ldr	r0, [r7, #4]
 8008b3e:	f001 f951 	bl	8009de4 <VL53L0X_WrByte>
 8008b42:	4603      	mov	r3, r0
 8008b44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 8008b48:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d108      	bne.n	8008b62 <VL53L0X_set_vcsel_pulse_period+0x44c>
				Status = set_sequence_step_timeout(Dev,
 8008b50:	697b      	ldr	r3, [r7, #20]
 8008b52:	461a      	mov	r2, r3
 8008b54:	2103      	movs	r1, #3
 8008b56:	6878      	ldr	r0, [r7, #4]
 8008b58:	f7ff fceb 	bl	8008532 <set_sequence_step_timeout>
 8008b5c:	4603      	mov	r3, r0
 8008b5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_PRE_RANGE,
					PreRangeTimeoutMicroSeconds);


			if (Status == VL53L0X_ERROR_NONE)
 8008b62:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d108      	bne.n	8008b7c <VL53L0X_set_vcsel_pulse_period+0x466>
				Status = set_sequence_step_timeout(Dev,
 8008b6a:	693b      	ldr	r3, [r7, #16]
 8008b6c:	461a      	mov	r2, r3
 8008b6e:	2102      	movs	r1, #2
 8008b70:	6878      	ldr	r0, [r7, #4]
 8008b72:	f7ff fcde 	bl	8008532 <set_sequence_step_timeout>
 8008b76:	4603      	mov	r3, r0
 8008b78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					MsrcTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	78ba      	ldrb	r2, [r7, #2]
 8008b80:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				Dev,
				PreRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 8008b84:	e02e      	b.n	8008be4 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
			Status = get_sequence_step_timeout(Dev,
 8008b86:	f107 0318 	add.w	r3, r7, #24
 8008b8a:	461a      	mov	r2, r3
 8008b8c:	2104      	movs	r1, #4
 8008b8e:	6878      	ldr	r0, [r7, #4]
 8008b90:	f7ff fbee 	bl	8008370 <get_sequence_step_timeout>
 8008b94:	4603      	mov	r3, r0
 8008b96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_FINAL_RANGE,
				&FinalRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 8008b9a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d109      	bne.n	8008bb6 <VL53L0X_set_vcsel_pulse_period+0x4a0>
				Status = VL53L0X_WrByte(Dev,
 8008ba2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8008ba6:	461a      	mov	r2, r3
 8008ba8:	2170      	movs	r1, #112	; 0x70
 8008baa:	6878      	ldr	r0, [r7, #4]
 8008bac:	f001 f91a 	bl	8009de4 <VL53L0X_WrByte>
 8008bb0:	4603      	mov	r3, r0
 8008bb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 8008bb6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d108      	bne.n	8008bd0 <VL53L0X_set_vcsel_pulse_period+0x4ba>
				Status = set_sequence_step_timeout(Dev,
 8008bbe:	69bb      	ldr	r3, [r7, #24]
 8008bc0:	461a      	mov	r2, r3
 8008bc2:	2104      	movs	r1, #4
 8008bc4:	6878      	ldr	r0, [r7, #4]
 8008bc6:	f7ff fcb4 	bl	8008532 <set_sequence_step_timeout>
 8008bca:	4603      	mov	r3, r0
 8008bcc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					FinalRangeTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	78ba      	ldrb	r2, [r7, #2]
 8008bd4:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				Dev,
				FinalRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 8008bd8:	e004      	b.n	8008be4 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008bda:	23fc      	movs	r3, #252	; 0xfc
 8008bdc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008be0:	e000      	b.n	8008be4 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		}
	}
 8008be2:	bf00      	nop

	/* Finally, the timing budget must be re-applied */
	if (Status == VL53L0X_ERROR_NONE) {
 8008be4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d109      	bne.n	8008c00 <VL53L0X_set_vcsel_pulse_period+0x4ea>
		VL53L0X_GETPARAMETERFIELD(Dev,
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	695b      	ldr	r3, [r3, #20]
 8008bf0:	61fb      	str	r3, [r7, #28]
			MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);

		Status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 8008bf2:	69f9      	ldr	r1, [r7, #28]
 8008bf4:	6878      	ldr	r0, [r7, #4]
 8008bf6:	f7fc fe1d 	bl	8005834 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 8008bfa:	4603      	mov	r3, r0
 8008bfc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Perform the phase calibration. This is needed after changing on
	 * vcsel period.
	 * get_data_enable = 0, restore_config = 1 */
	if (Status == VL53L0X_ERROR_NONE)
 8008c00:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d109      	bne.n	8008c1c <VL53L0X_set_vcsel_pulse_period+0x506>
		Status = VL53L0X_perform_phase_calibration(
 8008c08:	f107 010f 	add.w	r1, r7, #15
 8008c0c:	2301      	movs	r3, #1
 8008c0e:	2200      	movs	r2, #0
 8008c10:	6878      	ldr	r0, [r7, #4]
 8008c12:	f7fe fcbd 	bl	8007590 <VL53L0X_perform_phase_calibration>
 8008c16:	4603      	mov	r3, r0
 8008c18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Dev, &PhaseCalInt, 0, 1);

	return Status;
 8008c1c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8008c20:	4618      	mov	r0, r3
 8008c22:	3728      	adds	r7, #40	; 0x28
 8008c24:	46bd      	mov	sp, r7
 8008c26:	bd80      	pop	{r7, pc}

08008c28 <VL53L0X_get_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	b086      	sub	sp, #24
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	60f8      	str	r0, [r7, #12]
 8008c30:	460b      	mov	r3, r1
 8008c32:	607a      	str	r2, [r7, #4]
 8008c34:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008c36:	2300      	movs	r3, #0
 8008c38:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 8008c3a:	7afb      	ldrb	r3, [r7, #11]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d002      	beq.n	8008c46 <VL53L0X_get_vcsel_pulse_period+0x1e>
 8008c40:	2b01      	cmp	r3, #1
 8008c42:	d00a      	beq.n	8008c5a <VL53L0X_get_vcsel_pulse_period+0x32>
 8008c44:	e013      	b.n	8008c6e <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 8008c46:	f107 0316 	add.w	r3, r7, #22
 8008c4a:	461a      	mov	r2, r3
 8008c4c:	2150      	movs	r1, #80	; 0x50
 8008c4e:	68f8      	ldr	r0, [r7, #12]
 8008c50:	f001 f94a 	bl	8009ee8 <VL53L0X_RdByte>
 8008c54:	4603      	mov	r3, r0
 8008c56:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 8008c58:	e00b      	b.n	8008c72 <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 8008c5a:	f107 0316 	add.w	r3, r7, #22
 8008c5e:	461a      	mov	r2, r3
 8008c60:	2170      	movs	r1, #112	; 0x70
 8008c62:	68f8      	ldr	r0, [r7, #12]
 8008c64:	f001 f940 	bl	8009ee8 <VL53L0X_RdByte>
 8008c68:	4603      	mov	r3, r0
 8008c6a:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 8008c6c:	e001      	b.n	8008c72 <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008c6e:	23fc      	movs	r3, #252	; 0xfc
 8008c70:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 8008c72:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d107      	bne.n	8008c8a <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 8008c7a:	7dbb      	ldrb	r3, [r7, #22]
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	f7fe fd59 	bl	8007734 <VL53L0X_decode_vcsel_period>
 8008c82:	4603      	mov	r3, r0
 8008c84:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	701a      	strb	r2, [r3, #0]

	return Status;
 8008c8a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008c8e:	4618      	mov	r0, r3
 8008c90:	3718      	adds	r7, #24
 8008c92:	46bd      	mov	sp, r7
 8008c94:	bd80      	pop	{r7, pc}

08008c96 <VL53L0X_set_measurement_timing_budget_micro_seconds>:



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8008c96:	b580      	push	{r7, lr}
 8008c98:	b092      	sub	sp, #72	; 0x48
 8008c9a:	af00      	add	r7, sp, #0
 8008c9c:	6078      	str	r0, [r7, #4]
 8008c9e:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008ca0:	2300      	movs	r3, #0
 8008ca2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 8008ca6:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8008caa:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 8008cac:	f240 7376 	movw	r3, #1910	; 0x776
 8008cb0:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t EndOverheadMicroSeconds		= 960;
 8008cb2:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8008cb6:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t MsrcOverheadMicroSeconds		= 660;
 8008cb8:	f44f 7325 	mov.w	r3, #660	; 0x294
 8008cbc:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t TccOverheadMicroSeconds		= 590;
 8008cbe:	f240 234e 	movw	r3, #590	; 0x24e
 8008cc2:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t DssOverheadMicroSeconds		= 690;
 8008cc4:	f240 23b2 	movw	r3, #690	; 0x2b2
 8008cc8:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 8008cca:	f44f 7325 	mov.w	r3, #660	; 0x294
 8008cce:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 8008cd0:	f240 2326 	movw	r3, #550	; 0x226
 8008cd4:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	60fb      	str	r3, [r7, #12]
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
 8008cda:	f644 6320 	movw	r3, #20000	; 0x4e20
 8008cde:	623b      	str	r3, [r7, #32]
	uint32_t SubTimeout = 0;
 8008ce0:	2300      	movs	r3, #0
 8008ce2:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	if (MeasurementTimingBudgetMicroSeconds
 8008ce4:	683a      	ldr	r2, [r7, #0]
 8008ce6:	6a3b      	ldr	r3, [r7, #32]
 8008ce8:	429a      	cmp	r2, r3
 8008cea:	d205      	bcs.n	8008cf8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x62>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008cec:	23fc      	movs	r3, #252	; 0xfc
 8008cee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		return Status;
 8008cf2:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8008cf6:	e0aa      	b.n	8008e4e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 8008cf8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008cfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cfc:	4413      	add	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 8008cfe:	683a      	ldr	r2, [r7, #0]
 8008d00:	1ad3      	subs	r3, r2, r3
 8008d02:	643b      	str	r3, [r7, #64]	; 0x40

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8008d04:	f107 0314 	add.w	r3, r7, #20
 8008d08:	4619      	mov	r1, r3
 8008d0a:	6878      	ldr	r0, [r7, #4]
 8008d0c:	f7fc fedc 	bl	8005ac8 <VL53L0X_GetSequenceStepEnables>
 8008d10:	4603      	mov	r3, r0
 8008d12:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	if (Status == VL53L0X_ERROR_NONE &&
 8008d16:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d15b      	bne.n	8008dd6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
		(SchedulerSequenceSteps.TccOn  ||
 8008d1e:	7d3b      	ldrb	r3, [r7, #20]
	if (Status == VL53L0X_ERROR_NONE &&
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d105      	bne.n	8008d30 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.MsrcOn ||
 8008d24:	7d7b      	ldrb	r3, [r7, #21]
		(SchedulerSequenceSteps.TccOn  ||
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d102      	bne.n	8008d30 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.DssOn)) {
 8008d2a:	7dbb      	ldrb	r3, [r7, #22]
		SchedulerSequenceSteps.MsrcOn ||
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d052      	beq.n	8008dd6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 8008d30:	f107 0310 	add.w	r3, r7, #16
 8008d34:	461a      	mov	r2, r3
 8008d36:	2102      	movs	r1, #2
 8008d38:	6878      	ldr	r0, [r7, #4]
 8008d3a:	f7ff fb19 	bl	8008370 <get_sequence_step_timeout>
 8008d3e:	4603      	mov	r3, r0
 8008d40:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					&MsrcDccTccTimeoutMicroSeconds);

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled. */

		if (Status != VL53L0X_ERROR_NONE)
 8008d44:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d002      	beq.n	8008d52 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbc>
			return Status;
 8008d4c:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8008d50:	e07d      	b.n	8008e4e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 8008d52:	7d3b      	ldrb	r3, [r7, #20]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d00f      	beq.n	8008d78 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 8008d58:	693b      	ldr	r3, [r7, #16]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 8008d5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d5c:	4413      	add	r3, r2
 8008d5e:	61fb      	str	r3, [r7, #28]

			if (SubTimeout <
 8008d60:	69fa      	ldr	r2, [r7, #28]
 8008d62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d64:	429a      	cmp	r2, r3
 8008d66:	d204      	bcs.n	8008d72 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xdc>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 8008d68:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008d6a:	69fb      	ldr	r3, [r7, #28]
 8008d6c:	1ad3      	subs	r3, r2, r3
 8008d6e:	643b      	str	r3, [r7, #64]	; 0x40
 8008d70:	e002      	b.n	8008d78 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008d72:	23fc      	movs	r3, #252	; 0xfc
 8008d74:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
 8008d78:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d002      	beq.n	8008d86 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf0>
			LOG_FUNCTION_END(Status);
			return Status;
 8008d80:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8008d84:	e063      	b.n	8008e4e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 8008d86:	7dbb      	ldrb	r3, [r7, #22]
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d011      	beq.n	8008db0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x11a>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 8008d8c:	693a      	ldr	r2, [r7, #16]
 8008d8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d90:	4413      	add	r3, r2
 8008d92:	005b      	lsls	r3, r3, #1
 8008d94:	61fb      	str	r3, [r7, #28]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8008d96:	69fa      	ldr	r2, [r7, #28]
 8008d98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d9a:	429a      	cmp	r2, r3
 8008d9c:	d204      	bcs.n	8008da8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x112>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 8008d9e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008da0:	69fb      	ldr	r3, [r7, #28]
 8008da2:	1ad3      	subs	r3, r2, r3
 8008da4:	643b      	str	r3, [r7, #64]	; 0x40
 8008da6:	e016      	b.n	8008dd6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008da8:	23fc      	movs	r3, #252	; 0xfc
 8008daa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8008dae:	e012      	b.n	8008dd6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 8008db0:	7d7b      	ldrb	r3, [r7, #21]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d00f      	beq.n	8008dd6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 8008db6:	693b      	ldr	r3, [r7, #16]
 8008db8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008dba:	4413      	add	r3, r2
 8008dbc:	61fb      	str	r3, [r7, #28]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8008dbe:	69fa      	ldr	r2, [r7, #28]
 8008dc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008dc2:	429a      	cmp	r2, r3
 8008dc4:	d204      	bcs.n	8008dd0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x13a>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 8008dc6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008dc8:	69fb      	ldr	r3, [r7, #28]
 8008dca:	1ad3      	subs	r3, r2, r3
 8008dcc:	643b      	str	r3, [r7, #64]	; 0x40
 8008dce:	e002      	b.n	8008dd6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008dd0:	23fc      	movs	r3, #252	; 0xfc
 8008dd2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
 8008dd6:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d002      	beq.n	8008de4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x14e>
		LOG_FUNCTION_END(Status);
		return Status;
 8008dde:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8008de2:	e034      	b.n	8008e4e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 8008de4:	7dfb      	ldrb	r3, [r7, #23]
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d019      	beq.n	8008e1e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
 8008dea:	f107 030c 	add.w	r3, r7, #12
 8008dee:	461a      	mov	r2, r3
 8008df0:	2103      	movs	r1, #3
 8008df2:	6878      	ldr	r0, [r7, #4]
 8008df4:	f7ff fabc 	bl	8008370 <get_sequence_step_timeout>
 8008df8:	4603      	mov	r3, r0
 8008dfa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008e02:	4413      	add	r3, r2
 8008e04:	61fb      	str	r3, [r7, #28]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8008e06:	69fa      	ldr	r2, [r7, #28]
 8008e08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e0a:	429a      	cmp	r2, r3
 8008e0c:	d204      	bcs.n	8008e18 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x182>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 8008e0e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008e10:	69fb      	ldr	r3, [r7, #28]
 8008e12:	1ad3      	subs	r3, r2, r3
 8008e14:	643b      	str	r3, [r7, #64]	; 0x40
 8008e16:	e002      	b.n	8008e1e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008e18:	23fc      	movs	r3, #252	; 0xfc
 8008e1a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 8008e1e:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d111      	bne.n	8008e4a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>
		SchedulerSequenceSteps.FinalRangeOn) {
 8008e26:	7e3b      	ldrb	r3, [r7, #24]
	if (Status == VL53L0X_ERROR_NONE &&
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d00e      	beq.n	8008e4a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>

		FinalRangeTimingBudgetMicroSeconds -=
 8008e2c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e30:	1ad3      	subs	r3, r2, r3
 8008e32:	643b      	str	r3, [r7, #64]	; 0x40
		 * budget and the sum of all other timeouts within the sequence.
		 * If there is no room for the final range timeout, then an error
		 * will be set. Otherwise the remaining time will be applied to
		 * the final range.
		 */
		Status = set_sequence_step_timeout(Dev,
 8008e34:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008e36:	2104      	movs	r1, #4
 8008e38:	6878      	ldr	r0, [r7, #4]
 8008e3a:	f7ff fb7a 	bl	8008532 <set_sequence_step_timeout>
 8008e3e:	4603      	mov	r3, r0
 8008e40:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	683a      	ldr	r2, [r7, #0]
 8008e48:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);

	return Status;
 8008e4a:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 8008e4e:	4618      	mov	r0, r3
 8008e50:	3748      	adds	r7, #72	; 0x48
 8008e52:	46bd      	mov	sp, r7
 8008e54:	bd80      	pop	{r7, pc}

08008e56 <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 8008e56:	b580      	push	{r7, lr}
 8008e58:	b090      	sub	sp, #64	; 0x40
 8008e5a:	af00      	add	r7, sp, #0
 8008e5c:	6078      	str	r0, [r7, #4]
 8008e5e:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008e60:	2300      	movs	r3, #0
 8008e62:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 8008e66:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8008e6a:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 8008e6c:	f240 7376 	movw	r3, #1910	; 0x776
 8008e70:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 8008e72:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8008e76:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 8008e78:	f44f 7325 	mov.w	r3, #660	; 0x294
 8008e7c:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 8008e7e:	f240 234e 	movw	r3, #590	; 0x24e
 8008e82:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 8008e84:	f240 23b2 	movw	r3, #690	; 0x2b2
 8008e88:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 8008e8a:	f44f 7325 	mov.w	r3, #660	; 0x294
 8008e8e:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 8008e90:	f240 2326 	movw	r3, #550	; 0x226
 8008e94:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 8008e96:	2300      	movs	r3, #0
 8008e98:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 8008e9a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008e9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e9e:	441a      	add	r2, r3
 8008ea0:	683b      	ldr	r3, [r7, #0]
 8008ea2:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8008ea4:	f107 0318 	add.w	r3, r7, #24
 8008ea8:	4619      	mov	r1, r3
 8008eaa:	6878      	ldr	r0, [r7, #4]
 8008eac:	f7fc fe0c 	bl	8005ac8 <VL53L0X_GetSequenceStepEnables>
 8008eb0:	4603      	mov	r3, r0
 8008eb2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status != VL53L0X_ERROR_NONE) {
 8008eb6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d002      	beq.n	8008ec4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
		LOG_FUNCTION_END(Status);
		return Status;
 8008ebe:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008ec2:	e075      	b.n	8008fb0 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 8008ec4:	7e3b      	ldrb	r3, [r7, #24]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d105      	bne.n	8008ed6 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 8008eca:	7e7b      	ldrb	r3, [r7, #25]
	if (SchedulerSequenceSteps.TccOn  ||
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d102      	bne.n	8008ed6 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn) {
 8008ed0:	7ebb      	ldrb	r3, [r7, #26]
		SchedulerSequenceSteps.MsrcOn ||
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d030      	beq.n	8008f38 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>

		Status = get_sequence_step_timeout(Dev,
 8008ed6:	f107 0310 	add.w	r3, r7, #16
 8008eda:	461a      	mov	r2, r3
 8008edc:	2102      	movs	r1, #2
 8008ede:	6878      	ldr	r0, [r7, #4]
 8008ee0:	f7ff fa46 	bl	8008370 <get_sequence_step_timeout>
 8008ee4:	4603      	mov	r3, r0
 8008ee6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 8008eea:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d122      	bne.n	8008f38 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
			if (SchedulerSequenceSteps.TccOn) {
 8008ef2:	7e3b      	ldrb	r3, [r7, #24]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d007      	beq.n	8008f08 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb2>
				*pMeasurementTimingBudgetMicroSeconds +=
 8008ef8:	683b      	ldr	r3, [r7, #0]
 8008efa:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 8008efc:	6939      	ldr	r1, [r7, #16]
 8008efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f00:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 8008f02:	441a      	add	r2, r3
 8008f04:	683b      	ldr	r3, [r7, #0]
 8008f06:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 8008f08:	7ebb      	ldrb	r3, [r7, #26]
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d009      	beq.n	8008f22 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xcc>
				*pMeasurementTimingBudgetMicroSeconds +=
 8008f0e:	683b      	ldr	r3, [r7, #0]
 8008f10:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 8008f12:	6939      	ldr	r1, [r7, #16]
 8008f14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f16:	440b      	add	r3, r1
 8008f18:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 8008f1a:	441a      	add	r2, r3
 8008f1c:	683b      	ldr	r3, [r7, #0]
 8008f1e:	601a      	str	r2, [r3, #0]
 8008f20:	e00a      	b.n	8008f38 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 8008f22:	7e7b      	ldrb	r3, [r7, #25]
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d007      	beq.n	8008f38 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
				*pMeasurementTimingBudgetMicroSeconds +=
 8008f28:	683b      	ldr	r3, [r7, #0]
 8008f2a:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 8008f2c:	6939      	ldr	r1, [r7, #16]
 8008f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f30:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 8008f32:	441a      	add	r2, r3
 8008f34:	683b      	ldr	r3, [r7, #0]
 8008f36:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008f38:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d114      	bne.n	8008f6a <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
		if (SchedulerSequenceSteps.PreRangeOn) {
 8008f40:	7efb      	ldrb	r3, [r7, #27]
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d011      	beq.n	8008f6a <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
			Status = get_sequence_step_timeout(Dev,
 8008f46:	f107 030c 	add.w	r3, r7, #12
 8008f4a:	461a      	mov	r2, r3
 8008f4c:	2103      	movs	r1, #3
 8008f4e:	6878      	ldr	r0, [r7, #4]
 8008f50:	f7ff fa0e 	bl	8008370 <get_sequence_step_timeout>
 8008f54:	4603      	mov	r3, r0
 8008f56:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 8008f5a:	683b      	ldr	r3, [r7, #0]
 8008f5c:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 8008f5e:	68f9      	ldr	r1, [r7, #12]
 8008f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f62:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 8008f64:	441a      	add	r2, r3
 8008f66:	683b      	ldr	r3, [r7, #0]
 8008f68:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008f6a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d114      	bne.n	8008f9c <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 8008f72:	7f3b      	ldrb	r3, [r7, #28]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d011      	beq.n	8008f9c <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
			Status = get_sequence_step_timeout(Dev,
 8008f78:	f107 0314 	add.w	r3, r7, #20
 8008f7c:	461a      	mov	r2, r3
 8008f7e:	2104      	movs	r1, #4
 8008f80:	6878      	ldr	r0, [r7, #4]
 8008f82:	f7ff f9f5 	bl	8008370 <get_sequence_step_timeout>
 8008f86:	4603      	mov	r3, r0
 8008f88:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 8008f8c:	683b      	ldr	r3, [r7, #0]
 8008f8e:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 8008f90:	6979      	ldr	r1, [r7, #20]
 8008f92:	6a3b      	ldr	r3, [r7, #32]
 8008f94:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 8008f96:	441a      	add	r2, r3
 8008f98:	683b      	ldr	r3, [r7, #0]
 8008f9a:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008f9c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d103      	bne.n	8008fac <VL53L0X_get_measurement_timing_budget_micro_seconds+0x156>
		VL53L0X_SETPARAMETERFIELD(Dev,
 8008fa4:	683b      	ldr	r3, [r7, #0]
 8008fa6:	681a      	ldr	r2, [r3, #0]
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008fac:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	3740      	adds	r7, #64	; 0x40
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	bd80      	pop	{r7, pc}

08008fb8 <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 8008fb8:	b580      	push	{r7, lr}
 8008fba:	b088      	sub	sp, #32
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	6078      	str	r0, [r7, #4]
 8008fc0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008fc2:	2300      	movs	r3, #0
 8008fc4:	77fb      	strb	r3, [r7, #31]
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 8008fc6:	2300      	movs	r3, #0
 8008fc8:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 8008fca:	e0c6      	b.n	800915a <VL53L0X_load_tuning_settings+0x1a2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 8008fcc:	697b      	ldr	r3, [r7, #20]
 8008fce:	683a      	ldr	r2, [r7, #0]
 8008fd0:	4413      	add	r3, r2
 8008fd2:	781b      	ldrb	r3, [r3, #0]
 8008fd4:	74fb      	strb	r3, [r7, #19]
		Index++;
 8008fd6:	697b      	ldr	r3, [r7, #20]
 8008fd8:	3301      	adds	r3, #1
 8008fda:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 8008fdc:	7cfb      	ldrb	r3, [r7, #19]
 8008fde:	2bff      	cmp	r3, #255	; 0xff
 8008fe0:	f040 808d 	bne.w	80090fe <VL53L0X_load_tuning_settings+0x146>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 8008fe4:	697b      	ldr	r3, [r7, #20]
 8008fe6:	683a      	ldr	r2, [r7, #0]
 8008fe8:	4413      	add	r3, r2
 8008fea:	781b      	ldrb	r3, [r3, #0]
 8008fec:	747b      	strb	r3, [r7, #17]
			Index++;
 8008fee:	697b      	ldr	r3, [r7, #20]
 8008ff0:	3301      	adds	r3, #1
 8008ff2:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 8008ff4:	7c7b      	ldrb	r3, [r7, #17]
 8008ff6:	2b03      	cmp	r3, #3
 8008ff8:	d87e      	bhi.n	80090f8 <VL53L0X_load_tuning_settings+0x140>
 8008ffa:	a201      	add	r2, pc, #4	; (adr r2, 8009000 <VL53L0X_load_tuning_settings+0x48>)
 8008ffc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009000:	08009011 	.word	0x08009011
 8009004:	0800904b 	.word	0x0800904b
 8009008:	08009085 	.word	0x08009085
 800900c:	080090bf 	.word	0x080090bf
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8009010:	697b      	ldr	r3, [r7, #20]
 8009012:	683a      	ldr	r2, [r7, #0]
 8009014:	4413      	add	r3, r2
 8009016:	781b      	ldrb	r3, [r3, #0]
 8009018:	743b      	strb	r3, [r7, #16]
				Index++;
 800901a:	697b      	ldr	r3, [r7, #20]
 800901c:	3301      	adds	r3, #1
 800901e:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8009020:	697b      	ldr	r3, [r7, #20]
 8009022:	683a      	ldr	r2, [r7, #0]
 8009024:	4413      	add	r3, r2
 8009026:	781b      	ldrb	r3, [r3, #0]
 8009028:	73fb      	strb	r3, [r7, #15]
				Index++;
 800902a:	697b      	ldr	r3, [r7, #20]
 800902c:	3301      	adds	r3, #1
 800902e:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8009030:	7c3b      	ldrb	r3, [r7, #16]
 8009032:	b29b      	uxth	r3, r3
 8009034:	021b      	lsls	r3, r3, #8
 8009036:	b29a      	uxth	r2, r3
 8009038:	7bfb      	ldrb	r3, [r7, #15]
 800903a:	b29b      	uxth	r3, r3
 800903c:	4413      	add	r3, r2
 800903e:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	89ba      	ldrh	r2, [r7, #12]
 8009044:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
				break;
 8009048:	e087      	b.n	800915a <VL53L0X_load_tuning_settings+0x1a2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800904a:	697b      	ldr	r3, [r7, #20]
 800904c:	683a      	ldr	r2, [r7, #0]
 800904e:	4413      	add	r3, r2
 8009050:	781b      	ldrb	r3, [r3, #0]
 8009052:	743b      	strb	r3, [r7, #16]
				Index++;
 8009054:	697b      	ldr	r3, [r7, #20]
 8009056:	3301      	adds	r3, #1
 8009058:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800905a:	697b      	ldr	r3, [r7, #20]
 800905c:	683a      	ldr	r2, [r7, #0]
 800905e:	4413      	add	r3, r2
 8009060:	781b      	ldrb	r3, [r3, #0]
 8009062:	73fb      	strb	r3, [r7, #15]
				Index++;
 8009064:	697b      	ldr	r3, [r7, #20]
 8009066:	3301      	adds	r3, #1
 8009068:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800906a:	7c3b      	ldrb	r3, [r7, #16]
 800906c:	b29b      	uxth	r3, r3
 800906e:	021b      	lsls	r3, r3, #8
 8009070:	b29a      	uxth	r2, r3
 8009072:	7bfb      	ldrb	r3, [r7, #15]
 8009074:	b29b      	uxth	r3, r3
 8009076:	4413      	add	r3, r2
 8009078:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	89ba      	ldrh	r2, [r7, #12]
 800907e:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
					Temp16);
				break;
 8009082:	e06a      	b.n	800915a <VL53L0X_load_tuning_settings+0x1a2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8009084:	697b      	ldr	r3, [r7, #20]
 8009086:	683a      	ldr	r2, [r7, #0]
 8009088:	4413      	add	r3, r2
 800908a:	781b      	ldrb	r3, [r3, #0]
 800908c:	743b      	strb	r3, [r7, #16]
				Index++;
 800908e:	697b      	ldr	r3, [r7, #20]
 8009090:	3301      	adds	r3, #1
 8009092:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8009094:	697b      	ldr	r3, [r7, #20]
 8009096:	683a      	ldr	r2, [r7, #0]
 8009098:	4413      	add	r3, r2
 800909a:	781b      	ldrb	r3, [r3, #0]
 800909c:	73fb      	strb	r3, [r7, #15]
				Index++;
 800909e:	697b      	ldr	r3, [r7, #20]
 80090a0:	3301      	adds	r3, #1
 80090a2:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 80090a4:	7c3b      	ldrb	r3, [r7, #16]
 80090a6:	b29b      	uxth	r3, r3
 80090a8:	021b      	lsls	r3, r3, #8
 80090aa:	b29a      	uxth	r2, r3
 80090ac:	7bfb      	ldrb	r3, [r7, #15]
 80090ae:	b29b      	uxth	r3, r3
 80090b0:	4413      	add	r3, r2
 80090b2:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	89ba      	ldrh	r2, [r7, #12]
 80090b8:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
				break;
 80090bc:	e04d      	b.n	800915a <VL53L0X_load_tuning_settings+0x1a2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 80090be:	697b      	ldr	r3, [r7, #20]
 80090c0:	683a      	ldr	r2, [r7, #0]
 80090c2:	4413      	add	r3, r2
 80090c4:	781b      	ldrb	r3, [r3, #0]
 80090c6:	743b      	strb	r3, [r7, #16]
				Index++;
 80090c8:	697b      	ldr	r3, [r7, #20]
 80090ca:	3301      	adds	r3, #1
 80090cc:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 80090ce:	697b      	ldr	r3, [r7, #20]
 80090d0:	683a      	ldr	r2, [r7, #0]
 80090d2:	4413      	add	r3, r2
 80090d4:	781b      	ldrb	r3, [r3, #0]
 80090d6:	73fb      	strb	r3, [r7, #15]
				Index++;
 80090d8:	697b      	ldr	r3, [r7, #20]
 80090da:	3301      	adds	r3, #1
 80090dc:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 80090de:	7c3b      	ldrb	r3, [r7, #16]
 80090e0:	b29b      	uxth	r3, r3
 80090e2:	021b      	lsls	r3, r3, #8
 80090e4:	b29a      	uxth	r2, r3
 80090e6:	7bfb      	ldrb	r3, [r7, #15]
 80090e8:	b29b      	uxth	r3, r3
 80090ea:	4413      	add	r3, r2
 80090ec:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	89ba      	ldrh	r2, [r7, #12]
 80090f2:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c
				break;
 80090f6:	e030      	b.n	800915a <VL53L0X_load_tuning_settings+0x1a2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 80090f8:	23fc      	movs	r3, #252	; 0xfc
 80090fa:	77fb      	strb	r3, [r7, #31]
 80090fc:	e02d      	b.n	800915a <VL53L0X_load_tuning_settings+0x1a2>
			}

		} else if (NumberOfWrites <= 4) {
 80090fe:	7cfb      	ldrb	r3, [r7, #19]
 8009100:	2b04      	cmp	r3, #4
 8009102:	d828      	bhi.n	8009156 <VL53L0X_load_tuning_settings+0x19e>
			Address = *(pTuningSettingBuffer + Index);
 8009104:	697b      	ldr	r3, [r7, #20]
 8009106:	683a      	ldr	r2, [r7, #0]
 8009108:	4413      	add	r3, r2
 800910a:	781b      	ldrb	r3, [r3, #0]
 800910c:	74bb      	strb	r3, [r7, #18]
			Index++;
 800910e:	697b      	ldr	r3, [r7, #20]
 8009110:	3301      	adds	r3, #1
 8009112:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 8009114:	2300      	movs	r3, #0
 8009116:	61bb      	str	r3, [r7, #24]
 8009118:	e00f      	b.n	800913a <VL53L0X_load_tuning_settings+0x182>
				localBuffer[i] = *(pTuningSettingBuffer +
 800911a:	697b      	ldr	r3, [r7, #20]
 800911c:	683a      	ldr	r2, [r7, #0]
 800911e:	4413      	add	r3, r2
 8009120:	7819      	ldrb	r1, [r3, #0]
 8009122:	f107 0208 	add.w	r2, r7, #8
 8009126:	69bb      	ldr	r3, [r7, #24]
 8009128:	4413      	add	r3, r2
 800912a:	460a      	mov	r2, r1
 800912c:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 800912e:	697b      	ldr	r3, [r7, #20]
 8009130:	3301      	adds	r3, #1
 8009132:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 8009134:	69bb      	ldr	r3, [r7, #24]
 8009136:	3301      	adds	r3, #1
 8009138:	61bb      	str	r3, [r7, #24]
 800913a:	7cfb      	ldrb	r3, [r7, #19]
 800913c:	69ba      	ldr	r2, [r7, #24]
 800913e:	429a      	cmp	r2, r3
 8009140:	dbeb      	blt.n	800911a <VL53L0X_load_tuning_settings+0x162>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 8009142:	7cfb      	ldrb	r3, [r7, #19]
 8009144:	f107 0208 	add.w	r2, r7, #8
 8009148:	7cb9      	ldrb	r1, [r7, #18]
 800914a:	6878      	ldr	r0, [r7, #4]
 800914c:	f000 fdee 	bl	8009d2c <VL53L0X_WriteMulti>
 8009150:	4603      	mov	r3, r0
 8009152:	77fb      	strb	r3, [r7, #31]
 8009154:	e001      	b.n	800915a <VL53L0X_load_tuning_settings+0x1a2>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009156:	23fc      	movs	r3, #252	; 0xfc
 8009158:	77fb      	strb	r3, [r7, #31]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800915a:	697b      	ldr	r3, [r7, #20]
 800915c:	683a      	ldr	r2, [r7, #0]
 800915e:	4413      	add	r3, r2
 8009160:	781b      	ldrb	r3, [r3, #0]
 8009162:	2b00      	cmp	r3, #0
 8009164:	d004      	beq.n	8009170 <VL53L0X_load_tuning_settings+0x1b8>
 8009166:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800916a:	2b00      	cmp	r3, #0
 800916c:	f43f af2e 	beq.w	8008fcc <VL53L0X_load_tuning_settings+0x14>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009170:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8009174:	4618      	mov	r0, r3
 8009176:	3720      	adds	r7, #32
 8009178:	46bd      	mov	sp, r7
 800917a:	bd80      	pop	{r7, pc}

0800917c <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 800917c:	b580      	push	{r7, lr}
 800917e:	b088      	sub	sp, #32
 8009180:	af00      	add	r7, sp, #0
 8009182:	60f8      	str	r0, [r7, #12]
 8009184:	60b9      	str	r1, [r7, #8]
 8009186:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009188:	2300      	movs	r3, #0
 800918a:	77fb      	strb	r3, [r7, #31]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	2200      	movs	r2, #0
 8009190:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 8009192:	f107 0313 	add.w	r3, r7, #19
 8009196:	4619      	mov	r1, r3
 8009198:	68f8      	ldr	r0, [r7, #12]
 800919a:	f7fc fd21 	bl	8005be0 <VL53L0X_GetXTalkCompensationEnable>
 800919e:	4603      	mov	r3, r0
 80091a0:	77fb      	strb	r3, [r7, #31]
	if (Status == VL53L0X_ERROR_NONE) {
 80091a2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d111      	bne.n	80091ce <VL53L0X_get_total_xtalk_rate+0x52>

		if (xtalkCompEnable) {
 80091aa:	7cfb      	ldrb	r3, [r7, #19]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d00e      	beq.n	80091ce <VL53L0X_get_total_xtalk_rate+0x52>

			VL53L0X_GETPARAMETERFIELD(
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	6a1b      	ldr	r3, [r3, #32]
 80091b4:	61bb      	str	r3, [r7, #24]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 80091b6:	68bb      	ldr	r3, [r7, #8]
 80091b8:	8a9b      	ldrh	r3, [r3, #20]
 80091ba:	461a      	mov	r2, r3
			totalXtalkMegaCps =
 80091bc:	69bb      	ldr	r3, [r7, #24]
 80091be:	fb02 f303 	mul.w	r3, r2, r3
 80091c2:	617b      	str	r3, [r7, #20]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 80091c4:	697b      	ldr	r3, [r7, #20]
 80091c6:	3380      	adds	r3, #128	; 0x80
 80091c8:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 80091ce:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80091d2:	4618      	mov	r0, r3
 80091d4:	3720      	adds	r7, #32
 80091d6:	46bd      	mov	sp, r7
 80091d8:	bd80      	pop	{r7, pc}

080091da <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 80091da:	b580      	push	{r7, lr}
 80091dc:	b086      	sub	sp, #24
 80091de:	af00      	add	r7, sp, #0
 80091e0:	60f8      	str	r0, [r7, #12]
 80091e2:	60b9      	str	r1, [r7, #8]
 80091e4:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80091e6:	2300      	movs	r3, #0
 80091e8:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 80091ea:	68bb      	ldr	r3, [r7, #8]
 80091ec:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 80091f2:	f107 0310 	add.w	r3, r7, #16
 80091f6:	461a      	mov	r2, r3
 80091f8:	68b9      	ldr	r1, [r7, #8]
 80091fa:	68f8      	ldr	r0, [r7, #12]
 80091fc:	f7ff ffbe 	bl	800917c <VL53L0X_get_total_xtalk_rate>
 8009200:	4603      	mov	r3, r0
 8009202:	75fb      	strb	r3, [r7, #23]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 8009204:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009208:	2b00      	cmp	r3, #0
 800920a:	d105      	bne.n	8009218 <VL53L0X_get_total_signal_rate+0x3e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681a      	ldr	r2, [r3, #0]
 8009210:	693b      	ldr	r3, [r7, #16]
 8009212:	441a      	add	r2, r3
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	601a      	str	r2, [r3, #0]

	return Status;
 8009218:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800921c:	4618      	mov	r0, r3
 800921e:	3718      	adds	r7, #24
 8009220:	46bd      	mov	sp, r7
 8009222:	bd80      	pop	{r7, pc}

08009224 <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
 8009224:	b580      	push	{r7, lr}
 8009226:	b09a      	sub	sp, #104	; 0x68
 8009228:	af00      	add	r7, sp, #0
 800922a:	60f8      	str	r0, [r7, #12]
 800922c:	60b9      	str	r1, [r7, #8]
 800922e:	607a      	str	r2, [r7, #4]
 8009230:	603b      	str	r3, [r7, #0]
	const uint32_t cSigmaLimit		= 18;
 8009232:	2312      	movs	r3, #18
 8009234:	657b      	str	r3, [r7, #84]	; 0x54
	const FixPoint1616_t cSignalLimit	= 0x4000; /* 0.25 */
 8009236:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800923a:	653b      	str	r3, [r7, #80]	; 0x50
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 800923c:	2342      	movs	r3, #66	; 0x42
 800923e:	64fb      	str	r3, [r7, #76]	; 0x4c
	const uint32_t cAmbEffWidthSigmaEst_ns = 6;
 8009240:	2306      	movs	r3, #6
 8009242:	64bb      	str	r3, [r7, #72]	; 0x48
	const uint32_t cAmbEffWidthDMax_ns	   = 7;
 8009244:	2307      	movs	r3, #7
 8009246:	647b      	str	r3, [r7, #68]	; 0x44
	FixPoint1616_t dmaxAmbient;
	FixPoint1616_t dmaxDarkTmp;
	FixPoint1616_t sigmaEstP2Tmp;
	uint32_t signalRateTemp_mcps;

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009248:	2300      	movs	r3, #0
 800924a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	LOG_FUNCTION_START("");

	dmaxCalRange_mm =
		PALDevDataGet(Dev, DmaxCalRangeMilliMeter);
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
	dmaxCalRange_mm =
 8009254:	63fb      	str	r3, [r7, #60]	; 0x3c

	dmaxCalSignalRateRtn_mcps =
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800925c:	63bb      	str	r3, [r7, #56]	; 0x38
		PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 800925e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009260:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009262:	fb02 f303 	mul.w	r3, r2, r3
 8009266:	637b      	str	r3, [r7, #52]	; 0x34

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 8009268:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800926a:	3380      	adds	r3, #128	; 0x80
 800926c:	0a1b      	lsrs	r3, r3, #8
 800926e:	637b      	str	r3, [r7, #52]	; 0x34
	SignalAt0mm *= dmaxCalRange_mm;
 8009270:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009272:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009274:	fb02 f303 	mul.w	r3, r2, r3
 8009278:	637b      	str	r3, [r7, #52]	; 0x34

	minSignalNeeded_p1 = 0;
 800927a:	2300      	movs	r3, #0
 800927c:	667b      	str	r3, [r7, #100]	; 0x64
	if (totalCorrSignalRate_mcps > 0) {
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	2b00      	cmp	r3, #0
 8009282:	d01a      	beq.n	80092ba <VL53L0X_calc_dmax+0x96>

		/* Shift by 10 bits to increase resolution prior to the
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;
 8009284:	68bb      	ldr	r3, [r7, #8]
 8009286:	029b      	lsls	r3, r3, #10
 8009288:	633b      	str	r3, [r7, #48]	; 0x30

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
			(totalCorrSignalRate_mcps/2);
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	085b      	lsrs	r3, r3, #1
		minSignalNeeded_p1 = signalRateTemp_mcps +
 800928e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009290:	4413      	add	r3, r2
 8009292:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 8009294:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	fbb2 f3f3 	udiv	r3, r2, r3
 800929c:	667b      	str	r3, [r7, #100]	; 0x64

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
 800929e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80092a0:	4613      	mov	r3, r2
 80092a2:	005b      	lsls	r3, r3, #1
 80092a4:	4413      	add	r3, r2
 80092a6:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 80092a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80092aa:	fb03 f303 	mul.w	r3, r3, r3
 80092ae:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 80092b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80092b2:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80092b6:	0c1b      	lsrs	r3, r3, #16
 80092b8:	667b      	str	r3, [r7, #100]	; 0x64
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 80092ba:	683b      	ldr	r3, [r7, #0]
 80092bc:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80092be:	fb02 f303 	mul.w	r3, r2, r3
 80092c2:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* FixPoint1616 >> 16 =	 uint32 */
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 80092c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092c6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80092ca:	0c1b      	lsrs	r3, r3, #16
 80092cc:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* uint32 * uint32	=  uint32 */
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 80092ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092d0:	fb03 f303 	mul.w	r3, r3, r3
 80092d4:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 80092d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80092d8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80092dc:	0c1b      	lsrs	r3, r3, #16
 80092de:	62bb      	str	r3, [r7, #40]	; 0x28
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 80092e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80092e2:	085a      	lsrs	r2, r3, #1
 80092e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092e6:	441a      	add	r2, r3
 80092e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80092ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80092ee:	62bb      	str	r3, [r7, #40]	; 0x28
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 80092f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80092f4:	fb02 f303 	mul.w	r3, r2, r3
 80092f8:	62bb      	str	r3, [r7, #40]	; 0x28

	if (sigmaEstP2Tmp > 0xffff) {
 80092fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009300:	d302      	bcc.n	8009308 <VL53L0X_calc_dmax+0xe4>
		minSignalNeeded_p3 = 0xfff00000;
 8009302:	4b54      	ldr	r3, [pc, #336]	; (8009454 <VL53L0X_calc_dmax+0x230>)
 8009304:	663b      	str	r3, [r7, #96]	; 0x60
 8009306:	e015      	b.n	8009334 <VL53L0X_calc_dmax+0x110>

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 8009308:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800930a:	085a      	lsrs	r2, r3, #1
 800930c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800930e:	441a      	add	r2, r3
 8009310:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009312:	fbb2 f3f3 	udiv	r3, r2, r3
 8009316:	677b      	str	r3, [r7, #116]	; 0x74
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 8009318:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800931a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800931c:	fb02 f303 	mul.w	r3, r2, r3
 8009320:	677b      	str	r3, [r7, #116]	; 0x74

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 8009322:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009324:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8009328:	0c1b      	lsrs	r3, r3, #16
 800932a:	663b      	str	r3, [r7, #96]	; 0x60

		minSignalNeeded_p3 *= minSignalNeeded_p3;
 800932c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800932e:	fb03 f303 	mul.w	r3, r3, r3
 8009332:	663b      	str	r3, [r7, #96]	; 0x60

	}

	/* FixPoint1814 / uint32 = FixPoint1814 */
	sigmaLimitTmp = ((cSigmaLimit << 14) + 500) / 1000;
 8009334:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009336:	039b      	lsls	r3, r3, #14
 8009338:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800933c:	4a46      	ldr	r2, [pc, #280]	; (8009458 <VL53L0X_calc_dmax+0x234>)
 800933e:	fba2 2303 	umull	r2, r3, r2, r3
 8009342:	099b      	lsrs	r3, r3, #6
 8009344:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1814 * FixPoint1814 = FixPoint3628 := FixPoint0428 */
	sigmaLimitTmp *= sigmaLimitTmp;
 8009346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009348:	fb03 f303 	mul.w	r3, r3, r3
 800934c:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
	sigmaEstSqTmp = cSigmaEstRef * cSigmaEstRef;
 800934e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009350:	fb03 f303 	mul.w	r3, r3, r3
 8009354:	623b      	str	r3, [r7, #32]

	/* FixPoint3232 >> 4 = FixPoint0428 */
	sigmaEstSqTmp = (sigmaEstSqTmp + 0x08) >> 4;
 8009356:	6a3b      	ldr	r3, [r7, #32]
 8009358:	3308      	adds	r3, #8
 800935a:	091b      	lsrs	r3, r3, #4
 800935c:	623b      	str	r3, [r7, #32]

	/* FixPoint0428 - FixPoint0428	= FixPoint0428 */
	sigmaLimitTmp -=  sigmaEstSqTmp;
 800935e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009360:	6a3b      	ldr	r3, [r7, #32]
 8009362:	1ad3      	subs	r3, r2, r3
 8009364:	627b      	str	r3, [r7, #36]	; 0x24

	/* uint32_t * FixPoint0428 = FixPoint0428 */
	minSignalNeeded_p4 = 4 * 12 * sigmaLimitTmp;
 8009366:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009368:	4613      	mov	r3, r2
 800936a:	005b      	lsls	r3, r3, #1
 800936c:	4413      	add	r3, r2
 800936e:	011b      	lsls	r3, r3, #4
 8009370:	61fb      	str	r3, [r7, #28]

	/* FixPoint0428 >> 14 = FixPoint1814 */
	minSignalNeeded_p4 = (minSignalNeeded_p4 + 0x2000) >> 14;
 8009372:	69fb      	ldr	r3, [r7, #28]
 8009374:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8009378:	0b9b      	lsrs	r3, r3, #14
 800937a:	61fb      	str	r3, [r7, #28]

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);
 800937c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800937e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009380:	4413      	add	r3, r2
 8009382:	61bb      	str	r3, [r7, #24]

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
 8009384:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009386:	085b      	lsrs	r3, r3, #1
 8009388:	69ba      	ldr	r2, [r7, #24]
 800938a:	4413      	add	r3, r2
 800938c:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= peakVcselDuration_us;
 800938e:	69ba      	ldr	r2, [r7, #24]
 8009390:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009392:	fbb2 f3f3 	udiv	r3, r2, r3
 8009396:	61bb      	str	r3, [r7, #24]

	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;
 8009398:	69bb      	ldr	r3, [r7, #24]
 800939a:	039b      	lsls	r3, r3, #14
 800939c:	61bb      	str	r3, [r7, #24]

	/* FixPoint1814 / FixPoint1814 = uint32 */
	minSignalNeeded += (minSignalNeeded_p4/2);
 800939e:	69fb      	ldr	r3, [r7, #28]
 80093a0:	085b      	lsrs	r3, r3, #1
 80093a2:	69ba      	ldr	r2, [r7, #24]
 80093a4:	4413      	add	r3, r2
 80093a6:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= minSignalNeeded_p4;
 80093a8:	69ba      	ldr	r2, [r7, #24]
 80093aa:	69fb      	ldr	r3, [r7, #28]
 80093ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80093b0:	61bb      	str	r3, [r7, #24]

	/* FixPoint3200 * FixPoint2804 := FixPoint2804*/
	minSignalNeeded *= minSignalNeeded_p1;
 80093b2:	69bb      	ldr	r3, [r7, #24]
 80093b4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80093b6:	fb02 f303 	mul.w	r3, r2, r3
 80093ba:	61bb      	str	r3, [r7, #24]
	 * and 10E-22 on the denominator.
	 * We do this because 32bit fix point calculation can't
	 * handle the larger and smaller elements of this equation,
	 * i.e. speed of light and pulse widths.
	 */
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 80093bc:	69bb      	ldr	r3, [r7, #24]
 80093be:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80093c2:	4a25      	ldr	r2, [pc, #148]	; (8009458 <VL53L0X_calc_dmax+0x234>)
 80093c4:	fba2 2303 	umull	r2, r3, r2, r3
 80093c8:	099b      	lsrs	r3, r3, #6
 80093ca:	61bb      	str	r3, [r7, #24]
	minSignalNeeded <<= 4;
 80093cc:	69bb      	ldr	r3, [r7, #24]
 80093ce:	011b      	lsls	r3, r3, #4
 80093d0:	61bb      	str	r3, [r7, #24]

	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 80093d2:	69bb      	ldr	r3, [r7, #24]
 80093d4:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80093d8:	4a1f      	ldr	r2, [pc, #124]	; (8009458 <VL53L0X_calc_dmax+0x234>)
 80093da:	fba2 2303 	umull	r2, r3, r2, r3
 80093de:	099b      	lsrs	r3, r3, #6
 80093e0:	61bb      	str	r3, [r7, #24]

	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;
 80093e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80093e4:	3380      	adds	r3, #128	; 0x80
 80093e6:	0a1b      	lsrs	r3, r3, #8
 80093e8:	617b      	str	r3, [r7, #20]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
 80093ea:	697b      	ldr	r3, [r7, #20]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d008      	beq.n	8009402 <VL53L0X_calc_dmax+0x1de>
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 80093f0:	697b      	ldr	r3, [r7, #20]
 80093f2:	085a      	lsrs	r2, r3, #1
 80093f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093f6:	441a      	add	r2, r3
 80093f8:	697b      	ldr	r3, [r7, #20]
 80093fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80093fe:	65bb      	str	r3, [r7, #88]	; 0x58
 8009400:	e001      	b.n	8009406 <VL53L0X_calc_dmax+0x1e2>
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;
 8009402:	2300      	movs	r3, #0
 8009404:	65bb      	str	r3, [r7, #88]	; 0x58

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 8009406:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8009408:	f7fe f9ba 	bl	8007780 <VL53L0X_isqrt>
 800940c:	6138      	str	r0, [r7, #16]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 800940e:	69bb      	ldr	r3, [r7, #24]
 8009410:	2b00      	cmp	r3, #0
 8009412:	d008      	beq.n	8009426 <VL53L0X_calc_dmax+0x202>
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 8009414:	69bb      	ldr	r3, [r7, #24]
 8009416:	085a      	lsrs	r2, r3, #1
 8009418:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800941a:	441a      	add	r2, r3
 800941c:	69bb      	ldr	r3, [r7, #24]
 800941e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009422:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009424:	e001      	b.n	800942a <VL53L0X_calc_dmax+0x206>
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;
 8009426:	2300      	movs	r3, #0
 8009428:	65fb      	str	r3, [r7, #92]	; 0x5c

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 800942a:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800942c:	f7fe f9a8 	bl	8007780 <VL53L0X_isqrt>
 8009430:	65f8      	str	r0, [r7, #92]	; 0x5c

	*pdmax_mm = dmaxDark;
 8009432:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009434:	693a      	ldr	r2, [r7, #16]
 8009436:	601a      	str	r2, [r3, #0]
	if (dmaxDark > dmaxAmbient)
 8009438:	693a      	ldr	r2, [r7, #16]
 800943a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800943c:	429a      	cmp	r2, r3
 800943e:	d902      	bls.n	8009446 <VL53L0X_calc_dmax+0x222>
		*pdmax_mm = dmaxAmbient;
 8009440:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009442:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009444:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);

	return Status;
 8009446:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
}
 800944a:	4618      	mov	r0, r3
 800944c:	3768      	adds	r7, #104	; 0x68
 800944e:	46bd      	mov	sp, r7
 8009450:	bd80      	pop	{r7, pc}
 8009452:	bf00      	nop
 8009454:	fff00000 	.word	0xfff00000
 8009458:	10624dd3 	.word	0x10624dd3

0800945c <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
 800945c:	b580      	push	{r7, lr}
 800945e:	b0b4      	sub	sp, #208	; 0xd0
 8009460:	af04      	add	r7, sp, #16
 8009462:	60f8      	str	r0, [r7, #12]
 8009464:	60b9      	str	r1, [r7, #8]
 8009466:	607a      	str	r2, [r7, #4]
 8009468:	603b      	str	r3, [r7, #0]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 800946a:	f44f 7348 	mov.w	r3, #800	; 0x320
 800946e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 8009472:	f44f 7316 	mov.w	r3, #600	; 0x258
 8009476:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	const FixPoint1616_t cDfltFinalRangeIntegrationTimeMilliSecs	= 0x00190000; /* 25ms */
 800947a:	f44f 13c8 	mov.w	r3, #1638400	; 0x190000
 800947e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 8009482:	f241 235c 	movw	r3, #4700	; 0x125c
 8009486:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 800948a:	4b9e      	ldr	r3, [pc, #632]	; (8009704 <VL53L0X_calc_sigma_estimate+0x2a8>)
 800948c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 8009490:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8009494:	67fb      	str	r3, [r7, #124]	; 0x7c
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 8009496:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 800949a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800949e:	fbb2 f3f3 	udiv	r3, r2, r3
 80094a2:	67bb      	str	r3, [r7, #120]	; 0x78
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 80094a4:	4b98      	ldr	r3, [pc, #608]	; (8009708 <VL53L0X_calc_sigma_estimate+0x2ac>)
 80094a6:	677b      	str	r3, [r7, #116]	; 0x74
	const uint32_t c16BitRoundingParam		= 0x00008000;
 80094a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80094ac:	673b      	str	r3, [r7, #112]	; 0x70
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 80094ae:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 80094b2:	66fb      	str	r3, [r7, #108]	; 0x6c
	const uint32_t cPllPeriod_ps			= 1655;
 80094b4:	f240 6377 	movw	r3, #1655	; 0x677
 80094b8:	66bb      	str	r3, [r7, #104]	; 0x68
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80094ba:	2300      	movs	r3, #0
 80094bc:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	 * Estimates the range sigma
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	6a1b      	ldr	r3, [r3, #32]
 80094c4:	617b      	str	r3, [r7, #20]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 80094c6:	68bb      	ldr	r3, [r7, #8]
 80094c8:	691b      	ldr	r3, [r3, #16]
 80094ca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80094ce:	fb02 f303 	mul.w	r3, r2, r3
	ambientRate_kcps =
 80094d2:	0c1b      	lsrs	r3, r3, #16
 80094d4:	667b      	str	r3, [r7, #100]	; 0x64

	correctedSignalRate_mcps =
 80094d6:	68bb      	ldr	r3, [r7, #8]
 80094d8:	68db      	ldr	r3, [r3, #12]
 80094da:	663b      	str	r3, [r7, #96]	; 0x60
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
 80094dc:	f107 0310 	add.w	r3, r7, #16
 80094e0:	461a      	mov	r2, r3
 80094e2:	68b9      	ldr	r1, [r7, #8]
 80094e4:	68f8      	ldr	r0, [r7, #12]
 80094e6:	f7ff fe78 	bl	80091da <VL53L0X_get_total_signal_rate>
 80094ea:	4603      	mov	r3, r0
 80094ec:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 80094f0:	f107 0314 	add.w	r3, r7, #20
 80094f4:	461a      	mov	r2, r3
 80094f6:	68b9      	ldr	r1, [r7, #8]
 80094f8:	68f8      	ldr	r0, [r7, #12]
 80094fa:	f7ff fe3f 	bl	800917c <VL53L0X_get_total_xtalk_rate>
 80094fe:	4603      	mov	r3, r0
 8009500:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 8009504:	693b      	ldr	r3, [r7, #16]
 8009506:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800950a:	fb02 f303 	mul.w	r3, r2, r3
 800950e:	65fb      	str	r3, [r7, #92]	; 0x5c
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 8009510:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009512:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8009516:	0c1b      	lsrs	r3, r3, #16
 8009518:	65fb      	str	r3, [r7, #92]	; 0x5c

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 800951a:	697b      	ldr	r3, [r7, #20]
 800951c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009520:	fb02 f303 	mul.w	r3, r2, r3
 8009524:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 8009528:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800952c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800952e:	429a      	cmp	r2, r3
 8009530:	d902      	bls.n	8009538 <VL53L0X_calc_sigma_estimate+0xdc>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 8009532:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009534:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (Status == VL53L0X_ERROR_NONE) {
 8009538:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800953c:	2b00      	cmp	r3, #0
 800953e:	d168      	bne.n	8009612 <VL53L0X_calc_sigma_estimate+0x1b6>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8009546:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 8009550:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 8009554:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8009558:	461a      	mov	r2, r3
 800955a:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800955e:	68f8      	ldr	r0, [r7, #12]
 8009560:	f7fe feb2 	bl	80082c8 <VL53L0X_calc_timeout_mclks>
 8009564:	6578      	str	r0, [r7, #84]	; 0x54
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800956c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 8009576:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800957a:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800957e:	461a      	mov	r2, r3
 8009580:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8009584:	68f8      	ldr	r0, [r7, #12]
 8009586:	f7fe fe9f 	bl	80082c8 <VL53L0X_calc_timeout_mclks>
 800958a:	64f8      	str	r0, [r7, #76]	; 0x4c
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 800958c:	2303      	movs	r3, #3
 800958e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		if (finalRangeVcselPCLKS == 8)
 8009592:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8009596:	2b08      	cmp	r3, #8
 8009598:	d102      	bne.n	80095a0 <VL53L0X_calc_sigma_estimate+0x144>
			vcselWidth = 2;
 800959a:	2302      	movs	r3, #2
 800959c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 80095a0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80095a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80095a4:	4413      	add	r3, r2
		peakVcselDuration_us = vcselWidth * 2048 *
 80095a6:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80095aa:	fb02 f303 	mul.w	r3, r2, r3
 80095ae:	02db      	lsls	r3, r3, #11
 80095b0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 80095b4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80095b8:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80095bc:	4a53      	ldr	r2, [pc, #332]	; (800970c <VL53L0X_calc_sigma_estimate+0x2b0>)
 80095be:	fba2 2303 	umull	r2, r3, r2, r3
 80095c2:	099b      	lsrs	r3, r3, #6
 80095c4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us *= cPllPeriod_ps;
 80095c8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80095cc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80095ce:	fb02 f303 	mul.w	r3, r2, r3
 80095d2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 80095d6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80095da:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80095de:	4a4b      	ldr	r2, [pc, #300]	; (800970c <VL53L0X_calc_sigma_estimate+0x2b0>)
 80095e0:	fba2 2303 	umull	r2, r3, r2, r3
 80095e4:	099b      	lsrs	r3, r3, #6
 80095e6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 80095ea:	693b      	ldr	r3, [r7, #16]
 80095ec:	3380      	adds	r3, #128	; 0x80
 80095ee:	0a1b      	lsrs	r3, r3, #8
 80095f0:	613b      	str	r3, [r7, #16]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 80095f2:	693a      	ldr	r2, [r7, #16]
 80095f4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80095f8:	fb02 f303 	mul.w	r3, r2, r3
 80095fc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 8009600:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009604:	3380      	adds	r3, #128	; 0x80
 8009606:	0a1b      	lsrs	r3, r3, #8
 8009608:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 800960c:	693b      	ldr	r3, [r7, #16]
 800960e:	021b      	lsls	r3, r3, #8
 8009610:	613b      	str	r3, [r7, #16]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 8009612:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 8009616:	2b00      	cmp	r3, #0
 8009618:	d002      	beq.n	8009620 <VL53L0X_calc_sigma_estimate+0x1c4>
		LOG_FUNCTION_END(Status);
		return Status;
 800961a:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800961e:	e15e      	b.n	80098de <VL53L0X_calc_sigma_estimate+0x482>
	}

	if (peakSignalRate_kcps == 0) {
 8009620:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009622:	2b00      	cmp	r3, #0
 8009624:	d10c      	bne.n	8009640 <VL53L0X_calc_sigma_estimate+0x1e4>
		*pSigmaEstimate = cSigmaEstMax;
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800962c:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009634:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		*pDmax_mm = 0;
 8009638:	683b      	ldr	r3, [r7, #0]
 800963a:	2200      	movs	r2, #0
 800963c:	601a      	str	r2, [r3, #0]
 800963e:	e14c      	b.n	80098da <VL53L0X_calc_sigma_estimate+0x47e>
	} else {
		if (vcselTotalEventsRtn < 1)
 8009640:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009644:	2b00      	cmp	r3, #0
 8009646:	d102      	bne.n	800964e <VL53L0X_calc_sigma_estimate+0x1f2>
			vcselTotalEventsRtn = 1;
 8009648:	2301      	movs	r3, #1
 800964a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 800964e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009652:	64bb      	str	r3, [r7, #72]	; 0x48

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 8009654:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009656:	041a      	lsls	r2, r3, #16
 8009658:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800965a:	fbb2 f3f3 	udiv	r3, r2, r3
 800965e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 8009662:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009666:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009668:	429a      	cmp	r2, r3
 800966a:	d902      	bls.n	8009672 <VL53L0X_calc_sigma_estimate+0x216>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 800966c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800966e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 8009672:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009676:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800967a:	fb02 f303 	mul.w	r3, r2, r3
 800967e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 8009682:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8009686:	4613      	mov	r3, r2
 8009688:	005b      	lsls	r3, r3, #1
 800968a:	4413      	add	r3, r2
 800968c:	009b      	lsls	r3, r3, #2
 800968e:	4618      	mov	r0, r3
 8009690:	f7fe f876 	bl	8007780 <VL53L0X_isqrt>
 8009694:	4603      	mov	r3, r0
 8009696:	005b      	lsls	r3, r3, #1
 8009698:	647b      	str	r3, [r7, #68]	; 0x44

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 800969a:	68bb      	ldr	r3, [r7, #8]
 800969c:	891b      	ldrh	r3, [r3, #8]
 800969e:	461a      	mov	r2, r3
 80096a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80096a2:	fb02 f303 	mul.w	r3, r2, r3
 80096a6:	643b      	str	r3, [r7, #64]	; 0x40
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 80096a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80096aa:	041a      	lsls	r2, r3, #16
			2 * xTalkCompRate_kcps) + 500)/1000;
 80096ac:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80096b0:	005b      	lsls	r3, r3, #1
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 80096b2:	1ad3      	subs	r3, r2, r3
			2 * xTalkCompRate_kcps) + 500)/1000;
 80096b4:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 80096b8:	4a14      	ldr	r2, [pc, #80]	; (800970c <VL53L0X_calc_sigma_estimate+0x2b0>)
 80096ba:	fba2 2303 	umull	r2, r3, r2, r3
 80096be:	099b      	lsrs	r3, r3, #6
 80096c0:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* vcselRate + xtalkCompRate */
		diff2_mcps = ((peakSignalRate_kcps << 16) + 500)/1000;
 80096c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80096c4:	041b      	lsls	r3, r3, #16
 80096c6:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80096ca:	4a10      	ldr	r2, [pc, #64]	; (800970c <VL53L0X_calc_sigma_estimate+0x2b0>)
 80096cc:	fba2 2303 	umull	r2, r3, r2, r3
 80096d0:	099b      	lsrs	r3, r3, #6
 80096d2:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Shift by 8 bits to increase resolution prior to the
		 * division */
		diff1_mcps <<= 8;
 80096d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80096d6:	021b      	lsls	r3, r3, #8
 80096d8:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 80096da:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80096dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096de:	fbb2 f3f3 	udiv	r3, r2, r3
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	bfb8      	it	lt
 80096e6:	425b      	neglt	r3, r3
 80096e8:	637b      	str	r3, [r7, #52]	; 0x34

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 80096ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096ec:	021b      	lsls	r3, r3, #8
 80096ee:	637b      	str	r3, [r7, #52]	; 0x34

		if(pRangingMeasurementData->RangeStatus != 0){
 80096f0:	68bb      	ldr	r3, [r7, #8]
 80096f2:	7e1b      	ldrb	r3, [r3, #24]
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d00b      	beq.n	8009710 <VL53L0X_calc_sigma_estimate+0x2b4>
			pwMult = 1 << 16;
 80096f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80096fc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009700:	e033      	b.n	800976a <VL53L0X_calc_sigma_estimate+0x30e>
 8009702:	bf00      	nop
 8009704:	028f87ae 	.word	0x028f87ae
 8009708:	0006999a 	.word	0x0006999a
 800970c:	10624dd3 	.word	0x10624dd3
		} else {
			/* FixPoint1616/uint32 = FixPoint1616 */
			pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 8009710:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009712:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009716:	fbb2 f3f3 	udiv	r3, r2, r3
 800971a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * FixPoint1616 * FixPoint1616 = FixPoint3232, however both
			 * values are small enough such that32 bits will not be
			 * exceeded.
			 */
			pwMult *= ((1 << 16) - xTalkCorrection);
 800971e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009720:	f5c3 3280 	rsb	r2, r3, #65536	; 0x10000
 8009724:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009728:	fb02 f303 	mul.w	r3, r2, r3
 800972c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3232 >> 16) = FixPoint1616 */
			pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 8009730:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8009734:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009736:	4413      	add	r3, r2
 8009738:	0c1b      	lsrs	r3, r3, #16
 800973a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
			pwMult += (1 << 16);
 800973e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009742:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8009746:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * At this point the value will be 1.xx, therefore if we square
			 * the value this will exceed 32 bits. To address this perform
			 * a single shift to the right before the multiplication.
			 */
			pwMult >>= 1;
 800974a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800974e:	085b      	lsrs	r3, r3, #1
 8009750:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
			pwMult = pwMult * pwMult;
 8009754:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009758:	fb03 f303 	mul.w	r3, r3, r3
 800975c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3430 >> 14) = Fix1616 */
			pwMult >>= 14;
 8009760:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009764:	0b9b      	lsrs	r3, r3, #14
 8009766:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		}

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 800976a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800976e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009770:	fb02 f303 	mul.w	r3, r2, r3
 8009774:	633b      	str	r3, [r7, #48]	; 0x30

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 8009776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009778:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800977c:	0c1b      	lsrs	r3, r3, #16
 800977e:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 8009780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009782:	fb03 f303 	mul.w	r3, r3, r3
 8009786:	633b      	str	r3, [r7, #48]	; 0x30

		sqr2 = sigmaEstimateP2;
 8009788:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800978c:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 800978e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009790:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8009794:	0c1b      	lsrs	r3, r3, #16
 8009796:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 8009798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800979a:	fb03 f303 	mul.w	r3, r3, r3
 800979e:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 80097a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80097a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097a4:	4413      	add	r3, r2
 80097a6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 80097a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80097aa:	f7fd ffe9 	bl	8007780 <VL53L0X_isqrt>
 80097ae:	6278      	str	r0, [r7, #36]	; 0x24

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 80097b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097b2:	041b      	lsls	r3, r3, #16
 80097b4:	627b      	str	r3, [r7, #36]	; 0x24
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 80097b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097b8:	3332      	adds	r3, #50	; 0x32
 80097ba:	4a4b      	ldr	r2, [pc, #300]	; (80098e8 <VL53L0X_calc_sigma_estimate+0x48c>)
 80097bc:	fba2 2303 	umull	r2, r3, r2, r3
 80097c0:	095a      	lsrs	r2, r3, #5
 80097c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80097c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80097c8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 80097cc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80097d0:	f640 32b5 	movw	r2, #2997	; 0xbb5
 80097d4:	fb02 f303 	mul.w	r3, r2, r3
 80097d8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 80097dc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80097e0:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 80097e4:	3308      	adds	r3, #8
 80097e6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		sigmaEstRtn		 /= 10000;
 80097ea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80097ee:	4a3f      	ldr	r2, [pc, #252]	; (80098ec <VL53L0X_calc_sigma_estimate+0x490>)
 80097f0:	fba2 2303 	umull	r2, r3, r2, r3
 80097f4:	0b5b      	lsrs	r3, r3, #13
 80097f6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 80097fa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80097fe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009800:	429a      	cmp	r2, r3
 8009802:	d902      	bls.n	800980a <VL53L0X_calc_sigma_estimate+0x3ae>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstRtn = cSigmaEstRtnMax;
 8009804:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009806:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}
		finalRangeIntegrationTimeMilliSecs =
			(finalRangeTimeoutMicroSecs + preRangeTimeoutMicroSecs + 500)/1000;
 800980a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800980e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009812:	4413      	add	r3, r2
 8009814:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		finalRangeIntegrationTimeMilliSecs =
 8009818:	4a35      	ldr	r2, [pc, #212]	; (80098f0 <VL53L0X_calc_sigma_estimate+0x494>)
 800981a:	fba2 2303 	umull	r2, r3, r2, r3
 800981e:	099b      	lsrs	r3, r3, #6
 8009820:	623b      	str	r3, [r7, #32]
		/* sigmaEstRef = 1mm * 25ms/final range integration time (inc pre-range)
		 * sqrt(FixPoint1616/int) = FixPoint2408)
		 */
		sigmaEstRef =
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
				finalRangeIntegrationTimeMilliSecs/2)/
 8009822:	6a3b      	ldr	r3, [r7, #32]
 8009824:	085a      	lsrs	r2, r3, #1
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
 8009826:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800982a:	441a      	add	r2, r3
 800982c:	6a3b      	ldr	r3, [r7, #32]
 800982e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009832:	4618      	mov	r0, r3
 8009834:	f7fd ffa4 	bl	8007780 <VL53L0X_isqrt>
 8009838:	61f8      	str	r0, [r7, #28]
				finalRangeIntegrationTimeMilliSecs);

		/* FixPoint2408 << 8 = FixPoint1616 */
		sigmaEstRef <<= 8;
 800983a:	69fb      	ldr	r3, [r7, #28]
 800983c:	021b      	lsls	r3, r3, #8
 800983e:	61fb      	str	r3, [r7, #28]
		sigmaEstRef = (sigmaEstRef + 500)/1000;
 8009840:	69fb      	ldr	r3, [r7, #28]
 8009842:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8009846:	4a2a      	ldr	r2, [pc, #168]	; (80098f0 <VL53L0X_calc_sigma_estimate+0x494>)
 8009848:	fba2 2303 	umull	r2, r3, r2, r3
 800984c:	099b      	lsrs	r3, r3, #6
 800984e:	61fb      	str	r3, [r7, #28]

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 8009850:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009854:	fb03 f303 	mul.w	r3, r3, r3
 8009858:	633b      	str	r3, [r7, #48]	; 0x30
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = sigmaEstRef * sigmaEstRef;
 800985a:	69fb      	ldr	r3, [r7, #28]
 800985c:	fb03 f303 	mul.w	r3, r3, r3
 8009860:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 8009862:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009866:	4413      	add	r3, r2
 8009868:	4618      	mov	r0, r3
 800986a:	f7fd ff89 	bl	8007780 <VL53L0X_isqrt>
 800986e:	61b8      	str	r0, [r7, #24]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 8009870:	69bb      	ldr	r3, [r7, #24]
 8009872:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009876:	fb02 f303 	mul.w	r3, r2, r3
 800987a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 800987e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009880:	2b00      	cmp	r3, #0
 8009882:	d009      	beq.n	8009898 <VL53L0X_calc_sigma_estimate+0x43c>
 8009884:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009888:	2b00      	cmp	r3, #0
 800988a:	d005      	beq.n	8009898 <VL53L0X_calc_sigma_estimate+0x43c>
 800988c:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8009890:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009894:	429a      	cmp	r2, r3
 8009896:	d903      	bls.n	80098a0 <VL53L0X_calc_sigma_estimate+0x444>
				(sigmaEstimate > cSigmaEstMax)) {
				sigmaEstimate = cSigmaEstMax;
 8009898:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800989c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80098a6:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	681a      	ldr	r2, [r3, #0]
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		Status = VL53L0X_calc_dmax(
 80098b2:	6939      	ldr	r1, [r7, #16]
 80098b4:	683b      	ldr	r3, [r7, #0]
 80098b6:	9303      	str	r3, [sp, #12]
 80098b8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80098bc:	9302      	str	r3, [sp, #8]
 80098be:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80098c2:	9301      	str	r3, [sp, #4]
 80098c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80098c6:	9300      	str	r3, [sp, #0]
 80098c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80098cc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80098ce:	68f8      	ldr	r0, [r7, #12]
 80098d0:	f7ff fca8 	bl	8009224 <VL53L0X_calc_dmax>
 80098d4:	4603      	mov	r3, r0
 80098d6:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			peakVcselDuration_us,
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80098da:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
}
 80098de:	4618      	mov	r0, r3
 80098e0:	37c0      	adds	r7, #192	; 0xc0
 80098e2:	46bd      	mov	sp, r7
 80098e4:	bd80      	pop	{r7, pc}
 80098e6:	bf00      	nop
 80098e8:	51eb851f 	.word	0x51eb851f
 80098ec:	d1b71759 	.word	0xd1b71759
 80098f0:	10624dd3 	.word	0x10624dd3

080098f4 <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 80098f4:	b580      	push	{r7, lr}
 80098f6:	b090      	sub	sp, #64	; 0x40
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	60f8      	str	r0, [r7, #12]
 80098fc:	607a      	str	r2, [r7, #4]
 80098fe:	461a      	mov	r2, r3
 8009900:	460b      	mov	r3, r1
 8009902:	72fb      	strb	r3, [r7, #11]
 8009904:	4613      	mov	r3, r2
 8009906:	813b      	strh	r3, [r7, #8]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009908:	2300      	movs	r3, #0
 800990a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 800990e:	2300      	movs	r3, #0
 8009910:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint8_t SignalRefClipflag = 0;
 8009914:	2300      	movs	r3, #0
 8009916:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	uint8_t RangeIgnoreThresholdflag = 0;
 800991a:	2300      	movs	r3, #0
 800991c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint8_t SigmaLimitCheckEnable = 0;
 8009920:	2300      	movs	r3, #0
 8009922:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 8009926:	2300      	movs	r3, #0
 8009928:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint8_t SignalRefClipLimitCheckEnable = 0;
 800992c:	2300      	movs	r3, #0
 800992e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 8009932:	2300      	movs	r3, #0
 8009934:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 8009938:	2300      	movs	r3, #0
 800993a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint16_t tmpWord = 0;
 800993e:	2300      	movs	r3, #0
 8009940:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 8009942:	2300      	movs	r3, #0
 8009944:	613b      	str	r3, [r7, #16]
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 8009946:	7afb      	ldrb	r3, [r7, #11]
 8009948:	10db      	asrs	r3, r3, #3
 800994a:	b2db      	uxtb	r3, r3
 800994c:	f003 030f 	and.w	r3, r3, #15
 8009950:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	if (DeviceRangeStatusInternal == 0 ||
 8009954:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009958:	2b00      	cmp	r3, #0
 800995a:	d017      	beq.n	800998c <VL53L0X_get_pal_range_status+0x98>
 800995c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009960:	2b05      	cmp	r3, #5
 8009962:	d013      	beq.n	800998c <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 5 ||
 8009964:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009968:	2b07      	cmp	r3, #7
 800996a:	d00f      	beq.n	800998c <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 7 ||
 800996c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009970:	2b0c      	cmp	r3, #12
 8009972:	d00b      	beq.n	800998c <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 12 ||
 8009974:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009978:	2b0d      	cmp	r3, #13
 800997a:	d007      	beq.n	800998c <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 13 ||
 800997c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009980:	2b0e      	cmp	r3, #14
 8009982:	d003      	beq.n	800998c <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 14 ||
 8009984:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009988:	2b0f      	cmp	r3, #15
 800998a:	d103      	bne.n	8009994 <VL53L0X_get_pal_range_status+0xa0>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 800998c:	2301      	movs	r3, #1
 800998e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8009992:	e002      	b.n	800999a <VL53L0X_get_pal_range_status+0xa6>
	} else {
		NoneFlag = 0;
 8009994:	2300      	movs	r3, #0
 8009996:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800999a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d109      	bne.n	80099b6 <VL53L0X_get_pal_range_status+0xc2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 80099a2:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 80099a6:	461a      	mov	r2, r3
 80099a8:	2100      	movs	r1, #0
 80099aa:	68f8      	ldr	r0, [r7, #12]
 80099ac:	f7fc f9ec 	bl	8005d88 <VL53L0X_GetLimitCheckEnable>
 80099b0:	4603      	mov	r3, r0
 80099b2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 80099b6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d02e      	beq.n	8009a1c <VL53L0X_get_pal_range_status+0x128>
 80099be:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d12a      	bne.n	8009a1c <VL53L0X_get_pal_range_status+0x128>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 80099c6:	f107 0310 	add.w	r3, r7, #16
 80099ca:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80099ce:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80099d0:	68f8      	ldr	r0, [r7, #12]
 80099d2:	f7ff fd43 	bl	800945c <VL53L0X_calc_sigma_estimate>
 80099d6:	4603      	mov	r3, r0
 80099d8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 80099dc:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d103      	bne.n	80099ec <VL53L0X_get_pal_range_status+0xf8>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 80099e4:	693b      	ldr	r3, [r7, #16]
 80099e6:	b29a      	uxth	r2, r3
 80099e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80099ea:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 80099ec:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d113      	bne.n	8009a1c <VL53L0X_get_pal_range_status+0x128>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 80099f4:	f107 0320 	add.w	r3, r7, #32
 80099f8:	461a      	mov	r2, r3
 80099fa:	2100      	movs	r1, #0
 80099fc:	68f8      	ldr	r0, [r7, #12]
 80099fe:	f7fc fa49 	bl	8005e94 <VL53L0X_GetLimitCheckValue>
 8009a02:	4603      	mov	r3, r0
 8009a04:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 8009a08:	6a3b      	ldr	r3, [r7, #32]
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d006      	beq.n	8009a1c <VL53L0X_get_pal_range_status+0x128>
				(SigmaEstimate > SigmaLimitValue))
 8009a0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a10:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 8009a12:	429a      	cmp	r2, r3
 8009a14:	d902      	bls.n	8009a1c <VL53L0X_get_pal_range_status+0x128>
					/* Limit Fail */
					SigmaLimitflag = 1;
 8009a16:	2301      	movs	r3, #1
 8009a18:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8009a1c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d109      	bne.n	8009a38 <VL53L0X_get_pal_range_status+0x144>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8009a24:	f107 0329 	add.w	r3, r7, #41	; 0x29
 8009a28:	461a      	mov	r2, r3
 8009a2a:	2102      	movs	r1, #2
 8009a2c:	68f8      	ldr	r0, [r7, #12]
 8009a2e:	f7fc f9ab 	bl	8005d88 <VL53L0X_GetLimitCheckEnable>
 8009a32:	4603      	mov	r3, r0
 8009a34:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 8009a38:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d044      	beq.n	8009aca <VL53L0X_get_pal_range_status+0x1d6>
 8009a40:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d140      	bne.n	8009aca <VL53L0X_get_pal_range_status+0x1d6>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 8009a48:	f107 031c 	add.w	r3, r7, #28
 8009a4c:	461a      	mov	r2, r3
 8009a4e:	2102      	movs	r1, #2
 8009a50:	68f8      	ldr	r0, [r7, #12]
 8009a52:	f7fc fa1f 	bl	8005e94 <VL53L0X_GetLimitCheckValue>
 8009a56:	4603      	mov	r3, r0
 8009a58:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		/* Read LastSignalRefMcps from device */
		if (Status == VL53L0X_ERROR_NONE)
 8009a5c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d107      	bne.n	8009a74 <VL53L0X_get_pal_range_status+0x180>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8009a64:	2201      	movs	r2, #1
 8009a66:	21ff      	movs	r1, #255	; 0xff
 8009a68:	68f8      	ldr	r0, [r7, #12]
 8009a6a:	f000 f9bb 	bl	8009de4 <VL53L0X_WrByte>
 8009a6e:	4603      	mov	r3, r0
 8009a70:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		if (Status == VL53L0X_ERROR_NONE)
 8009a74:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d109      	bne.n	8009a90 <VL53L0X_get_pal_range_status+0x19c>
			Status = VL53L0X_RdWord(Dev,
 8009a7c:	f107 0316 	add.w	r3, r7, #22
 8009a80:	461a      	mov	r2, r3
 8009a82:	21b6      	movs	r1, #182	; 0xb6
 8009a84:	68f8      	ldr	r0, [r7, #12]
 8009a86:	f000 fa59 	bl	8009f3c <VL53L0X_RdWord>
 8009a8a:	4603      	mov	r3, r0
 8009a8c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
				&tmpWord);

		if (Status == VL53L0X_ERROR_NONE)
 8009a90:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d107      	bne.n	8009aa8 <VL53L0X_get_pal_range_status+0x1b4>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8009a98:	2200      	movs	r2, #0
 8009a9a:	21ff      	movs	r1, #255	; 0xff
 8009a9c:	68f8      	ldr	r0, [r7, #12]
 8009a9e:	f000 f9a1 	bl	8009de4 <VL53L0X_WrByte>
 8009aa2:	4603      	mov	r3, r0
 8009aa4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 8009aa8:	8afb      	ldrh	r3, [r7, #22]
 8009aaa:	025b      	lsls	r3, r3, #9
 8009aac:	62fb      	str	r3, [r7, #44]	; 0x2c
		PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009ab2:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148

		if ((SignalRefClipValue > 0) &&
 8009ab6:	69fb      	ldr	r3, [r7, #28]
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d006      	beq.n	8009aca <VL53L0X_get_pal_range_status+0x1d6>
				(LastSignalRefMcps > SignalRefClipValue)) {
 8009abc:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 8009abe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009ac0:	429a      	cmp	r2, r3
 8009ac2:	d902      	bls.n	8009aca <VL53L0X_get_pal_range_status+0x1d6>
			/* Limit Fail */
			SignalRefClipflag = 1;
 8009ac4:	2301      	movs	r3, #1
 8009ac6:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8009aca:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d109      	bne.n	8009ae6 <VL53L0X_get_pal_range_status+0x1f2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8009ad2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009ad6:	461a      	mov	r2, r3
 8009ad8:	2103      	movs	r1, #3
 8009ada:	68f8      	ldr	r0, [r7, #12]
 8009adc:	f7fc f954 	bl	8005d88 <VL53L0X_GetLimitCheckEnable>
 8009ae0:	4603      	mov	r3, r0
 8009ae2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 8009ae6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d023      	beq.n	8009b36 <VL53L0X_get_pal_range_status+0x242>
 8009aee:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d11f      	bne.n	8009b36 <VL53L0X_get_pal_range_status+0x242>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 8009af6:	893b      	ldrh	r3, [r7, #8]
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d102      	bne.n	8009b02 <VL53L0X_get_pal_range_status+0x20e>
			SignalRatePerSpad = 0;
 8009afc:	2300      	movs	r3, #0
 8009afe:	637b      	str	r3, [r7, #52]	; 0x34
 8009b00:	e005      	b.n	8009b0e <VL53L0X_get_pal_range_status+0x21a>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	021a      	lsls	r2, r3, #8
 8009b06:	893b      	ldrh	r3, [r7, #8]
 8009b08:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b0c:	637b      	str	r3, [r7, #52]	; 0x34
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 8009b0e:	f107 0318 	add.w	r3, r7, #24
 8009b12:	461a      	mov	r2, r3
 8009b14:	2103      	movs	r1, #3
 8009b16:	68f8      	ldr	r0, [r7, #12]
 8009b18:	f7fc f9bc 	bl	8005e94 <VL53L0X_GetLimitCheckValue>
 8009b1c:	4603      	mov	r3, r0
 8009b1e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 8009b22:	69bb      	ldr	r3, [r7, #24]
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d006      	beq.n	8009b36 <VL53L0X_get_pal_range_status+0x242>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 8009b28:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 8009b2a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009b2c:	429a      	cmp	r2, r3
 8009b2e:	d202      	bcs.n	8009b36 <VL53L0X_get_pal_range_status+0x242>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 8009b30:	2301      	movs	r3, #1
 8009b32:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009b36:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d14a      	bne.n	8009bd4 <VL53L0X_get_pal_range_status+0x2e0>
		if (NoneFlag == 1) {
 8009b3e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8009b42:	2b01      	cmp	r3, #1
 8009b44:	d103      	bne.n	8009b4e <VL53L0X_get_pal_range_status+0x25a>
			*pPalRangeStatus = 255;	 /* NONE */
 8009b46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009b48:	22ff      	movs	r2, #255	; 0xff
 8009b4a:	701a      	strb	r2, [r3, #0]
 8009b4c:	e042      	b.n	8009bd4 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 1 ||
 8009b4e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009b52:	2b01      	cmp	r3, #1
 8009b54:	d007      	beq.n	8009b66 <VL53L0X_get_pal_range_status+0x272>
 8009b56:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009b5a:	2b02      	cmp	r3, #2
 8009b5c:	d003      	beq.n	8009b66 <VL53L0X_get_pal_range_status+0x272>
					DeviceRangeStatusInternal == 2 ||
 8009b5e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009b62:	2b03      	cmp	r3, #3
 8009b64:	d103      	bne.n	8009b6e <VL53L0X_get_pal_range_status+0x27a>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 8009b66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009b68:	2205      	movs	r2, #5
 8009b6a:	701a      	strb	r2, [r3, #0]
 8009b6c:	e032      	b.n	8009bd4 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 6 ||
 8009b6e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009b72:	2b06      	cmp	r3, #6
 8009b74:	d003      	beq.n	8009b7e <VL53L0X_get_pal_range_status+0x28a>
 8009b76:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009b7a:	2b09      	cmp	r3, #9
 8009b7c:	d103      	bne.n	8009b86 <VL53L0X_get_pal_range_status+0x292>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 8009b7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009b80:	2204      	movs	r2, #4
 8009b82:	701a      	strb	r2, [r3, #0]
 8009b84:	e026      	b.n	8009bd4 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 8 ||
 8009b86:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009b8a:	2b08      	cmp	r3, #8
 8009b8c:	d007      	beq.n	8009b9e <VL53L0X_get_pal_range_status+0x2aa>
 8009b8e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009b92:	2b0a      	cmp	r3, #10
 8009b94:	d003      	beq.n	8009b9e <VL53L0X_get_pal_range_status+0x2aa>
					DeviceRangeStatusInternal == 10 ||
 8009b96:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8009b9a:	2b01      	cmp	r3, #1
 8009b9c:	d103      	bne.n	8009ba6 <VL53L0X_get_pal_range_status+0x2b2>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 8009b9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009ba0:	2203      	movs	r2, #3
 8009ba2:	701a      	strb	r2, [r3, #0]
 8009ba4:	e016      	b.n	8009bd4 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 4 ||
 8009ba6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009baa:	2b04      	cmp	r3, #4
 8009bac:	d003      	beq.n	8009bb6 <VL53L0X_get_pal_range_status+0x2c2>
 8009bae:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8009bb2:	2b01      	cmp	r3, #1
 8009bb4:	d103      	bne.n	8009bbe <VL53L0X_get_pal_range_status+0x2ca>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 8009bb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009bb8:	2202      	movs	r2, #2
 8009bba:	701a      	strb	r2, [r3, #0]
 8009bbc:	e00a      	b.n	8009bd4 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (SigmaLimitflag == 1) {
 8009bbe:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8009bc2:	2b01      	cmp	r3, #1
 8009bc4:	d103      	bne.n	8009bce <VL53L0X_get_pal_range_status+0x2da>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 8009bc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009bc8:	2201      	movs	r2, #1
 8009bca:	701a      	strb	r2, [r3, #0]
 8009bcc:	e002      	b.n	8009bd4 <VL53L0X_get_pal_range_status+0x2e0>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 8009bce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009bd0:	2200      	movs	r2, #0
 8009bd2:	701a      	strb	r2, [r3, #0]
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
 8009bd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009bd6:	781b      	ldrb	r3, [r3, #0]
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d102      	bne.n	8009be2 <VL53L0X_get_pal_range_status+0x2ee>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 8009bdc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009bde:	2200      	movs	r2, #0
 8009be0:	815a      	strh	r2, [r3, #10]

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8009be2:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 8009be6:	461a      	mov	r2, r3
 8009be8:	2101      	movs	r1, #1
 8009bea:	68f8      	ldr	r0, [r7, #12]
 8009bec:	f7fc f8cc 	bl	8005d88 <VL53L0X_GetLimitCheckEnable>
 8009bf0:	4603      	mov	r3, r0
 8009bf2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 8009bf6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d14f      	bne.n	8009c9e <VL53L0X_get_pal_range_status+0x3aa>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 8009bfe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d003      	beq.n	8009c0e <VL53L0X_get_pal_range_status+0x31a>
 8009c06:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8009c0a:	2b01      	cmp	r3, #1
 8009c0c:	d103      	bne.n	8009c16 <VL53L0X_get_pal_range_status+0x322>
			Temp8 = 1;
 8009c0e:	2301      	movs	r3, #1
 8009c10:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c14:	e002      	b.n	8009c1c <VL53L0X_get_pal_range_status+0x328>
		else
			Temp8 = 0;
 8009c16:	2300      	movs	r3, #0
 8009c18:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8009c22:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 8009c26:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009c2a:	2b04      	cmp	r3, #4
 8009c2c:	d003      	beq.n	8009c36 <VL53L0X_get_pal_range_status+0x342>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 8009c2e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
		if ((DeviceRangeStatusInternal == 4) ||
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d103      	bne.n	8009c3e <VL53L0X_get_pal_range_status+0x34a>
			Temp8 = 1;
 8009c36:	2301      	movs	r3, #1
 8009c38:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c3c:	e002      	b.n	8009c44 <VL53L0X_get_pal_range_status+0x350>
		else
			Temp8 = 0;
 8009c3e:	2300      	movs	r3, #0
 8009c40:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8009c4a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 8009c4e:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d003      	beq.n	8009c5e <VL53L0X_get_pal_range_status+0x36a>
 8009c56:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8009c5a:	2b01      	cmp	r3, #1
 8009c5c:	d103      	bne.n	8009c66 <VL53L0X_get_pal_range_status+0x372>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 8009c5e:	2301      	movs	r3, #1
 8009c60:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c64:	e002      	b.n	8009c6c <VL53L0X_get_pal_range_status+0x378>
		else
			Temp8 = 0;
 8009c66:	2300      	movs	r3, #0
 8009c68:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8009c72:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 8009c76:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d003      	beq.n	8009c86 <VL53L0X_get_pal_range_status+0x392>
 8009c7e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8009c82:	2b01      	cmp	r3, #1
 8009c84:	d103      	bne.n	8009c8e <VL53L0X_get_pal_range_status+0x39a>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 8009c86:	2301      	movs	r3, #1
 8009c88:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c8c:	e002      	b.n	8009c94 <VL53L0X_get_pal_range_status+0x3a0>
		else
			Temp8 = 0;
 8009c8e:	2300      	movs	r3, #0
 8009c90:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8009c9a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009c9e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f

}
 8009ca2:	4618      	mov	r0, r3
 8009ca4:	3740      	adds	r7, #64	; 0x40
 8009ca6:	46bd      	mov	sp, r7
 8009ca8:	bd80      	pop	{r7, pc}

08009caa <_I2CWrite>:
#endif


uint8_t _I2CBuffer[64];

int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 8009caa:	b580      	push	{r7, lr}
 8009cac:	b088      	sub	sp, #32
 8009cae:	af02      	add	r7, sp, #8
 8009cb0:	60f8      	str	r0, [r7, #12]
 8009cb2:	60b9      	str	r1, [r7, #8]
 8009cb4:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	330a      	adds	r3, #10
 8009cba:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 8009cc8:	b299      	uxth	r1, r3
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	b29a      	uxth	r2, r3
 8009cce:	697b      	ldr	r3, [r7, #20]
 8009cd0:	9300      	str	r3, [sp, #0]
 8009cd2:	4613      	mov	r3, r2
 8009cd4:	68ba      	ldr	r2, [r7, #8]
 8009cd6:	f7f8 f963 	bl	8001fa0 <HAL_I2C_Master_Transmit>
 8009cda:	4603      	mov	r3, r0
 8009cdc:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 8009cde:	693b      	ldr	r3, [r7, #16]
}
 8009ce0:	4618      	mov	r0, r3
 8009ce2:	3718      	adds	r7, #24
 8009ce4:	46bd      	mov	sp, r7
 8009ce6:	bd80      	pop	{r7, pc}

08009ce8 <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 8009ce8:	b580      	push	{r7, lr}
 8009cea:	b088      	sub	sp, #32
 8009cec:	af02      	add	r7, sp, #8
 8009cee:	60f8      	str	r0, [r7, #12]
 8009cf0:	60b9      	str	r1, [r7, #8]
 8009cf2:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	330a      	adds	r3, #10
 8009cf8:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 8009d06:	f043 0301 	orr.w	r3, r3, #1
 8009d0a:	b2db      	uxtb	r3, r3
 8009d0c:	b299      	uxth	r1, r3
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	b29a      	uxth	r2, r3
 8009d12:	697b      	ldr	r3, [r7, #20]
 8009d14:	9300      	str	r3, [sp, #0]
 8009d16:	4613      	mov	r3, r2
 8009d18:	68ba      	ldr	r2, [r7, #8]
 8009d1a:	f7f8 fa3f 	bl	800219c <HAL_I2C_Master_Receive>
 8009d1e:	4603      	mov	r3, r0
 8009d20:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 8009d22:	693b      	ldr	r3, [r7, #16]
}
 8009d24:	4618      	mov	r0, r3
 8009d26:	3718      	adds	r7, #24
 8009d28:	46bd      	mov	sp, r7
 8009d2a:	bd80      	pop	{r7, pc}

08009d2c <VL53L0X_WriteMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 8009d2c:	b580      	push	{r7, lr}
 8009d2e:	b086      	sub	sp, #24
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	60f8      	str	r0, [r7, #12]
 8009d34:	607a      	str	r2, [r7, #4]
 8009d36:	603b      	str	r3, [r7, #0]
 8009d38:	460b      	mov	r3, r1
 8009d3a:	72fb      	strb	r3, [r7, #11]
    int status_int;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009d3c:	2300      	movs	r3, #0
 8009d3e:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 8009d40:	683b      	ldr	r3, [r7, #0]
 8009d42:	2b3f      	cmp	r3, #63	; 0x3f
 8009d44:	d902      	bls.n	8009d4c <VL53L0X_WriteMulti+0x20>
        return VL53L0X_ERROR_INVALID_PARAMS;
 8009d46:	f06f 0303 	mvn.w	r3, #3
 8009d4a:	e016      	b.n	8009d7a <VL53L0X_WriteMulti+0x4e>
    }
    _I2CBuffer[0] = index;
 8009d4c:	4a0d      	ldr	r2, [pc, #52]	; (8009d84 <VL53L0X_WriteMulti+0x58>)
 8009d4e:	7afb      	ldrb	r3, [r7, #11]
 8009d50:	7013      	strb	r3, [r2, #0]
    memcpy(&_I2CBuffer[1], pdata, count);
 8009d52:	683a      	ldr	r2, [r7, #0]
 8009d54:	6879      	ldr	r1, [r7, #4]
 8009d56:	480c      	ldr	r0, [pc, #48]	; (8009d88 <VL53L0X_WriteMulti+0x5c>)
 8009d58:	f000 f998 	bl	800a08c <memcpy>
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 8009d5c:	683b      	ldr	r3, [r7, #0]
 8009d5e:	3301      	adds	r3, #1
 8009d60:	461a      	mov	r2, r3
 8009d62:	4908      	ldr	r1, [pc, #32]	; (8009d84 <VL53L0X_WriteMulti+0x58>)
 8009d64:	68f8      	ldr	r0, [r7, #12]
 8009d66:	f7ff ffa0 	bl	8009caa <_I2CWrite>
 8009d6a:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8009d6c:	693b      	ldr	r3, [r7, #16]
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d001      	beq.n	8009d76 <VL53L0X_WriteMulti+0x4a>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8009d72:	23ec      	movs	r3, #236	; 0xec
 8009d74:	75fb      	strb	r3, [r7, #23]
    }
    VL53L0X_PutI2cBus();
    return Status;
 8009d76:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009d7a:	4618      	mov	r0, r3
 8009d7c:	3718      	adds	r7, #24
 8009d7e:	46bd      	mov	sp, r7
 8009d80:	bd80      	pop	{r7, pc}
 8009d82:	bf00      	nop
 8009d84:	20000a88 	.word	0x20000a88
 8009d88:	20000a89 	.word	0x20000a89

08009d8c <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 8009d8c:	b580      	push	{r7, lr}
 8009d8e:	b086      	sub	sp, #24
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	60f8      	str	r0, [r7, #12]
 8009d94:	607a      	str	r2, [r7, #4]
 8009d96:	603b      	str	r3, [r7, #0]
 8009d98:	460b      	mov	r3, r1
 8009d9a:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009d9c:	2300      	movs	r3, #0
 8009d9e:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8009da0:	f107 030b 	add.w	r3, r7, #11
 8009da4:	2201      	movs	r2, #1
 8009da6:	4619      	mov	r1, r3
 8009da8:	68f8      	ldr	r0, [r7, #12]
 8009daa:	f7ff ff7e 	bl	8009caa <_I2CWrite>
 8009dae:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8009db0:	693b      	ldr	r3, [r7, #16]
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d002      	beq.n	8009dbc <VL53L0X_ReadMulti+0x30>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8009db6:	23ec      	movs	r3, #236	; 0xec
 8009db8:	75fb      	strb	r3, [r7, #23]
        goto done;
 8009dba:	e00c      	b.n	8009dd6 <VL53L0X_ReadMulti+0x4a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 8009dbc:	683a      	ldr	r2, [r7, #0]
 8009dbe:	6879      	ldr	r1, [r7, #4]
 8009dc0:	68f8      	ldr	r0, [r7, #12]
 8009dc2:	f7ff ff91 	bl	8009ce8 <_I2CRead>
 8009dc6:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8009dc8:	693b      	ldr	r3, [r7, #16]
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d002      	beq.n	8009dd4 <VL53L0X_ReadMulti+0x48>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8009dce:	23ec      	movs	r3, #236	; 0xec
 8009dd0:	75fb      	strb	r3, [r7, #23]
 8009dd2:	e000      	b.n	8009dd6 <VL53L0X_ReadMulti+0x4a>
    }
done:
 8009dd4:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 8009dd6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009dda:	4618      	mov	r0, r3
 8009ddc:	3718      	adds	r7, #24
 8009dde:	46bd      	mov	sp, r7
 8009de0:	bd80      	pop	{r7, pc}
	...

08009de4 <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 8009de4:	b580      	push	{r7, lr}
 8009de6:	b084      	sub	sp, #16
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	6078      	str	r0, [r7, #4]
 8009dec:	460b      	mov	r3, r1
 8009dee:	70fb      	strb	r3, [r7, #3]
 8009df0:	4613      	mov	r3, r2
 8009df2:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009df4:	2300      	movs	r3, #0
 8009df6:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 8009df8:	4a0b      	ldr	r2, [pc, #44]	; (8009e28 <VL53L0X_WrByte+0x44>)
 8009dfa:	78fb      	ldrb	r3, [r7, #3]
 8009dfc:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data;
 8009dfe:	4a0a      	ldr	r2, [pc, #40]	; (8009e28 <VL53L0X_WrByte+0x44>)
 8009e00:	78bb      	ldrb	r3, [r7, #2]
 8009e02:	7053      	strb	r3, [r2, #1]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8009e04:	2202      	movs	r2, #2
 8009e06:	4908      	ldr	r1, [pc, #32]	; (8009e28 <VL53L0X_WrByte+0x44>)
 8009e08:	6878      	ldr	r0, [r7, #4]
 8009e0a:	f7ff ff4e 	bl	8009caa <_I2CWrite>
 8009e0e:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8009e10:	68bb      	ldr	r3, [r7, #8]
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d001      	beq.n	8009e1a <VL53L0X_WrByte+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8009e16:	23ec      	movs	r3, #236	; 0xec
 8009e18:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 8009e1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009e1e:	4618      	mov	r0, r3
 8009e20:	3710      	adds	r7, #16
 8009e22:	46bd      	mov	sp, r7
 8009e24:	bd80      	pop	{r7, pc}
 8009e26:	bf00      	nop
 8009e28:	20000a88 	.word	0x20000a88

08009e2c <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 8009e2c:	b580      	push	{r7, lr}
 8009e2e:	b084      	sub	sp, #16
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	6078      	str	r0, [r7, #4]
 8009e34:	460b      	mov	r3, r1
 8009e36:	70fb      	strb	r3, [r7, #3]
 8009e38:	4613      	mov	r3, r2
 8009e3a:	803b      	strh	r3, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009e3c:	2300      	movs	r3, #0
 8009e3e:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 8009e40:	4a0e      	ldr	r2, [pc, #56]	; (8009e7c <VL53L0X_WrWord+0x50>)
 8009e42:	78fb      	ldrb	r3, [r7, #3]
 8009e44:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data >> 8;
 8009e46:	883b      	ldrh	r3, [r7, #0]
 8009e48:	0a1b      	lsrs	r3, r3, #8
 8009e4a:	b29b      	uxth	r3, r3
 8009e4c:	b2da      	uxtb	r2, r3
 8009e4e:	4b0b      	ldr	r3, [pc, #44]	; (8009e7c <VL53L0X_WrWord+0x50>)
 8009e50:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data & 0x00FF;
 8009e52:	883b      	ldrh	r3, [r7, #0]
 8009e54:	b2da      	uxtb	r2, r3
 8009e56:	4b09      	ldr	r3, [pc, #36]	; (8009e7c <VL53L0X_WrWord+0x50>)
 8009e58:	709a      	strb	r2, [r3, #2]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 8009e5a:	2203      	movs	r2, #3
 8009e5c:	4907      	ldr	r1, [pc, #28]	; (8009e7c <VL53L0X_WrWord+0x50>)
 8009e5e:	6878      	ldr	r0, [r7, #4]
 8009e60:	f7ff ff23 	bl	8009caa <_I2CWrite>
 8009e64:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8009e66:	68bb      	ldr	r3, [r7, #8]
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d001      	beq.n	8009e70 <VL53L0X_WrWord+0x44>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8009e6c:	23ec      	movs	r3, #236	; 0xec
 8009e6e:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 8009e70:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009e74:	4618      	mov	r0, r3
 8009e76:	3710      	adds	r7, #16
 8009e78:	46bd      	mov	sp, r7
 8009e7a:	bd80      	pop	{r7, pc}
 8009e7c:	20000a88 	.word	0x20000a88

08009e80 <VL53L0X_UpdateByte>:
    }
    VL53L0X_PutI2cBus();
    return Status;
}

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 8009e80:	b580      	push	{r7, lr}
 8009e82:	b084      	sub	sp, #16
 8009e84:	af00      	add	r7, sp, #0
 8009e86:	6078      	str	r0, [r7, #4]
 8009e88:	4608      	mov	r0, r1
 8009e8a:	4611      	mov	r1, r2
 8009e8c:	461a      	mov	r2, r3
 8009e8e:	4603      	mov	r3, r0
 8009e90:	70fb      	strb	r3, [r7, #3]
 8009e92:	460b      	mov	r3, r1
 8009e94:	70bb      	strb	r3, [r7, #2]
 8009e96:	4613      	mov	r3, r2
 8009e98:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009e9a:	2300      	movs	r3, #0
 8009e9c:	73fb      	strb	r3, [r7, #15]
    uint8_t data;

    Status = VL53L0X_RdByte(Dev, index, &data);
 8009e9e:	f107 020e 	add.w	r2, r7, #14
 8009ea2:	78fb      	ldrb	r3, [r7, #3]
 8009ea4:	4619      	mov	r1, r3
 8009ea6:	6878      	ldr	r0, [r7, #4]
 8009ea8:	f000 f81e 	bl	8009ee8 <VL53L0X_RdByte>
 8009eac:	4603      	mov	r3, r0
 8009eae:	73fb      	strb	r3, [r7, #15]
    if (Status) {
 8009eb0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d110      	bne.n	8009eda <VL53L0X_UpdateByte+0x5a>
        goto done;
    }
    data = (data & AndData) | OrData;
 8009eb8:	7bba      	ldrb	r2, [r7, #14]
 8009eba:	78bb      	ldrb	r3, [r7, #2]
 8009ebc:	4013      	ands	r3, r2
 8009ebe:	b2da      	uxtb	r2, r3
 8009ec0:	787b      	ldrb	r3, [r7, #1]
 8009ec2:	4313      	orrs	r3, r2
 8009ec4:	b2db      	uxtb	r3, r3
 8009ec6:	73bb      	strb	r3, [r7, #14]
    Status = VL53L0X_WrByte(Dev, index, data);
 8009ec8:	7bba      	ldrb	r2, [r7, #14]
 8009eca:	78fb      	ldrb	r3, [r7, #3]
 8009ecc:	4619      	mov	r1, r3
 8009ece:	6878      	ldr	r0, [r7, #4]
 8009ed0:	f7ff ff88 	bl	8009de4 <VL53L0X_WrByte>
 8009ed4:	4603      	mov	r3, r0
 8009ed6:	73fb      	strb	r3, [r7, #15]
 8009ed8:	e000      	b.n	8009edc <VL53L0X_UpdateByte+0x5c>
        goto done;
 8009eda:	bf00      	nop
done:
    return Status;
 8009edc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009ee0:	4618      	mov	r0, r3
 8009ee2:	3710      	adds	r7, #16
 8009ee4:	46bd      	mov	sp, r7
 8009ee6:	bd80      	pop	{r7, pc}

08009ee8 <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 8009ee8:	b580      	push	{r7, lr}
 8009eea:	b086      	sub	sp, #24
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	60f8      	str	r0, [r7, #12]
 8009ef0:	460b      	mov	r3, r1
 8009ef2:	607a      	str	r2, [r7, #4]
 8009ef4:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009ef6:	2300      	movs	r3, #0
 8009ef8:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8009efa:	f107 030b 	add.w	r3, r7, #11
 8009efe:	2201      	movs	r2, #1
 8009f00:	4619      	mov	r1, r3
 8009f02:	68f8      	ldr	r0, [r7, #12]
 8009f04:	f7ff fed1 	bl	8009caa <_I2CWrite>
 8009f08:	6138      	str	r0, [r7, #16]
    if( status_int ){
 8009f0a:	693b      	ldr	r3, [r7, #16]
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d002      	beq.n	8009f16 <VL53L0X_RdByte+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8009f10:	23ec      	movs	r3, #236	; 0xec
 8009f12:	75fb      	strb	r3, [r7, #23]
        goto done;
 8009f14:	e00c      	b.n	8009f30 <VL53L0X_RdByte+0x48>
    }
    status_int = _I2CRead(Dev, data, 1);
 8009f16:	2201      	movs	r2, #1
 8009f18:	6879      	ldr	r1, [r7, #4]
 8009f1a:	68f8      	ldr	r0, [r7, #12]
 8009f1c:	f7ff fee4 	bl	8009ce8 <_I2CRead>
 8009f20:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8009f22:	693b      	ldr	r3, [r7, #16]
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d002      	beq.n	8009f2e <VL53L0X_RdByte+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8009f28:	23ec      	movs	r3, #236	; 0xec
 8009f2a:	75fb      	strb	r3, [r7, #23]
 8009f2c:	e000      	b.n	8009f30 <VL53L0X_RdByte+0x48>
    }
done:
 8009f2e:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 8009f30:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009f34:	4618      	mov	r0, r3
 8009f36:	3718      	adds	r7, #24
 8009f38:	46bd      	mov	sp, r7
 8009f3a:	bd80      	pop	{r7, pc}

08009f3c <VL53L0X_RdWord>:

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 8009f3c:	b580      	push	{r7, lr}
 8009f3e:	b086      	sub	sp, #24
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	60f8      	str	r0, [r7, #12]
 8009f44:	460b      	mov	r3, r1
 8009f46:	607a      	str	r2, [r7, #4]
 8009f48:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009f4a:	2300      	movs	r3, #0
 8009f4c:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8009f4e:	f107 030b 	add.w	r3, r7, #11
 8009f52:	2201      	movs	r2, #1
 8009f54:	4619      	mov	r1, r3
 8009f56:	68f8      	ldr	r0, [r7, #12]
 8009f58:	f7ff fea7 	bl	8009caa <_I2CWrite>
 8009f5c:	6138      	str	r0, [r7, #16]

    if( status_int ){
 8009f5e:	693b      	ldr	r3, [r7, #16]
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d002      	beq.n	8009f6a <VL53L0X_RdWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8009f64:	23ec      	movs	r3, #236	; 0xec
 8009f66:	75fb      	strb	r3, [r7, #23]
        goto done;
 8009f68:	e017      	b.n	8009f9a <VL53L0X_RdWord+0x5e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 8009f6a:	2202      	movs	r2, #2
 8009f6c:	490e      	ldr	r1, [pc, #56]	; (8009fa8 <VL53L0X_RdWord+0x6c>)
 8009f6e:	68f8      	ldr	r0, [r7, #12]
 8009f70:	f7ff feba 	bl	8009ce8 <_I2CRead>
 8009f74:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8009f76:	693b      	ldr	r3, [r7, #16]
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d002      	beq.n	8009f82 <VL53L0X_RdWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8009f7c:	23ec      	movs	r3, #236	; 0xec
 8009f7e:	75fb      	strb	r3, [r7, #23]
        goto done;
 8009f80:	e00b      	b.n	8009f9a <VL53L0X_RdWord+0x5e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 8009f82:	4b09      	ldr	r3, [pc, #36]	; (8009fa8 <VL53L0X_RdWord+0x6c>)
 8009f84:	781b      	ldrb	r3, [r3, #0]
 8009f86:	b29b      	uxth	r3, r3
 8009f88:	021b      	lsls	r3, r3, #8
 8009f8a:	b29a      	uxth	r2, r3
 8009f8c:	4b06      	ldr	r3, [pc, #24]	; (8009fa8 <VL53L0X_RdWord+0x6c>)
 8009f8e:	785b      	ldrb	r3, [r3, #1]
 8009f90:	b29b      	uxth	r3, r3
 8009f92:	4413      	add	r3, r2
 8009f94:	b29a      	uxth	r2, r3
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	801a      	strh	r2, [r3, #0]
done:
    VL53L0X_PutI2cBus();
    return Status;
 8009f9a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009f9e:	4618      	mov	r0, r3
 8009fa0:	3718      	adds	r7, #24
 8009fa2:	46bd      	mov	sp, r7
 8009fa4:	bd80      	pop	{r7, pc}
 8009fa6:	bf00      	nop
 8009fa8:	20000a88 	.word	0x20000a88

08009fac <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 8009fac:	b580      	push	{r7, lr}
 8009fae:	b086      	sub	sp, #24
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	60f8      	str	r0, [r7, #12]
 8009fb4:	460b      	mov	r3, r1
 8009fb6:	607a      	str	r2, [r7, #4]
 8009fb8:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009fba:	2300      	movs	r3, #0
 8009fbc:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8009fbe:	f107 030b 	add.w	r3, r7, #11
 8009fc2:	2201      	movs	r2, #1
 8009fc4:	4619      	mov	r1, r3
 8009fc6:	68f8      	ldr	r0, [r7, #12]
 8009fc8:	f7ff fe6f 	bl	8009caa <_I2CWrite>
 8009fcc:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8009fce:	693b      	ldr	r3, [r7, #16]
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d002      	beq.n	8009fda <VL53L0X_RdDWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8009fd4:	23ec      	movs	r3, #236	; 0xec
 8009fd6:	75fb      	strb	r3, [r7, #23]
        goto done;
 8009fd8:	e01b      	b.n	800a012 <VL53L0X_RdDWord+0x66>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 8009fda:	2204      	movs	r2, #4
 8009fdc:	4910      	ldr	r1, [pc, #64]	; (800a020 <VL53L0X_RdDWord+0x74>)
 8009fde:	68f8      	ldr	r0, [r7, #12]
 8009fe0:	f7ff fe82 	bl	8009ce8 <_I2CRead>
 8009fe4:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8009fe6:	693b      	ldr	r3, [r7, #16]
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d002      	beq.n	8009ff2 <VL53L0X_RdDWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8009fec:	23ec      	movs	r3, #236	; 0xec
 8009fee:	75fb      	strb	r3, [r7, #23]
        goto done;
 8009ff0:	e00f      	b.n	800a012 <VL53L0X_RdDWord+0x66>
    }

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 8009ff2:	4b0b      	ldr	r3, [pc, #44]	; (800a020 <VL53L0X_RdDWord+0x74>)
 8009ff4:	781b      	ldrb	r3, [r3, #0]
 8009ff6:	061a      	lsls	r2, r3, #24
 8009ff8:	4b09      	ldr	r3, [pc, #36]	; (800a020 <VL53L0X_RdDWord+0x74>)
 8009ffa:	785b      	ldrb	r3, [r3, #1]
 8009ffc:	041b      	lsls	r3, r3, #16
 8009ffe:	441a      	add	r2, r3
 800a000:	4b07      	ldr	r3, [pc, #28]	; (800a020 <VL53L0X_RdDWord+0x74>)
 800a002:	789b      	ldrb	r3, [r3, #2]
 800a004:	021b      	lsls	r3, r3, #8
 800a006:	4413      	add	r3, r2
 800a008:	4a05      	ldr	r2, [pc, #20]	; (800a020 <VL53L0X_RdDWord+0x74>)
 800a00a:	78d2      	ldrb	r2, [r2, #3]
 800a00c:	441a      	add	r2, r3
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	601a      	str	r2, [r3, #0]

done:
    VL53L0X_PutI2cBus();
    return Status;
 800a012:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a016:	4618      	mov	r0, r3
 800a018:	3718      	adds	r7, #24
 800a01a:	46bd      	mov	sp, r7
 800a01c:	bd80      	pop	{r7, pc}
 800a01e:	bf00      	nop
 800a020:	20000a88 	.word	0x20000a88

0800a024 <VL53L0X_PollingDelay>:

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev) {
 800a024:	b580      	push	{r7, lr}
 800a026:	b084      	sub	sp, #16
 800a028:	af00      	add	r7, sp, #0
 800a02a:	6078      	str	r0, [r7, #4]
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800a02c:	2300      	movs	r3, #0
 800a02e:	73fb      	strb	r3, [r7, #15]

    // do nothing
    VL53L0X_OsDelay();
 800a030:	2002      	movs	r0, #2
 800a032:	f7f7 fadf 	bl	80015f4 <HAL_Delay>
    return status;
 800a036:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a03a:	4618      	mov	r0, r3
 800a03c:	3710      	adds	r7, #16
 800a03e:	46bd      	mov	sp, r7
 800a040:	bd80      	pop	{r7, pc}
	...

0800a044 <__libc_init_array>:
 800a044:	b570      	push	{r4, r5, r6, lr}
 800a046:	4d0d      	ldr	r5, [pc, #52]	; (800a07c <__libc_init_array+0x38>)
 800a048:	4c0d      	ldr	r4, [pc, #52]	; (800a080 <__libc_init_array+0x3c>)
 800a04a:	1b64      	subs	r4, r4, r5
 800a04c:	10a4      	asrs	r4, r4, #2
 800a04e:	2600      	movs	r6, #0
 800a050:	42a6      	cmp	r6, r4
 800a052:	d109      	bne.n	800a068 <__libc_init_array+0x24>
 800a054:	4d0b      	ldr	r5, [pc, #44]	; (800a084 <__libc_init_array+0x40>)
 800a056:	4c0c      	ldr	r4, [pc, #48]	; (800a088 <__libc_init_array+0x44>)
 800a058:	f000 f836 	bl	800a0c8 <_init>
 800a05c:	1b64      	subs	r4, r4, r5
 800a05e:	10a4      	asrs	r4, r4, #2
 800a060:	2600      	movs	r6, #0
 800a062:	42a6      	cmp	r6, r4
 800a064:	d105      	bne.n	800a072 <__libc_init_array+0x2e>
 800a066:	bd70      	pop	{r4, r5, r6, pc}
 800a068:	f855 3b04 	ldr.w	r3, [r5], #4
 800a06c:	4798      	blx	r3
 800a06e:	3601      	adds	r6, #1
 800a070:	e7ee      	b.n	800a050 <__libc_init_array+0xc>
 800a072:	f855 3b04 	ldr.w	r3, [r5], #4
 800a076:	4798      	blx	r3
 800a078:	3601      	adds	r6, #1
 800a07a:	e7f2      	b.n	800a062 <__libc_init_array+0x1e>
 800a07c:	0800a100 	.word	0x0800a100
 800a080:	0800a100 	.word	0x0800a100
 800a084:	0800a100 	.word	0x0800a100
 800a088:	0800a104 	.word	0x0800a104

0800a08c <memcpy>:
 800a08c:	440a      	add	r2, r1
 800a08e:	4291      	cmp	r1, r2
 800a090:	f100 33ff 	add.w	r3, r0, #4294967295
 800a094:	d100      	bne.n	800a098 <memcpy+0xc>
 800a096:	4770      	bx	lr
 800a098:	b510      	push	{r4, lr}
 800a09a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a09e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a0a2:	4291      	cmp	r1, r2
 800a0a4:	d1f9      	bne.n	800a09a <memcpy+0xe>
 800a0a6:	bd10      	pop	{r4, pc}

0800a0a8 <memset>:
 800a0a8:	4402      	add	r2, r0
 800a0aa:	4603      	mov	r3, r0
 800a0ac:	4293      	cmp	r3, r2
 800a0ae:	d100      	bne.n	800a0b2 <memset+0xa>
 800a0b0:	4770      	bx	lr
 800a0b2:	f803 1b01 	strb.w	r1, [r3], #1
 800a0b6:	e7f9      	b.n	800a0ac <memset+0x4>

0800a0b8 <strcpy>:
 800a0b8:	4603      	mov	r3, r0
 800a0ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a0be:	f803 2b01 	strb.w	r2, [r3], #1
 800a0c2:	2a00      	cmp	r2, #0
 800a0c4:	d1f9      	bne.n	800a0ba <strcpy+0x2>
 800a0c6:	4770      	bx	lr

0800a0c8 <_init>:
 800a0c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0ca:	bf00      	nop
 800a0cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a0ce:	bc08      	pop	{r3}
 800a0d0:	469e      	mov	lr, r3
 800a0d2:	4770      	bx	lr

0800a0d4 <_fini>:
 800a0d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0d6:	bf00      	nop
 800a0d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a0da:	bc08      	pop	{r3}
 800a0dc:	469e      	mov	lr, r3
 800a0de:	4770      	bx	lr
