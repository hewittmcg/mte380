
mte380.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ab50  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  0800ad20  0800ad20  0001ad20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ada0  0800ada0  000203a0  2**0
                  CONTENTS
  4 .ARM          00000008  0800ada0  0800ada0  0001ada0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ada8  0800ada8  000203a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ada8  0800ada8  0001ada8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800adac  0800adac  0001adac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003a0  20000000  0800adb0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004e0  200003a0  0800b150  000203a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000880  0800b150  00020880  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000203a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002209b  00000000  00000000  000203d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000032a3  00000000  00000000  0004246b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001928  00000000  00000000  00045710  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001818  00000000  00000000  00047038  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024f33  00000000  00000000  00048850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e90d  00000000  00000000  0006d783  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000decc4  00000000  00000000  0008c090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0016ad54  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000716c  00000000  00000000  0016ada8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200003a0 	.word	0x200003a0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800ad08 	.word	0x0800ad08

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200003a4 	.word	0x200003a4
 800020c:	0800ad08 	.word	0x0800ad08

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96e 	b.w	80005a4 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468c      	mov	ip, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	f040 8083 	bne.w	80003f6 <__udivmoddi4+0x116>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d947      	bls.n	8000386 <__udivmoddi4+0xa6>
 80002f6:	fab2 f282 	clz	r2, r2
 80002fa:	b142      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fc:	f1c2 0020 	rsb	r0, r2, #32
 8000300:	fa24 f000 	lsr.w	r0, r4, r0
 8000304:	4091      	lsls	r1, r2
 8000306:	4097      	lsls	r7, r2
 8000308:	ea40 0c01 	orr.w	ip, r0, r1
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbbc f6f8 	udiv	r6, ip, r8
 8000318:	fa1f fe87 	uxth.w	lr, r7
 800031c:	fb08 c116 	mls	r1, r8, r6, ip
 8000320:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000324:	fb06 f10e 	mul.w	r1, r6, lr
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000332:	f080 8119 	bcs.w	8000568 <__udivmoddi4+0x288>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8116 	bls.w	8000568 <__udivmoddi4+0x288>
 800033c:	3e02      	subs	r6, #2
 800033e:	443b      	add	r3, r7
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0f8 	udiv	r0, r3, r8
 8000348:	fb08 3310 	mls	r3, r8, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fe0e 	mul.w	lr, r0, lr
 8000354:	45a6      	cmp	lr, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	193c      	adds	r4, r7, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8105 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f240 8102 	bls.w	800056c <__udivmoddi4+0x28c>
 8000368:	3802      	subs	r0, #2
 800036a:	443c      	add	r4, r7
 800036c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000370:	eba4 040e 	sub.w	r4, r4, lr
 8000374:	2600      	movs	r6, #0
 8000376:	b11d      	cbz	r5, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c5 4300 	strd	r4, r3, [r5]
 8000380:	4631      	mov	r1, r6
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	b902      	cbnz	r2, 800038a <__udivmoddi4+0xaa>
 8000388:	deff      	udf	#255	; 0xff
 800038a:	fab2 f282 	clz	r2, r2
 800038e:	2a00      	cmp	r2, #0
 8000390:	d150      	bne.n	8000434 <__udivmoddi4+0x154>
 8000392:	1bcb      	subs	r3, r1, r7
 8000394:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000398:	fa1f f887 	uxth.w	r8, r7
 800039c:	2601      	movs	r6, #1
 800039e:	fbb3 fcfe 	udiv	ip, r3, lr
 80003a2:	0c21      	lsrs	r1, r4, #16
 80003a4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb08 f30c 	mul.w	r3, r8, ip
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0xe2>
 80003bc:	428b      	cmp	r3, r1
 80003be:	f200 80e9 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1ac9      	subs	r1, r1, r3
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003d0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x10c>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x10a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80d9 	bhi.w	800059c <__udivmoddi4+0x2bc>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e7bf      	b.n	8000376 <__udivmoddi4+0x96>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d909      	bls.n	800040e <__udivmoddi4+0x12e>
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	f000 80b1 	beq.w	8000562 <__udivmoddi4+0x282>
 8000400:	2600      	movs	r6, #0
 8000402:	e9c5 0100 	strd	r0, r1, [r5]
 8000406:	4630      	mov	r0, r6
 8000408:	4631      	mov	r1, r6
 800040a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040e:	fab3 f683 	clz	r6, r3
 8000412:	2e00      	cmp	r6, #0
 8000414:	d14a      	bne.n	80004ac <__udivmoddi4+0x1cc>
 8000416:	428b      	cmp	r3, r1
 8000418:	d302      	bcc.n	8000420 <__udivmoddi4+0x140>
 800041a:	4282      	cmp	r2, r0
 800041c:	f200 80b8 	bhi.w	8000590 <__udivmoddi4+0x2b0>
 8000420:	1a84      	subs	r4, r0, r2
 8000422:	eb61 0103 	sbc.w	r1, r1, r3
 8000426:	2001      	movs	r0, #1
 8000428:	468c      	mov	ip, r1
 800042a:	2d00      	cmp	r5, #0
 800042c:	d0a8      	beq.n	8000380 <__udivmoddi4+0xa0>
 800042e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000432:	e7a5      	b.n	8000380 <__udivmoddi4+0xa0>
 8000434:	f1c2 0320 	rsb	r3, r2, #32
 8000438:	fa20 f603 	lsr.w	r6, r0, r3
 800043c:	4097      	lsls	r7, r2
 800043e:	fa01 f002 	lsl.w	r0, r1, r2
 8000442:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000446:	40d9      	lsrs	r1, r3
 8000448:	4330      	orrs	r0, r6
 800044a:	0c03      	lsrs	r3, r0, #16
 800044c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000450:	fa1f f887 	uxth.w	r8, r7
 8000454:	fb0e 1116 	mls	r1, lr, r6, r1
 8000458:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800045c:	fb06 f108 	mul.w	r1, r6, r8
 8000460:	4299      	cmp	r1, r3
 8000462:	fa04 f402 	lsl.w	r4, r4, r2
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x19c>
 8000468:	18fb      	adds	r3, r7, r3
 800046a:	f106 3cff 	add.w	ip, r6, #4294967295
 800046e:	f080 808d 	bcs.w	800058c <__udivmoddi4+0x2ac>
 8000472:	4299      	cmp	r1, r3
 8000474:	f240 808a 	bls.w	800058c <__udivmoddi4+0x2ac>
 8000478:	3e02      	subs	r6, #2
 800047a:	443b      	add	r3, r7
 800047c:	1a5b      	subs	r3, r3, r1
 800047e:	b281      	uxth	r1, r0
 8000480:	fbb3 f0fe 	udiv	r0, r3, lr
 8000484:	fb0e 3310 	mls	r3, lr, r0, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb00 f308 	mul.w	r3, r0, r8
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0x1c4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f100 3cff 	add.w	ip, r0, #4294967295
 800049a:	d273      	bcs.n	8000584 <__udivmoddi4+0x2a4>
 800049c:	428b      	cmp	r3, r1
 800049e:	d971      	bls.n	8000584 <__udivmoddi4+0x2a4>
 80004a0:	3802      	subs	r0, #2
 80004a2:	4439      	add	r1, r7
 80004a4:	1acb      	subs	r3, r1, r3
 80004a6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004aa:	e778      	b.n	800039e <__udivmoddi4+0xbe>
 80004ac:	f1c6 0c20 	rsb	ip, r6, #32
 80004b0:	fa03 f406 	lsl.w	r4, r3, r6
 80004b4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004b8:	431c      	orrs	r4, r3
 80004ba:	fa20 f70c 	lsr.w	r7, r0, ip
 80004be:	fa01 f306 	lsl.w	r3, r1, r6
 80004c2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004c6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ca:	431f      	orrs	r7, r3
 80004cc:	0c3b      	lsrs	r3, r7, #16
 80004ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80004d2:	fa1f f884 	uxth.w	r8, r4
 80004d6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004da:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004de:	fb09 fa08 	mul.w	sl, r9, r8
 80004e2:	458a      	cmp	sl, r1
 80004e4:	fa02 f206 	lsl.w	r2, r2, r6
 80004e8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x220>
 80004ee:	1861      	adds	r1, r4, r1
 80004f0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004f4:	d248      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 80004f6:	458a      	cmp	sl, r1
 80004f8:	d946      	bls.n	8000588 <__udivmoddi4+0x2a8>
 80004fa:	f1a9 0902 	sub.w	r9, r9, #2
 80004fe:	4421      	add	r1, r4
 8000500:	eba1 010a 	sub.w	r1, r1, sl
 8000504:	b2bf      	uxth	r7, r7
 8000506:	fbb1 f0fe 	udiv	r0, r1, lr
 800050a:	fb0e 1110 	mls	r1, lr, r0, r1
 800050e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000512:	fb00 f808 	mul.w	r8, r0, r8
 8000516:	45b8      	cmp	r8, r7
 8000518:	d907      	bls.n	800052a <__udivmoddi4+0x24a>
 800051a:	19e7      	adds	r7, r4, r7
 800051c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000520:	d22e      	bcs.n	8000580 <__udivmoddi4+0x2a0>
 8000522:	45b8      	cmp	r8, r7
 8000524:	d92c      	bls.n	8000580 <__udivmoddi4+0x2a0>
 8000526:	3802      	subs	r0, #2
 8000528:	4427      	add	r7, r4
 800052a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800052e:	eba7 0708 	sub.w	r7, r7, r8
 8000532:	fba0 8902 	umull	r8, r9, r0, r2
 8000536:	454f      	cmp	r7, r9
 8000538:	46c6      	mov	lr, r8
 800053a:	4649      	mov	r1, r9
 800053c:	d31a      	bcc.n	8000574 <__udivmoddi4+0x294>
 800053e:	d017      	beq.n	8000570 <__udivmoddi4+0x290>
 8000540:	b15d      	cbz	r5, 800055a <__udivmoddi4+0x27a>
 8000542:	ebb3 020e 	subs.w	r2, r3, lr
 8000546:	eb67 0701 	sbc.w	r7, r7, r1
 800054a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800054e:	40f2      	lsrs	r2, r6
 8000550:	ea4c 0202 	orr.w	r2, ip, r2
 8000554:	40f7      	lsrs	r7, r6
 8000556:	e9c5 2700 	strd	r2, r7, [r5]
 800055a:	2600      	movs	r6, #0
 800055c:	4631      	mov	r1, r6
 800055e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e70b      	b.n	8000380 <__udivmoddi4+0xa0>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0x60>
 800056c:	4618      	mov	r0, r3
 800056e:	e6fd      	b.n	800036c <__udivmoddi4+0x8c>
 8000570:	4543      	cmp	r3, r8
 8000572:	d2e5      	bcs.n	8000540 <__udivmoddi4+0x260>
 8000574:	ebb8 0e02 	subs.w	lr, r8, r2
 8000578:	eb69 0104 	sbc.w	r1, r9, r4
 800057c:	3801      	subs	r0, #1
 800057e:	e7df      	b.n	8000540 <__udivmoddi4+0x260>
 8000580:	4608      	mov	r0, r1
 8000582:	e7d2      	b.n	800052a <__udivmoddi4+0x24a>
 8000584:	4660      	mov	r0, ip
 8000586:	e78d      	b.n	80004a4 <__udivmoddi4+0x1c4>
 8000588:	4681      	mov	r9, r0
 800058a:	e7b9      	b.n	8000500 <__udivmoddi4+0x220>
 800058c:	4666      	mov	r6, ip
 800058e:	e775      	b.n	800047c <__udivmoddi4+0x19c>
 8000590:	4630      	mov	r0, r6
 8000592:	e74a      	b.n	800042a <__udivmoddi4+0x14a>
 8000594:	f1ac 0c02 	sub.w	ip, ip, #2
 8000598:	4439      	add	r1, r7
 800059a:	e713      	b.n	80003c4 <__udivmoddi4+0xe4>
 800059c:	3802      	subs	r0, #2
 800059e:	443c      	add	r4, r7
 80005a0:	e724      	b.n	80003ec <__udivmoddi4+0x10c>
 80005a2:	bf00      	nop

080005a4 <__aeabi_idiv0>:
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop

080005a8 <set_motor_direction>:
// CCR register goes from 0 to 0xffff
#define SPEED_PERCENT_TO_CCR 0xffff

#define PERCENT_TO_DEC 100

bool set_motor_direction(MotorController *mc, MotorDir dir) {
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b082      	sub	sp, #8
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
 80005b0:	460b      	mov	r3, r1
 80005b2:	70fb      	strb	r3, [r7, #3]
	if(dir == MOTOR_DIR_FORWARD) {
 80005b4:	78fb      	ldrb	r3, [r7, #3]
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d112      	bne.n	80005e0 <set_motor_direction+0x38>
		HAL_GPIO_WritePin(mc->in1_pin.port, mc->in1_pin.pin, GPIO_PIN_RESET);
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	6858      	ldr	r0, [r3, #4]
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	b29b      	uxth	r3, r3
 80005c4:	2200      	movs	r2, #0
 80005c6:	4619      	mov	r1, r3
 80005c8:	f001 fc86 	bl	8001ed8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(mc->in2_pin.port, mc->in2_pin.pin, GPIO_PIN_SET);
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	68d8      	ldr	r0, [r3, #12]
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	689b      	ldr	r3, [r3, #8]
 80005d4:	b29b      	uxth	r3, r3
 80005d6:	2201      	movs	r2, #1
 80005d8:	4619      	mov	r1, r3
 80005da:	f001 fc7d 	bl	8001ed8 <HAL_GPIO_WritePin>
 80005de:	e02a      	b.n	8000636 <set_motor_direction+0x8e>
	} else if(dir == MOTOR_DIR_BACKWARD) {
 80005e0:	78fb      	ldrb	r3, [r7, #3]
 80005e2:	2b01      	cmp	r3, #1
 80005e4:	d112      	bne.n	800060c <set_motor_direction+0x64>
		HAL_GPIO_WritePin(mc->in1_pin.port, mc->in1_pin.pin, GPIO_PIN_SET);
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	6858      	ldr	r0, [r3, #4]
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	b29b      	uxth	r3, r3
 80005f0:	2201      	movs	r2, #1
 80005f2:	4619      	mov	r1, r3
 80005f4:	f001 fc70 	bl	8001ed8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(mc->in2_pin.port, mc->in2_pin.pin, GPIO_PIN_RESET);
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	68d8      	ldr	r0, [r3, #12]
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	689b      	ldr	r3, [r3, #8]
 8000600:	b29b      	uxth	r3, r3
 8000602:	2200      	movs	r2, #0
 8000604:	4619      	mov	r1, r3
 8000606:	f001 fc67 	bl	8001ed8 <HAL_GPIO_WritePin>
 800060a:	e014      	b.n	8000636 <set_motor_direction+0x8e>
	} else if(dir == MOTOR_DIR_OFF) {
 800060c:	78fb      	ldrb	r3, [r7, #3]
 800060e:	2b02      	cmp	r3, #2
 8000610:	d111      	bne.n	8000636 <set_motor_direction+0x8e>
		// TODO: Not sure if this is correct
		HAL_GPIO_WritePin(mc->in1_pin.port, mc->in1_pin.pin, GPIO_PIN_RESET);
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	6858      	ldr	r0, [r3, #4]
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	b29b      	uxth	r3, r3
 800061c:	2200      	movs	r2, #0
 800061e:	4619      	mov	r1, r3
 8000620:	f001 fc5a 	bl	8001ed8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(mc->in2_pin.port, mc->in2_pin.pin, GPIO_PIN_RESET);
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	68d8      	ldr	r0, [r3, #12]
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	689b      	ldr	r3, [r3, #8]
 800062c:	b29b      	uxth	r3, r3
 800062e:	2200      	movs	r2, #0
 8000630:	4619      	mov	r1, r3
 8000632:	f001 fc51 	bl	8001ed8 <HAL_GPIO_WritePin>
	}
	return true;
 8000636:	2301      	movs	r3, #1
}
 8000638:	4618      	mov	r0, r3
 800063a:	3708      	adds	r7, #8
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}

08000640 <set_motor_speed>:

bool set_motor_speed(MotorController *mc, uint8_t speed_percent) {
 8000640:	b480      	push	{r7}
 8000642:	b085      	sub	sp, #20
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
 8000648:	460b      	mov	r3, r1
 800064a:	70fb      	strb	r3, [r7, #3]
	if(speed_percent > 100) {
 800064c:	78fb      	ldrb	r3, [r7, #3]
 800064e:	2b64      	cmp	r3, #100	; 0x64
 8000650:	d901      	bls.n	8000656 <set_motor_speed+0x16>
		return false;
 8000652:	2300      	movs	r3, #0
 8000654:	e016      	b.n	8000684 <set_motor_speed+0x44>
	}
	// Get value to set CCR to
	uint16_t ccr_val = (uint16_t)((float)speed_percent / PERCENT_TO_DEC * SPEED_PERCENT_TO_CCR);
 8000656:	78fb      	ldrb	r3, [r7, #3]
 8000658:	ee07 3a90 	vmov	s15, r3
 800065c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000660:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8000690 <set_motor_speed+0x50>
 8000664:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000668:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8000694 <set_motor_speed+0x54>
 800066c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000670:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000674:	ee17 3a90 	vmov	r3, s15
 8000678:	81fb      	strh	r3, [r7, #14]
	*(mc->en_pin.ccr_ptr) = ccr_val;
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	699b      	ldr	r3, [r3, #24]
 800067e:	89fa      	ldrh	r2, [r7, #14]
 8000680:	601a      	str	r2, [r3, #0]
	
	return true;
 8000682:	2301      	movs	r3, #1
}
 8000684:	4618      	mov	r0, r3
 8000686:	3714      	adds	r7, #20
 8000688:	46bd      	mov	sp, r7
 800068a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068e:	4770      	bx	lr
 8000690:	42c80000 	.word	0x42c80000
 8000694:	477fff00 	.word	0x477fff00

08000698 <motor_init>:

bool motor_init(MotorController *mc) {
 8000698:	b580      	push	{r7, lr}
 800069a:	b082      	sub	sp, #8
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
	set_motor_direction(mc, MOTOR_DIR_OFF);
 80006a0:	2102      	movs	r1, #2
 80006a2:	6878      	ldr	r0, [r7, #4]
 80006a4:	f7ff ff80 	bl	80005a8 <set_motor_direction>

	HAL_TIM_PWM_Start(mc->en_pin.tim_handle, mc->en_pin.tim_channel);
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	691a      	ldr	r2, [r3, #16]
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	695b      	ldr	r3, [r3, #20]
 80006b0:	4619      	mov	r1, r3
 80006b2:	4610      	mov	r0, r2
 80006b4:	f003 fd7c 	bl	80041b0 <HAL_TIM_PWM_Start>
	return true;
 80006b8:	2301      	movs	r3, #1
}
 80006ba:	4618      	mov	r0, r3
 80006bc:	3708      	adds	r7, #8
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
	...

080006c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b084      	sub	sp, #16
 80006c8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006ca:	f001 f81b 	bl	8001704 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006ce:	f000 f927 	bl	8000920 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006d2:	f000 fc0d 	bl	8000ef0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80006d6:	f000 fbe1 	bl	8000e9c <MX_USART2_UART_Init>
  MX_FMPI2C1_Init();
 80006da:	f000 f9ad 	bl	8000a38 <MX_FMPI2C1_Init>
  MX_I2C1_Init();
 80006de:	f000 f9e1 	bl	8000aa4 <MX_I2C1_Init>
  MX_I2C2_Init();
 80006e2:	f000 fa0d 	bl	8000b00 <MX_I2C2_Init>
  MX_I2C3_Init();
 80006e6:	f000 fa39 	bl	8000b5c <MX_I2C3_Init>
  MX_SPI2_Init();
 80006ea:	f000 fa65 	bl	8000bb8 <MX_SPI2_Init>
  MX_TIM1_Init();
 80006ee:	f000 fa99 	bl	8000c24 <MX_TIM1_Init>
  MX_TIM8_Init();
 80006f2:	f000 fb4f 	bl	8000d94 <MX_TIM8_Init>

  /* USER CODE BEGIN 2 */
  // Initialize FR and FL motors (currently rear MC is untested)
  motor_init(&controllers[FRONT_LEFT_MOTOR]);
 80006f6:	487e      	ldr	r0, [pc, #504]	; (80008f0 <main+0x22c>)
 80006f8:	f7ff ffce 	bl	8000698 <motor_init>
  motor_init(&controllers[FRONT_RIGHT_MOTOR]);
 80006fc:	487d      	ldr	r0, [pc, #500]	; (80008f4 <main+0x230>)
 80006fe:	f7ff ffcb 	bl	8000698 <motor_init>

  set_motor_direction(&controllers[FRONT_RIGHT_MOTOR], MOTOR_DIR_FORWARD);
 8000702:	2100      	movs	r1, #0
 8000704:	487b      	ldr	r0, [pc, #492]	; (80008f4 <main+0x230>)
 8000706:	f7ff ff4f 	bl	80005a8 <set_motor_direction>
  set_motor_direction(&controllers[FRONT_LEFT_MOTOR], MOTOR_DIR_FORWARD);
 800070a:	2100      	movs	r1, #0
 800070c:	4878      	ldr	r0, [pc, #480]	; (80008f0 <main+0x22c>)
 800070e:	f7ff ff4b 	bl	80005a8 <set_motor_direction>
  
//   ERFAN --- TOF STUFF
  MessageLen = sprintf((char*)Message, "msalamon.pl VL53L0X test\n\r");
 8000712:	4979      	ldr	r1, [pc, #484]	; (80008f8 <main+0x234>)
 8000714:	4879      	ldr	r0, [pc, #484]	; (80008fc <main+0x238>)
 8000716:	f009 fecf 	bl	800a4b8 <siprintf>
 800071a:	4603      	mov	r3, r0
 800071c:	b2da      	uxtb	r2, r3
 800071e:	4b78      	ldr	r3, [pc, #480]	; (8000900 <main+0x23c>)
 8000720:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart2, Message, MessageLen, 100);
 8000722:	4b77      	ldr	r3, [pc, #476]	; (8000900 <main+0x23c>)
 8000724:	781b      	ldrb	r3, [r3, #0]
 8000726:	b29a      	uxth	r2, r3
 8000728:	2364      	movs	r3, #100	; 0x64
 800072a:	4974      	ldr	r1, [pc, #464]	; (80008fc <main+0x238>)
 800072c:	4875      	ldr	r0, [pc, #468]	; (8000904 <main+0x240>)
 800072e:	f004 fbbc 	bl	8004eaa <HAL_UART_Transmit>

	Dev->I2cHandle = &hi2c1;
 8000732:	4b75      	ldr	r3, [pc, #468]	; (8000908 <main+0x244>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	4a75      	ldr	r2, [pc, #468]	; (800090c <main+0x248>)
 8000738:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
	Dev->I2cDevAddr = 0x52;
 800073c:	4b72      	ldr	r3, [pc, #456]	; (8000908 <main+0x244>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	2252      	movs	r2, #82	; 0x52
 8000742:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160

	HAL_GPIO_WritePin(TOF_XSHUT_GPIO_Port, TOF_XSHUT_Pin, GPIO_PIN_RESET); // Disable XSHUT
 8000746:	2200      	movs	r2, #0
 8000748:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800074c:	4870      	ldr	r0, [pc, #448]	; (8000910 <main+0x24c>)
 800074e:	f001 fbc3 	bl	8001ed8 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8000752:	2014      	movs	r0, #20
 8000754:	f001 f848 	bl	80017e8 <HAL_Delay>
	HAL_GPIO_WritePin(TOF_XSHUT_GPIO_Port, TOF_XSHUT_Pin, GPIO_PIN_SET); // Enable XSHUT
 8000758:	2201      	movs	r2, #1
 800075a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800075e:	486c      	ldr	r0, [pc, #432]	; (8000910 <main+0x24c>)
 8000760:	f001 fbba 	bl	8001ed8 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8000764:	2014      	movs	r0, #20
 8000766:	f001 f83f 	bl	80017e8 <HAL_Delay>

	//
	// VL53L0X init for Single Measurement
	//

	VL53L0X_WaitDeviceBooted( Dev );
 800076a:	4b67      	ldr	r3, [pc, #412]	; (8000908 <main+0x244>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	4618      	mov	r0, r3
 8000770:	f005 f95e 	bl	8005a30 <VL53L0X_WaitDeviceBooted>
	VL53L0X_DataInit( Dev );
 8000774:	4b64      	ldr	r3, [pc, #400]	; (8000908 <main+0x244>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	4618      	mov	r0, r3
 800077a:	f004 fe73 	bl	8005464 <VL53L0X_DataInit>
	VL53L0X_StaticInit( Dev );
 800077e:	4b62      	ldr	r3, [pc, #392]	; (8000908 <main+0x244>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	4618      	mov	r0, r3
 8000784:	f004 ffd2 	bl	800572c <VL53L0X_StaticInit>
	VL53L0X_PerformRefCalibration(Dev, &VhvSettings, &PhaseCal);
 8000788:	4b5f      	ldr	r3, [pc, #380]	; (8000908 <main+0x244>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	1c7a      	adds	r2, r7, #1
 800078e:	1cb9      	adds	r1, r7, #2
 8000790:	4618      	mov	r0, r3
 8000792:	f005 fe6d 	bl	8006470 <VL53L0X_PerformRefCalibration>
	VL53L0X_PerformRefSpadManagement(Dev, &refSpadCount, &isApertureSpads);
 8000796:	4b5c      	ldr	r3, [pc, #368]	; (8000908 <main+0x244>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	1cfa      	adds	r2, r7, #3
 800079c:	1d39      	adds	r1, r7, #4
 800079e:	4618      	mov	r0, r3
 80007a0:	f006 faf4 	bl	8006d8c <VL53L0X_PerformRefSpadManagement>
	VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 80007a4:	4b58      	ldr	r3, [pc, #352]	; (8000908 <main+0x244>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	2100      	movs	r1, #0
 80007aa:	4618      	mov	r0, r3
 80007ac:	f005 f9de 	bl	8005b6c <VL53L0X_SetDeviceMode>

	// Enable/Disable Sigma and Signal check
	VL53L0X_SetLimitCheckEnable(Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, 1);
 80007b0:	4b55      	ldr	r3, [pc, #340]	; (8000908 <main+0x244>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	2201      	movs	r2, #1
 80007b6:	2100      	movs	r1, #0
 80007b8:	4618      	mov	r0, r3
 80007ba:	f005 fc53 	bl	8006064 <VL53L0X_SetLimitCheckEnable>
	VL53L0X_SetLimitCheckEnable(Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, 1);
 80007be:	4b52      	ldr	r3, [pc, #328]	; (8000908 <main+0x244>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	2201      	movs	r2, #1
 80007c4:	2101      	movs	r1, #1
 80007c6:	4618      	mov	r0, r3
 80007c8:	f005 fc4c 	bl	8006064 <VL53L0X_SetLimitCheckEnable>
	VL53L0X_SetLimitCheckValue(Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, (FixPoint1616_t)(0.1*65536));
 80007cc:	4b4e      	ldr	r3, [pc, #312]	; (8000908 <main+0x244>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	f641 1299 	movw	r2, #6553	; 0x1999
 80007d4:	2101      	movs	r1, #1
 80007d6:	4618      	mov	r0, r3
 80007d8:	f005 fcf4 	bl	80061c4 <VL53L0X_SetLimitCheckValue>
	VL53L0X_SetLimitCheckValue(Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, (FixPoint1616_t)(60*65536));
 80007dc:	4b4a      	ldr	r3, [pc, #296]	; (8000908 <main+0x244>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80007e4:	2100      	movs	r1, #0
 80007e6:	4618      	mov	r0, r3
 80007e8:	f005 fcec 	bl	80061c4 <VL53L0X_SetLimitCheckValue>
	VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev, 33000);
 80007ec:	4b46      	ldr	r3, [pc, #280]	; (8000908 <main+0x244>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	f248 01e8 	movw	r1, #33000	; 0x80e8
 80007f4:	4618      	mov	r0, r3
 80007f6:	f005 fa17 	bl	8005c28 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
	VL53L0X_SetVcselPulsePeriod(Dev, VL53L0X_VCSEL_PERIOD_PRE_RANGE, 18);
 80007fa:	4b43      	ldr	r3, [pc, #268]	; (8000908 <main+0x244>)
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	2212      	movs	r2, #18
 8000800:	2100      	movs	r1, #0
 8000802:	4618      	mov	r0, r3
 8000804:	f005 fa36 	bl	8005c74 <VL53L0X_SetVcselPulsePeriod>
	VL53L0X_SetVcselPulsePeriod(Dev, VL53L0X_VCSEL_PERIOD_FINAL_RANGE, 14);
 8000808:	4b3f      	ldr	r3, [pc, #252]	; (8000908 <main+0x244>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	220e      	movs	r2, #14
 800080e:	2101      	movs	r1, #1
 8000810:	4618      	mov	r0, r3
 8000812:	f005 fa2f 	bl	8005c74 <VL53L0X_SetVcselPulsePeriod>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	VL53L0X_PerformSingleRangingMeasurement(Dev, &RangingData);
 8000816:	4b3c      	ldr	r3, [pc, #240]	; (8000908 <main+0x244>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	493e      	ldr	r1, [pc, #248]	; (8000914 <main+0x250>)
 800081c:	4618      	mov	r0, r3
 800081e:	f006 f8c9 	bl	80069b4 <VL53L0X_PerformSingleRangingMeasurement>

	if(RangingData.RangeStatus == 0)
 8000822:	4b3c      	ldr	r3, [pc, #240]	; (8000914 <main+0x250>)
 8000824:	7e1b      	ldrb	r3, [r3, #24]
 8000826:	2b00      	cmp	r3, #0
 8000828:	d112      	bne.n	8000850 <main+0x18c>
	{
	  MessageLen = sprintf((char*)Message, "Measured distance: %i\n\r", RangingData.RangeMilliMeter);
 800082a:	4b3a      	ldr	r3, [pc, #232]	; (8000914 <main+0x250>)
 800082c:	891b      	ldrh	r3, [r3, #8]
 800082e:	461a      	mov	r2, r3
 8000830:	4939      	ldr	r1, [pc, #228]	; (8000918 <main+0x254>)
 8000832:	4832      	ldr	r0, [pc, #200]	; (80008fc <main+0x238>)
 8000834:	f009 fe40 	bl	800a4b8 <siprintf>
 8000838:	4603      	mov	r3, r0
 800083a:	b2da      	uxtb	r2, r3
 800083c:	4b30      	ldr	r3, [pc, #192]	; (8000900 <main+0x23c>)
 800083e:	701a      	strb	r2, [r3, #0]
	  HAL_UART_Transmit(&huart2, Message, MessageLen, 100);
 8000840:	4b2f      	ldr	r3, [pc, #188]	; (8000900 <main+0x23c>)
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	b29a      	uxth	r2, r3
 8000846:	2364      	movs	r3, #100	; 0x64
 8000848:	492c      	ldr	r1, [pc, #176]	; (80008fc <main+0x238>)
 800084a:	482e      	ldr	r0, [pc, #184]	; (8000904 <main+0x240>)
 800084c:	f004 fb2d 	bl	8004eaa <HAL_UART_Transmit>
	}
    for(int i = 0; i <= 1000; i++) {
 8000850:	2300      	movs	r3, #0
 8000852:	60fb      	str	r3, [r7, #12]
 8000854:	e01d      	b.n	8000892 <main+0x1ce>
      set_motor_speed(&controllers[FRONT_RIGHT_MOTOR], i / 10);
 8000856:	68fb      	ldr	r3, [r7, #12]
 8000858:	4a30      	ldr	r2, [pc, #192]	; (800091c <main+0x258>)
 800085a:	fb82 1203 	smull	r1, r2, r2, r3
 800085e:	1092      	asrs	r2, r2, #2
 8000860:	17db      	asrs	r3, r3, #31
 8000862:	1ad3      	subs	r3, r2, r3
 8000864:	b2db      	uxtb	r3, r3
 8000866:	4619      	mov	r1, r3
 8000868:	4822      	ldr	r0, [pc, #136]	; (80008f4 <main+0x230>)
 800086a:	f7ff fee9 	bl	8000640 <set_motor_speed>
      set_motor_speed(&controllers[FRONT_LEFT_MOTOR], i / 10);
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	4a2a      	ldr	r2, [pc, #168]	; (800091c <main+0x258>)
 8000872:	fb82 1203 	smull	r1, r2, r2, r3
 8000876:	1092      	asrs	r2, r2, #2
 8000878:	17db      	asrs	r3, r3, #31
 800087a:	1ad3      	subs	r3, r2, r3
 800087c:	b2db      	uxtb	r3, r3
 800087e:	4619      	mov	r1, r3
 8000880:	481b      	ldr	r0, [pc, #108]	; (80008f0 <main+0x22c>)
 8000882:	f7ff fedd 	bl	8000640 <set_motor_speed>
      HAL_Delay(5);
 8000886:	2005      	movs	r0, #5
 8000888:	f000 ffae 	bl	80017e8 <HAL_Delay>
    for(int i = 0; i <= 1000; i++) {
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	3301      	adds	r3, #1
 8000890:	60fb      	str	r3, [r7, #12]
 8000892:	68fb      	ldr	r3, [r7, #12]
 8000894:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000898:	dddd      	ble.n	8000856 <main+0x192>
    }

    for(int i = 0; i <= 1000; i++) {
 800089a:	2300      	movs	r3, #0
 800089c:	60bb      	str	r3, [r7, #8]
 800089e:	e021      	b.n	80008e4 <main+0x220>
	  set_motor_speed(&controllers[FRONT_RIGHT_MOTOR], (1000 - i) / 10);
 80008a0:	68bb      	ldr	r3, [r7, #8]
 80008a2:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 80008a6:	4a1d      	ldr	r2, [pc, #116]	; (800091c <main+0x258>)
 80008a8:	fb82 1203 	smull	r1, r2, r2, r3
 80008ac:	1092      	asrs	r2, r2, #2
 80008ae:	17db      	asrs	r3, r3, #31
 80008b0:	1ad3      	subs	r3, r2, r3
 80008b2:	b2db      	uxtb	r3, r3
 80008b4:	4619      	mov	r1, r3
 80008b6:	480f      	ldr	r0, [pc, #60]	; (80008f4 <main+0x230>)
 80008b8:	f7ff fec2 	bl	8000640 <set_motor_speed>
	  set_motor_speed(&controllers[FRONT_LEFT_MOTOR], (1000 - i) / 10);
 80008bc:	68bb      	ldr	r3, [r7, #8]
 80008be:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 80008c2:	4a16      	ldr	r2, [pc, #88]	; (800091c <main+0x258>)
 80008c4:	fb82 1203 	smull	r1, r2, r2, r3
 80008c8:	1092      	asrs	r2, r2, #2
 80008ca:	17db      	asrs	r3, r3, #31
 80008cc:	1ad3      	subs	r3, r2, r3
 80008ce:	b2db      	uxtb	r3, r3
 80008d0:	4619      	mov	r1, r3
 80008d2:	4807      	ldr	r0, [pc, #28]	; (80008f0 <main+0x22c>)
 80008d4:	f7ff feb4 	bl	8000640 <set_motor_speed>
	  HAL_Delay(5);
 80008d8:	2005      	movs	r0, #5
 80008da:	f000 ff85 	bl	80017e8 <HAL_Delay>
    for(int i = 0; i <= 1000; i++) {
 80008de:	68bb      	ldr	r3, [r7, #8]
 80008e0:	3301      	adds	r3, #1
 80008e2:	60bb      	str	r3, [r7, #8]
 80008e4:	68bb      	ldr	r3, [r7, #8]
 80008e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80008ea:	ddd9      	ble.n	80008a0 <main+0x1dc>
	VL53L0X_PerformSingleRangingMeasurement(Dev, &RangingData);
 80008ec:	e793      	b.n	8000816 <main+0x152>
 80008ee:	bf00      	nop
 80008f0:	20000004 	.word	0x20000004
 80008f4:	20000020 	.word	0x20000020
 80008f8:	0800ad20 	.word	0x0800ad20
 80008fc:	20000584 	.word	0x20000584
 8000900:	20000580 	.word	0x20000580
 8000904:	200007e8 	.word	0x200007e8
 8000908:	20000000 	.word	0x20000000
 800090c:	200004d8 	.word	0x200004d8
 8000910:	40020000 	.word	0x40020000
 8000914:	20000474 	.word	0x20000474
 8000918:	0800ad3c 	.word	0x0800ad3c
 800091c:	66666667 	.word	0x66666667

08000920 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b0ac      	sub	sp, #176	; 0xb0
 8000924:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000926:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800092a:	2234      	movs	r2, #52	; 0x34
 800092c:	2100      	movs	r1, #0
 800092e:	4618      	mov	r0, r3
 8000930:	f009 fdba 	bl	800a4a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000934:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000938:	2200      	movs	r2, #0
 800093a:	601a      	str	r2, [r3, #0]
 800093c:	605a      	str	r2, [r3, #4]
 800093e:	609a      	str	r2, [r3, #8]
 8000940:	60da      	str	r2, [r3, #12]
 8000942:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000944:	f107 030c 	add.w	r3, r7, #12
 8000948:	225c      	movs	r2, #92	; 0x5c
 800094a:	2100      	movs	r1, #0
 800094c:	4618      	mov	r0, r3
 800094e:	f009 fdab 	bl	800a4a8 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000952:	2300      	movs	r3, #0
 8000954:	60bb      	str	r3, [r7, #8]
 8000956:	4b36      	ldr	r3, [pc, #216]	; (8000a30 <SystemClock_Config+0x110>)
 8000958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800095a:	4a35      	ldr	r2, [pc, #212]	; (8000a30 <SystemClock_Config+0x110>)
 800095c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000960:	6413      	str	r3, [r2, #64]	; 0x40
 8000962:	4b33      	ldr	r3, [pc, #204]	; (8000a30 <SystemClock_Config+0x110>)
 8000964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000966:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800096a:	60bb      	str	r3, [r7, #8]
 800096c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800096e:	2300      	movs	r3, #0
 8000970:	607b      	str	r3, [r7, #4]
 8000972:	4b30      	ldr	r3, [pc, #192]	; (8000a34 <SystemClock_Config+0x114>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800097a:	4a2e      	ldr	r2, [pc, #184]	; (8000a34 <SystemClock_Config+0x114>)
 800097c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000980:	6013      	str	r3, [r2, #0]
 8000982:	4b2c      	ldr	r3, [pc, #176]	; (8000a34 <SystemClock_Config+0x114>)
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800098a:	607b      	str	r3, [r7, #4]
 800098c:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800098e:	2302      	movs	r3, #2
 8000990:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000992:	2301      	movs	r3, #1
 8000994:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000998:	2310      	movs	r3, #16
 800099a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800099e:	2302      	movs	r3, #2
 80009a0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009a4:	2300      	movs	r3, #0
 80009a6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 16;
 80009aa:	2310      	movs	r3, #16
 80009ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80009b0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80009b4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80009b8:	2304      	movs	r3, #4
 80009ba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80009be:	2302      	movs	r3, #2
 80009c0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = 2;
 80009c4:	2302      	movs	r3, #2
 80009c6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009ca:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80009ce:	4618      	mov	r0, r3
 80009d0:	f003 f828 	bl	8003a24 <HAL_RCC_OscConfig>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80009da:	f000 fb25 	bl	8001028 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009de:	230f      	movs	r3, #15
 80009e0:	66bb      	str	r3, [r7, #104]	; 0x68
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009e2:	2302      	movs	r3, #2
 80009e4:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009e6:	2300      	movs	r3, #0
 80009e8:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009ee:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009f0:	2300      	movs	r3, #0
 80009f2:	67bb      	str	r3, [r7, #120]	; 0x78

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009f4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80009f8:	2102      	movs	r1, #2
 80009fa:	4618      	mov	r0, r3
 80009fc:	f002 fa1c 	bl	8002e38 <HAL_RCC_ClockConfig>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <SystemClock_Config+0xea>
  {
    Error_Handler();
 8000a06:	f000 fb0f 	bl	8001028 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMPI2C1;
 8000a0a:	2380      	movs	r3, #128	; 0x80
 8000a0c:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Fmpi2c1ClockSelection = RCC_FMPI2C1CLKSOURCE_APB;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a12:	f107 030c 	add.w	r3, r7, #12
 8000a16:	4618      	mov	r0, r3
 8000a18:	f002 fb28 	bl	800306c <HAL_RCCEx_PeriphCLKConfig>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <SystemClock_Config+0x106>
  {
    Error_Handler();
 8000a22:	f000 fb01 	bl	8001028 <Error_Handler>
  }
}
 8000a26:	bf00      	nop
 8000a28:	37b0      	adds	r7, #176	; 0xb0
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	40023800 	.word	0x40023800
 8000a34:	40007000 	.word	0x40007000

08000a38 <MX_FMPI2C1_Init>:
  * @brief FMPI2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FMPI2C1_Init(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE END FMPI2C1_Init 0 */

  /* USER CODE BEGIN FMPI2C1_Init 1 */

  /* USER CODE END FMPI2C1_Init 1 */
  hfmpi2c1.Instance = FMPI2C1;
 8000a3c:	4b16      	ldr	r3, [pc, #88]	; (8000a98 <MX_FMPI2C1_Init+0x60>)
 8000a3e:	4a17      	ldr	r2, [pc, #92]	; (8000a9c <MX_FMPI2C1_Init+0x64>)
 8000a40:	601a      	str	r2, [r3, #0]
  hfmpi2c1.Init.Timing = 0x00A0A3F7;
 8000a42:	4b15      	ldr	r3, [pc, #84]	; (8000a98 <MX_FMPI2C1_Init+0x60>)
 8000a44:	4a16      	ldr	r2, [pc, #88]	; (8000aa0 <MX_FMPI2C1_Init+0x68>)
 8000a46:	605a      	str	r2, [r3, #4]
  hfmpi2c1.Init.OwnAddress1 = 0;
 8000a48:	4b13      	ldr	r3, [pc, #76]	; (8000a98 <MX_FMPI2C1_Init+0x60>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	609a      	str	r2, [r3, #8]
  hfmpi2c1.Init.AddressingMode = FMPI2C_ADDRESSINGMODE_7BIT;
 8000a4e:	4b12      	ldr	r3, [pc, #72]	; (8000a98 <MX_FMPI2C1_Init+0x60>)
 8000a50:	2201      	movs	r2, #1
 8000a52:	60da      	str	r2, [r3, #12]
  hfmpi2c1.Init.DualAddressMode = FMPI2C_DUALADDRESS_DISABLE;
 8000a54:	4b10      	ldr	r3, [pc, #64]	; (8000a98 <MX_FMPI2C1_Init+0x60>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	611a      	str	r2, [r3, #16]
  hfmpi2c1.Init.OwnAddress2 = 0;
 8000a5a:	4b0f      	ldr	r3, [pc, #60]	; (8000a98 <MX_FMPI2C1_Init+0x60>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	615a      	str	r2, [r3, #20]
  hfmpi2c1.Init.OwnAddress2Masks = FMPI2C_OA2_NOMASK;
 8000a60:	4b0d      	ldr	r3, [pc, #52]	; (8000a98 <MX_FMPI2C1_Init+0x60>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	619a      	str	r2, [r3, #24]
  hfmpi2c1.Init.GeneralCallMode = FMPI2C_GENERALCALL_DISABLE;
 8000a66:	4b0c      	ldr	r3, [pc, #48]	; (8000a98 <MX_FMPI2C1_Init+0x60>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	61da      	str	r2, [r3, #28]
  hfmpi2c1.Init.NoStretchMode = FMPI2C_NOSTRETCH_DISABLE;
 8000a6c:	4b0a      	ldr	r3, [pc, #40]	; (8000a98 <MX_FMPI2C1_Init+0x60>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	621a      	str	r2, [r3, #32]
  if (HAL_FMPI2C_Init(&hfmpi2c1) != HAL_OK)
 8000a72:	4809      	ldr	r0, [pc, #36]	; (8000a98 <MX_FMPI2C1_Init+0x60>)
 8000a74:	f000 ffc1 	bl	80019fa <HAL_FMPI2C_Init>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <MX_FMPI2C1_Init+0x4a>
  {
    Error_Handler();
 8000a7e:	f000 fad3 	bl	8001028 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_FMPI2CEx_ConfigAnalogFilter(&hfmpi2c1, FMPI2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a82:	2100      	movs	r1, #0
 8000a84:	4804      	ldr	r0, [pc, #16]	; (8000a98 <MX_FMPI2C1_Init+0x60>)
 8000a86:	f001 f847 	bl	8001b18 <HAL_FMPI2CEx_ConfigAnalogFilter>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d001      	beq.n	8000a94 <MX_FMPI2C1_Init+0x5c>
  {
    Error_Handler();
 8000a90:	f000 faca 	bl	8001028 <Error_Handler>
  }
  /* USER CODE BEGIN FMPI2C1_Init 2 */

  /* USER CODE END FMPI2C1_Init 2 */

}
 8000a94:	bf00      	nop
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	200005c4 	.word	0x200005c4
 8000a9c:	40006000 	.word	0x40006000
 8000aa0:	00a0a3f7 	.word	0x00a0a3f7

08000aa4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000aa8:	4b12      	ldr	r3, [pc, #72]	; (8000af4 <MX_I2C1_Init+0x50>)
 8000aaa:	4a13      	ldr	r2, [pc, #76]	; (8000af8 <MX_I2C1_Init+0x54>)
 8000aac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000aae:	4b11      	ldr	r3, [pc, #68]	; (8000af4 <MX_I2C1_Init+0x50>)
 8000ab0:	4a12      	ldr	r2, [pc, #72]	; (8000afc <MX_I2C1_Init+0x58>)
 8000ab2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ab4:	4b0f      	ldr	r3, [pc, #60]	; (8000af4 <MX_I2C1_Init+0x50>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000aba:	4b0e      	ldr	r3, [pc, #56]	; (8000af4 <MX_I2C1_Init+0x50>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ac0:	4b0c      	ldr	r3, [pc, #48]	; (8000af4 <MX_I2C1_Init+0x50>)
 8000ac2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ac6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ac8:	4b0a      	ldr	r3, [pc, #40]	; (8000af4 <MX_I2C1_Init+0x50>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000ace:	4b09      	ldr	r3, [pc, #36]	; (8000af4 <MX_I2C1_Init+0x50>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ad4:	4b07      	ldr	r3, [pc, #28]	; (8000af4 <MX_I2C1_Init+0x50>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ada:	4b06      	ldr	r3, [pc, #24]	; (8000af4 <MX_I2C1_Init+0x50>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ae0:	4804      	ldr	r0, [pc, #16]	; (8000af4 <MX_I2C1_Init+0x50>)
 8000ae2:	f001 fa13 	bl	8001f0c <HAL_I2C_Init>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000aec:	f000 fa9c 	bl	8001028 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000af0:	bf00      	nop
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	200004d8 	.word	0x200004d8
 8000af8:	40005400 	.word	0x40005400
 8000afc:	000186a0 	.word	0x000186a0

08000b00 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000b04:	4b12      	ldr	r3, [pc, #72]	; (8000b50 <MX_I2C2_Init+0x50>)
 8000b06:	4a13      	ldr	r2, [pc, #76]	; (8000b54 <MX_I2C2_Init+0x54>)
 8000b08:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000b0a:	4b11      	ldr	r3, [pc, #68]	; (8000b50 <MX_I2C2_Init+0x50>)
 8000b0c:	4a12      	ldr	r2, [pc, #72]	; (8000b58 <MX_I2C2_Init+0x58>)
 8000b0e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b10:	4b0f      	ldr	r3, [pc, #60]	; (8000b50 <MX_I2C2_Init+0x50>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000b16:	4b0e      	ldr	r3, [pc, #56]	; (8000b50 <MX_I2C2_Init+0x50>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b1c:	4b0c      	ldr	r3, [pc, #48]	; (8000b50 <MX_I2C2_Init+0x50>)
 8000b1e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b22:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b24:	4b0a      	ldr	r3, [pc, #40]	; (8000b50 <MX_I2C2_Init+0x50>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000b2a:	4b09      	ldr	r3, [pc, #36]	; (8000b50 <MX_I2C2_Init+0x50>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b30:	4b07      	ldr	r3, [pc, #28]	; (8000b50 <MX_I2C2_Init+0x50>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b36:	4b06      	ldr	r3, [pc, #24]	; (8000b50 <MX_I2C2_Init+0x50>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000b3c:	4804      	ldr	r0, [pc, #16]	; (8000b50 <MX_I2C2_Init+0x50>)
 8000b3e:	f001 f9e5 	bl	8001f0c <HAL_I2C_Init>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d001      	beq.n	8000b4c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000b48:	f000 fa6e 	bl	8001028 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000b4c:	bf00      	nop
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	2000052c 	.word	0x2000052c
 8000b54:	40005800 	.word	0x40005800
 8000b58:	000186a0 	.word	0x000186a0

08000b5c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000b60:	4b12      	ldr	r3, [pc, #72]	; (8000bac <MX_I2C3_Init+0x50>)
 8000b62:	4a13      	ldr	r2, [pc, #76]	; (8000bb0 <MX_I2C3_Init+0x54>)
 8000b64:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000b66:	4b11      	ldr	r3, [pc, #68]	; (8000bac <MX_I2C3_Init+0x50>)
 8000b68:	4a12      	ldr	r2, [pc, #72]	; (8000bb4 <MX_I2C3_Init+0x58>)
 8000b6a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b6c:	4b0f      	ldr	r3, [pc, #60]	; (8000bac <MX_I2C3_Init+0x50>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000b72:	4b0e      	ldr	r3, [pc, #56]	; (8000bac <MX_I2C3_Init+0x50>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b78:	4b0c      	ldr	r3, [pc, #48]	; (8000bac <MX_I2C3_Init+0x50>)
 8000b7a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b7e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b80:	4b0a      	ldr	r3, [pc, #40]	; (8000bac <MX_I2C3_Init+0x50>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000b86:	4b09      	ldr	r3, [pc, #36]	; (8000bac <MX_I2C3_Init+0x50>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b8c:	4b07      	ldr	r3, [pc, #28]	; (8000bac <MX_I2C3_Init+0x50>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b92:	4b06      	ldr	r3, [pc, #24]	; (8000bac <MX_I2C3_Init+0x50>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000b98:	4804      	ldr	r0, [pc, #16]	; (8000bac <MX_I2C3_Init+0x50>)
 8000b9a:	f001 f9b7 	bl	8001f0c <HAL_I2C_Init>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000ba4:	f000 fa40 	bl	8001028 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000ba8:	bf00      	nop
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	200003c8 	.word	0x200003c8
 8000bb0:	40005c00 	.word	0x40005c00
 8000bb4:	000186a0 	.word	0x000186a0

08000bb8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000bbc:	4b17      	ldr	r3, [pc, #92]	; (8000c1c <MX_SPI2_Init+0x64>)
 8000bbe:	4a18      	ldr	r2, [pc, #96]	; (8000c20 <MX_SPI2_Init+0x68>)
 8000bc0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000bc2:	4b16      	ldr	r3, [pc, #88]	; (8000c1c <MX_SPI2_Init+0x64>)
 8000bc4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000bc8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000bca:	4b14      	ldr	r3, [pc, #80]	; (8000c1c <MX_SPI2_Init+0x64>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000bd0:	4b12      	ldr	r3, [pc, #72]	; (8000c1c <MX_SPI2_Init+0x64>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000bd6:	4b11      	ldr	r3, [pc, #68]	; (8000c1c <MX_SPI2_Init+0x64>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000bdc:	4b0f      	ldr	r3, [pc, #60]	; (8000c1c <MX_SPI2_Init+0x64>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000be2:	4b0e      	ldr	r3, [pc, #56]	; (8000c1c <MX_SPI2_Init+0x64>)
 8000be4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000be8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000bea:	4b0c      	ldr	r3, [pc, #48]	; (8000c1c <MX_SPI2_Init+0x64>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000bf0:	4b0a      	ldr	r3, [pc, #40]	; (8000c1c <MX_SPI2_Init+0x64>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000bf6:	4b09      	ldr	r3, [pc, #36]	; (8000c1c <MX_SPI2_Init+0x64>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000bfc:	4b07      	ldr	r3, [pc, #28]	; (8000c1c <MX_SPI2_Init+0x64>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000c02:	4b06      	ldr	r3, [pc, #24]	; (8000c1c <MX_SPI2_Init+0x64>)
 8000c04:	220a      	movs	r2, #10
 8000c06:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000c08:	4804      	ldr	r0, [pc, #16]	; (8000c1c <MX_SPI2_Init+0x64>)
 8000c0a:	f003 f9a9 	bl	8003f60 <HAL_SPI_Init>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d001      	beq.n	8000c18 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000c14:	f000 fa08 	bl	8001028 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000c18:	bf00      	nop
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	2000041c 	.word	0x2000041c
 8000c20:	40003800 	.word	0x40003800

08000c24 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b096      	sub	sp, #88	; 0x58
 8000c28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c2a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000c2e:	2200      	movs	r2, #0
 8000c30:	601a      	str	r2, [r3, #0]
 8000c32:	605a      	str	r2, [r3, #4]
 8000c34:	609a      	str	r2, [r3, #8]
 8000c36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c38:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	601a      	str	r2, [r3, #0]
 8000c40:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c46:	2200      	movs	r2, #0
 8000c48:	601a      	str	r2, [r3, #0]
 8000c4a:	605a      	str	r2, [r3, #4]
 8000c4c:	609a      	str	r2, [r3, #8]
 8000c4e:	60da      	str	r2, [r3, #12]
 8000c50:	611a      	str	r2, [r3, #16]
 8000c52:	615a      	str	r2, [r3, #20]
 8000c54:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000c56:	1d3b      	adds	r3, r7, #4
 8000c58:	2220      	movs	r2, #32
 8000c5a:	2100      	movs	r1, #0
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f009 fc23 	bl	800a4a8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000c62:	4b4a      	ldr	r3, [pc, #296]	; (8000d8c <MX_TIM1_Init+0x168>)
 8000c64:	4a4a      	ldr	r2, [pc, #296]	; (8000d90 <MX_TIM1_Init+0x16c>)
 8000c66:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000c68:	4b48      	ldr	r3, [pc, #288]	; (8000d8c <MX_TIM1_Init+0x168>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c6e:	4b47      	ldr	r3, [pc, #284]	; (8000d8c <MX_TIM1_Init+0x168>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000c74:	4b45      	ldr	r3, [pc, #276]	; (8000d8c <MX_TIM1_Init+0x168>)
 8000c76:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c7a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c7c:	4b43      	ldr	r3, [pc, #268]	; (8000d8c <MX_TIM1_Init+0x168>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c82:	4b42      	ldr	r3, [pc, #264]	; (8000d8c <MX_TIM1_Init+0x168>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c88:	4b40      	ldr	r3, [pc, #256]	; (8000d8c <MX_TIM1_Init+0x168>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000c8e:	483f      	ldr	r0, [pc, #252]	; (8000d8c <MX_TIM1_Init+0x168>)
 8000c90:	f003 f9ef 	bl	8004072 <HAL_TIM_Base_Init>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d001      	beq.n	8000c9e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000c9a:	f000 f9c5 	bl	8001028 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ca2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000ca4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000ca8:	4619      	mov	r1, r3
 8000caa:	4838      	ldr	r0, [pc, #224]	; (8000d8c <MX_TIM1_Init+0x168>)
 8000cac:	f003 fc0a 	bl	80044c4 <HAL_TIM_ConfigClockSource>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000cb6:	f000 f9b7 	bl	8001028 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000cba:	4834      	ldr	r0, [pc, #208]	; (8000d8c <MX_TIM1_Init+0x168>)
 8000cbc:	f003 fa28 	bl	8004110 <HAL_TIM_PWM_Init>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d001      	beq.n	8000cca <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000cc6:	f000 f9af 	bl	8001028 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000cd2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	482c      	ldr	r0, [pc, #176]	; (8000d8c <MX_TIM1_Init+0x168>)
 8000cda:	f003 ffcb 	bl	8004c74 <HAL_TIMEx_MasterConfigSynchronization>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d001      	beq.n	8000ce8 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000ce4:	f000 f9a0 	bl	8001028 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ce8:	2360      	movs	r3, #96	; 0x60
 8000cea:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000cec:	2300      	movs	r3, #0
 8000cee:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000d00:	2300      	movs	r3, #0
 8000d02:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000d04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d08:	2204      	movs	r2, #4
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	481f      	ldr	r0, [pc, #124]	; (8000d8c <MX_TIM1_Init+0x168>)
 8000d0e:	f003 fb17 	bl	8004340 <HAL_TIM_PWM_ConfigChannel>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d001      	beq.n	8000d1c <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8000d18:	f000 f986 	bl	8001028 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000d1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d20:	2208      	movs	r2, #8
 8000d22:	4619      	mov	r1, r3
 8000d24:	4819      	ldr	r0, [pc, #100]	; (8000d8c <MX_TIM1_Init+0x168>)
 8000d26:	f003 fb0b 	bl	8004340 <HAL_TIM_PWM_ConfigChannel>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d001      	beq.n	8000d34 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8000d30:	f000 f97a 	bl	8001028 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000d34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d38:	220c      	movs	r2, #12
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	4813      	ldr	r0, [pc, #76]	; (8000d8c <MX_TIM1_Init+0x168>)
 8000d3e:	f003 faff 	bl	8004340 <HAL_TIM_PWM_ConfigChannel>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d001      	beq.n	8000d4c <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8000d48:	f000 f96e 	bl	8001028 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000d50:	2300      	movs	r3, #0
 8000d52:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000d54:	2300      	movs	r3, #0
 8000d56:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000d60:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d64:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000d66:	2300      	movs	r3, #0
 8000d68:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000d6a:	1d3b      	adds	r3, r7, #4
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	4807      	ldr	r0, [pc, #28]	; (8000d8c <MX_TIM1_Init+0x168>)
 8000d70:	f003 fffc 	bl	8004d6c <HAL_TIMEx_ConfigBreakDeadTime>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 8000d7a:	f000 f955 	bl	8001028 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000d7e:	4803      	ldr	r0, [pc, #12]	; (8000d8c <MX_TIM1_Init+0x168>)
 8000d80:	f000 fb78 	bl	8001474 <HAL_TIM_MspPostInit>

}
 8000d84:	bf00      	nop
 8000d86:	3758      	adds	r7, #88	; 0x58
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	20000610 	.word	0x20000610
 8000d90:	40010000 	.word	0x40010000

08000d94 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b092      	sub	sp, #72	; 0x48
 8000d98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d9a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000d9e:	2200      	movs	r2, #0
 8000da0:	601a      	str	r2, [r3, #0]
 8000da2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000da4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000da8:	2200      	movs	r2, #0
 8000daa:	601a      	str	r2, [r3, #0]
 8000dac:	605a      	str	r2, [r3, #4]
 8000dae:	609a      	str	r2, [r3, #8]
 8000db0:	60da      	str	r2, [r3, #12]
 8000db2:	611a      	str	r2, [r3, #16]
 8000db4:	615a      	str	r2, [r3, #20]
 8000db6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000db8:	1d3b      	adds	r3, r7, #4
 8000dba:	2220      	movs	r2, #32
 8000dbc:	2100      	movs	r1, #0
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f009 fb72 	bl	800a4a8 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000dc4:	4b33      	ldr	r3, [pc, #204]	; (8000e94 <MX_TIM8_Init+0x100>)
 8000dc6:	4a34      	ldr	r2, [pc, #208]	; (8000e98 <MX_TIM8_Init+0x104>)
 8000dc8:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000dca:	4b32      	ldr	r3, [pc, #200]	; (8000e94 <MX_TIM8_Init+0x100>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dd0:	4b30      	ldr	r3, [pc, #192]	; (8000e94 <MX_TIM8_Init+0x100>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8000dd6:	4b2f      	ldr	r3, [pc, #188]	; (8000e94 <MX_TIM8_Init+0x100>)
 8000dd8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ddc:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dde:	4b2d      	ldr	r3, [pc, #180]	; (8000e94 <MX_TIM8_Init+0x100>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000de4:	4b2b      	ldr	r3, [pc, #172]	; (8000e94 <MX_TIM8_Init+0x100>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dea:	4b2a      	ldr	r3, [pc, #168]	; (8000e94 <MX_TIM8_Init+0x100>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000df0:	4828      	ldr	r0, [pc, #160]	; (8000e94 <MX_TIM8_Init+0x100>)
 8000df2:	f003 f98d 	bl	8004110 <HAL_TIM_PWM_Init>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d001      	beq.n	8000e00 <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 8000dfc:	f000 f914 	bl	8001028 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e00:	2300      	movs	r3, #0
 8000e02:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e04:	2300      	movs	r3, #0
 8000e06:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000e08:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	4821      	ldr	r0, [pc, #132]	; (8000e94 <MX_TIM8_Init+0x100>)
 8000e10:	f003 ff30 	bl	8004c74 <HAL_TIMEx_MasterConfigSynchronization>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 8000e1a:	f000 f905 	bl	8001028 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e1e:	2360      	movs	r3, #96	; 0x60
 8000e20:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000e22:	2300      	movs	r3, #0
 8000e24:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e26:	2300      	movs	r3, #0
 8000e28:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000e32:	2300      	movs	r3, #0
 8000e34:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000e36:	2300      	movs	r3, #0
 8000e38:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000e3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e3e:	2208      	movs	r2, #8
 8000e40:	4619      	mov	r1, r3
 8000e42:	4814      	ldr	r0, [pc, #80]	; (8000e94 <MX_TIM8_Init+0x100>)
 8000e44:	f003 fa7c 	bl	8004340 <HAL_TIM_PWM_ConfigChannel>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <MX_TIM8_Init+0xbe>
  {
    Error_Handler();
 8000e4e:	f000 f8eb 	bl	8001028 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000e52:	2300      	movs	r3, #0
 8000e54:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000e56:	2300      	movs	r3, #0
 8000e58:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000e62:	2300      	movs	r3, #0
 8000e64:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000e66:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e6a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000e70:	1d3b      	adds	r3, r7, #4
 8000e72:	4619      	mov	r1, r3
 8000e74:	4807      	ldr	r0, [pc, #28]	; (8000e94 <MX_TIM8_Init+0x100>)
 8000e76:	f003 ff79 	bl	8004d6c <HAL_TIMEx_ConfigBreakDeadTime>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d001      	beq.n	8000e84 <MX_TIM8_Init+0xf0>
  {
    Error_Handler();
 8000e80:	f000 f8d2 	bl	8001028 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000e84:	4803      	ldr	r0, [pc, #12]	; (8000e94 <MX_TIM8_Init+0x100>)
 8000e86:	f000 faf5 	bl	8001474 <HAL_TIM_MspPostInit>

}
 8000e8a:	bf00      	nop
 8000e8c:	3748      	adds	r7, #72	; 0x48
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	20000490 	.word	0x20000490
 8000e98:	40010400 	.word	0x40010400

08000e9c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ea0:	4b11      	ldr	r3, [pc, #68]	; (8000ee8 <MX_USART2_UART_Init+0x4c>)
 8000ea2:	4a12      	ldr	r2, [pc, #72]	; (8000eec <MX_USART2_UART_Init+0x50>)
 8000ea4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ea6:	4b10      	ldr	r3, [pc, #64]	; (8000ee8 <MX_USART2_UART_Init+0x4c>)
 8000ea8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000eac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000eae:	4b0e      	ldr	r3, [pc, #56]	; (8000ee8 <MX_USART2_UART_Init+0x4c>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000eb4:	4b0c      	ldr	r3, [pc, #48]	; (8000ee8 <MX_USART2_UART_Init+0x4c>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000eba:	4b0b      	ldr	r3, [pc, #44]	; (8000ee8 <MX_USART2_UART_Init+0x4c>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ec0:	4b09      	ldr	r3, [pc, #36]	; (8000ee8 <MX_USART2_UART_Init+0x4c>)
 8000ec2:	220c      	movs	r2, #12
 8000ec4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ec6:	4b08      	ldr	r3, [pc, #32]	; (8000ee8 <MX_USART2_UART_Init+0x4c>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ecc:	4b06      	ldr	r3, [pc, #24]	; (8000ee8 <MX_USART2_UART_Init+0x4c>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ed2:	4805      	ldr	r0, [pc, #20]	; (8000ee8 <MX_USART2_UART_Init+0x4c>)
 8000ed4:	f003 ff9c 	bl	8004e10 <HAL_UART_Init>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d001      	beq.n	8000ee2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000ede:	f000 f8a3 	bl	8001028 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ee2:	bf00      	nop
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	200007e8 	.word	0x200007e8
 8000eec:	40004400 	.word	0x40004400

08000ef0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b08a      	sub	sp, #40	; 0x28
 8000ef4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef6:	f107 0314 	add.w	r3, r7, #20
 8000efa:	2200      	movs	r2, #0
 8000efc:	601a      	str	r2, [r3, #0]
 8000efe:	605a      	str	r2, [r3, #4]
 8000f00:	609a      	str	r2, [r3, #8]
 8000f02:	60da      	str	r2, [r3, #12]
 8000f04:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f06:	2300      	movs	r3, #0
 8000f08:	613b      	str	r3, [r7, #16]
 8000f0a:	4b43      	ldr	r3, [pc, #268]	; (8001018 <MX_GPIO_Init+0x128>)
 8000f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0e:	4a42      	ldr	r2, [pc, #264]	; (8001018 <MX_GPIO_Init+0x128>)
 8000f10:	f043 0304 	orr.w	r3, r3, #4
 8000f14:	6313      	str	r3, [r2, #48]	; 0x30
 8000f16:	4b40      	ldr	r3, [pc, #256]	; (8001018 <MX_GPIO_Init+0x128>)
 8000f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1a:	f003 0304 	and.w	r3, r3, #4
 8000f1e:	613b      	str	r3, [r7, #16]
 8000f20:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f22:	2300      	movs	r3, #0
 8000f24:	60fb      	str	r3, [r7, #12]
 8000f26:	4b3c      	ldr	r3, [pc, #240]	; (8001018 <MX_GPIO_Init+0x128>)
 8000f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2a:	4a3b      	ldr	r2, [pc, #236]	; (8001018 <MX_GPIO_Init+0x128>)
 8000f2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f30:	6313      	str	r3, [r2, #48]	; 0x30
 8000f32:	4b39      	ldr	r3, [pc, #228]	; (8001018 <MX_GPIO_Init+0x128>)
 8000f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f3a:	60fb      	str	r3, [r7, #12]
 8000f3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f3e:	2300      	movs	r3, #0
 8000f40:	60bb      	str	r3, [r7, #8]
 8000f42:	4b35      	ldr	r3, [pc, #212]	; (8001018 <MX_GPIO_Init+0x128>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f46:	4a34      	ldr	r2, [pc, #208]	; (8001018 <MX_GPIO_Init+0x128>)
 8000f48:	f043 0301 	orr.w	r3, r3, #1
 8000f4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f4e:	4b32      	ldr	r3, [pc, #200]	; (8001018 <MX_GPIO_Init+0x128>)
 8000f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f52:	f003 0301 	and.w	r3, r3, #1
 8000f56:	60bb      	str	r3, [r7, #8]
 8000f58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	607b      	str	r3, [r7, #4]
 8000f5e:	4b2e      	ldr	r3, [pc, #184]	; (8001018 <MX_GPIO_Init+0x128>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f62:	4a2d      	ldr	r2, [pc, #180]	; (8001018 <MX_GPIO_Init+0x128>)
 8000f64:	f043 0302 	orr.w	r3, r3, #2
 8000f68:	6313      	str	r3, [r2, #48]	; 0x30
 8000f6a:	4b2b      	ldr	r3, [pc, #172]	; (8001018 <MX_GPIO_Init+0x128>)
 8000f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6e:	f003 0302 	and.w	r3, r3, #2
 8000f72:	607b      	str	r3, [r7, #4]
 8000f74:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|LD2_Pin|GPIO_PIN_15, GPIO_PIN_RESET);
 8000f76:	2200      	movs	r2, #0
 8000f78:	f248 0122 	movw	r1, #32802	; 0x8022
 8000f7c:	4827      	ldr	r0, [pc, #156]	; (800101c <MX_GPIO_Init+0x12c>)
 8000f7e:	f000 ffab 	bl	8001ed8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8000f82:	2200      	movs	r2, #0
 8000f84:	f24c 0130 	movw	r1, #49200	; 0xc030
 8000f88:	4825      	ldr	r0, [pc, #148]	; (8001020 <MX_GPIO_Init+0x130>)
 8000f8a:	f000 ffa5 	bl	8001ed8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 8000f8e:	2200      	movs	r2, #0
 8000f90:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8000f94:	4823      	ldr	r0, [pc, #140]	; (8001024 <MX_GPIO_Init+0x134>)
 8000f96:	f000 ff9f 	bl	8001ed8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000f9a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000fa0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000fa4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000faa:	f107 0314 	add.w	r3, r7, #20
 8000fae:	4619      	mov	r1, r3
 8000fb0:	481c      	ldr	r0, [pc, #112]	; (8001024 <MX_GPIO_Init+0x134>)
 8000fb2:	f000 fdfd 	bl	8001bb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 LD2_Pin PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|LD2_Pin|GPIO_PIN_15;
 8000fb6:	f248 0322 	movw	r3, #32802	; 0x8022
 8000fba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fc8:	f107 0314 	add.w	r3, r7, #20
 8000fcc:	4619      	mov	r1, r3
 8000fce:	4813      	ldr	r0, [pc, #76]	; (800101c <MX_GPIO_Init+0x12c>)
 8000fd0:	f000 fdee 	bl	8001bb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB15 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_5;
 8000fd4:	f24c 0330 	movw	r3, #49200	; 0xc030
 8000fd8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fda:	2301      	movs	r3, #1
 8000fdc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fe6:	f107 0314 	add.w	r3, r7, #20
 8000fea:	4619      	mov	r1, r3
 8000fec:	480c      	ldr	r0, [pc, #48]	; (8001020 <MX_GPIO_Init+0x130>)
 8000fee:	f000 fddf 	bl	8001bb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC10 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000ff2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000ff6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001000:	2300      	movs	r3, #0
 8001002:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001004:	f107 0314 	add.w	r3, r7, #20
 8001008:	4619      	mov	r1, r3
 800100a:	4806      	ldr	r0, [pc, #24]	; (8001024 <MX_GPIO_Init+0x134>)
 800100c:	f000 fdd0 	bl	8001bb0 <HAL_GPIO_Init>

}
 8001010:	bf00      	nop
 8001012:	3728      	adds	r7, #40	; 0x28
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	40023800 	.word	0x40023800
 800101c:	40020000 	.word	0x40020000
 8001020:	40020400 	.word	0x40020400
 8001024:	40020800 	.word	0x40020800

08001028 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800102c:	b672      	cpsid	i
}
 800102e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001030:	e7fe      	b.n	8001030 <Error_Handler+0x8>
	...

08001034 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800103a:	2300      	movs	r3, #0
 800103c:	607b      	str	r3, [r7, #4]
 800103e:	4b10      	ldr	r3, [pc, #64]	; (8001080 <HAL_MspInit+0x4c>)
 8001040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001042:	4a0f      	ldr	r2, [pc, #60]	; (8001080 <HAL_MspInit+0x4c>)
 8001044:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001048:	6453      	str	r3, [r2, #68]	; 0x44
 800104a:	4b0d      	ldr	r3, [pc, #52]	; (8001080 <HAL_MspInit+0x4c>)
 800104c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800104e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001052:	607b      	str	r3, [r7, #4]
 8001054:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001056:	2300      	movs	r3, #0
 8001058:	603b      	str	r3, [r7, #0]
 800105a:	4b09      	ldr	r3, [pc, #36]	; (8001080 <HAL_MspInit+0x4c>)
 800105c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800105e:	4a08      	ldr	r2, [pc, #32]	; (8001080 <HAL_MspInit+0x4c>)
 8001060:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001064:	6413      	str	r3, [r2, #64]	; 0x40
 8001066:	4b06      	ldr	r3, [pc, #24]	; (8001080 <HAL_MspInit+0x4c>)
 8001068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800106a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800106e:	603b      	str	r3, [r7, #0]
 8001070:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001072:	2007      	movs	r0, #7
 8001074:	f000 fc8e 	bl	8001994 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001078:	bf00      	nop
 800107a:	3708      	adds	r7, #8
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	40023800 	.word	0x40023800

08001084 <HAL_FMPI2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hfmpi2c: FMPI2C handle pointer
* @retval None
*/
void HAL_FMPI2C_MspInit(FMPI2C_HandleTypeDef* hfmpi2c)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b08a      	sub	sp, #40	; 0x28
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800108c:	f107 0314 	add.w	r3, r7, #20
 8001090:	2200      	movs	r2, #0
 8001092:	601a      	str	r2, [r3, #0]
 8001094:	605a      	str	r2, [r3, #4]
 8001096:	609a      	str	r2, [r3, #8]
 8001098:	60da      	str	r2, [r3, #12]
 800109a:	611a      	str	r2, [r3, #16]
  if(hfmpi2c->Instance==FMPI2C1)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a19      	ldr	r2, [pc, #100]	; (8001108 <HAL_FMPI2C_MspInit+0x84>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d12b      	bne.n	80010fe <HAL_FMPI2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN FMPI2C1_MspInit 0 */

  /* USER CODE END FMPI2C1_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010a6:	2300      	movs	r3, #0
 80010a8:	613b      	str	r3, [r7, #16]
 80010aa:	4b18      	ldr	r3, [pc, #96]	; (800110c <HAL_FMPI2C_MspInit+0x88>)
 80010ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ae:	4a17      	ldr	r2, [pc, #92]	; (800110c <HAL_FMPI2C_MspInit+0x88>)
 80010b0:	f043 0304 	orr.w	r3, r3, #4
 80010b4:	6313      	str	r3, [r2, #48]	; 0x30
 80010b6:	4b15      	ldr	r3, [pc, #84]	; (800110c <HAL_FMPI2C_MspInit+0x88>)
 80010b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ba:	f003 0304 	and.w	r3, r3, #4
 80010be:	613b      	str	r3, [r7, #16]
 80010c0:	693b      	ldr	r3, [r7, #16]
    /**FMPI2C1 GPIO Configuration
    PC6     ------> FMPI2C1_SCL
    PC7     ------> FMPI2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80010c2:	23c0      	movs	r3, #192	; 0xc0
 80010c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010c6:	2312      	movs	r3, #18
 80010c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010ca:	2301      	movs	r3, #1
 80010cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ce:	2303      	movs	r3, #3
 80010d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_FMPI2C1;
 80010d2:	2304      	movs	r3, #4
 80010d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010d6:	f107 0314 	add.w	r3, r7, #20
 80010da:	4619      	mov	r1, r3
 80010dc:	480c      	ldr	r0, [pc, #48]	; (8001110 <HAL_FMPI2C_MspInit+0x8c>)
 80010de:	f000 fd67 	bl	8001bb0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_FMPI2C1_CLK_ENABLE();
 80010e2:	2300      	movs	r3, #0
 80010e4:	60fb      	str	r3, [r7, #12]
 80010e6:	4b09      	ldr	r3, [pc, #36]	; (800110c <HAL_FMPI2C_MspInit+0x88>)
 80010e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ea:	4a08      	ldr	r2, [pc, #32]	; (800110c <HAL_FMPI2C_MspInit+0x88>)
 80010ec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80010f0:	6413      	str	r3, [r2, #64]	; 0x40
 80010f2:	4b06      	ldr	r3, [pc, #24]	; (800110c <HAL_FMPI2C_MspInit+0x88>)
 80010f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80010fa:	60fb      	str	r3, [r7, #12]
 80010fc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN FMPI2C1_MspInit 1 */

  /* USER CODE END FMPI2C1_MspInit 1 */
  }

}
 80010fe:	bf00      	nop
 8001100:	3728      	adds	r7, #40	; 0x28
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	40006000 	.word	0x40006000
 800110c:	40023800 	.word	0x40023800
 8001110:	40020800 	.word	0x40020800

08001114 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b090      	sub	sp, #64	; 0x40
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800111c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001120:	2200      	movs	r2, #0
 8001122:	601a      	str	r2, [r3, #0]
 8001124:	605a      	str	r2, [r3, #4]
 8001126:	609a      	str	r2, [r3, #8]
 8001128:	60da      	str	r2, [r3, #12]
 800112a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a6b      	ldr	r2, [pc, #428]	; (80012e0 <HAL_I2C_MspInit+0x1cc>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d12c      	bne.n	8001190 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001136:	2300      	movs	r3, #0
 8001138:	62bb      	str	r3, [r7, #40]	; 0x28
 800113a:	4b6a      	ldr	r3, [pc, #424]	; (80012e4 <HAL_I2C_MspInit+0x1d0>)
 800113c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113e:	4a69      	ldr	r2, [pc, #420]	; (80012e4 <HAL_I2C_MspInit+0x1d0>)
 8001140:	f043 0302 	orr.w	r3, r3, #2
 8001144:	6313      	str	r3, [r2, #48]	; 0x30
 8001146:	4b67      	ldr	r3, [pc, #412]	; (80012e4 <HAL_I2C_MspInit+0x1d0>)
 8001148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114a:	f003 0302 	and.w	r3, r3, #2
 800114e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001150:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001152:	23c0      	movs	r3, #192	; 0xc0
 8001154:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001156:	2312      	movs	r3, #18
 8001158:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800115a:	2301      	movs	r3, #1
 800115c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800115e:	2303      	movs	r3, #3
 8001160:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001162:	2304      	movs	r3, #4
 8001164:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001166:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800116a:	4619      	mov	r1, r3
 800116c:	485e      	ldr	r0, [pc, #376]	; (80012e8 <HAL_I2C_MspInit+0x1d4>)
 800116e:	f000 fd1f 	bl	8001bb0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001172:	2300      	movs	r3, #0
 8001174:	627b      	str	r3, [r7, #36]	; 0x24
 8001176:	4b5b      	ldr	r3, [pc, #364]	; (80012e4 <HAL_I2C_MspInit+0x1d0>)
 8001178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117a:	4a5a      	ldr	r2, [pc, #360]	; (80012e4 <HAL_I2C_MspInit+0x1d0>)
 800117c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001180:	6413      	str	r3, [r2, #64]	; 0x40
 8001182:	4b58      	ldr	r3, [pc, #352]	; (80012e4 <HAL_I2C_MspInit+0x1d0>)
 8001184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001186:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800118a:	627b      	str	r3, [r7, #36]	; 0x24
 800118c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 800118e:	e0a2      	b.n	80012d6 <HAL_I2C_MspInit+0x1c2>
  else if(hi2c->Instance==I2C2)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a55      	ldr	r2, [pc, #340]	; (80012ec <HAL_I2C_MspInit+0x1d8>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d14c      	bne.n	8001234 <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800119a:	2300      	movs	r3, #0
 800119c:	623b      	str	r3, [r7, #32]
 800119e:	4b51      	ldr	r3, [pc, #324]	; (80012e4 <HAL_I2C_MspInit+0x1d0>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a2:	4a50      	ldr	r2, [pc, #320]	; (80012e4 <HAL_I2C_MspInit+0x1d0>)
 80011a4:	f043 0302 	orr.w	r3, r3, #2
 80011a8:	6313      	str	r3, [r2, #48]	; 0x30
 80011aa:	4b4e      	ldr	r3, [pc, #312]	; (80012e4 <HAL_I2C_MspInit+0x1d0>)
 80011ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ae:	f003 0302 	and.w	r3, r3, #2
 80011b2:	623b      	str	r3, [r7, #32]
 80011b4:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011b6:	2300      	movs	r3, #0
 80011b8:	61fb      	str	r3, [r7, #28]
 80011ba:	4b4a      	ldr	r3, [pc, #296]	; (80012e4 <HAL_I2C_MspInit+0x1d0>)
 80011bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011be:	4a49      	ldr	r2, [pc, #292]	; (80012e4 <HAL_I2C_MspInit+0x1d0>)
 80011c0:	f043 0304 	orr.w	r3, r3, #4
 80011c4:	6313      	str	r3, [r2, #48]	; 0x30
 80011c6:	4b47      	ldr	r3, [pc, #284]	; (80012e4 <HAL_I2C_MspInit+0x1d0>)
 80011c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ca:	f003 0304 	and.w	r3, r3, #4
 80011ce:	61fb      	str	r3, [r7, #28]
 80011d0:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80011d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011d8:	2312      	movs	r3, #18
 80011da:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011dc:	2301      	movs	r3, #1
 80011de:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011e0:	2303      	movs	r3, #3
 80011e2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80011e4:	2304      	movs	r3, #4
 80011e6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011ec:	4619      	mov	r1, r3
 80011ee:	483e      	ldr	r0, [pc, #248]	; (80012e8 <HAL_I2C_MspInit+0x1d4>)
 80011f0:	f000 fcde 	bl	8001bb0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80011f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011fa:	2312      	movs	r3, #18
 80011fc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011fe:	2301      	movs	r3, #1
 8001200:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001202:	2303      	movs	r3, #3
 8001204:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001206:	2304      	movs	r3, #4
 8001208:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800120a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800120e:	4619      	mov	r1, r3
 8001210:	4837      	ldr	r0, [pc, #220]	; (80012f0 <HAL_I2C_MspInit+0x1dc>)
 8001212:	f000 fccd 	bl	8001bb0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001216:	2300      	movs	r3, #0
 8001218:	61bb      	str	r3, [r7, #24]
 800121a:	4b32      	ldr	r3, [pc, #200]	; (80012e4 <HAL_I2C_MspInit+0x1d0>)
 800121c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800121e:	4a31      	ldr	r2, [pc, #196]	; (80012e4 <HAL_I2C_MspInit+0x1d0>)
 8001220:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001224:	6413      	str	r3, [r2, #64]	; 0x40
 8001226:	4b2f      	ldr	r3, [pc, #188]	; (80012e4 <HAL_I2C_MspInit+0x1d0>)
 8001228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800122e:	61bb      	str	r3, [r7, #24]
 8001230:	69bb      	ldr	r3, [r7, #24]
}
 8001232:	e050      	b.n	80012d6 <HAL_I2C_MspInit+0x1c2>
  else if(hi2c->Instance==I2C3)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a2e      	ldr	r2, [pc, #184]	; (80012f4 <HAL_I2C_MspInit+0x1e0>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d14b      	bne.n	80012d6 <HAL_I2C_MspInit+0x1c2>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800123e:	2300      	movs	r3, #0
 8001240:	617b      	str	r3, [r7, #20]
 8001242:	4b28      	ldr	r3, [pc, #160]	; (80012e4 <HAL_I2C_MspInit+0x1d0>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001246:	4a27      	ldr	r2, [pc, #156]	; (80012e4 <HAL_I2C_MspInit+0x1d0>)
 8001248:	f043 0304 	orr.w	r3, r3, #4
 800124c:	6313      	str	r3, [r2, #48]	; 0x30
 800124e:	4b25      	ldr	r3, [pc, #148]	; (80012e4 <HAL_I2C_MspInit+0x1d0>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001252:	f003 0304 	and.w	r3, r3, #4
 8001256:	617b      	str	r3, [r7, #20]
 8001258:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800125a:	2300      	movs	r3, #0
 800125c:	613b      	str	r3, [r7, #16]
 800125e:	4b21      	ldr	r3, [pc, #132]	; (80012e4 <HAL_I2C_MspInit+0x1d0>)
 8001260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001262:	4a20      	ldr	r2, [pc, #128]	; (80012e4 <HAL_I2C_MspInit+0x1d0>)
 8001264:	f043 0301 	orr.w	r3, r3, #1
 8001268:	6313      	str	r3, [r2, #48]	; 0x30
 800126a:	4b1e      	ldr	r3, [pc, #120]	; (80012e4 <HAL_I2C_MspInit+0x1d0>)
 800126c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126e:	f003 0301 	and.w	r3, r3, #1
 8001272:	613b      	str	r3, [r7, #16]
 8001274:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001276:	f44f 7300 	mov.w	r3, #512	; 0x200
 800127a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800127c:	2312      	movs	r3, #18
 800127e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001280:	2301      	movs	r3, #1
 8001282:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001284:	2303      	movs	r3, #3
 8001286:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001288:	2304      	movs	r3, #4
 800128a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800128c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001290:	4619      	mov	r1, r3
 8001292:	4817      	ldr	r0, [pc, #92]	; (80012f0 <HAL_I2C_MspInit+0x1dc>)
 8001294:	f000 fc8c 	bl	8001bb0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001298:	f44f 7380 	mov.w	r3, #256	; 0x100
 800129c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800129e:	2312      	movs	r3, #18
 80012a0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012a2:	2301      	movs	r3, #1
 80012a4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012a6:	2303      	movs	r3, #3
 80012a8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80012aa:	2304      	movs	r3, #4
 80012ac:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012b2:	4619      	mov	r1, r3
 80012b4:	4810      	ldr	r0, [pc, #64]	; (80012f8 <HAL_I2C_MspInit+0x1e4>)
 80012b6:	f000 fc7b 	bl	8001bb0 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80012ba:	2300      	movs	r3, #0
 80012bc:	60fb      	str	r3, [r7, #12]
 80012be:	4b09      	ldr	r3, [pc, #36]	; (80012e4 <HAL_I2C_MspInit+0x1d0>)
 80012c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c2:	4a08      	ldr	r2, [pc, #32]	; (80012e4 <HAL_I2C_MspInit+0x1d0>)
 80012c4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80012c8:	6413      	str	r3, [r2, #64]	; 0x40
 80012ca:	4b06      	ldr	r3, [pc, #24]	; (80012e4 <HAL_I2C_MspInit+0x1d0>)
 80012cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80012d2:	60fb      	str	r3, [r7, #12]
 80012d4:	68fb      	ldr	r3, [r7, #12]
}
 80012d6:	bf00      	nop
 80012d8:	3740      	adds	r7, #64	; 0x40
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	40005400 	.word	0x40005400
 80012e4:	40023800 	.word	0x40023800
 80012e8:	40020400 	.word	0x40020400
 80012ec:	40005800 	.word	0x40005800
 80012f0:	40020800 	.word	0x40020800
 80012f4:	40005c00 	.word	0x40005c00
 80012f8:	40020000 	.word	0x40020000

080012fc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b08a      	sub	sp, #40	; 0x28
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001304:	f107 0314 	add.w	r3, r7, #20
 8001308:	2200      	movs	r2, #0
 800130a:	601a      	str	r2, [r3, #0]
 800130c:	605a      	str	r2, [r3, #4]
 800130e:	609a      	str	r2, [r3, #8]
 8001310:	60da      	str	r2, [r3, #12]
 8001312:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a30      	ldr	r2, [pc, #192]	; (80013dc <HAL_SPI_MspInit+0xe0>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d15a      	bne.n	80013d4 <HAL_SPI_MspInit+0xd8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800131e:	2300      	movs	r3, #0
 8001320:	613b      	str	r3, [r7, #16]
 8001322:	4b2f      	ldr	r3, [pc, #188]	; (80013e0 <HAL_SPI_MspInit+0xe4>)
 8001324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001326:	4a2e      	ldr	r2, [pc, #184]	; (80013e0 <HAL_SPI_MspInit+0xe4>)
 8001328:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800132c:	6413      	str	r3, [r2, #64]	; 0x40
 800132e:	4b2c      	ldr	r3, [pc, #176]	; (80013e0 <HAL_SPI_MspInit+0xe4>)
 8001330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001332:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001336:	613b      	str	r3, [r7, #16]
 8001338:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800133a:	2300      	movs	r3, #0
 800133c:	60fb      	str	r3, [r7, #12]
 800133e:	4b28      	ldr	r3, [pc, #160]	; (80013e0 <HAL_SPI_MspInit+0xe4>)
 8001340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001342:	4a27      	ldr	r2, [pc, #156]	; (80013e0 <HAL_SPI_MspInit+0xe4>)
 8001344:	f043 0304 	orr.w	r3, r3, #4
 8001348:	6313      	str	r3, [r2, #48]	; 0x30
 800134a:	4b25      	ldr	r3, [pc, #148]	; (80013e0 <HAL_SPI_MspInit+0xe4>)
 800134c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134e:	f003 0304 	and.w	r3, r3, #4
 8001352:	60fb      	str	r3, [r7, #12]
 8001354:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001356:	2300      	movs	r3, #0
 8001358:	60bb      	str	r3, [r7, #8]
 800135a:	4b21      	ldr	r3, [pc, #132]	; (80013e0 <HAL_SPI_MspInit+0xe4>)
 800135c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135e:	4a20      	ldr	r2, [pc, #128]	; (80013e0 <HAL_SPI_MspInit+0xe4>)
 8001360:	f043 0302 	orr.w	r3, r3, #2
 8001364:	6313      	str	r3, [r2, #48]	; 0x30
 8001366:	4b1e      	ldr	r3, [pc, #120]	; (80013e0 <HAL_SPI_MspInit+0xe4>)
 8001368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136a:	f003 0302 	and.w	r3, r3, #2
 800136e:	60bb      	str	r3, [r7, #8]
 8001370:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC1     ------> SPI2_MOSI
    PC2     ------> SPI2_MISO
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001372:	2302      	movs	r3, #2
 8001374:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001376:	2302      	movs	r3, #2
 8001378:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137a:	2300      	movs	r3, #0
 800137c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800137e:	2303      	movs	r3, #3
 8001380:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8001382:	2307      	movs	r3, #7
 8001384:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001386:	f107 0314 	add.w	r3, r7, #20
 800138a:	4619      	mov	r1, r3
 800138c:	4815      	ldr	r0, [pc, #84]	; (80013e4 <HAL_SPI_MspInit+0xe8>)
 800138e:	f000 fc0f 	bl	8001bb0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001392:	2304      	movs	r3, #4
 8001394:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001396:	2302      	movs	r3, #2
 8001398:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139a:	2300      	movs	r3, #0
 800139c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800139e:	2303      	movs	r3, #3
 80013a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80013a2:	2305      	movs	r3, #5
 80013a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013a6:	f107 0314 	add.w	r3, r7, #20
 80013aa:	4619      	mov	r1, r3
 80013ac:	480d      	ldr	r0, [pc, #52]	; (80013e4 <HAL_SPI_MspInit+0xe8>)
 80013ae:	f000 fbff 	bl	8001bb0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80013b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b8:	2302      	movs	r3, #2
 80013ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013bc:	2300      	movs	r3, #0
 80013be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013c0:	2303      	movs	r3, #3
 80013c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80013c4:	2305      	movs	r3, #5
 80013c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013c8:	f107 0314 	add.w	r3, r7, #20
 80013cc:	4619      	mov	r1, r3
 80013ce:	4806      	ldr	r0, [pc, #24]	; (80013e8 <HAL_SPI_MspInit+0xec>)
 80013d0:	f000 fbee 	bl	8001bb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80013d4:	bf00      	nop
 80013d6:	3728      	adds	r7, #40	; 0x28
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	40003800 	.word	0x40003800
 80013e0:	40023800 	.word	0x40023800
 80013e4:	40020800 	.word	0x40020800
 80013e8:	40020400 	.word	0x40020400

080013ec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b085      	sub	sp, #20
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a0b      	ldr	r2, [pc, #44]	; (8001428 <HAL_TIM_Base_MspInit+0x3c>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d10d      	bne.n	800141a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80013fe:	2300      	movs	r3, #0
 8001400:	60fb      	str	r3, [r7, #12]
 8001402:	4b0a      	ldr	r3, [pc, #40]	; (800142c <HAL_TIM_Base_MspInit+0x40>)
 8001404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001406:	4a09      	ldr	r2, [pc, #36]	; (800142c <HAL_TIM_Base_MspInit+0x40>)
 8001408:	f043 0301 	orr.w	r3, r3, #1
 800140c:	6453      	str	r3, [r2, #68]	; 0x44
 800140e:	4b07      	ldr	r3, [pc, #28]	; (800142c <HAL_TIM_Base_MspInit+0x40>)
 8001410:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001412:	f003 0301 	and.w	r3, r3, #1
 8001416:	60fb      	str	r3, [r7, #12]
 8001418:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800141a:	bf00      	nop
 800141c:	3714      	adds	r7, #20
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr
 8001426:	bf00      	nop
 8001428:	40010000 	.word	0x40010000
 800142c:	40023800 	.word	0x40023800

08001430 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001430:	b480      	push	{r7}
 8001432:	b085      	sub	sp, #20
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM8)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a0b      	ldr	r2, [pc, #44]	; (800146c <HAL_TIM_PWM_MspInit+0x3c>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d10d      	bne.n	800145e <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001442:	2300      	movs	r3, #0
 8001444:	60fb      	str	r3, [r7, #12]
 8001446:	4b0a      	ldr	r3, [pc, #40]	; (8001470 <HAL_TIM_PWM_MspInit+0x40>)
 8001448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800144a:	4a09      	ldr	r2, [pc, #36]	; (8001470 <HAL_TIM_PWM_MspInit+0x40>)
 800144c:	f043 0302 	orr.w	r3, r3, #2
 8001450:	6453      	str	r3, [r2, #68]	; 0x44
 8001452:	4b07      	ldr	r3, [pc, #28]	; (8001470 <HAL_TIM_PWM_MspInit+0x40>)
 8001454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001456:	f003 0302 	and.w	r3, r3, #2
 800145a:	60fb      	str	r3, [r7, #12]
 800145c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800145e:	bf00      	nop
 8001460:	3714      	adds	r7, #20
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr
 800146a:	bf00      	nop
 800146c:	40010400 	.word	0x40010400
 8001470:	40023800 	.word	0x40023800

08001474 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b08a      	sub	sp, #40	; 0x28
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800147c:	f107 0314 	add.w	r3, r7, #20
 8001480:	2200      	movs	r2, #0
 8001482:	601a      	str	r2, [r3, #0]
 8001484:	605a      	str	r2, [r3, #4]
 8001486:	609a      	str	r2, [r3, #8]
 8001488:	60da      	str	r2, [r3, #12]
 800148a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a25      	ldr	r2, [pc, #148]	; (8001528 <HAL_TIM_MspPostInit+0xb4>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d11f      	bne.n	80014d6 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001496:	2300      	movs	r3, #0
 8001498:	613b      	str	r3, [r7, #16]
 800149a:	4b24      	ldr	r3, [pc, #144]	; (800152c <HAL_TIM_MspPostInit+0xb8>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149e:	4a23      	ldr	r2, [pc, #140]	; (800152c <HAL_TIM_MspPostInit+0xb8>)
 80014a0:	f043 0301 	orr.w	r3, r3, #1
 80014a4:	6313      	str	r3, [r2, #48]	; 0x30
 80014a6:	4b21      	ldr	r3, [pc, #132]	; (800152c <HAL_TIM_MspPostInit+0xb8>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014aa:	f003 0301 	and.w	r3, r3, #1
 80014ae:	613b      	str	r3, [r7, #16]
 80014b0:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 80014b2:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 80014b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b8:	2302      	movs	r3, #2
 80014ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014bc:	2300      	movs	r3, #0
 80014be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c0:	2300      	movs	r3, #0
 80014c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80014c4:	2301      	movs	r3, #1
 80014c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014c8:	f107 0314 	add.w	r3, r7, #20
 80014cc:	4619      	mov	r1, r3
 80014ce:	4818      	ldr	r0, [pc, #96]	; (8001530 <HAL_TIM_MspPostInit+0xbc>)
 80014d0:	f000 fb6e 	bl	8001bb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80014d4:	e023      	b.n	800151e <HAL_TIM_MspPostInit+0xaa>
  else if(htim->Instance==TIM8)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4a16      	ldr	r2, [pc, #88]	; (8001534 <HAL_TIM_MspPostInit+0xc0>)
 80014dc:	4293      	cmp	r3, r2
 80014de:	d11e      	bne.n	800151e <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014e0:	2300      	movs	r3, #0
 80014e2:	60fb      	str	r3, [r7, #12]
 80014e4:	4b11      	ldr	r3, [pc, #68]	; (800152c <HAL_TIM_MspPostInit+0xb8>)
 80014e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e8:	4a10      	ldr	r2, [pc, #64]	; (800152c <HAL_TIM_MspPostInit+0xb8>)
 80014ea:	f043 0304 	orr.w	r3, r3, #4
 80014ee:	6313      	str	r3, [r2, #48]	; 0x30
 80014f0:	4b0e      	ldr	r3, [pc, #56]	; (800152c <HAL_TIM_MspPostInit+0xb8>)
 80014f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f4:	f003 0304 	and.w	r3, r3, #4
 80014f8:	60fb      	str	r3, [r7, #12]
 80014fa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80014fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001500:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001502:	2302      	movs	r3, #2
 8001504:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001506:	2300      	movs	r3, #0
 8001508:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800150a:	2300      	movs	r3, #0
 800150c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800150e:	2303      	movs	r3, #3
 8001510:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001512:	f107 0314 	add.w	r3, r7, #20
 8001516:	4619      	mov	r1, r3
 8001518:	4807      	ldr	r0, [pc, #28]	; (8001538 <HAL_TIM_MspPostInit+0xc4>)
 800151a:	f000 fb49 	bl	8001bb0 <HAL_GPIO_Init>
}
 800151e:	bf00      	nop
 8001520:	3728      	adds	r7, #40	; 0x28
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	40010000 	.word	0x40010000
 800152c:	40023800 	.word	0x40023800
 8001530:	40020000 	.word	0x40020000
 8001534:	40010400 	.word	0x40010400
 8001538:	40020800 	.word	0x40020800

0800153c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b08a      	sub	sp, #40	; 0x28
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001544:	f107 0314 	add.w	r3, r7, #20
 8001548:	2200      	movs	r2, #0
 800154a:	601a      	str	r2, [r3, #0]
 800154c:	605a      	str	r2, [r3, #4]
 800154e:	609a      	str	r2, [r3, #8]
 8001550:	60da      	str	r2, [r3, #12]
 8001552:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a19      	ldr	r2, [pc, #100]	; (80015c0 <HAL_UART_MspInit+0x84>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d12b      	bne.n	80015b6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800155e:	2300      	movs	r3, #0
 8001560:	613b      	str	r3, [r7, #16]
 8001562:	4b18      	ldr	r3, [pc, #96]	; (80015c4 <HAL_UART_MspInit+0x88>)
 8001564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001566:	4a17      	ldr	r2, [pc, #92]	; (80015c4 <HAL_UART_MspInit+0x88>)
 8001568:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800156c:	6413      	str	r3, [r2, #64]	; 0x40
 800156e:	4b15      	ldr	r3, [pc, #84]	; (80015c4 <HAL_UART_MspInit+0x88>)
 8001570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001572:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001576:	613b      	str	r3, [r7, #16]
 8001578:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800157a:	2300      	movs	r3, #0
 800157c:	60fb      	str	r3, [r7, #12]
 800157e:	4b11      	ldr	r3, [pc, #68]	; (80015c4 <HAL_UART_MspInit+0x88>)
 8001580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001582:	4a10      	ldr	r2, [pc, #64]	; (80015c4 <HAL_UART_MspInit+0x88>)
 8001584:	f043 0301 	orr.w	r3, r3, #1
 8001588:	6313      	str	r3, [r2, #48]	; 0x30
 800158a:	4b0e      	ldr	r3, [pc, #56]	; (80015c4 <HAL_UART_MspInit+0x88>)
 800158c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158e:	f003 0301 	and.w	r3, r3, #1
 8001592:	60fb      	str	r3, [r7, #12]
 8001594:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001596:	230c      	movs	r3, #12
 8001598:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800159a:	2302      	movs	r3, #2
 800159c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159e:	2300      	movs	r3, #0
 80015a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015a2:	2303      	movs	r3, #3
 80015a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015a6:	2307      	movs	r3, #7
 80015a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015aa:	f107 0314 	add.w	r3, r7, #20
 80015ae:	4619      	mov	r1, r3
 80015b0:	4805      	ldr	r0, [pc, #20]	; (80015c8 <HAL_UART_MspInit+0x8c>)
 80015b2:	f000 fafd 	bl	8001bb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80015b6:	bf00      	nop
 80015b8:	3728      	adds	r7, #40	; 0x28
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	40004400 	.word	0x40004400
 80015c4:	40023800 	.word	0x40023800
 80015c8:	40020000 	.word	0x40020000

080015cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015d0:	e7fe      	b.n	80015d0 <NMI_Handler+0x4>

080015d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015d2:	b480      	push	{r7}
 80015d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015d6:	e7fe      	b.n	80015d6 <HardFault_Handler+0x4>

080015d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015dc:	e7fe      	b.n	80015dc <MemManage_Handler+0x4>

080015de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015de:	b480      	push	{r7}
 80015e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015e2:	e7fe      	b.n	80015e2 <BusFault_Handler+0x4>

080015e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015e8:	e7fe      	b.n	80015e8 <UsageFault_Handler+0x4>

080015ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015ea:	b480      	push	{r7}
 80015ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015ee:	bf00      	nop
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr

080015f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015fc:	bf00      	nop
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr

08001606 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001606:	b480      	push	{r7}
 8001608:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800160a:	bf00      	nop
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr

08001614 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001618:	f000 f8c6 	bl	80017a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800161c:	bf00      	nop
 800161e:	bd80      	pop	{r7, pc}

08001620 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b086      	sub	sp, #24
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001628:	4a14      	ldr	r2, [pc, #80]	; (800167c <_sbrk+0x5c>)
 800162a:	4b15      	ldr	r3, [pc, #84]	; (8001680 <_sbrk+0x60>)
 800162c:	1ad3      	subs	r3, r2, r3
 800162e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001634:	4b13      	ldr	r3, [pc, #76]	; (8001684 <_sbrk+0x64>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d102      	bne.n	8001642 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800163c:	4b11      	ldr	r3, [pc, #68]	; (8001684 <_sbrk+0x64>)
 800163e:	4a12      	ldr	r2, [pc, #72]	; (8001688 <_sbrk+0x68>)
 8001640:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001642:	4b10      	ldr	r3, [pc, #64]	; (8001684 <_sbrk+0x64>)
 8001644:	681a      	ldr	r2, [r3, #0]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	4413      	add	r3, r2
 800164a:	693a      	ldr	r2, [r7, #16]
 800164c:	429a      	cmp	r2, r3
 800164e:	d207      	bcs.n	8001660 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001650:	f008 fef2 	bl	800a438 <__errno>
 8001654:	4603      	mov	r3, r0
 8001656:	220c      	movs	r2, #12
 8001658:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800165a:	f04f 33ff 	mov.w	r3, #4294967295
 800165e:	e009      	b.n	8001674 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001660:	4b08      	ldr	r3, [pc, #32]	; (8001684 <_sbrk+0x64>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001666:	4b07      	ldr	r3, [pc, #28]	; (8001684 <_sbrk+0x64>)
 8001668:	681a      	ldr	r2, [r3, #0]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	4413      	add	r3, r2
 800166e:	4a05      	ldr	r2, [pc, #20]	; (8001684 <_sbrk+0x64>)
 8001670:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001672:	68fb      	ldr	r3, [r7, #12]
}
 8001674:	4618      	mov	r0, r3
 8001676:	3718      	adds	r7, #24
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}
 800167c:	20020000 	.word	0x20020000
 8001680:	00000400 	.word	0x00000400
 8001684:	200003bc 	.word	0x200003bc
 8001688:	20000880 	.word	0x20000880

0800168c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001690:	4b06      	ldr	r3, [pc, #24]	; (80016ac <SystemInit+0x20>)
 8001692:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001696:	4a05      	ldr	r2, [pc, #20]	; (80016ac <SystemInit+0x20>)
 8001698:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800169c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016a0:	bf00      	nop
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr
 80016aa:	bf00      	nop
 80016ac:	e000ed00 	.word	0xe000ed00

080016b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80016b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016e8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016b4:	480d      	ldr	r0, [pc, #52]	; (80016ec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80016b6:	490e      	ldr	r1, [pc, #56]	; (80016f0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80016b8:	4a0e      	ldr	r2, [pc, #56]	; (80016f4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80016ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016bc:	e002      	b.n	80016c4 <LoopCopyDataInit>

080016be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016c2:	3304      	adds	r3, #4

080016c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016c8:	d3f9      	bcc.n	80016be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016ca:	4a0b      	ldr	r2, [pc, #44]	; (80016f8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80016cc:	4c0b      	ldr	r4, [pc, #44]	; (80016fc <LoopFillZerobss+0x26>)
  movs r3, #0
 80016ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016d0:	e001      	b.n	80016d6 <LoopFillZerobss>

080016d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016d4:	3204      	adds	r2, #4

080016d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016d8:	d3fb      	bcc.n	80016d2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80016da:	f7ff ffd7 	bl	800168c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016de:	f008 feb1 	bl	800a444 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016e2:	f7fe ffef 	bl	80006c4 <main>
  bx  lr    
 80016e6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80016e8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80016ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016f0:	200003a0 	.word	0x200003a0
  ldr r2, =_sidata
 80016f4:	0800adb0 	.word	0x0800adb0
  ldr r2, =_sbss
 80016f8:	200003a0 	.word	0x200003a0
  ldr r4, =_ebss
 80016fc:	20000880 	.word	0x20000880

08001700 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001700:	e7fe      	b.n	8001700 <ADC_IRQHandler>
	...

08001704 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001708:	4b0e      	ldr	r3, [pc, #56]	; (8001744 <HAL_Init+0x40>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a0d      	ldr	r2, [pc, #52]	; (8001744 <HAL_Init+0x40>)
 800170e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001712:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001714:	4b0b      	ldr	r3, [pc, #44]	; (8001744 <HAL_Init+0x40>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a0a      	ldr	r2, [pc, #40]	; (8001744 <HAL_Init+0x40>)
 800171a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800171e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001720:	4b08      	ldr	r3, [pc, #32]	; (8001744 <HAL_Init+0x40>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a07      	ldr	r2, [pc, #28]	; (8001744 <HAL_Init+0x40>)
 8001726:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800172a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800172c:	2003      	movs	r0, #3
 800172e:	f000 f931 	bl	8001994 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001732:	2000      	movs	r0, #0
 8001734:	f000 f808 	bl	8001748 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001738:	f7ff fc7c 	bl	8001034 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800173c:	2300      	movs	r3, #0
}
 800173e:	4618      	mov	r0, r3
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	40023c00 	.word	0x40023c00

08001748 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001750:	4b12      	ldr	r3, [pc, #72]	; (800179c <HAL_InitTick+0x54>)
 8001752:	681a      	ldr	r2, [r3, #0]
 8001754:	4b12      	ldr	r3, [pc, #72]	; (80017a0 <HAL_InitTick+0x58>)
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	4619      	mov	r1, r3
 800175a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800175e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001762:	fbb2 f3f3 	udiv	r3, r2, r3
 8001766:	4618      	mov	r0, r3
 8001768:	f000 f93b 	bl	80019e2 <HAL_SYSTICK_Config>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001772:	2301      	movs	r3, #1
 8001774:	e00e      	b.n	8001794 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2b0f      	cmp	r3, #15
 800177a:	d80a      	bhi.n	8001792 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800177c:	2200      	movs	r2, #0
 800177e:	6879      	ldr	r1, [r7, #4]
 8001780:	f04f 30ff 	mov.w	r0, #4294967295
 8001784:	f000 f911 	bl	80019aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001788:	4a06      	ldr	r2, [pc, #24]	; (80017a4 <HAL_InitTick+0x5c>)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800178e:	2300      	movs	r3, #0
 8001790:	e000      	b.n	8001794 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001792:	2301      	movs	r3, #1
}
 8001794:	4618      	mov	r0, r3
 8001796:	3708      	adds	r7, #8
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	20000074 	.word	0x20000074
 80017a0:	2000007c 	.word	0x2000007c
 80017a4:	20000078 	.word	0x20000078

080017a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017ac:	4b06      	ldr	r3, [pc, #24]	; (80017c8 <HAL_IncTick+0x20>)
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	461a      	mov	r2, r3
 80017b2:	4b06      	ldr	r3, [pc, #24]	; (80017cc <HAL_IncTick+0x24>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4413      	add	r3, r2
 80017b8:	4a04      	ldr	r2, [pc, #16]	; (80017cc <HAL_IncTick+0x24>)
 80017ba:	6013      	str	r3, [r2, #0]
}
 80017bc:	bf00      	nop
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr
 80017c6:	bf00      	nop
 80017c8:	2000007c 	.word	0x2000007c
 80017cc:	2000082c 	.word	0x2000082c

080017d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  return uwTick;
 80017d4:	4b03      	ldr	r3, [pc, #12]	; (80017e4 <HAL_GetTick+0x14>)
 80017d6:	681b      	ldr	r3, [r3, #0]
}
 80017d8:	4618      	mov	r0, r3
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
 80017e2:	bf00      	nop
 80017e4:	2000082c 	.word	0x2000082c

080017e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b084      	sub	sp, #16
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017f0:	f7ff ffee 	bl	80017d0 <HAL_GetTick>
 80017f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001800:	d005      	beq.n	800180e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001802:	4b0a      	ldr	r3, [pc, #40]	; (800182c <HAL_Delay+0x44>)
 8001804:	781b      	ldrb	r3, [r3, #0]
 8001806:	461a      	mov	r2, r3
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	4413      	add	r3, r2
 800180c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800180e:	bf00      	nop
 8001810:	f7ff ffde 	bl	80017d0 <HAL_GetTick>
 8001814:	4602      	mov	r2, r0
 8001816:	68bb      	ldr	r3, [r7, #8]
 8001818:	1ad3      	subs	r3, r2, r3
 800181a:	68fa      	ldr	r2, [r7, #12]
 800181c:	429a      	cmp	r2, r3
 800181e:	d8f7      	bhi.n	8001810 <HAL_Delay+0x28>
  {
  }
}
 8001820:	bf00      	nop
 8001822:	bf00      	nop
 8001824:	3710      	adds	r7, #16
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	2000007c 	.word	0x2000007c

08001830 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001830:	b480      	push	{r7}
 8001832:	b085      	sub	sp, #20
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	f003 0307 	and.w	r3, r3, #7
 800183e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001840:	4b0c      	ldr	r3, [pc, #48]	; (8001874 <__NVIC_SetPriorityGrouping+0x44>)
 8001842:	68db      	ldr	r3, [r3, #12]
 8001844:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001846:	68ba      	ldr	r2, [r7, #8]
 8001848:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800184c:	4013      	ands	r3, r2
 800184e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001858:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800185c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001860:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001862:	4a04      	ldr	r2, [pc, #16]	; (8001874 <__NVIC_SetPriorityGrouping+0x44>)
 8001864:	68bb      	ldr	r3, [r7, #8]
 8001866:	60d3      	str	r3, [r2, #12]
}
 8001868:	bf00      	nop
 800186a:	3714      	adds	r7, #20
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr
 8001874:	e000ed00 	.word	0xe000ed00

08001878 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800187c:	4b04      	ldr	r3, [pc, #16]	; (8001890 <__NVIC_GetPriorityGrouping+0x18>)
 800187e:	68db      	ldr	r3, [r3, #12]
 8001880:	0a1b      	lsrs	r3, r3, #8
 8001882:	f003 0307 	and.w	r3, r3, #7
}
 8001886:	4618      	mov	r0, r3
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr
 8001890:	e000ed00 	.word	0xe000ed00

08001894 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001894:	b480      	push	{r7}
 8001896:	b083      	sub	sp, #12
 8001898:	af00      	add	r7, sp, #0
 800189a:	4603      	mov	r3, r0
 800189c:	6039      	str	r1, [r7, #0]
 800189e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	db0a      	blt.n	80018be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	b2da      	uxtb	r2, r3
 80018ac:	490c      	ldr	r1, [pc, #48]	; (80018e0 <__NVIC_SetPriority+0x4c>)
 80018ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018b2:	0112      	lsls	r2, r2, #4
 80018b4:	b2d2      	uxtb	r2, r2
 80018b6:	440b      	add	r3, r1
 80018b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018bc:	e00a      	b.n	80018d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	b2da      	uxtb	r2, r3
 80018c2:	4908      	ldr	r1, [pc, #32]	; (80018e4 <__NVIC_SetPriority+0x50>)
 80018c4:	79fb      	ldrb	r3, [r7, #7]
 80018c6:	f003 030f 	and.w	r3, r3, #15
 80018ca:	3b04      	subs	r3, #4
 80018cc:	0112      	lsls	r2, r2, #4
 80018ce:	b2d2      	uxtb	r2, r2
 80018d0:	440b      	add	r3, r1
 80018d2:	761a      	strb	r2, [r3, #24]
}
 80018d4:	bf00      	nop
 80018d6:	370c      	adds	r7, #12
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr
 80018e0:	e000e100 	.word	0xe000e100
 80018e4:	e000ed00 	.word	0xe000ed00

080018e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b089      	sub	sp, #36	; 0x24
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	60f8      	str	r0, [r7, #12]
 80018f0:	60b9      	str	r1, [r7, #8]
 80018f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	f003 0307 	and.w	r3, r3, #7
 80018fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018fc:	69fb      	ldr	r3, [r7, #28]
 80018fe:	f1c3 0307 	rsb	r3, r3, #7
 8001902:	2b04      	cmp	r3, #4
 8001904:	bf28      	it	cs
 8001906:	2304      	movcs	r3, #4
 8001908:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	3304      	adds	r3, #4
 800190e:	2b06      	cmp	r3, #6
 8001910:	d902      	bls.n	8001918 <NVIC_EncodePriority+0x30>
 8001912:	69fb      	ldr	r3, [r7, #28]
 8001914:	3b03      	subs	r3, #3
 8001916:	e000      	b.n	800191a <NVIC_EncodePriority+0x32>
 8001918:	2300      	movs	r3, #0
 800191a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800191c:	f04f 32ff 	mov.w	r2, #4294967295
 8001920:	69bb      	ldr	r3, [r7, #24]
 8001922:	fa02 f303 	lsl.w	r3, r2, r3
 8001926:	43da      	mvns	r2, r3
 8001928:	68bb      	ldr	r3, [r7, #8]
 800192a:	401a      	ands	r2, r3
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001930:	f04f 31ff 	mov.w	r1, #4294967295
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	fa01 f303 	lsl.w	r3, r1, r3
 800193a:	43d9      	mvns	r1, r3
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001940:	4313      	orrs	r3, r2
         );
}
 8001942:	4618      	mov	r0, r3
 8001944:	3724      	adds	r7, #36	; 0x24
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr
	...

08001950 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	3b01      	subs	r3, #1
 800195c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001960:	d301      	bcc.n	8001966 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001962:	2301      	movs	r3, #1
 8001964:	e00f      	b.n	8001986 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001966:	4a0a      	ldr	r2, [pc, #40]	; (8001990 <SysTick_Config+0x40>)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	3b01      	subs	r3, #1
 800196c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800196e:	210f      	movs	r1, #15
 8001970:	f04f 30ff 	mov.w	r0, #4294967295
 8001974:	f7ff ff8e 	bl	8001894 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001978:	4b05      	ldr	r3, [pc, #20]	; (8001990 <SysTick_Config+0x40>)
 800197a:	2200      	movs	r2, #0
 800197c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800197e:	4b04      	ldr	r3, [pc, #16]	; (8001990 <SysTick_Config+0x40>)
 8001980:	2207      	movs	r2, #7
 8001982:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001984:	2300      	movs	r3, #0
}
 8001986:	4618      	mov	r0, r3
 8001988:	3708      	adds	r7, #8
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	e000e010 	.word	0xe000e010

08001994 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800199c:	6878      	ldr	r0, [r7, #4]
 800199e:	f7ff ff47 	bl	8001830 <__NVIC_SetPriorityGrouping>
}
 80019a2:	bf00      	nop
 80019a4:	3708      	adds	r7, #8
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}

080019aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019aa:	b580      	push	{r7, lr}
 80019ac:	b086      	sub	sp, #24
 80019ae:	af00      	add	r7, sp, #0
 80019b0:	4603      	mov	r3, r0
 80019b2:	60b9      	str	r1, [r7, #8]
 80019b4:	607a      	str	r2, [r7, #4]
 80019b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019b8:	2300      	movs	r3, #0
 80019ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019bc:	f7ff ff5c 	bl	8001878 <__NVIC_GetPriorityGrouping>
 80019c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019c2:	687a      	ldr	r2, [r7, #4]
 80019c4:	68b9      	ldr	r1, [r7, #8]
 80019c6:	6978      	ldr	r0, [r7, #20]
 80019c8:	f7ff ff8e 	bl	80018e8 <NVIC_EncodePriority>
 80019cc:	4602      	mov	r2, r0
 80019ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019d2:	4611      	mov	r1, r2
 80019d4:	4618      	mov	r0, r3
 80019d6:	f7ff ff5d 	bl	8001894 <__NVIC_SetPriority>
}
 80019da:	bf00      	nop
 80019dc:	3718      	adds	r7, #24
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}

080019e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019e2:	b580      	push	{r7, lr}
 80019e4:	b082      	sub	sp, #8
 80019e6:	af00      	add	r7, sp, #0
 80019e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019ea:	6878      	ldr	r0, [r7, #4]
 80019ec:	f7ff ffb0 	bl	8001950 <SysTick_Config>
 80019f0:	4603      	mov	r3, r0
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	3708      	adds	r7, #8
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}

080019fa <HAL_FMPI2C_Init>:
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FMPI2C_Init(FMPI2C_HandleTypeDef *hfmpi2c)
{
 80019fa:	b580      	push	{r7, lr}
 80019fc:	b082      	sub	sp, #8
 80019fe:	af00      	add	r7, sp, #0
 8001a00:	6078      	str	r0, [r7, #4]
  /* Check the FMPI2C handle allocation */
  if (hfmpi2c == NULL)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d101      	bne.n	8001a0c <HAL_FMPI2C_Init+0x12>
  {
    return HAL_ERROR;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	e081      	b.n	8001b10 <HAL_FMPI2C_Init+0x116>
  assert_param(IS_FMPI2C_OWN_ADDRESS2(hfmpi2c->Init.OwnAddress2));
  assert_param(IS_FMPI2C_OWN_ADDRESS2_MASK(hfmpi2c->Init.OwnAddress2Masks));
  assert_param(IS_FMPI2C_GENERAL_CALL(hfmpi2c->Init.GeneralCallMode));
  assert_param(IS_FMPI2C_NO_STRETCH(hfmpi2c->Init.NoStretchMode));

  if (hfmpi2c->State == HAL_FMPI2C_STATE_RESET)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a12:	b2db      	uxtb	r3, r3
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d106      	bne.n	8001a26 <HAL_FMPI2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfmpi2c->Lock = HAL_UNLOCKED;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hfmpi2c->MspInitCallback(hfmpi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_FMPI2C_MspInit(hfmpi2c);
 8001a20:	6878      	ldr	r0, [r7, #4]
 8001a22:	f7ff fb2f 	bl	8001084 <HAL_FMPI2C_MspInit>
#endif /* USE_HAL_FMPI2C_REGISTER_CALLBACKS */
  }

  hfmpi2c->State = HAL_FMPI2C_STATE_BUSY;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2224      	movs	r2, #36	; 0x24
 8001a2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected FMPI2C peripheral */
  __HAL_FMPI2C_DISABLE(hfmpi2c);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	681a      	ldr	r2, [r3, #0]
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f022 0201 	bic.w	r2, r2, #1
 8001a3c:	601a      	str	r2, [r3, #0]

  /*---------------------------- FMPI2Cx TIMINGR Configuration ------------------*/
  /* Configure FMPI2Cx: Frequency range */
  hfmpi2c->Instance->TIMINGR = hfmpi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	685a      	ldr	r2, [r3, #4]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001a4a:	611a      	str	r2, [r3, #16]

  /*---------------------------- FMPI2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hfmpi2c->Instance->OAR1 &= ~FMPI2C_OAR1_OA1EN;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	689a      	ldr	r2, [r3, #8]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001a5a:	609a      	str	r2, [r3, #8]

  /* Configure FMPI2Cx: Own Address1 and ack own address1 mode */
  if (hfmpi2c->Init.AddressingMode == FMPI2C_ADDRESSINGMODE_7BIT)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	68db      	ldr	r3, [r3, #12]
 8001a60:	2b01      	cmp	r3, #1
 8001a62:	d107      	bne.n	8001a74 <HAL_FMPI2C_Init+0x7a>
  {
    hfmpi2c->Instance->OAR1 = (FMPI2C_OAR1_OA1EN | hfmpi2c->Init.OwnAddress1);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	689a      	ldr	r2, [r3, #8]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001a70:	609a      	str	r2, [r3, #8]
 8001a72:	e006      	b.n	8001a82 <HAL_FMPI2C_Init+0x88>
  }
  else /* FMPI2C_ADDRESSINGMODE_10BIT */
  {
    hfmpi2c->Instance->OAR1 = (FMPI2C_OAR1_OA1EN | FMPI2C_OAR1_OA1MODE | hfmpi2c->Init.OwnAddress1);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	689a      	ldr	r2, [r3, #8]
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001a80:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- FMPI2Cx CR2 Configuration ----------------------*/
  /* Configure FMPI2Cx: Addressing Master mode */
  if (hfmpi2c->Init.AddressingMode == FMPI2C_ADDRESSINGMODE_10BIT)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	68db      	ldr	r3, [r3, #12]
 8001a86:	2b02      	cmp	r3, #2
 8001a88:	d104      	bne.n	8001a94 <HAL_FMPI2C_Init+0x9a>
  {
    hfmpi2c->Instance->CR2 = (FMPI2C_CR2_ADD10);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001a92:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hfmpi2c->Instance->CR2 |= (FMPI2C_CR2_AUTOEND | FMPI2C_CR2_NACK);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	687a      	ldr	r2, [r7, #4]
 8001a9c:	6812      	ldr	r2, [r2, #0]
 8001a9e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001aa2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001aa6:	6053      	str	r3, [r2, #4]

  /*---------------------------- FMPI2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hfmpi2c->Instance->OAR2 &= ~FMPI2C_DUALADDRESS_ENABLE;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	68da      	ldr	r2, [r3, #12]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ab6:	60da      	str	r2, [r3, #12]

  /* Configure FMPI2Cx: Dual mode and Own Address2 */
  hfmpi2c->Instance->OAR2 = (hfmpi2c->Init.DualAddressMode | hfmpi2c->Init.OwnAddress2 | \
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	691a      	ldr	r2, [r3, #16]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	695b      	ldr	r3, [r3, #20]
 8001ac0:	ea42 0103 	orr.w	r1, r2, r3
                             (hfmpi2c->Init.OwnAddress2Masks << 8));
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	699b      	ldr	r3, [r3, #24]
 8001ac8:	021a      	lsls	r2, r3, #8
  hfmpi2c->Instance->OAR2 = (hfmpi2c->Init.DualAddressMode | hfmpi2c->Init.OwnAddress2 | \
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	430a      	orrs	r2, r1
 8001ad0:	60da      	str	r2, [r3, #12]

  /*---------------------------- FMPI2Cx CR1 Configuration ----------------------*/
  /* Configure FMPI2Cx: Generalcall and NoStretch mode */
  hfmpi2c->Instance->CR1 = (hfmpi2c->Init.GeneralCallMode | hfmpi2c->Init.NoStretchMode);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	69d9      	ldr	r1, [r3, #28]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6a1a      	ldr	r2, [r3, #32]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	430a      	orrs	r2, r1
 8001ae0:	601a      	str	r2, [r3, #0]

  /* Enable the selected FMPI2C peripheral */
  __HAL_FMPI2C_ENABLE(hfmpi2c);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f042 0201 	orr.w	r2, r2, #1
 8001af0:	601a      	str	r2, [r3, #0]

  hfmpi2c->ErrorCode = HAL_FMPI2C_ERROR_NONE;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2200      	movs	r2, #0
 8001af6:	645a      	str	r2, [r3, #68]	; 0x44
  hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2220      	movs	r2, #32
 8001afc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hfmpi2c->PreviousState = FMPI2C_STATE_NONE;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2200      	movs	r2, #0
 8001b04:	631a      	str	r2, [r3, #48]	; 0x30
  hfmpi2c->Mode = HAL_FMPI2C_MODE_NONE;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2200      	movs	r2, #0
 8001b0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001b0e:	2300      	movs	r3, #0
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	3708      	adds	r7, #8
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}

08001b18 <HAL_FMPI2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified FMPI2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FMPI2CEx_ConfigAnalogFilter(FMPI2C_HandleTypeDef *hfmpi2c, uint32_t AnalogFilter)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b083      	sub	sp, #12
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
 8001b20:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMPI2C_ALL_INSTANCE(hfmpi2c->Instance));
  assert_param(IS_FMPI2C_ANALOG_FILTER(AnalogFilter));

  if (hfmpi2c->State == HAL_FMPI2C_STATE_READY)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b28:	b2db      	uxtb	r3, r3
 8001b2a:	2b20      	cmp	r3, #32
 8001b2c:	d138      	bne.n	8001ba0 <HAL_FMPI2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hfmpi2c);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001b34:	2b01      	cmp	r3, #1
 8001b36:	d101      	bne.n	8001b3c <HAL_FMPI2CEx_ConfigAnalogFilter+0x24>
 8001b38:	2302      	movs	r3, #2
 8001b3a:	e032      	b.n	8001ba2 <HAL_FMPI2CEx_ConfigAnalogFilter+0x8a>
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2201      	movs	r2, #1
 8001b40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hfmpi2c->State = HAL_FMPI2C_STATE_BUSY;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2224      	movs	r2, #36	; 0x24
 8001b48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected FMPI2C peripheral */
    __HAL_FMPI2C_DISABLE(hfmpi2c);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	681a      	ldr	r2, [r3, #0]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f022 0201 	bic.w	r2, r2, #1
 8001b5a:	601a      	str	r2, [r3, #0]

    /* Reset FMPI2Cx ANOFF bit */
    hfmpi2c->Instance->CR1 &= ~(FMPI2C_CR1_ANFOFF);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	681a      	ldr	r2, [r3, #0]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001b6a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hfmpi2c->Instance->CR1 |= AnalogFilter;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	6819      	ldr	r1, [r3, #0]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	683a      	ldr	r2, [r7, #0]
 8001b78:	430a      	orrs	r2, r1
 8001b7a:	601a      	str	r2, [r3, #0]

    __HAL_FMPI2C_ENABLE(hfmpi2c);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	681a      	ldr	r2, [r3, #0]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f042 0201 	orr.w	r2, r2, #1
 8001b8a:	601a      	str	r2, [r3, #0]

    hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2220      	movs	r2, #32
 8001b90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hfmpi2c);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2200      	movs	r2, #0
 8001b98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	e000      	b.n	8001ba2 <HAL_FMPI2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001ba0:	2302      	movs	r3, #2
  }
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	370c      	adds	r7, #12
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr
	...

08001bb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b089      	sub	sp, #36	; 0x24
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
 8001bb8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	61fb      	str	r3, [r7, #28]
 8001bca:	e165      	b.n	8001e98 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001bcc:	2201      	movs	r2, #1
 8001bce:	69fb      	ldr	r3, [r7, #28]
 8001bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	697a      	ldr	r2, [r7, #20]
 8001bdc:	4013      	ands	r3, r2
 8001bde:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001be0:	693a      	ldr	r2, [r7, #16]
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	429a      	cmp	r2, r3
 8001be6:	f040 8154 	bne.w	8001e92 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	f003 0303 	and.w	r3, r3, #3
 8001bf2:	2b01      	cmp	r3, #1
 8001bf4:	d005      	beq.n	8001c02 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bfe:	2b02      	cmp	r3, #2
 8001c00:	d130      	bne.n	8001c64 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	689b      	ldr	r3, [r3, #8]
 8001c06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c08:	69fb      	ldr	r3, [r7, #28]
 8001c0a:	005b      	lsls	r3, r3, #1
 8001c0c:	2203      	movs	r2, #3
 8001c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c12:	43db      	mvns	r3, r3
 8001c14:	69ba      	ldr	r2, [r7, #24]
 8001c16:	4013      	ands	r3, r2
 8001c18:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	68da      	ldr	r2, [r3, #12]
 8001c1e:	69fb      	ldr	r3, [r7, #28]
 8001c20:	005b      	lsls	r3, r3, #1
 8001c22:	fa02 f303 	lsl.w	r3, r2, r3
 8001c26:	69ba      	ldr	r2, [r7, #24]
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	69ba      	ldr	r2, [r7, #24]
 8001c30:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c38:	2201      	movs	r2, #1
 8001c3a:	69fb      	ldr	r3, [r7, #28]
 8001c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c40:	43db      	mvns	r3, r3
 8001c42:	69ba      	ldr	r2, [r7, #24]
 8001c44:	4013      	ands	r3, r2
 8001c46:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	091b      	lsrs	r3, r3, #4
 8001c4e:	f003 0201 	and.w	r2, r3, #1
 8001c52:	69fb      	ldr	r3, [r7, #28]
 8001c54:	fa02 f303 	lsl.w	r3, r2, r3
 8001c58:	69ba      	ldr	r2, [r7, #24]
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	69ba      	ldr	r2, [r7, #24]
 8001c62:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f003 0303 	and.w	r3, r3, #3
 8001c6c:	2b03      	cmp	r3, #3
 8001c6e:	d017      	beq.n	8001ca0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	68db      	ldr	r3, [r3, #12]
 8001c74:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c76:	69fb      	ldr	r3, [r7, #28]
 8001c78:	005b      	lsls	r3, r3, #1
 8001c7a:	2203      	movs	r2, #3
 8001c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c80:	43db      	mvns	r3, r3
 8001c82:	69ba      	ldr	r2, [r7, #24]
 8001c84:	4013      	ands	r3, r2
 8001c86:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	689a      	ldr	r2, [r3, #8]
 8001c8c:	69fb      	ldr	r3, [r7, #28]
 8001c8e:	005b      	lsls	r3, r3, #1
 8001c90:	fa02 f303 	lsl.w	r3, r2, r3
 8001c94:	69ba      	ldr	r2, [r7, #24]
 8001c96:	4313      	orrs	r3, r2
 8001c98:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	69ba      	ldr	r2, [r7, #24]
 8001c9e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	f003 0303 	and.w	r3, r3, #3
 8001ca8:	2b02      	cmp	r3, #2
 8001caa:	d123      	bne.n	8001cf4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001cac:	69fb      	ldr	r3, [r7, #28]
 8001cae:	08da      	lsrs	r2, r3, #3
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	3208      	adds	r2, #8
 8001cb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001cba:	69fb      	ldr	r3, [r7, #28]
 8001cbc:	f003 0307 	and.w	r3, r3, #7
 8001cc0:	009b      	lsls	r3, r3, #2
 8001cc2:	220f      	movs	r2, #15
 8001cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc8:	43db      	mvns	r3, r3
 8001cca:	69ba      	ldr	r2, [r7, #24]
 8001ccc:	4013      	ands	r3, r2
 8001cce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	691a      	ldr	r2, [r3, #16]
 8001cd4:	69fb      	ldr	r3, [r7, #28]
 8001cd6:	f003 0307 	and.w	r3, r3, #7
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce0:	69ba      	ldr	r2, [r7, #24]
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ce6:	69fb      	ldr	r3, [r7, #28]
 8001ce8:	08da      	lsrs	r2, r3, #3
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	3208      	adds	r2, #8
 8001cee:	69b9      	ldr	r1, [r7, #24]
 8001cf0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001cfa:	69fb      	ldr	r3, [r7, #28]
 8001cfc:	005b      	lsls	r3, r3, #1
 8001cfe:	2203      	movs	r2, #3
 8001d00:	fa02 f303 	lsl.w	r3, r2, r3
 8001d04:	43db      	mvns	r3, r3
 8001d06:	69ba      	ldr	r2, [r7, #24]
 8001d08:	4013      	ands	r3, r2
 8001d0a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	f003 0203 	and.w	r2, r3, #3
 8001d14:	69fb      	ldr	r3, [r7, #28]
 8001d16:	005b      	lsls	r3, r3, #1
 8001d18:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1c:	69ba      	ldr	r2, [r7, #24]
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	69ba      	ldr	r2, [r7, #24]
 8001d26:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	f000 80ae 	beq.w	8001e92 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d36:	2300      	movs	r3, #0
 8001d38:	60fb      	str	r3, [r7, #12]
 8001d3a:	4b5d      	ldr	r3, [pc, #372]	; (8001eb0 <HAL_GPIO_Init+0x300>)
 8001d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d3e:	4a5c      	ldr	r2, [pc, #368]	; (8001eb0 <HAL_GPIO_Init+0x300>)
 8001d40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d44:	6453      	str	r3, [r2, #68]	; 0x44
 8001d46:	4b5a      	ldr	r3, [pc, #360]	; (8001eb0 <HAL_GPIO_Init+0x300>)
 8001d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d4e:	60fb      	str	r3, [r7, #12]
 8001d50:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d52:	4a58      	ldr	r2, [pc, #352]	; (8001eb4 <HAL_GPIO_Init+0x304>)
 8001d54:	69fb      	ldr	r3, [r7, #28]
 8001d56:	089b      	lsrs	r3, r3, #2
 8001d58:	3302      	adds	r3, #2
 8001d5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d60:	69fb      	ldr	r3, [r7, #28]
 8001d62:	f003 0303 	and.w	r3, r3, #3
 8001d66:	009b      	lsls	r3, r3, #2
 8001d68:	220f      	movs	r2, #15
 8001d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6e:	43db      	mvns	r3, r3
 8001d70:	69ba      	ldr	r2, [r7, #24]
 8001d72:	4013      	ands	r3, r2
 8001d74:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	4a4f      	ldr	r2, [pc, #316]	; (8001eb8 <HAL_GPIO_Init+0x308>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d025      	beq.n	8001dca <HAL_GPIO_Init+0x21a>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	4a4e      	ldr	r2, [pc, #312]	; (8001ebc <HAL_GPIO_Init+0x30c>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d01f      	beq.n	8001dc6 <HAL_GPIO_Init+0x216>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	4a4d      	ldr	r2, [pc, #308]	; (8001ec0 <HAL_GPIO_Init+0x310>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d019      	beq.n	8001dc2 <HAL_GPIO_Init+0x212>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	4a4c      	ldr	r2, [pc, #304]	; (8001ec4 <HAL_GPIO_Init+0x314>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d013      	beq.n	8001dbe <HAL_GPIO_Init+0x20e>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	4a4b      	ldr	r2, [pc, #300]	; (8001ec8 <HAL_GPIO_Init+0x318>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d00d      	beq.n	8001dba <HAL_GPIO_Init+0x20a>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	4a4a      	ldr	r2, [pc, #296]	; (8001ecc <HAL_GPIO_Init+0x31c>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d007      	beq.n	8001db6 <HAL_GPIO_Init+0x206>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	4a49      	ldr	r2, [pc, #292]	; (8001ed0 <HAL_GPIO_Init+0x320>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d101      	bne.n	8001db2 <HAL_GPIO_Init+0x202>
 8001dae:	2306      	movs	r3, #6
 8001db0:	e00c      	b.n	8001dcc <HAL_GPIO_Init+0x21c>
 8001db2:	2307      	movs	r3, #7
 8001db4:	e00a      	b.n	8001dcc <HAL_GPIO_Init+0x21c>
 8001db6:	2305      	movs	r3, #5
 8001db8:	e008      	b.n	8001dcc <HAL_GPIO_Init+0x21c>
 8001dba:	2304      	movs	r3, #4
 8001dbc:	e006      	b.n	8001dcc <HAL_GPIO_Init+0x21c>
 8001dbe:	2303      	movs	r3, #3
 8001dc0:	e004      	b.n	8001dcc <HAL_GPIO_Init+0x21c>
 8001dc2:	2302      	movs	r3, #2
 8001dc4:	e002      	b.n	8001dcc <HAL_GPIO_Init+0x21c>
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e000      	b.n	8001dcc <HAL_GPIO_Init+0x21c>
 8001dca:	2300      	movs	r3, #0
 8001dcc:	69fa      	ldr	r2, [r7, #28]
 8001dce:	f002 0203 	and.w	r2, r2, #3
 8001dd2:	0092      	lsls	r2, r2, #2
 8001dd4:	4093      	lsls	r3, r2
 8001dd6:	69ba      	ldr	r2, [r7, #24]
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ddc:	4935      	ldr	r1, [pc, #212]	; (8001eb4 <HAL_GPIO_Init+0x304>)
 8001dde:	69fb      	ldr	r3, [r7, #28]
 8001de0:	089b      	lsrs	r3, r3, #2
 8001de2:	3302      	adds	r3, #2
 8001de4:	69ba      	ldr	r2, [r7, #24]
 8001de6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001dea:	4b3a      	ldr	r3, [pc, #232]	; (8001ed4 <HAL_GPIO_Init+0x324>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	43db      	mvns	r3, r3
 8001df4:	69ba      	ldr	r2, [r7, #24]
 8001df6:	4013      	ands	r3, r2
 8001df8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d003      	beq.n	8001e0e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001e06:	69ba      	ldr	r2, [r7, #24]
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e0e:	4a31      	ldr	r2, [pc, #196]	; (8001ed4 <HAL_GPIO_Init+0x324>)
 8001e10:	69bb      	ldr	r3, [r7, #24]
 8001e12:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001e14:	4b2f      	ldr	r3, [pc, #188]	; (8001ed4 <HAL_GPIO_Init+0x324>)
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	43db      	mvns	r3, r3
 8001e1e:	69ba      	ldr	r2, [r7, #24]
 8001e20:	4013      	ands	r3, r2
 8001e22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d003      	beq.n	8001e38 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001e30:	69ba      	ldr	r2, [r7, #24]
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	4313      	orrs	r3, r2
 8001e36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e38:	4a26      	ldr	r2, [pc, #152]	; (8001ed4 <HAL_GPIO_Init+0x324>)
 8001e3a:	69bb      	ldr	r3, [r7, #24]
 8001e3c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e3e:	4b25      	ldr	r3, [pc, #148]	; (8001ed4 <HAL_GPIO_Init+0x324>)
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	43db      	mvns	r3, r3
 8001e48:	69ba      	ldr	r2, [r7, #24]
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d003      	beq.n	8001e62 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001e5a:	69ba      	ldr	r2, [r7, #24]
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e62:	4a1c      	ldr	r2, [pc, #112]	; (8001ed4 <HAL_GPIO_Init+0x324>)
 8001e64:	69bb      	ldr	r3, [r7, #24]
 8001e66:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e68:	4b1a      	ldr	r3, [pc, #104]	; (8001ed4 <HAL_GPIO_Init+0x324>)
 8001e6a:	68db      	ldr	r3, [r3, #12]
 8001e6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	43db      	mvns	r3, r3
 8001e72:	69ba      	ldr	r2, [r7, #24]
 8001e74:	4013      	ands	r3, r2
 8001e76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d003      	beq.n	8001e8c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001e84:	69ba      	ldr	r2, [r7, #24]
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e8c:	4a11      	ldr	r2, [pc, #68]	; (8001ed4 <HAL_GPIO_Init+0x324>)
 8001e8e:	69bb      	ldr	r3, [r7, #24]
 8001e90:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e92:	69fb      	ldr	r3, [r7, #28]
 8001e94:	3301      	adds	r3, #1
 8001e96:	61fb      	str	r3, [r7, #28]
 8001e98:	69fb      	ldr	r3, [r7, #28]
 8001e9a:	2b0f      	cmp	r3, #15
 8001e9c:	f67f ae96 	bls.w	8001bcc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ea0:	bf00      	nop
 8001ea2:	bf00      	nop
 8001ea4:	3724      	adds	r7, #36	; 0x24
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr
 8001eae:	bf00      	nop
 8001eb0:	40023800 	.word	0x40023800
 8001eb4:	40013800 	.word	0x40013800
 8001eb8:	40020000 	.word	0x40020000
 8001ebc:	40020400 	.word	0x40020400
 8001ec0:	40020800 	.word	0x40020800
 8001ec4:	40020c00 	.word	0x40020c00
 8001ec8:	40021000 	.word	0x40021000
 8001ecc:	40021400 	.word	0x40021400
 8001ed0:	40021800 	.word	0x40021800
 8001ed4:	40013c00 	.word	0x40013c00

08001ed8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
 8001ee0:	460b      	mov	r3, r1
 8001ee2:	807b      	strh	r3, [r7, #2]
 8001ee4:	4613      	mov	r3, r2
 8001ee6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ee8:	787b      	ldrb	r3, [r7, #1]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d003      	beq.n	8001ef6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001eee:	887a      	ldrh	r2, [r7, #2]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ef4:	e003      	b.n	8001efe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001ef6:	887b      	ldrh	r3, [r7, #2]
 8001ef8:	041a      	lsls	r2, r3, #16
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	619a      	str	r2, [r3, #24]
}
 8001efe:	bf00      	nop
 8001f00:	370c      	adds	r7, #12
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr
	...

08001f0c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b084      	sub	sp, #16
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d101      	bne.n	8001f1e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e12b      	b.n	8002176 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f24:	b2db      	uxtb	r3, r3
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d106      	bne.n	8001f38 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001f32:	6878      	ldr	r0, [r7, #4]
 8001f34:	f7ff f8ee 	bl	8001114 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2224      	movs	r2, #36	; 0x24
 8001f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f022 0201 	bic.w	r2, r2, #1
 8001f4e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001f5e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001f6e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001f70:	f001 f854 	bl	800301c <HAL_RCC_GetPCLK1Freq>
 8001f74:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	4a81      	ldr	r2, [pc, #516]	; (8002180 <HAL_I2C_Init+0x274>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d807      	bhi.n	8001f90 <HAL_I2C_Init+0x84>
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	4a80      	ldr	r2, [pc, #512]	; (8002184 <HAL_I2C_Init+0x278>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	bf94      	ite	ls
 8001f88:	2301      	movls	r3, #1
 8001f8a:	2300      	movhi	r3, #0
 8001f8c:	b2db      	uxtb	r3, r3
 8001f8e:	e006      	b.n	8001f9e <HAL_I2C_Init+0x92>
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	4a7d      	ldr	r2, [pc, #500]	; (8002188 <HAL_I2C_Init+0x27c>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	bf94      	ite	ls
 8001f98:	2301      	movls	r3, #1
 8001f9a:	2300      	movhi	r3, #0
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d001      	beq.n	8001fa6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e0e7      	b.n	8002176 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	4a78      	ldr	r2, [pc, #480]	; (800218c <HAL_I2C_Init+0x280>)
 8001faa:	fba2 2303 	umull	r2, r3, r2, r3
 8001fae:	0c9b      	lsrs	r3, r3, #18
 8001fb0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	68ba      	ldr	r2, [r7, #8]
 8001fc2:	430a      	orrs	r2, r1
 8001fc4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	6a1b      	ldr	r3, [r3, #32]
 8001fcc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	4a6a      	ldr	r2, [pc, #424]	; (8002180 <HAL_I2C_Init+0x274>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d802      	bhi.n	8001fe0 <HAL_I2C_Init+0xd4>
 8001fda:	68bb      	ldr	r3, [r7, #8]
 8001fdc:	3301      	adds	r3, #1
 8001fde:	e009      	b.n	8001ff4 <HAL_I2C_Init+0xe8>
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001fe6:	fb02 f303 	mul.w	r3, r2, r3
 8001fea:	4a69      	ldr	r2, [pc, #420]	; (8002190 <HAL_I2C_Init+0x284>)
 8001fec:	fba2 2303 	umull	r2, r3, r2, r3
 8001ff0:	099b      	lsrs	r3, r3, #6
 8001ff2:	3301      	adds	r3, #1
 8001ff4:	687a      	ldr	r2, [r7, #4]
 8001ff6:	6812      	ldr	r2, [r2, #0]
 8001ff8:	430b      	orrs	r3, r1
 8001ffa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	69db      	ldr	r3, [r3, #28]
 8002002:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002006:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	495c      	ldr	r1, [pc, #368]	; (8002180 <HAL_I2C_Init+0x274>)
 8002010:	428b      	cmp	r3, r1
 8002012:	d819      	bhi.n	8002048 <HAL_I2C_Init+0x13c>
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	1e59      	subs	r1, r3, #1
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	005b      	lsls	r3, r3, #1
 800201e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002022:	1c59      	adds	r1, r3, #1
 8002024:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002028:	400b      	ands	r3, r1
 800202a:	2b00      	cmp	r3, #0
 800202c:	d00a      	beq.n	8002044 <HAL_I2C_Init+0x138>
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	1e59      	subs	r1, r3, #1
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	005b      	lsls	r3, r3, #1
 8002038:	fbb1 f3f3 	udiv	r3, r1, r3
 800203c:	3301      	adds	r3, #1
 800203e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002042:	e051      	b.n	80020e8 <HAL_I2C_Init+0x1dc>
 8002044:	2304      	movs	r3, #4
 8002046:	e04f      	b.n	80020e8 <HAL_I2C_Init+0x1dc>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d111      	bne.n	8002074 <HAL_I2C_Init+0x168>
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	1e58      	subs	r0, r3, #1
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6859      	ldr	r1, [r3, #4]
 8002058:	460b      	mov	r3, r1
 800205a:	005b      	lsls	r3, r3, #1
 800205c:	440b      	add	r3, r1
 800205e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002062:	3301      	adds	r3, #1
 8002064:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002068:	2b00      	cmp	r3, #0
 800206a:	bf0c      	ite	eq
 800206c:	2301      	moveq	r3, #1
 800206e:	2300      	movne	r3, #0
 8002070:	b2db      	uxtb	r3, r3
 8002072:	e012      	b.n	800209a <HAL_I2C_Init+0x18e>
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	1e58      	subs	r0, r3, #1
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6859      	ldr	r1, [r3, #4]
 800207c:	460b      	mov	r3, r1
 800207e:	009b      	lsls	r3, r3, #2
 8002080:	440b      	add	r3, r1
 8002082:	0099      	lsls	r1, r3, #2
 8002084:	440b      	add	r3, r1
 8002086:	fbb0 f3f3 	udiv	r3, r0, r3
 800208a:	3301      	adds	r3, #1
 800208c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002090:	2b00      	cmp	r3, #0
 8002092:	bf0c      	ite	eq
 8002094:	2301      	moveq	r3, #1
 8002096:	2300      	movne	r3, #0
 8002098:	b2db      	uxtb	r3, r3
 800209a:	2b00      	cmp	r3, #0
 800209c:	d001      	beq.n	80020a2 <HAL_I2C_Init+0x196>
 800209e:	2301      	movs	r3, #1
 80020a0:	e022      	b.n	80020e8 <HAL_I2C_Init+0x1dc>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	689b      	ldr	r3, [r3, #8]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d10e      	bne.n	80020c8 <HAL_I2C_Init+0x1bc>
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	1e58      	subs	r0, r3, #1
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6859      	ldr	r1, [r3, #4]
 80020b2:	460b      	mov	r3, r1
 80020b4:	005b      	lsls	r3, r3, #1
 80020b6:	440b      	add	r3, r1
 80020b8:	fbb0 f3f3 	udiv	r3, r0, r3
 80020bc:	3301      	adds	r3, #1
 80020be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020c6:	e00f      	b.n	80020e8 <HAL_I2C_Init+0x1dc>
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	1e58      	subs	r0, r3, #1
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6859      	ldr	r1, [r3, #4]
 80020d0:	460b      	mov	r3, r1
 80020d2:	009b      	lsls	r3, r3, #2
 80020d4:	440b      	add	r3, r1
 80020d6:	0099      	lsls	r1, r3, #2
 80020d8:	440b      	add	r3, r1
 80020da:	fbb0 f3f3 	udiv	r3, r0, r3
 80020de:	3301      	adds	r3, #1
 80020e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020e4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80020e8:	6879      	ldr	r1, [r7, #4]
 80020ea:	6809      	ldr	r1, [r1, #0]
 80020ec:	4313      	orrs	r3, r2
 80020ee:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	69da      	ldr	r2, [r3, #28]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6a1b      	ldr	r3, [r3, #32]
 8002102:	431a      	orrs	r2, r3
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	430a      	orrs	r2, r1
 800210a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	689b      	ldr	r3, [r3, #8]
 8002112:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002116:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800211a:	687a      	ldr	r2, [r7, #4]
 800211c:	6911      	ldr	r1, [r2, #16]
 800211e:	687a      	ldr	r2, [r7, #4]
 8002120:	68d2      	ldr	r2, [r2, #12]
 8002122:	4311      	orrs	r1, r2
 8002124:	687a      	ldr	r2, [r7, #4]
 8002126:	6812      	ldr	r2, [r2, #0]
 8002128:	430b      	orrs	r3, r1
 800212a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	68db      	ldr	r3, [r3, #12]
 8002132:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	695a      	ldr	r2, [r3, #20]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	699b      	ldr	r3, [r3, #24]
 800213e:	431a      	orrs	r2, r3
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	430a      	orrs	r2, r1
 8002146:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f042 0201 	orr.w	r2, r2, #1
 8002156:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2200      	movs	r2, #0
 800215c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2220      	movs	r2, #32
 8002162:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2200      	movs	r2, #0
 800216a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2200      	movs	r2, #0
 8002170:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002174:	2300      	movs	r3, #0
}
 8002176:	4618      	mov	r0, r3
 8002178:	3710      	adds	r7, #16
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	000186a0 	.word	0x000186a0
 8002184:	001e847f 	.word	0x001e847f
 8002188:	003d08ff 	.word	0x003d08ff
 800218c:	431bde83 	.word	0x431bde83
 8002190:	10624dd3 	.word	0x10624dd3

08002194 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b088      	sub	sp, #32
 8002198:	af02      	add	r7, sp, #8
 800219a:	60f8      	str	r0, [r7, #12]
 800219c:	607a      	str	r2, [r7, #4]
 800219e:	461a      	mov	r2, r3
 80021a0:	460b      	mov	r3, r1
 80021a2:	817b      	strh	r3, [r7, #10]
 80021a4:	4613      	mov	r3, r2
 80021a6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80021a8:	f7ff fb12 	bl	80017d0 <HAL_GetTick>
 80021ac:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021b4:	b2db      	uxtb	r3, r3
 80021b6:	2b20      	cmp	r3, #32
 80021b8:	f040 80e0 	bne.w	800237c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	9300      	str	r3, [sp, #0]
 80021c0:	2319      	movs	r3, #25
 80021c2:	2201      	movs	r2, #1
 80021c4:	4970      	ldr	r1, [pc, #448]	; (8002388 <HAL_I2C_Master_Transmit+0x1f4>)
 80021c6:	68f8      	ldr	r0, [r7, #12]
 80021c8:	f000 fc58 	bl	8002a7c <I2C_WaitOnFlagUntilTimeout>
 80021cc:	4603      	mov	r3, r0
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d001      	beq.n	80021d6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80021d2:	2302      	movs	r3, #2
 80021d4:	e0d3      	b.n	800237e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021dc:	2b01      	cmp	r3, #1
 80021de:	d101      	bne.n	80021e4 <HAL_I2C_Master_Transmit+0x50>
 80021e0:	2302      	movs	r3, #2
 80021e2:	e0cc      	b.n	800237e <HAL_I2C_Master_Transmit+0x1ea>
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	2201      	movs	r2, #1
 80021e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 0301 	and.w	r3, r3, #1
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d007      	beq.n	800220a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f042 0201 	orr.w	r2, r2, #1
 8002208:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002218:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	2221      	movs	r2, #33	; 0x21
 800221e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	2210      	movs	r2, #16
 8002226:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	2200      	movs	r2, #0
 800222e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	687a      	ldr	r2, [r7, #4]
 8002234:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	893a      	ldrh	r2, [r7, #8]
 800223a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002240:	b29a      	uxth	r2, r3
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	4a50      	ldr	r2, [pc, #320]	; (800238c <HAL_I2C_Master_Transmit+0x1f8>)
 800224a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800224c:	8979      	ldrh	r1, [r7, #10]
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	6a3a      	ldr	r2, [r7, #32]
 8002252:	68f8      	ldr	r0, [r7, #12]
 8002254:	f000 fac2 	bl	80027dc <I2C_MasterRequestWrite>
 8002258:	4603      	mov	r3, r0
 800225a:	2b00      	cmp	r3, #0
 800225c:	d001      	beq.n	8002262 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	e08d      	b.n	800237e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002262:	2300      	movs	r3, #0
 8002264:	613b      	str	r3, [r7, #16]
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	695b      	ldr	r3, [r3, #20]
 800226c:	613b      	str	r3, [r7, #16]
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	699b      	ldr	r3, [r3, #24]
 8002274:	613b      	str	r3, [r7, #16]
 8002276:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002278:	e066      	b.n	8002348 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800227a:	697a      	ldr	r2, [r7, #20]
 800227c:	6a39      	ldr	r1, [r7, #32]
 800227e:	68f8      	ldr	r0, [r7, #12]
 8002280:	f000 fcd2 	bl	8002c28 <I2C_WaitOnTXEFlagUntilTimeout>
 8002284:	4603      	mov	r3, r0
 8002286:	2b00      	cmp	r3, #0
 8002288:	d00d      	beq.n	80022a6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228e:	2b04      	cmp	r3, #4
 8002290:	d107      	bne.n	80022a2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022a0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	e06b      	b.n	800237e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022aa:	781a      	ldrb	r2, [r3, #0]
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b6:	1c5a      	adds	r2, r3, #1
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022c0:	b29b      	uxth	r3, r3
 80022c2:	3b01      	subs	r3, #1
 80022c4:	b29a      	uxth	r2, r3
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022ce:	3b01      	subs	r3, #1
 80022d0:	b29a      	uxth	r2, r3
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	695b      	ldr	r3, [r3, #20]
 80022dc:	f003 0304 	and.w	r3, r3, #4
 80022e0:	2b04      	cmp	r3, #4
 80022e2:	d11b      	bne.n	800231c <HAL_I2C_Master_Transmit+0x188>
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d017      	beq.n	800231c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f0:	781a      	ldrb	r2, [r3, #0]
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022fc:	1c5a      	adds	r2, r3, #1
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002306:	b29b      	uxth	r3, r3
 8002308:	3b01      	subs	r3, #1
 800230a:	b29a      	uxth	r2, r3
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002314:	3b01      	subs	r3, #1
 8002316:	b29a      	uxth	r2, r3
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800231c:	697a      	ldr	r2, [r7, #20]
 800231e:	6a39      	ldr	r1, [r7, #32]
 8002320:	68f8      	ldr	r0, [r7, #12]
 8002322:	f000 fcc2 	bl	8002caa <I2C_WaitOnBTFFlagUntilTimeout>
 8002326:	4603      	mov	r3, r0
 8002328:	2b00      	cmp	r3, #0
 800232a:	d00d      	beq.n	8002348 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002330:	2b04      	cmp	r3, #4
 8002332:	d107      	bne.n	8002344 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	681a      	ldr	r2, [r3, #0]
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002342:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	e01a      	b.n	800237e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800234c:	2b00      	cmp	r3, #0
 800234e:	d194      	bne.n	800227a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800235e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	2220      	movs	r2, #32
 8002364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	2200      	movs	r2, #0
 800236c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	2200      	movs	r2, #0
 8002374:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002378:	2300      	movs	r3, #0
 800237a:	e000      	b.n	800237e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800237c:	2302      	movs	r3, #2
  }
}
 800237e:	4618      	mov	r0, r3
 8002380:	3718      	adds	r7, #24
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	00100002 	.word	0x00100002
 800238c:	ffff0000 	.word	0xffff0000

08002390 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b08c      	sub	sp, #48	; 0x30
 8002394:	af02      	add	r7, sp, #8
 8002396:	60f8      	str	r0, [r7, #12]
 8002398:	607a      	str	r2, [r7, #4]
 800239a:	461a      	mov	r2, r3
 800239c:	460b      	mov	r3, r1
 800239e:	817b      	strh	r3, [r7, #10]
 80023a0:	4613      	mov	r3, r2
 80023a2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80023a4:	f7ff fa14 	bl	80017d0 <HAL_GetTick>
 80023a8:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023b0:	b2db      	uxtb	r3, r3
 80023b2:	2b20      	cmp	r3, #32
 80023b4:	f040 820b 	bne.w	80027ce <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80023b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ba:	9300      	str	r3, [sp, #0]
 80023bc:	2319      	movs	r3, #25
 80023be:	2201      	movs	r2, #1
 80023c0:	497c      	ldr	r1, [pc, #496]	; (80025b4 <HAL_I2C_Master_Receive+0x224>)
 80023c2:	68f8      	ldr	r0, [r7, #12]
 80023c4:	f000 fb5a 	bl	8002a7c <I2C_WaitOnFlagUntilTimeout>
 80023c8:	4603      	mov	r3, r0
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d001      	beq.n	80023d2 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80023ce:	2302      	movs	r3, #2
 80023d0:	e1fe      	b.n	80027d0 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023d8:	2b01      	cmp	r3, #1
 80023da:	d101      	bne.n	80023e0 <HAL_I2C_Master_Receive+0x50>
 80023dc:	2302      	movs	r3, #2
 80023de:	e1f7      	b.n	80027d0 <HAL_I2C_Master_Receive+0x440>
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	2201      	movs	r2, #1
 80023e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 0301 	and.w	r3, r3, #1
 80023f2:	2b01      	cmp	r3, #1
 80023f4:	d007      	beq.n	8002406 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f042 0201 	orr.w	r2, r2, #1
 8002404:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002414:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	2222      	movs	r2, #34	; 0x22
 800241a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	2210      	movs	r2, #16
 8002422:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	2200      	movs	r2, #0
 800242a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	687a      	ldr	r2, [r7, #4]
 8002430:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	893a      	ldrh	r2, [r7, #8]
 8002436:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800243c:	b29a      	uxth	r2, r3
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	4a5c      	ldr	r2, [pc, #368]	; (80025b8 <HAL_I2C_Master_Receive+0x228>)
 8002446:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002448:	8979      	ldrh	r1, [r7, #10]
 800244a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800244c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800244e:	68f8      	ldr	r0, [r7, #12]
 8002450:	f000 fa46 	bl	80028e0 <I2C_MasterRequestRead>
 8002454:	4603      	mov	r3, r0
 8002456:	2b00      	cmp	r3, #0
 8002458:	d001      	beq.n	800245e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e1b8      	b.n	80027d0 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002462:	2b00      	cmp	r3, #0
 8002464:	d113      	bne.n	800248e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002466:	2300      	movs	r3, #0
 8002468:	623b      	str	r3, [r7, #32]
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	695b      	ldr	r3, [r3, #20]
 8002470:	623b      	str	r3, [r7, #32]
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	699b      	ldr	r3, [r3, #24]
 8002478:	623b      	str	r3, [r7, #32]
 800247a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800248a:	601a      	str	r2, [r3, #0]
 800248c:	e18c      	b.n	80027a8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002492:	2b01      	cmp	r3, #1
 8002494:	d11b      	bne.n	80024ce <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024a4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024a6:	2300      	movs	r3, #0
 80024a8:	61fb      	str	r3, [r7, #28]
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	695b      	ldr	r3, [r3, #20]
 80024b0:	61fb      	str	r3, [r7, #28]
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	699b      	ldr	r3, [r3, #24]
 80024b8:	61fb      	str	r3, [r7, #28]
 80024ba:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024ca:	601a      	str	r2, [r3, #0]
 80024cc:	e16c      	b.n	80027a8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024d2:	2b02      	cmp	r3, #2
 80024d4:	d11b      	bne.n	800250e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024e4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	681a      	ldr	r2, [r3, #0]
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80024f4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024f6:	2300      	movs	r3, #0
 80024f8:	61bb      	str	r3, [r7, #24]
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	695b      	ldr	r3, [r3, #20]
 8002500:	61bb      	str	r3, [r7, #24]
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	699b      	ldr	r3, [r3, #24]
 8002508:	61bb      	str	r3, [r7, #24]
 800250a:	69bb      	ldr	r3, [r7, #24]
 800250c:	e14c      	b.n	80027a8 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800251c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800251e:	2300      	movs	r3, #0
 8002520:	617b      	str	r3, [r7, #20]
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	695b      	ldr	r3, [r3, #20]
 8002528:	617b      	str	r3, [r7, #20]
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	699b      	ldr	r3, [r3, #24]
 8002530:	617b      	str	r3, [r7, #20]
 8002532:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002534:	e138      	b.n	80027a8 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800253a:	2b03      	cmp	r3, #3
 800253c:	f200 80f1 	bhi.w	8002722 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002544:	2b01      	cmp	r3, #1
 8002546:	d123      	bne.n	8002590 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002548:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800254a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800254c:	68f8      	ldr	r0, [r7, #12]
 800254e:	f000 fbed 	bl	8002d2c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002552:	4603      	mov	r3, r0
 8002554:	2b00      	cmp	r3, #0
 8002556:	d001      	beq.n	800255c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002558:	2301      	movs	r3, #1
 800255a:	e139      	b.n	80027d0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	691a      	ldr	r2, [r3, #16]
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002566:	b2d2      	uxtb	r2, r2
 8002568:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800256e:	1c5a      	adds	r2, r3, #1
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002578:	3b01      	subs	r3, #1
 800257a:	b29a      	uxth	r2, r3
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002584:	b29b      	uxth	r3, r3
 8002586:	3b01      	subs	r3, #1
 8002588:	b29a      	uxth	r2, r3
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800258e:	e10b      	b.n	80027a8 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002594:	2b02      	cmp	r3, #2
 8002596:	d14e      	bne.n	8002636 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800259a:	9300      	str	r3, [sp, #0]
 800259c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800259e:	2200      	movs	r2, #0
 80025a0:	4906      	ldr	r1, [pc, #24]	; (80025bc <HAL_I2C_Master_Receive+0x22c>)
 80025a2:	68f8      	ldr	r0, [r7, #12]
 80025a4:	f000 fa6a 	bl	8002a7c <I2C_WaitOnFlagUntilTimeout>
 80025a8:	4603      	mov	r3, r0
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d008      	beq.n	80025c0 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e10e      	b.n	80027d0 <HAL_I2C_Master_Receive+0x440>
 80025b2:	bf00      	nop
 80025b4:	00100002 	.word	0x00100002
 80025b8:	ffff0000 	.word	0xffff0000
 80025bc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	691a      	ldr	r2, [r3, #16]
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025da:	b2d2      	uxtb	r2, r2
 80025dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e2:	1c5a      	adds	r2, r3, #1
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025ec:	3b01      	subs	r3, #1
 80025ee:	b29a      	uxth	r2, r3
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025f8:	b29b      	uxth	r3, r3
 80025fa:	3b01      	subs	r3, #1
 80025fc:	b29a      	uxth	r2, r3
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	691a      	ldr	r2, [r3, #16]
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800260c:	b2d2      	uxtb	r2, r2
 800260e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002614:	1c5a      	adds	r2, r3, #1
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800261e:	3b01      	subs	r3, #1
 8002620:	b29a      	uxth	r2, r3
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800262a:	b29b      	uxth	r3, r3
 800262c:	3b01      	subs	r3, #1
 800262e:	b29a      	uxth	r2, r3
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002634:	e0b8      	b.n	80027a8 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002638:	9300      	str	r3, [sp, #0]
 800263a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800263c:	2200      	movs	r2, #0
 800263e:	4966      	ldr	r1, [pc, #408]	; (80027d8 <HAL_I2C_Master_Receive+0x448>)
 8002640:	68f8      	ldr	r0, [r7, #12]
 8002642:	f000 fa1b 	bl	8002a7c <I2C_WaitOnFlagUntilTimeout>
 8002646:	4603      	mov	r3, r0
 8002648:	2b00      	cmp	r3, #0
 800264a:	d001      	beq.n	8002650 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800264c:	2301      	movs	r3, #1
 800264e:	e0bf      	b.n	80027d0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800265e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	691a      	ldr	r2, [r3, #16]
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800266a:	b2d2      	uxtb	r2, r2
 800266c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002672:	1c5a      	adds	r2, r3, #1
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800267c:	3b01      	subs	r3, #1
 800267e:	b29a      	uxth	r2, r3
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002688:	b29b      	uxth	r3, r3
 800268a:	3b01      	subs	r3, #1
 800268c:	b29a      	uxth	r2, r3
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002694:	9300      	str	r3, [sp, #0]
 8002696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002698:	2200      	movs	r2, #0
 800269a:	494f      	ldr	r1, [pc, #316]	; (80027d8 <HAL_I2C_Master_Receive+0x448>)
 800269c:	68f8      	ldr	r0, [r7, #12]
 800269e:	f000 f9ed 	bl	8002a7c <I2C_WaitOnFlagUntilTimeout>
 80026a2:	4603      	mov	r3, r0
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d001      	beq.n	80026ac <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80026a8:	2301      	movs	r3, #1
 80026aa:	e091      	b.n	80027d0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026ba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	691a      	ldr	r2, [r3, #16]
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c6:	b2d2      	uxtb	r2, r2
 80026c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ce:	1c5a      	adds	r2, r3, #1
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026d8:	3b01      	subs	r3, #1
 80026da:	b29a      	uxth	r2, r3
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026e4:	b29b      	uxth	r3, r3
 80026e6:	3b01      	subs	r3, #1
 80026e8:	b29a      	uxth	r2, r3
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	691a      	ldr	r2, [r3, #16]
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f8:	b2d2      	uxtb	r2, r2
 80026fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002700:	1c5a      	adds	r2, r3, #1
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800270a:	3b01      	subs	r3, #1
 800270c:	b29a      	uxth	r2, r3
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002716:	b29b      	uxth	r3, r3
 8002718:	3b01      	subs	r3, #1
 800271a:	b29a      	uxth	r2, r3
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002720:	e042      	b.n	80027a8 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002722:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002724:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002726:	68f8      	ldr	r0, [r7, #12]
 8002728:	f000 fb00 	bl	8002d2c <I2C_WaitOnRXNEFlagUntilTimeout>
 800272c:	4603      	mov	r3, r0
 800272e:	2b00      	cmp	r3, #0
 8002730:	d001      	beq.n	8002736 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	e04c      	b.n	80027d0 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	691a      	ldr	r2, [r3, #16]
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002740:	b2d2      	uxtb	r2, r2
 8002742:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002748:	1c5a      	adds	r2, r3, #1
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002752:	3b01      	subs	r3, #1
 8002754:	b29a      	uxth	r2, r3
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800275e:	b29b      	uxth	r3, r3
 8002760:	3b01      	subs	r3, #1
 8002762:	b29a      	uxth	r2, r3
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	695b      	ldr	r3, [r3, #20]
 800276e:	f003 0304 	and.w	r3, r3, #4
 8002772:	2b04      	cmp	r3, #4
 8002774:	d118      	bne.n	80027a8 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	691a      	ldr	r2, [r3, #16]
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002780:	b2d2      	uxtb	r2, r2
 8002782:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002788:	1c5a      	adds	r2, r3, #1
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002792:	3b01      	subs	r3, #1
 8002794:	b29a      	uxth	r2, r3
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800279e:	b29b      	uxth	r3, r3
 80027a0:	3b01      	subs	r3, #1
 80027a2:	b29a      	uxth	r2, r3
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	f47f aec2 	bne.w	8002536 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	2220      	movs	r2, #32
 80027b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	2200      	movs	r2, #0
 80027be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	2200      	movs	r2, #0
 80027c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80027ca:	2300      	movs	r3, #0
 80027cc:	e000      	b.n	80027d0 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80027ce:	2302      	movs	r3, #2
  }
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	3728      	adds	r7, #40	; 0x28
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}
 80027d8:	00010004 	.word	0x00010004

080027dc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b088      	sub	sp, #32
 80027e0:	af02      	add	r7, sp, #8
 80027e2:	60f8      	str	r0, [r7, #12]
 80027e4:	607a      	str	r2, [r7, #4]
 80027e6:	603b      	str	r3, [r7, #0]
 80027e8:	460b      	mov	r3, r1
 80027ea:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027f0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	2b08      	cmp	r3, #8
 80027f6:	d006      	beq.n	8002806 <I2C_MasterRequestWrite+0x2a>
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	2b01      	cmp	r3, #1
 80027fc:	d003      	beq.n	8002806 <I2C_MasterRequestWrite+0x2a>
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002804:	d108      	bne.n	8002818 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002814:	601a      	str	r2, [r3, #0]
 8002816:	e00b      	b.n	8002830 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800281c:	2b12      	cmp	r3, #18
 800281e:	d107      	bne.n	8002830 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800282e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	9300      	str	r3, [sp, #0]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2200      	movs	r2, #0
 8002838:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800283c:	68f8      	ldr	r0, [r7, #12]
 800283e:	f000 f91d 	bl	8002a7c <I2C_WaitOnFlagUntilTimeout>
 8002842:	4603      	mov	r3, r0
 8002844:	2b00      	cmp	r3, #0
 8002846:	d00d      	beq.n	8002864 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002852:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002856:	d103      	bne.n	8002860 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800285e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002860:	2303      	movs	r3, #3
 8002862:	e035      	b.n	80028d0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	691b      	ldr	r3, [r3, #16]
 8002868:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800286c:	d108      	bne.n	8002880 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800286e:	897b      	ldrh	r3, [r7, #10]
 8002870:	b2db      	uxtb	r3, r3
 8002872:	461a      	mov	r2, r3
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800287c:	611a      	str	r2, [r3, #16]
 800287e:	e01b      	b.n	80028b8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002880:	897b      	ldrh	r3, [r7, #10]
 8002882:	11db      	asrs	r3, r3, #7
 8002884:	b2db      	uxtb	r3, r3
 8002886:	f003 0306 	and.w	r3, r3, #6
 800288a:	b2db      	uxtb	r3, r3
 800288c:	f063 030f 	orn	r3, r3, #15
 8002890:	b2da      	uxtb	r2, r3
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	687a      	ldr	r2, [r7, #4]
 800289c:	490e      	ldr	r1, [pc, #56]	; (80028d8 <I2C_MasterRequestWrite+0xfc>)
 800289e:	68f8      	ldr	r0, [r7, #12]
 80028a0:	f000 f943 	bl	8002b2a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80028a4:	4603      	mov	r3, r0
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d001      	beq.n	80028ae <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e010      	b.n	80028d0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80028ae:	897b      	ldrh	r3, [r7, #10]
 80028b0:	b2da      	uxtb	r2, r3
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	687a      	ldr	r2, [r7, #4]
 80028bc:	4907      	ldr	r1, [pc, #28]	; (80028dc <I2C_MasterRequestWrite+0x100>)
 80028be:	68f8      	ldr	r0, [r7, #12]
 80028c0:	f000 f933 	bl	8002b2a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80028c4:	4603      	mov	r3, r0
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d001      	beq.n	80028ce <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	e000      	b.n	80028d0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80028ce:	2300      	movs	r3, #0
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	3718      	adds	r7, #24
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}
 80028d8:	00010008 	.word	0x00010008
 80028dc:	00010002 	.word	0x00010002

080028e0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b088      	sub	sp, #32
 80028e4:	af02      	add	r7, sp, #8
 80028e6:	60f8      	str	r0, [r7, #12]
 80028e8:	607a      	str	r2, [r7, #4]
 80028ea:	603b      	str	r3, [r7, #0]
 80028ec:	460b      	mov	r3, r1
 80028ee:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028f4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002904:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	2b08      	cmp	r3, #8
 800290a:	d006      	beq.n	800291a <I2C_MasterRequestRead+0x3a>
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	2b01      	cmp	r3, #1
 8002910:	d003      	beq.n	800291a <I2C_MasterRequestRead+0x3a>
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002918:	d108      	bne.n	800292c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002928:	601a      	str	r2, [r3, #0]
 800292a:	e00b      	b.n	8002944 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002930:	2b11      	cmp	r3, #17
 8002932:	d107      	bne.n	8002944 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002942:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	9300      	str	r3, [sp, #0]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2200      	movs	r2, #0
 800294c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002950:	68f8      	ldr	r0, [r7, #12]
 8002952:	f000 f893 	bl	8002a7c <I2C_WaitOnFlagUntilTimeout>
 8002956:	4603      	mov	r3, r0
 8002958:	2b00      	cmp	r3, #0
 800295a:	d00d      	beq.n	8002978 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002966:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800296a:	d103      	bne.n	8002974 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002972:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002974:	2303      	movs	r3, #3
 8002976:	e079      	b.n	8002a6c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	691b      	ldr	r3, [r3, #16]
 800297c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002980:	d108      	bne.n	8002994 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002982:	897b      	ldrh	r3, [r7, #10]
 8002984:	b2db      	uxtb	r3, r3
 8002986:	f043 0301 	orr.w	r3, r3, #1
 800298a:	b2da      	uxtb	r2, r3
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	611a      	str	r2, [r3, #16]
 8002992:	e05f      	b.n	8002a54 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002994:	897b      	ldrh	r3, [r7, #10]
 8002996:	11db      	asrs	r3, r3, #7
 8002998:	b2db      	uxtb	r3, r3
 800299a:	f003 0306 	and.w	r3, r3, #6
 800299e:	b2db      	uxtb	r3, r3
 80029a0:	f063 030f 	orn	r3, r3, #15
 80029a4:	b2da      	uxtb	r2, r3
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	687a      	ldr	r2, [r7, #4]
 80029b0:	4930      	ldr	r1, [pc, #192]	; (8002a74 <I2C_MasterRequestRead+0x194>)
 80029b2:	68f8      	ldr	r0, [r7, #12]
 80029b4:	f000 f8b9 	bl	8002b2a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80029b8:	4603      	mov	r3, r0
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d001      	beq.n	80029c2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	e054      	b.n	8002a6c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80029c2:	897b      	ldrh	r3, [r7, #10]
 80029c4:	b2da      	uxtb	r2, r3
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	687a      	ldr	r2, [r7, #4]
 80029d0:	4929      	ldr	r1, [pc, #164]	; (8002a78 <I2C_MasterRequestRead+0x198>)
 80029d2:	68f8      	ldr	r0, [r7, #12]
 80029d4:	f000 f8a9 	bl	8002b2a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80029d8:	4603      	mov	r3, r0
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d001      	beq.n	80029e2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e044      	b.n	8002a6c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029e2:	2300      	movs	r3, #0
 80029e4:	613b      	str	r3, [r7, #16]
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	695b      	ldr	r3, [r3, #20]
 80029ec:	613b      	str	r3, [r7, #16]
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	699b      	ldr	r3, [r3, #24]
 80029f4:	613b      	str	r3, [r7, #16]
 80029f6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	681a      	ldr	r2, [r3, #0]
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a06:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	9300      	str	r3, [sp, #0]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002a14:	68f8      	ldr	r0, [r7, #12]
 8002a16:	f000 f831 	bl	8002a7c <I2C_WaitOnFlagUntilTimeout>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d00d      	beq.n	8002a3c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a2e:	d103      	bne.n	8002a38 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a36:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8002a38:	2303      	movs	r3, #3
 8002a3a:	e017      	b.n	8002a6c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002a3c:	897b      	ldrh	r3, [r7, #10]
 8002a3e:	11db      	asrs	r3, r3, #7
 8002a40:	b2db      	uxtb	r3, r3
 8002a42:	f003 0306 	and.w	r3, r3, #6
 8002a46:	b2db      	uxtb	r3, r3
 8002a48:	f063 030e 	orn	r3, r3, #14
 8002a4c:	b2da      	uxtb	r2, r3
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	687a      	ldr	r2, [r7, #4]
 8002a58:	4907      	ldr	r1, [pc, #28]	; (8002a78 <I2C_MasterRequestRead+0x198>)
 8002a5a:	68f8      	ldr	r0, [r7, #12]
 8002a5c:	f000 f865 	bl	8002b2a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a60:	4603      	mov	r3, r0
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d001      	beq.n	8002a6a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e000      	b.n	8002a6c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002a6a:	2300      	movs	r3, #0
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	3718      	adds	r7, #24
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}
 8002a74:	00010008 	.word	0x00010008
 8002a78:	00010002 	.word	0x00010002

08002a7c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b084      	sub	sp, #16
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	60f8      	str	r0, [r7, #12]
 8002a84:	60b9      	str	r1, [r7, #8]
 8002a86:	603b      	str	r3, [r7, #0]
 8002a88:	4613      	mov	r3, r2
 8002a8a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a8c:	e025      	b.n	8002ada <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a94:	d021      	beq.n	8002ada <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a96:	f7fe fe9b 	bl	80017d0 <HAL_GetTick>
 8002a9a:	4602      	mov	r2, r0
 8002a9c:	69bb      	ldr	r3, [r7, #24]
 8002a9e:	1ad3      	subs	r3, r2, r3
 8002aa0:	683a      	ldr	r2, [r7, #0]
 8002aa2:	429a      	cmp	r2, r3
 8002aa4:	d302      	bcc.n	8002aac <I2C_WaitOnFlagUntilTimeout+0x30>
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d116      	bne.n	8002ada <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	2220      	movs	r2, #32
 8002ab6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2200      	movs	r2, #0
 8002abe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac6:	f043 0220 	orr.w	r2, r3, #32
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e023      	b.n	8002b22 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	0c1b      	lsrs	r3, r3, #16
 8002ade:	b2db      	uxtb	r3, r3
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	d10d      	bne.n	8002b00 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	695b      	ldr	r3, [r3, #20]
 8002aea:	43da      	mvns	r2, r3
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	4013      	ands	r3, r2
 8002af0:	b29b      	uxth	r3, r3
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	bf0c      	ite	eq
 8002af6:	2301      	moveq	r3, #1
 8002af8:	2300      	movne	r3, #0
 8002afa:	b2db      	uxtb	r3, r3
 8002afc:	461a      	mov	r2, r3
 8002afe:	e00c      	b.n	8002b1a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	699b      	ldr	r3, [r3, #24]
 8002b06:	43da      	mvns	r2, r3
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	4013      	ands	r3, r2
 8002b0c:	b29b      	uxth	r3, r3
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	bf0c      	ite	eq
 8002b12:	2301      	moveq	r3, #1
 8002b14:	2300      	movne	r3, #0
 8002b16:	b2db      	uxtb	r3, r3
 8002b18:	461a      	mov	r2, r3
 8002b1a:	79fb      	ldrb	r3, [r7, #7]
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d0b6      	beq.n	8002a8e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002b20:	2300      	movs	r3, #0
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	3710      	adds	r7, #16
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}

08002b2a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002b2a:	b580      	push	{r7, lr}
 8002b2c:	b084      	sub	sp, #16
 8002b2e:	af00      	add	r7, sp, #0
 8002b30:	60f8      	str	r0, [r7, #12]
 8002b32:	60b9      	str	r1, [r7, #8]
 8002b34:	607a      	str	r2, [r7, #4]
 8002b36:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002b38:	e051      	b.n	8002bde <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	695b      	ldr	r3, [r3, #20]
 8002b40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b48:	d123      	bne.n	8002b92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	681a      	ldr	r2, [r3, #0]
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b58:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002b62:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	2200      	movs	r2, #0
 8002b68:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2220      	movs	r2, #32
 8002b6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2200      	movs	r2, #0
 8002b76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7e:	f043 0204 	orr.w	r2, r3, #4
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e046      	b.n	8002c20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b98:	d021      	beq.n	8002bde <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b9a:	f7fe fe19 	bl	80017d0 <HAL_GetTick>
 8002b9e:	4602      	mov	r2, r0
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	1ad3      	subs	r3, r2, r3
 8002ba4:	687a      	ldr	r2, [r7, #4]
 8002ba6:	429a      	cmp	r2, r3
 8002ba8:	d302      	bcc.n	8002bb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d116      	bne.n	8002bde <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	2220      	movs	r2, #32
 8002bba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bca:	f043 0220 	orr.w	r2, r3, #32
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e020      	b.n	8002c20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	0c1b      	lsrs	r3, r3, #16
 8002be2:	b2db      	uxtb	r3, r3
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	d10c      	bne.n	8002c02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	695b      	ldr	r3, [r3, #20]
 8002bee:	43da      	mvns	r2, r3
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	b29b      	uxth	r3, r3
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	bf14      	ite	ne
 8002bfa:	2301      	movne	r3, #1
 8002bfc:	2300      	moveq	r3, #0
 8002bfe:	b2db      	uxtb	r3, r3
 8002c00:	e00b      	b.n	8002c1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	699b      	ldr	r3, [r3, #24]
 8002c08:	43da      	mvns	r2, r3
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	b29b      	uxth	r3, r3
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	bf14      	ite	ne
 8002c14:	2301      	movne	r3, #1
 8002c16:	2300      	moveq	r3, #0
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d18d      	bne.n	8002b3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002c1e:	2300      	movs	r3, #0
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	3710      	adds	r7, #16
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}

08002c28 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b084      	sub	sp, #16
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	60f8      	str	r0, [r7, #12]
 8002c30:	60b9      	str	r1, [r7, #8]
 8002c32:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c34:	e02d      	b.n	8002c92 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002c36:	68f8      	ldr	r0, [r7, #12]
 8002c38:	f000 f8ce 	bl	8002dd8 <I2C_IsAcknowledgeFailed>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d001      	beq.n	8002c46 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	e02d      	b.n	8002ca2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c4c:	d021      	beq.n	8002c92 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c4e:	f7fe fdbf 	bl	80017d0 <HAL_GetTick>
 8002c52:	4602      	mov	r2, r0
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	1ad3      	subs	r3, r2, r3
 8002c58:	68ba      	ldr	r2, [r7, #8]
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	d302      	bcc.n	8002c64 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d116      	bne.n	8002c92 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	2200      	movs	r2, #0
 8002c68:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2220      	movs	r2, #32
 8002c6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2200      	movs	r2, #0
 8002c76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7e:	f043 0220 	orr.w	r2, r3, #32
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e007      	b.n	8002ca2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	695b      	ldr	r3, [r3, #20]
 8002c98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c9c:	2b80      	cmp	r3, #128	; 0x80
 8002c9e:	d1ca      	bne.n	8002c36 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002ca0:	2300      	movs	r3, #0
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3710      	adds	r7, #16
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}

08002caa <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002caa:	b580      	push	{r7, lr}
 8002cac:	b084      	sub	sp, #16
 8002cae:	af00      	add	r7, sp, #0
 8002cb0:	60f8      	str	r0, [r7, #12]
 8002cb2:	60b9      	str	r1, [r7, #8]
 8002cb4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002cb6:	e02d      	b.n	8002d14 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002cb8:	68f8      	ldr	r0, [r7, #12]
 8002cba:	f000 f88d 	bl	8002dd8 <I2C_IsAcknowledgeFailed>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d001      	beq.n	8002cc8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	e02d      	b.n	8002d24 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cce:	d021      	beq.n	8002d14 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cd0:	f7fe fd7e 	bl	80017d0 <HAL_GetTick>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	1ad3      	subs	r3, r2, r3
 8002cda:	68ba      	ldr	r2, [r7, #8]
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	d302      	bcc.n	8002ce6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d116      	bne.n	8002d14 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	2220      	movs	r2, #32
 8002cf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d00:	f043 0220 	orr.w	r2, r3, #32
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
 8002d12:	e007      	b.n	8002d24 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	695b      	ldr	r3, [r3, #20]
 8002d1a:	f003 0304 	and.w	r3, r3, #4
 8002d1e:	2b04      	cmp	r3, #4
 8002d20:	d1ca      	bne.n	8002cb8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002d22:	2300      	movs	r3, #0
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	3710      	adds	r7, #16
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}

08002d2c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b084      	sub	sp, #16
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	60f8      	str	r0, [r7, #12]
 8002d34:	60b9      	str	r1, [r7, #8]
 8002d36:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002d38:	e042      	b.n	8002dc0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	695b      	ldr	r3, [r3, #20]
 8002d40:	f003 0310 	and.w	r3, r3, #16
 8002d44:	2b10      	cmp	r3, #16
 8002d46:	d119      	bne.n	8002d7c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f06f 0210 	mvn.w	r2, #16
 8002d50:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	2200      	movs	r2, #0
 8002d56:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	2220      	movs	r2, #32
 8002d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	2200      	movs	r2, #0
 8002d64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2200      	movs	r2, #0
 8002d74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	e029      	b.n	8002dd0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d7c:	f7fe fd28 	bl	80017d0 <HAL_GetTick>
 8002d80:	4602      	mov	r2, r0
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	1ad3      	subs	r3, r2, r3
 8002d86:	68ba      	ldr	r2, [r7, #8]
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	d302      	bcc.n	8002d92 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d116      	bne.n	8002dc0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	2200      	movs	r2, #0
 8002d96:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	2220      	movs	r2, #32
 8002d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	2200      	movs	r2, #0
 8002da4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dac:	f043 0220 	orr.w	r2, r3, #32
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	2200      	movs	r2, #0
 8002db8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	e007      	b.n	8002dd0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	695b      	ldr	r3, [r3, #20]
 8002dc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dca:	2b40      	cmp	r3, #64	; 0x40
 8002dcc:	d1b5      	bne.n	8002d3a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002dce:	2300      	movs	r3, #0
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	3710      	adds	r7, #16
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd80      	pop	{r7, pc}

08002dd8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b083      	sub	sp, #12
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	695b      	ldr	r3, [r3, #20]
 8002de6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dee:	d11b      	bne.n	8002e28 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002df8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2220      	movs	r2, #32
 8002e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e14:	f043 0204 	orr.w	r2, r3, #4
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	e000      	b.n	8002e2a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002e28:	2300      	movs	r3, #0
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	370c      	adds	r7, #12
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e34:	4770      	bx	lr
	...

08002e38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b084      	sub	sp, #16
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
 8002e40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d101      	bne.n	8002e4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	e0cc      	b.n	8002fe6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e4c:	4b68      	ldr	r3, [pc, #416]	; (8002ff0 <HAL_RCC_ClockConfig+0x1b8>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 030f 	and.w	r3, r3, #15
 8002e54:	683a      	ldr	r2, [r7, #0]
 8002e56:	429a      	cmp	r2, r3
 8002e58:	d90c      	bls.n	8002e74 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e5a:	4b65      	ldr	r3, [pc, #404]	; (8002ff0 <HAL_RCC_ClockConfig+0x1b8>)
 8002e5c:	683a      	ldr	r2, [r7, #0]
 8002e5e:	b2d2      	uxtb	r2, r2
 8002e60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e62:	4b63      	ldr	r3, [pc, #396]	; (8002ff0 <HAL_RCC_ClockConfig+0x1b8>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 030f 	and.w	r3, r3, #15
 8002e6a:	683a      	ldr	r2, [r7, #0]
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d001      	beq.n	8002e74 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	e0b8      	b.n	8002fe6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f003 0302 	and.w	r3, r3, #2
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d020      	beq.n	8002ec2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 0304 	and.w	r3, r3, #4
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d005      	beq.n	8002e98 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e8c:	4b59      	ldr	r3, [pc, #356]	; (8002ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	4a58      	ldr	r2, [pc, #352]	; (8002ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e92:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002e96:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f003 0308 	and.w	r3, r3, #8
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d005      	beq.n	8002eb0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ea4:	4b53      	ldr	r3, [pc, #332]	; (8002ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	4a52      	ldr	r2, [pc, #328]	; (8002ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8002eaa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002eae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002eb0:	4b50      	ldr	r3, [pc, #320]	; (8002ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	494d      	ldr	r1, [pc, #308]	; (8002ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f003 0301 	and.w	r3, r3, #1
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d044      	beq.n	8002f58 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	d107      	bne.n	8002ee6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ed6:	4b47      	ldr	r3, [pc, #284]	; (8002ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d119      	bne.n	8002f16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e07f      	b.n	8002fe6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	2b02      	cmp	r3, #2
 8002eec:	d003      	beq.n	8002ef6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ef2:	2b03      	cmp	r3, #3
 8002ef4:	d107      	bne.n	8002f06 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ef6:	4b3f      	ldr	r3, [pc, #252]	; (8002ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d109      	bne.n	8002f16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	e06f      	b.n	8002fe6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f06:	4b3b      	ldr	r3, [pc, #236]	; (8002ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f003 0302 	and.w	r3, r3, #2
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d101      	bne.n	8002f16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	e067      	b.n	8002fe6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f16:	4b37      	ldr	r3, [pc, #220]	; (8002ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f18:	689b      	ldr	r3, [r3, #8]
 8002f1a:	f023 0203 	bic.w	r2, r3, #3
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	4934      	ldr	r1, [pc, #208]	; (8002ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f24:	4313      	orrs	r3, r2
 8002f26:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f28:	f7fe fc52 	bl	80017d0 <HAL_GetTick>
 8002f2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f2e:	e00a      	b.n	8002f46 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f30:	f7fe fc4e 	bl	80017d0 <HAL_GetTick>
 8002f34:	4602      	mov	r2, r0
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	1ad3      	subs	r3, r2, r3
 8002f3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d901      	bls.n	8002f46 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f42:	2303      	movs	r3, #3
 8002f44:	e04f      	b.n	8002fe6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f46:	4b2b      	ldr	r3, [pc, #172]	; (8002ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	f003 020c 	and.w	r2, r3, #12
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	009b      	lsls	r3, r3, #2
 8002f54:	429a      	cmp	r2, r3
 8002f56:	d1eb      	bne.n	8002f30 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f58:	4b25      	ldr	r3, [pc, #148]	; (8002ff0 <HAL_RCC_ClockConfig+0x1b8>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f003 030f 	and.w	r3, r3, #15
 8002f60:	683a      	ldr	r2, [r7, #0]
 8002f62:	429a      	cmp	r2, r3
 8002f64:	d20c      	bcs.n	8002f80 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f66:	4b22      	ldr	r3, [pc, #136]	; (8002ff0 <HAL_RCC_ClockConfig+0x1b8>)
 8002f68:	683a      	ldr	r2, [r7, #0]
 8002f6a:	b2d2      	uxtb	r2, r2
 8002f6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f6e:	4b20      	ldr	r3, [pc, #128]	; (8002ff0 <HAL_RCC_ClockConfig+0x1b8>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f003 030f 	and.w	r3, r3, #15
 8002f76:	683a      	ldr	r2, [r7, #0]
 8002f78:	429a      	cmp	r2, r3
 8002f7a:	d001      	beq.n	8002f80 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	e032      	b.n	8002fe6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f003 0304 	and.w	r3, r3, #4
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d008      	beq.n	8002f9e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f8c:	4b19      	ldr	r3, [pc, #100]	; (8002ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	68db      	ldr	r3, [r3, #12]
 8002f98:	4916      	ldr	r1, [pc, #88]	; (8002ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 0308 	and.w	r3, r3, #8
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d009      	beq.n	8002fbe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002faa:	4b12      	ldr	r3, [pc, #72]	; (8002ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	691b      	ldr	r3, [r3, #16]
 8002fb6:	00db      	lsls	r3, r3, #3
 8002fb8:	490e      	ldr	r1, [pc, #56]	; (8002ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002fbe:	f000 fb7f 	bl	80036c0 <HAL_RCC_GetSysClockFreq>
 8002fc2:	4602      	mov	r2, r0
 8002fc4:	4b0b      	ldr	r3, [pc, #44]	; (8002ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	091b      	lsrs	r3, r3, #4
 8002fca:	f003 030f 	and.w	r3, r3, #15
 8002fce:	490a      	ldr	r1, [pc, #40]	; (8002ff8 <HAL_RCC_ClockConfig+0x1c0>)
 8002fd0:	5ccb      	ldrb	r3, [r1, r3]
 8002fd2:	fa22 f303 	lsr.w	r3, r2, r3
 8002fd6:	4a09      	ldr	r2, [pc, #36]	; (8002ffc <HAL_RCC_ClockConfig+0x1c4>)
 8002fd8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002fda:	4b09      	ldr	r3, [pc, #36]	; (8003000 <HAL_RCC_ClockConfig+0x1c8>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f7fe fbb2 	bl	8001748 <HAL_InitTick>

  return HAL_OK;
 8002fe4:	2300      	movs	r3, #0
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	3710      	adds	r7, #16
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}
 8002fee:	bf00      	nop
 8002ff0:	40023c00 	.word	0x40023c00
 8002ff4:	40023800 	.word	0x40023800
 8002ff8:	0800ad54 	.word	0x0800ad54
 8002ffc:	20000074 	.word	0x20000074
 8003000:	20000078 	.word	0x20000078

08003004 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003004:	b480      	push	{r7}
 8003006:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003008:	4b03      	ldr	r3, [pc, #12]	; (8003018 <HAL_RCC_GetHCLKFreq+0x14>)
 800300a:	681b      	ldr	r3, [r3, #0]
}
 800300c:	4618      	mov	r0, r3
 800300e:	46bd      	mov	sp, r7
 8003010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003014:	4770      	bx	lr
 8003016:	bf00      	nop
 8003018:	20000074 	.word	0x20000074

0800301c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003020:	f7ff fff0 	bl	8003004 <HAL_RCC_GetHCLKFreq>
 8003024:	4602      	mov	r2, r0
 8003026:	4b05      	ldr	r3, [pc, #20]	; (800303c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	0a9b      	lsrs	r3, r3, #10
 800302c:	f003 0307 	and.w	r3, r3, #7
 8003030:	4903      	ldr	r1, [pc, #12]	; (8003040 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003032:	5ccb      	ldrb	r3, [r1, r3]
 8003034:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003038:	4618      	mov	r0, r3
 800303a:	bd80      	pop	{r7, pc}
 800303c:	40023800 	.word	0x40023800
 8003040:	0800ad64 	.word	0x0800ad64

08003044 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003048:	f7ff ffdc 	bl	8003004 <HAL_RCC_GetHCLKFreq>
 800304c:	4602      	mov	r2, r0
 800304e:	4b05      	ldr	r3, [pc, #20]	; (8003064 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	0b5b      	lsrs	r3, r3, #13
 8003054:	f003 0307 	and.w	r3, r3, #7
 8003058:	4903      	ldr	r1, [pc, #12]	; (8003068 <HAL_RCC_GetPCLK2Freq+0x24>)
 800305a:	5ccb      	ldrb	r3, [r1, r3]
 800305c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003060:	4618      	mov	r0, r3
 8003062:	bd80      	pop	{r7, pc}
 8003064:	40023800 	.word	0x40023800
 8003068:	0800ad64 	.word	0x0800ad64

0800306c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b08c      	sub	sp, #48	; 0x30
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003074:	2300      	movs	r3, #0
 8003076:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8003078:	2300      	movs	r3, #0
 800307a:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 800307c:	2300      	movs	r3, #0
 800307e:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8003080:	2300      	movs	r3, #0
 8003082:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8003084:	2300      	movs	r3, #0
 8003086:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8003088:	2300      	movs	r3, #0
 800308a:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 800308c:	2300      	movs	r3, #0
 800308e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8003090:	2300      	movs	r3, #0
 8003092:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8003094:	2300      	movs	r3, #0
 8003096:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f003 0301 	and.w	r3, r3, #1
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d010      	beq.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 80030a4:	4b6f      	ldr	r3, [pc, #444]	; (8003264 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80030a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80030aa:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030b2:	496c      	ldr	r1, [pc, #432]	; (8003264 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80030b4:	4313      	orrs	r3, r2
 80030b6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d101      	bne.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 80030c2:	2301      	movs	r3, #1
 80030c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 0302 	and.w	r3, r3, #2
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d010      	beq.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80030d2:	4b64      	ldr	r3, [pc, #400]	; (8003264 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80030d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80030d8:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030e0:	4960      	ldr	r1, [pc, #384]	; (8003264 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80030e2:	4313      	orrs	r3, r2
 80030e4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d101      	bne.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 80030f0:	2301      	movs	r3, #1
 80030f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f003 0304 	and.w	r3, r3, #4
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d017      	beq.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003100:	4b58      	ldr	r3, [pc, #352]	; (8003264 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003102:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003106:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800310e:	4955      	ldr	r1, [pc, #340]	; (8003264 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003110:	4313      	orrs	r3, r2
 8003112:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800311a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800311e:	d101      	bne.n	8003124 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8003120:	2301      	movs	r3, #1
 8003122:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003128:	2b00      	cmp	r3, #0
 800312a:	d101      	bne.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 800312c:	2301      	movs	r3, #1
 800312e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f003 0308 	and.w	r3, r3, #8
 8003138:	2b00      	cmp	r3, #0
 800313a:	d017      	beq.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800313c:	4b49      	ldr	r3, [pc, #292]	; (8003264 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800313e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003142:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800314a:	4946      	ldr	r1, [pc, #280]	; (8003264 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800314c:	4313      	orrs	r3, r2
 800314e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003156:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800315a:	d101      	bne.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 800315c:	2301      	movs	r3, #1
 800315e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003164:	2b00      	cmp	r3, #0
 8003166:	d101      	bne.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8003168:	2301      	movs	r3, #1
 800316a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f003 0320 	and.w	r3, r3, #32
 8003174:	2b00      	cmp	r3, #0
 8003176:	f000 808a 	beq.w	800328e <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800317a:	2300      	movs	r3, #0
 800317c:	60bb      	str	r3, [r7, #8]
 800317e:	4b39      	ldr	r3, [pc, #228]	; (8003264 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003182:	4a38      	ldr	r2, [pc, #224]	; (8003264 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003184:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003188:	6413      	str	r3, [r2, #64]	; 0x40
 800318a:	4b36      	ldr	r3, [pc, #216]	; (8003264 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800318c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800318e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003192:	60bb      	str	r3, [r7, #8]
 8003194:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003196:	4b34      	ldr	r3, [pc, #208]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a33      	ldr	r2, [pc, #204]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800319c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031a0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80031a2:	f7fe fb15 	bl	80017d0 <HAL_GetTick>
 80031a6:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80031a8:	e008      	b.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80031aa:	f7fe fb11 	bl	80017d0 <HAL_GetTick>
 80031ae:	4602      	mov	r2, r0
 80031b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b2:	1ad3      	subs	r3, r2, r3
 80031b4:	2b02      	cmp	r3, #2
 80031b6:	d901      	bls.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 80031b8:	2303      	movs	r3, #3
 80031ba:	e278      	b.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80031bc:	4b2a      	ldr	r3, [pc, #168]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d0f0      	beq.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80031c8:	4b26      	ldr	r3, [pc, #152]	; (8003264 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80031ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031d0:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80031d2:	6a3b      	ldr	r3, [r7, #32]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d02f      	beq.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031e0:	6a3a      	ldr	r2, [r7, #32]
 80031e2:	429a      	cmp	r2, r3
 80031e4:	d028      	beq.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80031e6:	4b1f      	ldr	r3, [pc, #124]	; (8003264 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80031e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031ee:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80031f0:	4b1e      	ldr	r3, [pc, #120]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80031f2:	2201      	movs	r2, #1
 80031f4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80031f6:	4b1d      	ldr	r3, [pc, #116]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80031f8:	2200      	movs	r2, #0
 80031fa:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80031fc:	4a19      	ldr	r2, [pc, #100]	; (8003264 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80031fe:	6a3b      	ldr	r3, [r7, #32]
 8003200:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003202:	4b18      	ldr	r3, [pc, #96]	; (8003264 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003204:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003206:	f003 0301 	and.w	r3, r3, #1
 800320a:	2b01      	cmp	r3, #1
 800320c:	d114      	bne.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800320e:	f7fe fadf 	bl	80017d0 <HAL_GetTick>
 8003212:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003214:	e00a      	b.n	800322c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003216:	f7fe fadb 	bl	80017d0 <HAL_GetTick>
 800321a:	4602      	mov	r2, r0
 800321c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800321e:	1ad3      	subs	r3, r2, r3
 8003220:	f241 3288 	movw	r2, #5000	; 0x1388
 8003224:	4293      	cmp	r3, r2
 8003226:	d901      	bls.n	800322c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8003228:	2303      	movs	r3, #3
 800322a:	e240      	b.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800322c:	4b0d      	ldr	r3, [pc, #52]	; (8003264 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800322e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003230:	f003 0302 	and.w	r3, r3, #2
 8003234:	2b00      	cmp	r3, #0
 8003236:	d0ee      	beq.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800323c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003240:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003244:	d114      	bne.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8003246:	4b07      	ldr	r3, [pc, #28]	; (8003264 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003252:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003256:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800325a:	4902      	ldr	r1, [pc, #8]	; (8003264 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800325c:	4313      	orrs	r3, r2
 800325e:	608b      	str	r3, [r1, #8]
 8003260:	e00c      	b.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x210>
 8003262:	bf00      	nop
 8003264:	40023800 	.word	0x40023800
 8003268:	40007000 	.word	0x40007000
 800326c:	42470e40 	.word	0x42470e40
 8003270:	4b4a      	ldr	r3, [pc, #296]	; (800339c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	4a49      	ldr	r2, [pc, #292]	; (800339c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003276:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800327a:	6093      	str	r3, [r2, #8]
 800327c:	4b47      	ldr	r3, [pc, #284]	; (800339c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800327e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003284:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003288:	4944      	ldr	r1, [pc, #272]	; (800339c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800328a:	4313      	orrs	r3, r2
 800328c:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 0310 	and.w	r3, r3, #16
 8003296:	2b00      	cmp	r3, #0
 8003298:	d004      	beq.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 80032a0:	4b3f      	ldr	r3, [pc, #252]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 80032a2:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d00a      	beq.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 80032b0:	4b3a      	ldr	r3, [pc, #232]	; (800339c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80032b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032b6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032be:	4937      	ldr	r1, [pc, #220]	; (800339c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80032c0:	4313      	orrs	r3, r2
 80032c2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d00a      	beq.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80032d2:	4b32      	ldr	r3, [pc, #200]	; (800339c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80032d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032d8:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032e0:	492e      	ldr	r1, [pc, #184]	; (800339c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80032e2:	4313      	orrs	r3, r2
 80032e4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d011      	beq.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80032f4:	4b29      	ldr	r3, [pc, #164]	; (800339c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80032f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032fa:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003302:	4926      	ldr	r1, [pc, #152]	; (800339c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003304:	4313      	orrs	r3, r2
 8003306:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800330e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003312:	d101      	bne.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8003314:	2301      	movs	r3, #1
 8003316:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003320:	2b00      	cmp	r3, #0
 8003322:	d00a      	beq.n	800333a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8003324:	4b1d      	ldr	r3, [pc, #116]	; (800339c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003326:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800332a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003332:	491a      	ldr	r1, [pc, #104]	; (800339c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003334:	4313      	orrs	r3, r2
 8003336:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003342:	2b00      	cmp	r3, #0
 8003344:	d011      	beq.n	800336a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8003346:	4b15      	ldr	r3, [pc, #84]	; (800339c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003348:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800334c:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003354:	4911      	ldr	r1, [pc, #68]	; (800339c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003356:	4313      	orrs	r3, r2
 8003358:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003360:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003364:	d101      	bne.n	800336a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8003366:	2301      	movs	r3, #1
 8003368:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800336a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800336c:	2b01      	cmp	r3, #1
 800336e:	d005      	beq.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003378:	f040 80ff 	bne.w	800357a <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800337c:	4b09      	ldr	r3, [pc, #36]	; (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800337e:	2200      	movs	r2, #0
 8003380:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003382:	f7fe fa25 	bl	80017d0 <HAL_GetTick>
 8003386:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003388:	e00e      	b.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800338a:	f7fe fa21 	bl	80017d0 <HAL_GetTick>
 800338e:	4602      	mov	r2, r0
 8003390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003392:	1ad3      	subs	r3, r2, r3
 8003394:	2b02      	cmp	r3, #2
 8003396:	d907      	bls.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003398:	2303      	movs	r3, #3
 800339a:	e188      	b.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x642>
 800339c:	40023800 	.word	0x40023800
 80033a0:	424711e0 	.word	0x424711e0
 80033a4:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80033a8:	4b7e      	ldr	r3, [pc, #504]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d1ea      	bne.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f003 0301 	and.w	r3, r3, #1
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d003      	beq.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d009      	beq.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d028      	beq.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d124      	bne.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80033dc:	4b71      	ldr	r3, [pc, #452]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80033de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033e2:	0c1b      	lsrs	r3, r3, #16
 80033e4:	f003 0303 	and.w	r3, r3, #3
 80033e8:	3301      	adds	r3, #1
 80033ea:	005b      	lsls	r3, r3, #1
 80033ec:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80033ee:	4b6d      	ldr	r3, [pc, #436]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80033f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033f4:	0e1b      	lsrs	r3, r3, #24
 80033f6:	f003 030f 	and.w	r3, r3, #15
 80033fa:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	685a      	ldr	r2, [r3, #4]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	019b      	lsls	r3, r3, #6
 8003406:	431a      	orrs	r2, r3
 8003408:	69fb      	ldr	r3, [r7, #28]
 800340a:	085b      	lsrs	r3, r3, #1
 800340c:	3b01      	subs	r3, #1
 800340e:	041b      	lsls	r3, r3, #16
 8003410:	431a      	orrs	r2, r3
 8003412:	69bb      	ldr	r3, [r7, #24]
 8003414:	061b      	lsls	r3, r3, #24
 8003416:	431a      	orrs	r2, r3
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	695b      	ldr	r3, [r3, #20]
 800341c:	071b      	lsls	r3, r3, #28
 800341e:	4961      	ldr	r1, [pc, #388]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003420:	4313      	orrs	r3, r2
 8003422:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f003 0304 	and.w	r3, r3, #4
 800342e:	2b00      	cmp	r3, #0
 8003430:	d004      	beq.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003436:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800343a:	d00a      	beq.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003444:	2b00      	cmp	r3, #0
 8003446:	d035      	beq.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800344c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003450:	d130      	bne.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003452:	4b54      	ldr	r3, [pc, #336]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003454:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003458:	0c1b      	lsrs	r3, r3, #16
 800345a:	f003 0303 	and.w	r3, r3, #3
 800345e:	3301      	adds	r3, #1
 8003460:	005b      	lsls	r3, r3, #1
 8003462:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003464:	4b4f      	ldr	r3, [pc, #316]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003466:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800346a:	0f1b      	lsrs	r3, r3, #28
 800346c:	f003 0307 	and.w	r3, r3, #7
 8003470:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	685a      	ldr	r2, [r3, #4]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	019b      	lsls	r3, r3, #6
 800347c:	431a      	orrs	r2, r3
 800347e:	69fb      	ldr	r3, [r7, #28]
 8003480:	085b      	lsrs	r3, r3, #1
 8003482:	3b01      	subs	r3, #1
 8003484:	041b      	lsls	r3, r3, #16
 8003486:	431a      	orrs	r2, r3
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	691b      	ldr	r3, [r3, #16]
 800348c:	061b      	lsls	r3, r3, #24
 800348e:	431a      	orrs	r2, r3
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	071b      	lsls	r3, r3, #28
 8003494:	4943      	ldr	r1, [pc, #268]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003496:	4313      	orrs	r3, r2
 8003498:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800349c:	4b41      	ldr	r3, [pc, #260]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800349e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80034a2:	f023 021f 	bic.w	r2, r3, #31
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034aa:	3b01      	subs	r3, #1
 80034ac:	493d      	ldr	r1, [pc, #244]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80034ae:	4313      	orrs	r3, r2
 80034b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d029      	beq.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80034c8:	d124      	bne.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80034ca:	4b36      	ldr	r3, [pc, #216]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80034cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034d0:	0c1b      	lsrs	r3, r3, #16
 80034d2:	f003 0303 	and.w	r3, r3, #3
 80034d6:	3301      	adds	r3, #1
 80034d8:	005b      	lsls	r3, r3, #1
 80034da:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80034dc:	4b31      	ldr	r3, [pc, #196]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80034de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034e2:	0f1b      	lsrs	r3, r3, #28
 80034e4:	f003 0307 	and.w	r3, r3, #7
 80034e8:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	685a      	ldr	r2, [r3, #4]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	019b      	lsls	r3, r3, #6
 80034f4:	431a      	orrs	r2, r3
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	68db      	ldr	r3, [r3, #12]
 80034fa:	085b      	lsrs	r3, r3, #1
 80034fc:	3b01      	subs	r3, #1
 80034fe:	041b      	lsls	r3, r3, #16
 8003500:	431a      	orrs	r2, r3
 8003502:	69bb      	ldr	r3, [r7, #24]
 8003504:	061b      	lsls	r3, r3, #24
 8003506:	431a      	orrs	r2, r3
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	071b      	lsls	r3, r3, #28
 800350c:	4925      	ldr	r1, [pc, #148]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800350e:	4313      	orrs	r3, r2
 8003510:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800351c:	2b00      	cmp	r3, #0
 800351e:	d016      	beq.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	685a      	ldr	r2, [r3, #4]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	019b      	lsls	r3, r3, #6
 800352a:	431a      	orrs	r2, r3
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	68db      	ldr	r3, [r3, #12]
 8003530:	085b      	lsrs	r3, r3, #1
 8003532:	3b01      	subs	r3, #1
 8003534:	041b      	lsls	r3, r3, #16
 8003536:	431a      	orrs	r2, r3
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	691b      	ldr	r3, [r3, #16]
 800353c:	061b      	lsls	r3, r3, #24
 800353e:	431a      	orrs	r2, r3
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	695b      	ldr	r3, [r3, #20]
 8003544:	071b      	lsls	r3, r3, #28
 8003546:	4917      	ldr	r1, [pc, #92]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003548:	4313      	orrs	r3, r2
 800354a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800354e:	4b16      	ldr	r3, [pc, #88]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8003550:	2201      	movs	r2, #1
 8003552:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003554:	f7fe f93c 	bl	80017d0 <HAL_GetTick>
 8003558:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800355a:	e008      	b.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800355c:	f7fe f938 	bl	80017d0 <HAL_GetTick>
 8003560:	4602      	mov	r2, r0
 8003562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003564:	1ad3      	subs	r3, r2, r3
 8003566:	2b02      	cmp	r3, #2
 8003568:	d901      	bls.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800356a:	2303      	movs	r3, #3
 800356c:	e09f      	b.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800356e:	4b0d      	ldr	r3, [pc, #52]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003576:	2b00      	cmp	r3, #0
 8003578:	d0f0      	beq.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 800357a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800357c:	2b01      	cmp	r3, #1
 800357e:	f040 8095 	bne.w	80036ac <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003582:	4b0a      	ldr	r3, [pc, #40]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003584:	2200      	movs	r2, #0
 8003586:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003588:	f7fe f922 	bl	80017d0 <HAL_GetTick>
 800358c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800358e:	e00f      	b.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003590:	f7fe f91e 	bl	80017d0 <HAL_GetTick>
 8003594:	4602      	mov	r2, r0
 8003596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003598:	1ad3      	subs	r3, r2, r3
 800359a:	2b02      	cmp	r3, #2
 800359c:	d908      	bls.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800359e:	2303      	movs	r3, #3
 80035a0:	e085      	b.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x642>
 80035a2:	bf00      	nop
 80035a4:	40023800 	.word	0x40023800
 80035a8:	42470068 	.word	0x42470068
 80035ac:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80035b0:	4b41      	ldr	r3, [pc, #260]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80035b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80035bc:	d0e8      	beq.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f003 0304 	and.w	r3, r3, #4
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d003      	beq.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0x566>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d009      	beq.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d02b      	beq.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d127      	bne.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 80035e6:	4b34      	ldr	r3, [pc, #208]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80035e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035ec:	0c1b      	lsrs	r3, r3, #16
 80035ee:	f003 0303 	and.w	r3, r3, #3
 80035f2:	3301      	adds	r3, #1
 80035f4:	005b      	lsls	r3, r3, #1
 80035f6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	699a      	ldr	r2, [r3, #24]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	69db      	ldr	r3, [r3, #28]
 8003600:	019b      	lsls	r3, r3, #6
 8003602:	431a      	orrs	r2, r3
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	085b      	lsrs	r3, r3, #1
 8003608:	3b01      	subs	r3, #1
 800360a:	041b      	lsls	r3, r3, #16
 800360c:	431a      	orrs	r2, r3
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003612:	061b      	lsls	r3, r3, #24
 8003614:	4928      	ldr	r1, [pc, #160]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003616:	4313      	orrs	r3, r2
 8003618:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800361c:	4b26      	ldr	r3, [pc, #152]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800361e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003622:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800362a:	3b01      	subs	r3, #1
 800362c:	021b      	lsls	r3, r3, #8
 800362e:	4922      	ldr	r1, [pc, #136]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003630:	4313      	orrs	r3, r2
 8003632:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800363e:	2b00      	cmp	r3, #0
 8003640:	d01d      	beq.n	800367e <HAL_RCCEx_PeriphCLKConfig+0x612>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003646:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800364a:	d118      	bne.n	800367e <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800364c:	4b1a      	ldr	r3, [pc, #104]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800364e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003652:	0e1b      	lsrs	r3, r3, #24
 8003654:	f003 030f 	and.w	r3, r3, #15
 8003658:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	699a      	ldr	r2, [r3, #24]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	69db      	ldr	r3, [r3, #28]
 8003662:	019b      	lsls	r3, r3, #6
 8003664:	431a      	orrs	r2, r3
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6a1b      	ldr	r3, [r3, #32]
 800366a:	085b      	lsrs	r3, r3, #1
 800366c:	3b01      	subs	r3, #1
 800366e:	041b      	lsls	r3, r3, #16
 8003670:	431a      	orrs	r2, r3
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	061b      	lsls	r3, r3, #24
 8003676:	4910      	ldr	r1, [pc, #64]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003678:	4313      	orrs	r3, r2
 800367a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800367e:	4b0f      	ldr	r3, [pc, #60]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8003680:	2201      	movs	r2, #1
 8003682:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003684:	f7fe f8a4 	bl	80017d0 <HAL_GetTick>
 8003688:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800368a:	e008      	b.n	800369e <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800368c:	f7fe f8a0 	bl	80017d0 <HAL_GetTick>
 8003690:	4602      	mov	r2, r0
 8003692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003694:	1ad3      	subs	r3, r2, r3
 8003696:	2b02      	cmp	r3, #2
 8003698:	d901      	bls.n	800369e <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800369a:	2303      	movs	r3, #3
 800369c:	e007      	b.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800369e:	4b06      	ldr	r3, [pc, #24]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80036a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80036aa:	d1ef      	bne.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 80036ac:	2300      	movs	r3, #0
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	3730      	adds	r7, #48	; 0x30
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}
 80036b6:	bf00      	nop
 80036b8:	40023800 	.word	0x40023800
 80036bc:	42470070 	.word	0x42470070

080036c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80036c4:	b088      	sub	sp, #32
 80036c6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80036c8:	2300      	movs	r3, #0
 80036ca:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 80036cc:	2300      	movs	r3, #0
 80036ce:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 80036d0:	2300      	movs	r3, #0
 80036d2:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 80036d4:	2300      	movs	r3, #0
 80036d6:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 80036d8:	2300      	movs	r3, #0
 80036da:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80036dc:	4bce      	ldr	r3, [pc, #824]	; (8003a18 <HAL_RCC_GetSysClockFreq+0x358>)
 80036de:	689b      	ldr	r3, [r3, #8]
 80036e0:	f003 030c 	and.w	r3, r3, #12
 80036e4:	2b0c      	cmp	r3, #12
 80036e6:	f200 818d 	bhi.w	8003a04 <HAL_RCC_GetSysClockFreq+0x344>
 80036ea:	a201      	add	r2, pc, #4	; (adr r2, 80036f0 <HAL_RCC_GetSysClockFreq+0x30>)
 80036ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036f0:	08003725 	.word	0x08003725
 80036f4:	08003a05 	.word	0x08003a05
 80036f8:	08003a05 	.word	0x08003a05
 80036fc:	08003a05 	.word	0x08003a05
 8003700:	0800372b 	.word	0x0800372b
 8003704:	08003a05 	.word	0x08003a05
 8003708:	08003a05 	.word	0x08003a05
 800370c:	08003a05 	.word	0x08003a05
 8003710:	08003731 	.word	0x08003731
 8003714:	08003a05 	.word	0x08003a05
 8003718:	08003a05 	.word	0x08003a05
 800371c:	08003a05 	.word	0x08003a05
 8003720:	080038a5 	.word	0x080038a5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003724:	4bbd      	ldr	r3, [pc, #756]	; (8003a1c <HAL_RCC_GetSysClockFreq+0x35c>)
 8003726:	61bb      	str	r3, [r7, #24]
       break;
 8003728:	e16f      	b.n	8003a0a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800372a:	4bbd      	ldr	r3, [pc, #756]	; (8003a20 <HAL_RCC_GetSysClockFreq+0x360>)
 800372c:	61bb      	str	r3, [r7, #24]
      break;
 800372e:	e16c      	b.n	8003a0a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003730:	4bb9      	ldr	r3, [pc, #740]	; (8003a18 <HAL_RCC_GetSysClockFreq+0x358>)
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003738:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800373a:	4bb7      	ldr	r3, [pc, #732]	; (8003a18 <HAL_RCC_GetSysClockFreq+0x358>)
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003742:	2b00      	cmp	r3, #0
 8003744:	d053      	beq.n	80037ee <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003746:	4bb4      	ldr	r3, [pc, #720]	; (8003a18 <HAL_RCC_GetSysClockFreq+0x358>)
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	099b      	lsrs	r3, r3, #6
 800374c:	461a      	mov	r2, r3
 800374e:	f04f 0300 	mov.w	r3, #0
 8003752:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003756:	f04f 0100 	mov.w	r1, #0
 800375a:	ea02 0400 	and.w	r4, r2, r0
 800375e:	603c      	str	r4, [r7, #0]
 8003760:	400b      	ands	r3, r1
 8003762:	607b      	str	r3, [r7, #4]
 8003764:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003768:	4620      	mov	r0, r4
 800376a:	4629      	mov	r1, r5
 800376c:	f04f 0200 	mov.w	r2, #0
 8003770:	f04f 0300 	mov.w	r3, #0
 8003774:	014b      	lsls	r3, r1, #5
 8003776:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800377a:	0142      	lsls	r2, r0, #5
 800377c:	4610      	mov	r0, r2
 800377e:	4619      	mov	r1, r3
 8003780:	4623      	mov	r3, r4
 8003782:	1ac0      	subs	r0, r0, r3
 8003784:	462b      	mov	r3, r5
 8003786:	eb61 0103 	sbc.w	r1, r1, r3
 800378a:	f04f 0200 	mov.w	r2, #0
 800378e:	f04f 0300 	mov.w	r3, #0
 8003792:	018b      	lsls	r3, r1, #6
 8003794:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003798:	0182      	lsls	r2, r0, #6
 800379a:	1a12      	subs	r2, r2, r0
 800379c:	eb63 0301 	sbc.w	r3, r3, r1
 80037a0:	f04f 0000 	mov.w	r0, #0
 80037a4:	f04f 0100 	mov.w	r1, #0
 80037a8:	00d9      	lsls	r1, r3, #3
 80037aa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80037ae:	00d0      	lsls	r0, r2, #3
 80037b0:	4602      	mov	r2, r0
 80037b2:	460b      	mov	r3, r1
 80037b4:	4621      	mov	r1, r4
 80037b6:	1852      	adds	r2, r2, r1
 80037b8:	4629      	mov	r1, r5
 80037ba:	eb43 0101 	adc.w	r1, r3, r1
 80037be:	460b      	mov	r3, r1
 80037c0:	f04f 0000 	mov.w	r0, #0
 80037c4:	f04f 0100 	mov.w	r1, #0
 80037c8:	0259      	lsls	r1, r3, #9
 80037ca:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80037ce:	0250      	lsls	r0, r2, #9
 80037d0:	4602      	mov	r2, r0
 80037d2:	460b      	mov	r3, r1
 80037d4:	4610      	mov	r0, r2
 80037d6:	4619      	mov	r1, r3
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	461a      	mov	r2, r3
 80037dc:	f04f 0300 	mov.w	r3, #0
 80037e0:	f7fc fd66 	bl	80002b0 <__aeabi_uldivmod>
 80037e4:	4602      	mov	r2, r0
 80037e6:	460b      	mov	r3, r1
 80037e8:	4613      	mov	r3, r2
 80037ea:	61fb      	str	r3, [r7, #28]
 80037ec:	e04c      	b.n	8003888 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037ee:	4b8a      	ldr	r3, [pc, #552]	; (8003a18 <HAL_RCC_GetSysClockFreq+0x358>)
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	099b      	lsrs	r3, r3, #6
 80037f4:	461a      	mov	r2, r3
 80037f6:	f04f 0300 	mov.w	r3, #0
 80037fa:	f240 10ff 	movw	r0, #511	; 0x1ff
 80037fe:	f04f 0100 	mov.w	r1, #0
 8003802:	ea02 0a00 	and.w	sl, r2, r0
 8003806:	ea03 0b01 	and.w	fp, r3, r1
 800380a:	4650      	mov	r0, sl
 800380c:	4659      	mov	r1, fp
 800380e:	f04f 0200 	mov.w	r2, #0
 8003812:	f04f 0300 	mov.w	r3, #0
 8003816:	014b      	lsls	r3, r1, #5
 8003818:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800381c:	0142      	lsls	r2, r0, #5
 800381e:	4610      	mov	r0, r2
 8003820:	4619      	mov	r1, r3
 8003822:	ebb0 000a 	subs.w	r0, r0, sl
 8003826:	eb61 010b 	sbc.w	r1, r1, fp
 800382a:	f04f 0200 	mov.w	r2, #0
 800382e:	f04f 0300 	mov.w	r3, #0
 8003832:	018b      	lsls	r3, r1, #6
 8003834:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003838:	0182      	lsls	r2, r0, #6
 800383a:	1a12      	subs	r2, r2, r0
 800383c:	eb63 0301 	sbc.w	r3, r3, r1
 8003840:	f04f 0000 	mov.w	r0, #0
 8003844:	f04f 0100 	mov.w	r1, #0
 8003848:	00d9      	lsls	r1, r3, #3
 800384a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800384e:	00d0      	lsls	r0, r2, #3
 8003850:	4602      	mov	r2, r0
 8003852:	460b      	mov	r3, r1
 8003854:	eb12 020a 	adds.w	r2, r2, sl
 8003858:	eb43 030b 	adc.w	r3, r3, fp
 800385c:	f04f 0000 	mov.w	r0, #0
 8003860:	f04f 0100 	mov.w	r1, #0
 8003864:	0299      	lsls	r1, r3, #10
 8003866:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800386a:	0290      	lsls	r0, r2, #10
 800386c:	4602      	mov	r2, r0
 800386e:	460b      	mov	r3, r1
 8003870:	4610      	mov	r0, r2
 8003872:	4619      	mov	r1, r3
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	461a      	mov	r2, r3
 8003878:	f04f 0300 	mov.w	r3, #0
 800387c:	f7fc fd18 	bl	80002b0 <__aeabi_uldivmod>
 8003880:	4602      	mov	r2, r0
 8003882:	460b      	mov	r3, r1
 8003884:	4613      	mov	r3, r2
 8003886:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003888:	4b63      	ldr	r3, [pc, #396]	; (8003a18 <HAL_RCC_GetSysClockFreq+0x358>)
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	0c1b      	lsrs	r3, r3, #16
 800388e:	f003 0303 	and.w	r3, r3, #3
 8003892:	3301      	adds	r3, #1
 8003894:	005b      	lsls	r3, r3, #1
 8003896:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8003898:	69fa      	ldr	r2, [r7, #28]
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	fbb2 f3f3 	udiv	r3, r2, r3
 80038a0:	61bb      	str	r3, [r7, #24]
      break;
 80038a2:	e0b2      	b.n	8003a0a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80038a4:	4b5c      	ldr	r3, [pc, #368]	; (8003a18 <HAL_RCC_GetSysClockFreq+0x358>)
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80038ac:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80038ae:	4b5a      	ldr	r3, [pc, #360]	; (8003a18 <HAL_RCC_GetSysClockFreq+0x358>)
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d04d      	beq.n	8003956 <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038ba:	4b57      	ldr	r3, [pc, #348]	; (8003a18 <HAL_RCC_GetSysClockFreq+0x358>)
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	099b      	lsrs	r3, r3, #6
 80038c0:	461a      	mov	r2, r3
 80038c2:	f04f 0300 	mov.w	r3, #0
 80038c6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80038ca:	f04f 0100 	mov.w	r1, #0
 80038ce:	ea02 0800 	and.w	r8, r2, r0
 80038d2:	ea03 0901 	and.w	r9, r3, r1
 80038d6:	4640      	mov	r0, r8
 80038d8:	4649      	mov	r1, r9
 80038da:	f04f 0200 	mov.w	r2, #0
 80038de:	f04f 0300 	mov.w	r3, #0
 80038e2:	014b      	lsls	r3, r1, #5
 80038e4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80038e8:	0142      	lsls	r2, r0, #5
 80038ea:	4610      	mov	r0, r2
 80038ec:	4619      	mov	r1, r3
 80038ee:	ebb0 0008 	subs.w	r0, r0, r8
 80038f2:	eb61 0109 	sbc.w	r1, r1, r9
 80038f6:	f04f 0200 	mov.w	r2, #0
 80038fa:	f04f 0300 	mov.w	r3, #0
 80038fe:	018b      	lsls	r3, r1, #6
 8003900:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003904:	0182      	lsls	r2, r0, #6
 8003906:	1a12      	subs	r2, r2, r0
 8003908:	eb63 0301 	sbc.w	r3, r3, r1
 800390c:	f04f 0000 	mov.w	r0, #0
 8003910:	f04f 0100 	mov.w	r1, #0
 8003914:	00d9      	lsls	r1, r3, #3
 8003916:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800391a:	00d0      	lsls	r0, r2, #3
 800391c:	4602      	mov	r2, r0
 800391e:	460b      	mov	r3, r1
 8003920:	eb12 0208 	adds.w	r2, r2, r8
 8003924:	eb43 0309 	adc.w	r3, r3, r9
 8003928:	f04f 0000 	mov.w	r0, #0
 800392c:	f04f 0100 	mov.w	r1, #0
 8003930:	0259      	lsls	r1, r3, #9
 8003932:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003936:	0250      	lsls	r0, r2, #9
 8003938:	4602      	mov	r2, r0
 800393a:	460b      	mov	r3, r1
 800393c:	4610      	mov	r0, r2
 800393e:	4619      	mov	r1, r3
 8003940:	697b      	ldr	r3, [r7, #20]
 8003942:	461a      	mov	r2, r3
 8003944:	f04f 0300 	mov.w	r3, #0
 8003948:	f7fc fcb2 	bl	80002b0 <__aeabi_uldivmod>
 800394c:	4602      	mov	r2, r0
 800394e:	460b      	mov	r3, r1
 8003950:	4613      	mov	r3, r2
 8003952:	61fb      	str	r3, [r7, #28]
 8003954:	e04a      	b.n	80039ec <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003956:	4b30      	ldr	r3, [pc, #192]	; (8003a18 <HAL_RCC_GetSysClockFreq+0x358>)
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	099b      	lsrs	r3, r3, #6
 800395c:	461a      	mov	r2, r3
 800395e:	f04f 0300 	mov.w	r3, #0
 8003962:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003966:	f04f 0100 	mov.w	r1, #0
 800396a:	ea02 0400 	and.w	r4, r2, r0
 800396e:	ea03 0501 	and.w	r5, r3, r1
 8003972:	4620      	mov	r0, r4
 8003974:	4629      	mov	r1, r5
 8003976:	f04f 0200 	mov.w	r2, #0
 800397a:	f04f 0300 	mov.w	r3, #0
 800397e:	014b      	lsls	r3, r1, #5
 8003980:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003984:	0142      	lsls	r2, r0, #5
 8003986:	4610      	mov	r0, r2
 8003988:	4619      	mov	r1, r3
 800398a:	1b00      	subs	r0, r0, r4
 800398c:	eb61 0105 	sbc.w	r1, r1, r5
 8003990:	f04f 0200 	mov.w	r2, #0
 8003994:	f04f 0300 	mov.w	r3, #0
 8003998:	018b      	lsls	r3, r1, #6
 800399a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800399e:	0182      	lsls	r2, r0, #6
 80039a0:	1a12      	subs	r2, r2, r0
 80039a2:	eb63 0301 	sbc.w	r3, r3, r1
 80039a6:	f04f 0000 	mov.w	r0, #0
 80039aa:	f04f 0100 	mov.w	r1, #0
 80039ae:	00d9      	lsls	r1, r3, #3
 80039b0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80039b4:	00d0      	lsls	r0, r2, #3
 80039b6:	4602      	mov	r2, r0
 80039b8:	460b      	mov	r3, r1
 80039ba:	1912      	adds	r2, r2, r4
 80039bc:	eb45 0303 	adc.w	r3, r5, r3
 80039c0:	f04f 0000 	mov.w	r0, #0
 80039c4:	f04f 0100 	mov.w	r1, #0
 80039c8:	0299      	lsls	r1, r3, #10
 80039ca:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80039ce:	0290      	lsls	r0, r2, #10
 80039d0:	4602      	mov	r2, r0
 80039d2:	460b      	mov	r3, r1
 80039d4:	4610      	mov	r0, r2
 80039d6:	4619      	mov	r1, r3
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	461a      	mov	r2, r3
 80039dc:	f04f 0300 	mov.w	r3, #0
 80039e0:	f7fc fc66 	bl	80002b0 <__aeabi_uldivmod>
 80039e4:	4602      	mov	r2, r0
 80039e6:	460b      	mov	r3, r1
 80039e8:	4613      	mov	r3, r2
 80039ea:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80039ec:	4b0a      	ldr	r3, [pc, #40]	; (8003a18 <HAL_RCC_GetSysClockFreq+0x358>)
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	0f1b      	lsrs	r3, r3, #28
 80039f2:	f003 0307 	and.w	r3, r3, #7
 80039f6:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 80039f8:	69fa      	ldr	r2, [r7, #28]
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a00:	61bb      	str	r3, [r7, #24]
      break;
 8003a02:	e002      	b.n	8003a0a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003a04:	4b05      	ldr	r3, [pc, #20]	; (8003a1c <HAL_RCC_GetSysClockFreq+0x35c>)
 8003a06:	61bb      	str	r3, [r7, #24]
      break;
 8003a08:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a0a:	69bb      	ldr	r3, [r7, #24]
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	3720      	adds	r7, #32
 8003a10:	46bd      	mov	sp, r7
 8003a12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a16:	bf00      	nop
 8003a18:	40023800 	.word	0x40023800
 8003a1c:	00f42400 	.word	0x00f42400
 8003a20:	007a1200 	.word	0x007a1200

08003a24 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b086      	sub	sp, #24
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d101      	bne.n	8003a36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	e28d      	b.n	8003f52 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f003 0301 	and.w	r3, r3, #1
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	f000 8083 	beq.w	8003b4a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003a44:	4b94      	ldr	r3, [pc, #592]	; (8003c98 <HAL_RCC_OscConfig+0x274>)
 8003a46:	689b      	ldr	r3, [r3, #8]
 8003a48:	f003 030c 	and.w	r3, r3, #12
 8003a4c:	2b04      	cmp	r3, #4
 8003a4e:	d019      	beq.n	8003a84 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003a50:	4b91      	ldr	r3, [pc, #580]	; (8003c98 <HAL_RCC_OscConfig+0x274>)
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003a58:	2b08      	cmp	r3, #8
 8003a5a:	d106      	bne.n	8003a6a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003a5c:	4b8e      	ldr	r3, [pc, #568]	; (8003c98 <HAL_RCC_OscConfig+0x274>)
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a64:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a68:	d00c      	beq.n	8003a84 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a6a:	4b8b      	ldr	r3, [pc, #556]	; (8003c98 <HAL_RCC_OscConfig+0x274>)
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003a72:	2b0c      	cmp	r3, #12
 8003a74:	d112      	bne.n	8003a9c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a76:	4b88      	ldr	r3, [pc, #544]	; (8003c98 <HAL_RCC_OscConfig+0x274>)
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a7e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a82:	d10b      	bne.n	8003a9c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a84:	4b84      	ldr	r3, [pc, #528]	; (8003c98 <HAL_RCC_OscConfig+0x274>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d05b      	beq.n	8003b48 <HAL_RCC_OscConfig+0x124>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d157      	bne.n	8003b48 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	e25a      	b.n	8003f52 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003aa4:	d106      	bne.n	8003ab4 <HAL_RCC_OscConfig+0x90>
 8003aa6:	4b7c      	ldr	r3, [pc, #496]	; (8003c98 <HAL_RCC_OscConfig+0x274>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a7b      	ldr	r2, [pc, #492]	; (8003c98 <HAL_RCC_OscConfig+0x274>)
 8003aac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ab0:	6013      	str	r3, [r2, #0]
 8003ab2:	e01d      	b.n	8003af0 <HAL_RCC_OscConfig+0xcc>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003abc:	d10c      	bne.n	8003ad8 <HAL_RCC_OscConfig+0xb4>
 8003abe:	4b76      	ldr	r3, [pc, #472]	; (8003c98 <HAL_RCC_OscConfig+0x274>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a75      	ldr	r2, [pc, #468]	; (8003c98 <HAL_RCC_OscConfig+0x274>)
 8003ac4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ac8:	6013      	str	r3, [r2, #0]
 8003aca:	4b73      	ldr	r3, [pc, #460]	; (8003c98 <HAL_RCC_OscConfig+0x274>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a72      	ldr	r2, [pc, #456]	; (8003c98 <HAL_RCC_OscConfig+0x274>)
 8003ad0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ad4:	6013      	str	r3, [r2, #0]
 8003ad6:	e00b      	b.n	8003af0 <HAL_RCC_OscConfig+0xcc>
 8003ad8:	4b6f      	ldr	r3, [pc, #444]	; (8003c98 <HAL_RCC_OscConfig+0x274>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a6e      	ldr	r2, [pc, #440]	; (8003c98 <HAL_RCC_OscConfig+0x274>)
 8003ade:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ae2:	6013      	str	r3, [r2, #0]
 8003ae4:	4b6c      	ldr	r3, [pc, #432]	; (8003c98 <HAL_RCC_OscConfig+0x274>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a6b      	ldr	r2, [pc, #428]	; (8003c98 <HAL_RCC_OscConfig+0x274>)
 8003aea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003aee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d013      	beq.n	8003b20 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003af8:	f7fd fe6a 	bl	80017d0 <HAL_GetTick>
 8003afc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003afe:	e008      	b.n	8003b12 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b00:	f7fd fe66 	bl	80017d0 <HAL_GetTick>
 8003b04:	4602      	mov	r2, r0
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	1ad3      	subs	r3, r2, r3
 8003b0a:	2b64      	cmp	r3, #100	; 0x64
 8003b0c:	d901      	bls.n	8003b12 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003b0e:	2303      	movs	r3, #3
 8003b10:	e21f      	b.n	8003f52 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b12:	4b61      	ldr	r3, [pc, #388]	; (8003c98 <HAL_RCC_OscConfig+0x274>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d0f0      	beq.n	8003b00 <HAL_RCC_OscConfig+0xdc>
 8003b1e:	e014      	b.n	8003b4a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b20:	f7fd fe56 	bl	80017d0 <HAL_GetTick>
 8003b24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b26:	e008      	b.n	8003b3a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b28:	f7fd fe52 	bl	80017d0 <HAL_GetTick>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	1ad3      	subs	r3, r2, r3
 8003b32:	2b64      	cmp	r3, #100	; 0x64
 8003b34:	d901      	bls.n	8003b3a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003b36:	2303      	movs	r3, #3
 8003b38:	e20b      	b.n	8003f52 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b3a:	4b57      	ldr	r3, [pc, #348]	; (8003c98 <HAL_RCC_OscConfig+0x274>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d1f0      	bne.n	8003b28 <HAL_RCC_OscConfig+0x104>
 8003b46:	e000      	b.n	8003b4a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f003 0302 	and.w	r3, r3, #2
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d06f      	beq.n	8003c36 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003b56:	4b50      	ldr	r3, [pc, #320]	; (8003c98 <HAL_RCC_OscConfig+0x274>)
 8003b58:	689b      	ldr	r3, [r3, #8]
 8003b5a:	f003 030c 	and.w	r3, r3, #12
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d017      	beq.n	8003b92 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003b62:	4b4d      	ldr	r3, [pc, #308]	; (8003c98 <HAL_RCC_OscConfig+0x274>)
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003b6a:	2b08      	cmp	r3, #8
 8003b6c:	d105      	bne.n	8003b7a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003b6e:	4b4a      	ldr	r3, [pc, #296]	; (8003c98 <HAL_RCC_OscConfig+0x274>)
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d00b      	beq.n	8003b92 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b7a:	4b47      	ldr	r3, [pc, #284]	; (8003c98 <HAL_RCC_OscConfig+0x274>)
 8003b7c:	689b      	ldr	r3, [r3, #8]
 8003b7e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003b82:	2b0c      	cmp	r3, #12
 8003b84:	d11c      	bne.n	8003bc0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b86:	4b44      	ldr	r3, [pc, #272]	; (8003c98 <HAL_RCC_OscConfig+0x274>)
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d116      	bne.n	8003bc0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b92:	4b41      	ldr	r3, [pc, #260]	; (8003c98 <HAL_RCC_OscConfig+0x274>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f003 0302 	and.w	r3, r3, #2
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d005      	beq.n	8003baa <HAL_RCC_OscConfig+0x186>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	68db      	ldr	r3, [r3, #12]
 8003ba2:	2b01      	cmp	r3, #1
 8003ba4:	d001      	beq.n	8003baa <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	e1d3      	b.n	8003f52 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003baa:	4b3b      	ldr	r3, [pc, #236]	; (8003c98 <HAL_RCC_OscConfig+0x274>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	691b      	ldr	r3, [r3, #16]
 8003bb6:	00db      	lsls	r3, r3, #3
 8003bb8:	4937      	ldr	r1, [pc, #220]	; (8003c98 <HAL_RCC_OscConfig+0x274>)
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bbe:	e03a      	b.n	8003c36 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	68db      	ldr	r3, [r3, #12]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d020      	beq.n	8003c0a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003bc8:	4b34      	ldr	r3, [pc, #208]	; (8003c9c <HAL_RCC_OscConfig+0x278>)
 8003bca:	2201      	movs	r2, #1
 8003bcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bce:	f7fd fdff 	bl	80017d0 <HAL_GetTick>
 8003bd2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bd4:	e008      	b.n	8003be8 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003bd6:	f7fd fdfb 	bl	80017d0 <HAL_GetTick>
 8003bda:	4602      	mov	r2, r0
 8003bdc:	693b      	ldr	r3, [r7, #16]
 8003bde:	1ad3      	subs	r3, r2, r3
 8003be0:	2b02      	cmp	r3, #2
 8003be2:	d901      	bls.n	8003be8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003be4:	2303      	movs	r3, #3
 8003be6:	e1b4      	b.n	8003f52 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003be8:	4b2b      	ldr	r3, [pc, #172]	; (8003c98 <HAL_RCC_OscConfig+0x274>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f003 0302 	and.w	r3, r3, #2
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d0f0      	beq.n	8003bd6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bf4:	4b28      	ldr	r3, [pc, #160]	; (8003c98 <HAL_RCC_OscConfig+0x274>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	691b      	ldr	r3, [r3, #16]
 8003c00:	00db      	lsls	r3, r3, #3
 8003c02:	4925      	ldr	r1, [pc, #148]	; (8003c98 <HAL_RCC_OscConfig+0x274>)
 8003c04:	4313      	orrs	r3, r2
 8003c06:	600b      	str	r3, [r1, #0]
 8003c08:	e015      	b.n	8003c36 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c0a:	4b24      	ldr	r3, [pc, #144]	; (8003c9c <HAL_RCC_OscConfig+0x278>)
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c10:	f7fd fdde 	bl	80017d0 <HAL_GetTick>
 8003c14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c16:	e008      	b.n	8003c2a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c18:	f7fd fdda 	bl	80017d0 <HAL_GetTick>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	1ad3      	subs	r3, r2, r3
 8003c22:	2b02      	cmp	r3, #2
 8003c24:	d901      	bls.n	8003c2a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003c26:	2303      	movs	r3, #3
 8003c28:	e193      	b.n	8003f52 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c2a:	4b1b      	ldr	r3, [pc, #108]	; (8003c98 <HAL_RCC_OscConfig+0x274>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f003 0302 	and.w	r3, r3, #2
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d1f0      	bne.n	8003c18 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f003 0308 	and.w	r3, r3, #8
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d036      	beq.n	8003cb0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	695b      	ldr	r3, [r3, #20]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d016      	beq.n	8003c78 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c4a:	4b15      	ldr	r3, [pc, #84]	; (8003ca0 <HAL_RCC_OscConfig+0x27c>)
 8003c4c:	2201      	movs	r2, #1
 8003c4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c50:	f7fd fdbe 	bl	80017d0 <HAL_GetTick>
 8003c54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c56:	e008      	b.n	8003c6a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c58:	f7fd fdba 	bl	80017d0 <HAL_GetTick>
 8003c5c:	4602      	mov	r2, r0
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	1ad3      	subs	r3, r2, r3
 8003c62:	2b02      	cmp	r3, #2
 8003c64:	d901      	bls.n	8003c6a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003c66:	2303      	movs	r3, #3
 8003c68:	e173      	b.n	8003f52 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c6a:	4b0b      	ldr	r3, [pc, #44]	; (8003c98 <HAL_RCC_OscConfig+0x274>)
 8003c6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c6e:	f003 0302 	and.w	r3, r3, #2
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d0f0      	beq.n	8003c58 <HAL_RCC_OscConfig+0x234>
 8003c76:	e01b      	b.n	8003cb0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c78:	4b09      	ldr	r3, [pc, #36]	; (8003ca0 <HAL_RCC_OscConfig+0x27c>)
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c7e:	f7fd fda7 	bl	80017d0 <HAL_GetTick>
 8003c82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c84:	e00e      	b.n	8003ca4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c86:	f7fd fda3 	bl	80017d0 <HAL_GetTick>
 8003c8a:	4602      	mov	r2, r0
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	1ad3      	subs	r3, r2, r3
 8003c90:	2b02      	cmp	r3, #2
 8003c92:	d907      	bls.n	8003ca4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003c94:	2303      	movs	r3, #3
 8003c96:	e15c      	b.n	8003f52 <HAL_RCC_OscConfig+0x52e>
 8003c98:	40023800 	.word	0x40023800
 8003c9c:	42470000 	.word	0x42470000
 8003ca0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ca4:	4b8a      	ldr	r3, [pc, #552]	; (8003ed0 <HAL_RCC_OscConfig+0x4ac>)
 8003ca6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ca8:	f003 0302 	and.w	r3, r3, #2
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d1ea      	bne.n	8003c86 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f003 0304 	and.w	r3, r3, #4
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	f000 8097 	beq.w	8003dec <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003cc2:	4b83      	ldr	r3, [pc, #524]	; (8003ed0 <HAL_RCC_OscConfig+0x4ac>)
 8003cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d10f      	bne.n	8003cee <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cce:	2300      	movs	r3, #0
 8003cd0:	60bb      	str	r3, [r7, #8]
 8003cd2:	4b7f      	ldr	r3, [pc, #508]	; (8003ed0 <HAL_RCC_OscConfig+0x4ac>)
 8003cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd6:	4a7e      	ldr	r2, [pc, #504]	; (8003ed0 <HAL_RCC_OscConfig+0x4ac>)
 8003cd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cdc:	6413      	str	r3, [r2, #64]	; 0x40
 8003cde:	4b7c      	ldr	r3, [pc, #496]	; (8003ed0 <HAL_RCC_OscConfig+0x4ac>)
 8003ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ce6:	60bb      	str	r3, [r7, #8]
 8003ce8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003cea:	2301      	movs	r3, #1
 8003cec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cee:	4b79      	ldr	r3, [pc, #484]	; (8003ed4 <HAL_RCC_OscConfig+0x4b0>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d118      	bne.n	8003d2c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003cfa:	4b76      	ldr	r3, [pc, #472]	; (8003ed4 <HAL_RCC_OscConfig+0x4b0>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a75      	ldr	r2, [pc, #468]	; (8003ed4 <HAL_RCC_OscConfig+0x4b0>)
 8003d00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d06:	f7fd fd63 	bl	80017d0 <HAL_GetTick>
 8003d0a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d0c:	e008      	b.n	8003d20 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d0e:	f7fd fd5f 	bl	80017d0 <HAL_GetTick>
 8003d12:	4602      	mov	r2, r0
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	1ad3      	subs	r3, r2, r3
 8003d18:	2b02      	cmp	r3, #2
 8003d1a:	d901      	bls.n	8003d20 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003d1c:	2303      	movs	r3, #3
 8003d1e:	e118      	b.n	8003f52 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d20:	4b6c      	ldr	r3, [pc, #432]	; (8003ed4 <HAL_RCC_OscConfig+0x4b0>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d0f0      	beq.n	8003d0e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	689b      	ldr	r3, [r3, #8]
 8003d30:	2b01      	cmp	r3, #1
 8003d32:	d106      	bne.n	8003d42 <HAL_RCC_OscConfig+0x31e>
 8003d34:	4b66      	ldr	r3, [pc, #408]	; (8003ed0 <HAL_RCC_OscConfig+0x4ac>)
 8003d36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d38:	4a65      	ldr	r2, [pc, #404]	; (8003ed0 <HAL_RCC_OscConfig+0x4ac>)
 8003d3a:	f043 0301 	orr.w	r3, r3, #1
 8003d3e:	6713      	str	r3, [r2, #112]	; 0x70
 8003d40:	e01c      	b.n	8003d7c <HAL_RCC_OscConfig+0x358>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	689b      	ldr	r3, [r3, #8]
 8003d46:	2b05      	cmp	r3, #5
 8003d48:	d10c      	bne.n	8003d64 <HAL_RCC_OscConfig+0x340>
 8003d4a:	4b61      	ldr	r3, [pc, #388]	; (8003ed0 <HAL_RCC_OscConfig+0x4ac>)
 8003d4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d4e:	4a60      	ldr	r2, [pc, #384]	; (8003ed0 <HAL_RCC_OscConfig+0x4ac>)
 8003d50:	f043 0304 	orr.w	r3, r3, #4
 8003d54:	6713      	str	r3, [r2, #112]	; 0x70
 8003d56:	4b5e      	ldr	r3, [pc, #376]	; (8003ed0 <HAL_RCC_OscConfig+0x4ac>)
 8003d58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d5a:	4a5d      	ldr	r2, [pc, #372]	; (8003ed0 <HAL_RCC_OscConfig+0x4ac>)
 8003d5c:	f043 0301 	orr.w	r3, r3, #1
 8003d60:	6713      	str	r3, [r2, #112]	; 0x70
 8003d62:	e00b      	b.n	8003d7c <HAL_RCC_OscConfig+0x358>
 8003d64:	4b5a      	ldr	r3, [pc, #360]	; (8003ed0 <HAL_RCC_OscConfig+0x4ac>)
 8003d66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d68:	4a59      	ldr	r2, [pc, #356]	; (8003ed0 <HAL_RCC_OscConfig+0x4ac>)
 8003d6a:	f023 0301 	bic.w	r3, r3, #1
 8003d6e:	6713      	str	r3, [r2, #112]	; 0x70
 8003d70:	4b57      	ldr	r3, [pc, #348]	; (8003ed0 <HAL_RCC_OscConfig+0x4ac>)
 8003d72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d74:	4a56      	ldr	r2, [pc, #344]	; (8003ed0 <HAL_RCC_OscConfig+0x4ac>)
 8003d76:	f023 0304 	bic.w	r3, r3, #4
 8003d7a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	689b      	ldr	r3, [r3, #8]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d015      	beq.n	8003db0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d84:	f7fd fd24 	bl	80017d0 <HAL_GetTick>
 8003d88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d8a:	e00a      	b.n	8003da2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d8c:	f7fd fd20 	bl	80017d0 <HAL_GetTick>
 8003d90:	4602      	mov	r2, r0
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	1ad3      	subs	r3, r2, r3
 8003d96:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d901      	bls.n	8003da2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003d9e:	2303      	movs	r3, #3
 8003da0:	e0d7      	b.n	8003f52 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003da2:	4b4b      	ldr	r3, [pc, #300]	; (8003ed0 <HAL_RCC_OscConfig+0x4ac>)
 8003da4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003da6:	f003 0302 	and.w	r3, r3, #2
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d0ee      	beq.n	8003d8c <HAL_RCC_OscConfig+0x368>
 8003dae:	e014      	b.n	8003dda <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003db0:	f7fd fd0e 	bl	80017d0 <HAL_GetTick>
 8003db4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003db6:	e00a      	b.n	8003dce <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003db8:	f7fd fd0a 	bl	80017d0 <HAL_GetTick>
 8003dbc:	4602      	mov	r2, r0
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	1ad3      	subs	r3, r2, r3
 8003dc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d901      	bls.n	8003dce <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003dca:	2303      	movs	r3, #3
 8003dcc:	e0c1      	b.n	8003f52 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003dce:	4b40      	ldr	r3, [pc, #256]	; (8003ed0 <HAL_RCC_OscConfig+0x4ac>)
 8003dd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dd2:	f003 0302 	and.w	r3, r3, #2
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d1ee      	bne.n	8003db8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003dda:	7dfb      	ldrb	r3, [r7, #23]
 8003ddc:	2b01      	cmp	r3, #1
 8003dde:	d105      	bne.n	8003dec <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003de0:	4b3b      	ldr	r3, [pc, #236]	; (8003ed0 <HAL_RCC_OscConfig+0x4ac>)
 8003de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de4:	4a3a      	ldr	r2, [pc, #232]	; (8003ed0 <HAL_RCC_OscConfig+0x4ac>)
 8003de6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003dea:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	699b      	ldr	r3, [r3, #24]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	f000 80ad 	beq.w	8003f50 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003df6:	4b36      	ldr	r3, [pc, #216]	; (8003ed0 <HAL_RCC_OscConfig+0x4ac>)
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	f003 030c 	and.w	r3, r3, #12
 8003dfe:	2b08      	cmp	r3, #8
 8003e00:	d060      	beq.n	8003ec4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	699b      	ldr	r3, [r3, #24]
 8003e06:	2b02      	cmp	r3, #2
 8003e08:	d145      	bne.n	8003e96 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e0a:	4b33      	ldr	r3, [pc, #204]	; (8003ed8 <HAL_RCC_OscConfig+0x4b4>)
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e10:	f7fd fcde 	bl	80017d0 <HAL_GetTick>
 8003e14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e16:	e008      	b.n	8003e2a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e18:	f7fd fcda 	bl	80017d0 <HAL_GetTick>
 8003e1c:	4602      	mov	r2, r0
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	1ad3      	subs	r3, r2, r3
 8003e22:	2b02      	cmp	r3, #2
 8003e24:	d901      	bls.n	8003e2a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003e26:	2303      	movs	r3, #3
 8003e28:	e093      	b.n	8003f52 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e2a:	4b29      	ldr	r3, [pc, #164]	; (8003ed0 <HAL_RCC_OscConfig+0x4ac>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d1f0      	bne.n	8003e18 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	69da      	ldr	r2, [r3, #28]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6a1b      	ldr	r3, [r3, #32]
 8003e3e:	431a      	orrs	r2, r3
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e44:	019b      	lsls	r3, r3, #6
 8003e46:	431a      	orrs	r2, r3
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e4c:	085b      	lsrs	r3, r3, #1
 8003e4e:	3b01      	subs	r3, #1
 8003e50:	041b      	lsls	r3, r3, #16
 8003e52:	431a      	orrs	r2, r3
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e58:	061b      	lsls	r3, r3, #24
 8003e5a:	431a      	orrs	r2, r3
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e60:	071b      	lsls	r3, r3, #28
 8003e62:	491b      	ldr	r1, [pc, #108]	; (8003ed0 <HAL_RCC_OscConfig+0x4ac>)
 8003e64:	4313      	orrs	r3, r2
 8003e66:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e68:	4b1b      	ldr	r3, [pc, #108]	; (8003ed8 <HAL_RCC_OscConfig+0x4b4>)
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e6e:	f7fd fcaf 	bl	80017d0 <HAL_GetTick>
 8003e72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e74:	e008      	b.n	8003e88 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e76:	f7fd fcab 	bl	80017d0 <HAL_GetTick>
 8003e7a:	4602      	mov	r2, r0
 8003e7c:	693b      	ldr	r3, [r7, #16]
 8003e7e:	1ad3      	subs	r3, r2, r3
 8003e80:	2b02      	cmp	r3, #2
 8003e82:	d901      	bls.n	8003e88 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003e84:	2303      	movs	r3, #3
 8003e86:	e064      	b.n	8003f52 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e88:	4b11      	ldr	r3, [pc, #68]	; (8003ed0 <HAL_RCC_OscConfig+0x4ac>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d0f0      	beq.n	8003e76 <HAL_RCC_OscConfig+0x452>
 8003e94:	e05c      	b.n	8003f50 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e96:	4b10      	ldr	r3, [pc, #64]	; (8003ed8 <HAL_RCC_OscConfig+0x4b4>)
 8003e98:	2200      	movs	r2, #0
 8003e9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e9c:	f7fd fc98 	bl	80017d0 <HAL_GetTick>
 8003ea0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ea2:	e008      	b.n	8003eb6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ea4:	f7fd fc94 	bl	80017d0 <HAL_GetTick>
 8003ea8:	4602      	mov	r2, r0
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	1ad3      	subs	r3, r2, r3
 8003eae:	2b02      	cmp	r3, #2
 8003eb0:	d901      	bls.n	8003eb6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003eb2:	2303      	movs	r3, #3
 8003eb4:	e04d      	b.n	8003f52 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003eb6:	4b06      	ldr	r3, [pc, #24]	; (8003ed0 <HAL_RCC_OscConfig+0x4ac>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d1f0      	bne.n	8003ea4 <HAL_RCC_OscConfig+0x480>
 8003ec2:	e045      	b.n	8003f50 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	699b      	ldr	r3, [r3, #24]
 8003ec8:	2b01      	cmp	r3, #1
 8003eca:	d107      	bne.n	8003edc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003ecc:	2301      	movs	r3, #1
 8003ece:	e040      	b.n	8003f52 <HAL_RCC_OscConfig+0x52e>
 8003ed0:	40023800 	.word	0x40023800
 8003ed4:	40007000 	.word	0x40007000
 8003ed8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003edc:	4b1f      	ldr	r3, [pc, #124]	; (8003f5c <HAL_RCC_OscConfig+0x538>)
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	699b      	ldr	r3, [r3, #24]
 8003ee6:	2b01      	cmp	r3, #1
 8003ee8:	d030      	beq.n	8003f4c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ef4:	429a      	cmp	r2, r3
 8003ef6:	d129      	bne.n	8003f4c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f02:	429a      	cmp	r2, r3
 8003f04:	d122      	bne.n	8003f4c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f06:	68fa      	ldr	r2, [r7, #12]
 8003f08:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003f0c:	4013      	ands	r3, r2
 8003f0e:	687a      	ldr	r2, [r7, #4]
 8003f10:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003f12:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d119      	bne.n	8003f4c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f22:	085b      	lsrs	r3, r3, #1
 8003f24:	3b01      	subs	r3, #1
 8003f26:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f28:	429a      	cmp	r2, r3
 8003f2a:	d10f      	bne.n	8003f4c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f36:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f38:	429a      	cmp	r2, r3
 8003f3a:	d107      	bne.n	8003f4c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f46:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f48:	429a      	cmp	r2, r3
 8003f4a:	d001      	beq.n	8003f50 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	e000      	b.n	8003f52 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003f50:	2300      	movs	r3, #0
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	3718      	adds	r7, #24
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}
 8003f5a:	bf00      	nop
 8003f5c:	40023800 	.word	0x40023800

08003f60 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b082      	sub	sp, #8
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d101      	bne.n	8003f72 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	e07b      	b.n	800406a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d108      	bne.n	8003f8c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f82:	d009      	beq.n	8003f98 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2200      	movs	r2, #0
 8003f88:	61da      	str	r2, [r3, #28]
 8003f8a:	e005      	b.n	8003f98 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2200      	movs	r2, #0
 8003f96:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003fa4:	b2db      	uxtb	r3, r3
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d106      	bne.n	8003fb8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2200      	movs	r2, #0
 8003fae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	f7fd f9a2 	bl	80012fc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2202      	movs	r2, #2
 8003fbc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	681a      	ldr	r2, [r3, #0]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003fce:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003fe0:	431a      	orrs	r2, r3
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	68db      	ldr	r3, [r3, #12]
 8003fe6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fea:	431a      	orrs	r2, r3
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	691b      	ldr	r3, [r3, #16]
 8003ff0:	f003 0302 	and.w	r3, r3, #2
 8003ff4:	431a      	orrs	r2, r3
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	695b      	ldr	r3, [r3, #20]
 8003ffa:	f003 0301 	and.w	r3, r3, #1
 8003ffe:	431a      	orrs	r2, r3
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	699b      	ldr	r3, [r3, #24]
 8004004:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004008:	431a      	orrs	r2, r3
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	69db      	ldr	r3, [r3, #28]
 800400e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004012:	431a      	orrs	r2, r3
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6a1b      	ldr	r3, [r3, #32]
 8004018:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800401c:	ea42 0103 	orr.w	r1, r2, r3
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004024:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	430a      	orrs	r2, r1
 800402e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	699b      	ldr	r3, [r3, #24]
 8004034:	0c1b      	lsrs	r3, r3, #16
 8004036:	f003 0104 	and.w	r1, r3, #4
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800403e:	f003 0210 	and.w	r2, r3, #16
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	430a      	orrs	r2, r1
 8004048:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	69da      	ldr	r2, [r3, #28]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004058:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2200      	movs	r2, #0
 800405e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2201      	movs	r2, #1
 8004064:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004068:	2300      	movs	r3, #0
}
 800406a:	4618      	mov	r0, r3
 800406c:	3708      	adds	r7, #8
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}

08004072 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004072:	b580      	push	{r7, lr}
 8004074:	b082      	sub	sp, #8
 8004076:	af00      	add	r7, sp, #0
 8004078:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d101      	bne.n	8004084 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004080:	2301      	movs	r3, #1
 8004082:	e041      	b.n	8004108 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800408a:	b2db      	uxtb	r3, r3
 800408c:	2b00      	cmp	r3, #0
 800408e:	d106      	bne.n	800409e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2200      	movs	r2, #0
 8004094:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004098:	6878      	ldr	r0, [r7, #4]
 800409a:	f7fd f9a7 	bl	80013ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2202      	movs	r2, #2
 80040a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681a      	ldr	r2, [r3, #0]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	3304      	adds	r3, #4
 80040ae:	4619      	mov	r1, r3
 80040b0:	4610      	mov	r0, r2
 80040b2:	f000 facf 	bl	8004654 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2201      	movs	r2, #1
 80040ba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2201      	movs	r2, #1
 80040c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2201      	movs	r2, #1
 80040ca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2201      	movs	r2, #1
 80040d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2201      	movs	r2, #1
 80040da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2201      	movs	r2, #1
 80040e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2201      	movs	r2, #1
 80040ea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2201      	movs	r2, #1
 80040f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2201      	movs	r2, #1
 80040fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2201      	movs	r2, #1
 8004102:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004106:	2300      	movs	r3, #0
}
 8004108:	4618      	mov	r0, r3
 800410a:	3708      	adds	r7, #8
 800410c:	46bd      	mov	sp, r7
 800410e:	bd80      	pop	{r7, pc}

08004110 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b082      	sub	sp, #8
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d101      	bne.n	8004122 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800411e:	2301      	movs	r3, #1
 8004120:	e041      	b.n	80041a6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004128:	b2db      	uxtb	r3, r3
 800412a:	2b00      	cmp	r3, #0
 800412c:	d106      	bne.n	800413c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2200      	movs	r2, #0
 8004132:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004136:	6878      	ldr	r0, [r7, #4]
 8004138:	f7fd f97a 	bl	8001430 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2202      	movs	r2, #2
 8004140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681a      	ldr	r2, [r3, #0]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	3304      	adds	r3, #4
 800414c:	4619      	mov	r1, r3
 800414e:	4610      	mov	r0, r2
 8004150:	f000 fa80 	bl	8004654 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2201      	movs	r2, #1
 8004158:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2201      	movs	r2, #1
 8004160:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2201      	movs	r2, #1
 8004168:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2201      	movs	r2, #1
 8004170:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2201      	movs	r2, #1
 8004178:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2201      	movs	r2, #1
 8004180:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2201      	movs	r2, #1
 8004188:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2201      	movs	r2, #1
 8004190:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2201      	movs	r2, #1
 8004198:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2201      	movs	r2, #1
 80041a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80041a4:	2300      	movs	r3, #0
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	3708      	adds	r7, #8
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}
	...

080041b0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b084      	sub	sp, #16
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
 80041b8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d109      	bne.n	80041d4 <HAL_TIM_PWM_Start+0x24>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80041c6:	b2db      	uxtb	r3, r3
 80041c8:	2b01      	cmp	r3, #1
 80041ca:	bf14      	ite	ne
 80041cc:	2301      	movne	r3, #1
 80041ce:	2300      	moveq	r3, #0
 80041d0:	b2db      	uxtb	r3, r3
 80041d2:	e022      	b.n	800421a <HAL_TIM_PWM_Start+0x6a>
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	2b04      	cmp	r3, #4
 80041d8:	d109      	bne.n	80041ee <HAL_TIM_PWM_Start+0x3e>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80041e0:	b2db      	uxtb	r3, r3
 80041e2:	2b01      	cmp	r3, #1
 80041e4:	bf14      	ite	ne
 80041e6:	2301      	movne	r3, #1
 80041e8:	2300      	moveq	r3, #0
 80041ea:	b2db      	uxtb	r3, r3
 80041ec:	e015      	b.n	800421a <HAL_TIM_PWM_Start+0x6a>
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	2b08      	cmp	r3, #8
 80041f2:	d109      	bne.n	8004208 <HAL_TIM_PWM_Start+0x58>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80041fa:	b2db      	uxtb	r3, r3
 80041fc:	2b01      	cmp	r3, #1
 80041fe:	bf14      	ite	ne
 8004200:	2301      	movne	r3, #1
 8004202:	2300      	moveq	r3, #0
 8004204:	b2db      	uxtb	r3, r3
 8004206:	e008      	b.n	800421a <HAL_TIM_PWM_Start+0x6a>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800420e:	b2db      	uxtb	r3, r3
 8004210:	2b01      	cmp	r3, #1
 8004212:	bf14      	ite	ne
 8004214:	2301      	movne	r3, #1
 8004216:	2300      	moveq	r3, #0
 8004218:	b2db      	uxtb	r3, r3
 800421a:	2b00      	cmp	r3, #0
 800421c:	d001      	beq.n	8004222 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800421e:	2301      	movs	r3, #1
 8004220:	e07c      	b.n	800431c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d104      	bne.n	8004232 <HAL_TIM_PWM_Start+0x82>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2202      	movs	r2, #2
 800422c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004230:	e013      	b.n	800425a <HAL_TIM_PWM_Start+0xaa>
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	2b04      	cmp	r3, #4
 8004236:	d104      	bne.n	8004242 <HAL_TIM_PWM_Start+0x92>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2202      	movs	r2, #2
 800423c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004240:	e00b      	b.n	800425a <HAL_TIM_PWM_Start+0xaa>
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	2b08      	cmp	r3, #8
 8004246:	d104      	bne.n	8004252 <HAL_TIM_PWM_Start+0xa2>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2202      	movs	r2, #2
 800424c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004250:	e003      	b.n	800425a <HAL_TIM_PWM_Start+0xaa>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2202      	movs	r2, #2
 8004256:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	2201      	movs	r2, #1
 8004260:	6839      	ldr	r1, [r7, #0]
 8004262:	4618      	mov	r0, r3
 8004264:	f000 fce0 	bl	8004c28 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a2d      	ldr	r2, [pc, #180]	; (8004324 <HAL_TIM_PWM_Start+0x174>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d004      	beq.n	800427c <HAL_TIM_PWM_Start+0xcc>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a2c      	ldr	r2, [pc, #176]	; (8004328 <HAL_TIM_PWM_Start+0x178>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d101      	bne.n	8004280 <HAL_TIM_PWM_Start+0xd0>
 800427c:	2301      	movs	r3, #1
 800427e:	e000      	b.n	8004282 <HAL_TIM_PWM_Start+0xd2>
 8004280:	2300      	movs	r3, #0
 8004282:	2b00      	cmp	r3, #0
 8004284:	d007      	beq.n	8004296 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004294:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a22      	ldr	r2, [pc, #136]	; (8004324 <HAL_TIM_PWM_Start+0x174>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d022      	beq.n	80042e6 <HAL_TIM_PWM_Start+0x136>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042a8:	d01d      	beq.n	80042e6 <HAL_TIM_PWM_Start+0x136>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a1f      	ldr	r2, [pc, #124]	; (800432c <HAL_TIM_PWM_Start+0x17c>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d018      	beq.n	80042e6 <HAL_TIM_PWM_Start+0x136>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a1d      	ldr	r2, [pc, #116]	; (8004330 <HAL_TIM_PWM_Start+0x180>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d013      	beq.n	80042e6 <HAL_TIM_PWM_Start+0x136>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a1c      	ldr	r2, [pc, #112]	; (8004334 <HAL_TIM_PWM_Start+0x184>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d00e      	beq.n	80042e6 <HAL_TIM_PWM_Start+0x136>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a16      	ldr	r2, [pc, #88]	; (8004328 <HAL_TIM_PWM_Start+0x178>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d009      	beq.n	80042e6 <HAL_TIM_PWM_Start+0x136>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a18      	ldr	r2, [pc, #96]	; (8004338 <HAL_TIM_PWM_Start+0x188>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d004      	beq.n	80042e6 <HAL_TIM_PWM_Start+0x136>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a16      	ldr	r2, [pc, #88]	; (800433c <HAL_TIM_PWM_Start+0x18c>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d111      	bne.n	800430a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	689b      	ldr	r3, [r3, #8]
 80042ec:	f003 0307 	and.w	r3, r3, #7
 80042f0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	2b06      	cmp	r3, #6
 80042f6:	d010      	beq.n	800431a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	681a      	ldr	r2, [r3, #0]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f042 0201 	orr.w	r2, r2, #1
 8004306:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004308:	e007      	b.n	800431a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	681a      	ldr	r2, [r3, #0]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f042 0201 	orr.w	r2, r2, #1
 8004318:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800431a:	2300      	movs	r3, #0
}
 800431c:	4618      	mov	r0, r3
 800431e:	3710      	adds	r7, #16
 8004320:	46bd      	mov	sp, r7
 8004322:	bd80      	pop	{r7, pc}
 8004324:	40010000 	.word	0x40010000
 8004328:	40010400 	.word	0x40010400
 800432c:	40000400 	.word	0x40000400
 8004330:	40000800 	.word	0x40000800
 8004334:	40000c00 	.word	0x40000c00
 8004338:	40014000 	.word	0x40014000
 800433c:	40001800 	.word	0x40001800

08004340 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b086      	sub	sp, #24
 8004344:	af00      	add	r7, sp, #0
 8004346:	60f8      	str	r0, [r7, #12]
 8004348:	60b9      	str	r1, [r7, #8]
 800434a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800434c:	2300      	movs	r3, #0
 800434e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004356:	2b01      	cmp	r3, #1
 8004358:	d101      	bne.n	800435e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800435a:	2302      	movs	r3, #2
 800435c:	e0ae      	b.n	80044bc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	2201      	movs	r2, #1
 8004362:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2b0c      	cmp	r3, #12
 800436a:	f200 809f 	bhi.w	80044ac <HAL_TIM_PWM_ConfigChannel+0x16c>
 800436e:	a201      	add	r2, pc, #4	; (adr r2, 8004374 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004370:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004374:	080043a9 	.word	0x080043a9
 8004378:	080044ad 	.word	0x080044ad
 800437c:	080044ad 	.word	0x080044ad
 8004380:	080044ad 	.word	0x080044ad
 8004384:	080043e9 	.word	0x080043e9
 8004388:	080044ad 	.word	0x080044ad
 800438c:	080044ad 	.word	0x080044ad
 8004390:	080044ad 	.word	0x080044ad
 8004394:	0800442b 	.word	0x0800442b
 8004398:	080044ad 	.word	0x080044ad
 800439c:	080044ad 	.word	0x080044ad
 80043a0:	080044ad 	.word	0x080044ad
 80043a4:	0800446b 	.word	0x0800446b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	68b9      	ldr	r1, [r7, #8]
 80043ae:	4618      	mov	r0, r3
 80043b0:	f000 f9f0 	bl	8004794 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	699a      	ldr	r2, [r3, #24]
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f042 0208 	orr.w	r2, r2, #8
 80043c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	699a      	ldr	r2, [r3, #24]
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f022 0204 	bic.w	r2, r2, #4
 80043d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	6999      	ldr	r1, [r3, #24]
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	691a      	ldr	r2, [r3, #16]
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	430a      	orrs	r2, r1
 80043e4:	619a      	str	r2, [r3, #24]
      break;
 80043e6:	e064      	b.n	80044b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	68b9      	ldr	r1, [r7, #8]
 80043ee:	4618      	mov	r0, r3
 80043f0:	f000 fa40 	bl	8004874 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	699a      	ldr	r2, [r3, #24]
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004402:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	699a      	ldr	r2, [r3, #24]
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004412:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	6999      	ldr	r1, [r3, #24]
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	691b      	ldr	r3, [r3, #16]
 800441e:	021a      	lsls	r2, r3, #8
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	430a      	orrs	r2, r1
 8004426:	619a      	str	r2, [r3, #24]
      break;
 8004428:	e043      	b.n	80044b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	68b9      	ldr	r1, [r7, #8]
 8004430:	4618      	mov	r0, r3
 8004432:	f000 fa95 	bl	8004960 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	69da      	ldr	r2, [r3, #28]
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f042 0208 	orr.w	r2, r2, #8
 8004444:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	69da      	ldr	r2, [r3, #28]
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f022 0204 	bic.w	r2, r2, #4
 8004454:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	69d9      	ldr	r1, [r3, #28]
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	691a      	ldr	r2, [r3, #16]
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	430a      	orrs	r2, r1
 8004466:	61da      	str	r2, [r3, #28]
      break;
 8004468:	e023      	b.n	80044b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	68b9      	ldr	r1, [r7, #8]
 8004470:	4618      	mov	r0, r3
 8004472:	f000 fae9 	bl	8004a48 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	69da      	ldr	r2, [r3, #28]
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004484:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	69da      	ldr	r2, [r3, #28]
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004494:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	69d9      	ldr	r1, [r3, #28]
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	691b      	ldr	r3, [r3, #16]
 80044a0:	021a      	lsls	r2, r3, #8
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	430a      	orrs	r2, r1
 80044a8:	61da      	str	r2, [r3, #28]
      break;
 80044aa:	e002      	b.n	80044b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80044ac:	2301      	movs	r3, #1
 80044ae:	75fb      	strb	r3, [r7, #23]
      break;
 80044b0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	2200      	movs	r2, #0
 80044b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80044ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80044bc:	4618      	mov	r0, r3
 80044be:	3718      	adds	r7, #24
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bd80      	pop	{r7, pc}

080044c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b084      	sub	sp, #16
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
 80044cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80044ce:	2300      	movs	r3, #0
 80044d0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044d8:	2b01      	cmp	r3, #1
 80044da:	d101      	bne.n	80044e0 <HAL_TIM_ConfigClockSource+0x1c>
 80044dc:	2302      	movs	r3, #2
 80044de:	e0b4      	b.n	800464a <HAL_TIM_ConfigClockSource+0x186>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2201      	movs	r2, #1
 80044e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2202      	movs	r2, #2
 80044ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	689b      	ldr	r3, [r3, #8]
 80044f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80044fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004506:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	68ba      	ldr	r2, [r7, #8]
 800450e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004518:	d03e      	beq.n	8004598 <HAL_TIM_ConfigClockSource+0xd4>
 800451a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800451e:	f200 8087 	bhi.w	8004630 <HAL_TIM_ConfigClockSource+0x16c>
 8004522:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004526:	f000 8086 	beq.w	8004636 <HAL_TIM_ConfigClockSource+0x172>
 800452a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800452e:	d87f      	bhi.n	8004630 <HAL_TIM_ConfigClockSource+0x16c>
 8004530:	2b70      	cmp	r3, #112	; 0x70
 8004532:	d01a      	beq.n	800456a <HAL_TIM_ConfigClockSource+0xa6>
 8004534:	2b70      	cmp	r3, #112	; 0x70
 8004536:	d87b      	bhi.n	8004630 <HAL_TIM_ConfigClockSource+0x16c>
 8004538:	2b60      	cmp	r3, #96	; 0x60
 800453a:	d050      	beq.n	80045de <HAL_TIM_ConfigClockSource+0x11a>
 800453c:	2b60      	cmp	r3, #96	; 0x60
 800453e:	d877      	bhi.n	8004630 <HAL_TIM_ConfigClockSource+0x16c>
 8004540:	2b50      	cmp	r3, #80	; 0x50
 8004542:	d03c      	beq.n	80045be <HAL_TIM_ConfigClockSource+0xfa>
 8004544:	2b50      	cmp	r3, #80	; 0x50
 8004546:	d873      	bhi.n	8004630 <HAL_TIM_ConfigClockSource+0x16c>
 8004548:	2b40      	cmp	r3, #64	; 0x40
 800454a:	d058      	beq.n	80045fe <HAL_TIM_ConfigClockSource+0x13a>
 800454c:	2b40      	cmp	r3, #64	; 0x40
 800454e:	d86f      	bhi.n	8004630 <HAL_TIM_ConfigClockSource+0x16c>
 8004550:	2b30      	cmp	r3, #48	; 0x30
 8004552:	d064      	beq.n	800461e <HAL_TIM_ConfigClockSource+0x15a>
 8004554:	2b30      	cmp	r3, #48	; 0x30
 8004556:	d86b      	bhi.n	8004630 <HAL_TIM_ConfigClockSource+0x16c>
 8004558:	2b20      	cmp	r3, #32
 800455a:	d060      	beq.n	800461e <HAL_TIM_ConfigClockSource+0x15a>
 800455c:	2b20      	cmp	r3, #32
 800455e:	d867      	bhi.n	8004630 <HAL_TIM_ConfigClockSource+0x16c>
 8004560:	2b00      	cmp	r3, #0
 8004562:	d05c      	beq.n	800461e <HAL_TIM_ConfigClockSource+0x15a>
 8004564:	2b10      	cmp	r3, #16
 8004566:	d05a      	beq.n	800461e <HAL_TIM_ConfigClockSource+0x15a>
 8004568:	e062      	b.n	8004630 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6818      	ldr	r0, [r3, #0]
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	6899      	ldr	r1, [r3, #8]
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	685a      	ldr	r2, [r3, #4]
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	68db      	ldr	r3, [r3, #12]
 800457a:	f000 fb35 	bl	8004be8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	689b      	ldr	r3, [r3, #8]
 8004584:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800458c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	68ba      	ldr	r2, [r7, #8]
 8004594:	609a      	str	r2, [r3, #8]
      break;
 8004596:	e04f      	b.n	8004638 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6818      	ldr	r0, [r3, #0]
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	6899      	ldr	r1, [r3, #8]
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	685a      	ldr	r2, [r3, #4]
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	68db      	ldr	r3, [r3, #12]
 80045a8:	f000 fb1e 	bl	8004be8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	689a      	ldr	r2, [r3, #8]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80045ba:	609a      	str	r2, [r3, #8]
      break;
 80045bc:	e03c      	b.n	8004638 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6818      	ldr	r0, [r3, #0]
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	6859      	ldr	r1, [r3, #4]
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	68db      	ldr	r3, [r3, #12]
 80045ca:	461a      	mov	r2, r3
 80045cc:	f000 fa92 	bl	8004af4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	2150      	movs	r1, #80	; 0x50
 80045d6:	4618      	mov	r0, r3
 80045d8:	f000 faeb 	bl	8004bb2 <TIM_ITRx_SetConfig>
      break;
 80045dc:	e02c      	b.n	8004638 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6818      	ldr	r0, [r3, #0]
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	6859      	ldr	r1, [r3, #4]
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	68db      	ldr	r3, [r3, #12]
 80045ea:	461a      	mov	r2, r3
 80045ec:	f000 fab1 	bl	8004b52 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	2160      	movs	r1, #96	; 0x60
 80045f6:	4618      	mov	r0, r3
 80045f8:	f000 fadb 	bl	8004bb2 <TIM_ITRx_SetConfig>
      break;
 80045fc:	e01c      	b.n	8004638 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6818      	ldr	r0, [r3, #0]
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	6859      	ldr	r1, [r3, #4]
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	68db      	ldr	r3, [r3, #12]
 800460a:	461a      	mov	r2, r3
 800460c:	f000 fa72 	bl	8004af4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	2140      	movs	r1, #64	; 0x40
 8004616:	4618      	mov	r0, r3
 8004618:	f000 facb 	bl	8004bb2 <TIM_ITRx_SetConfig>
      break;
 800461c:	e00c      	b.n	8004638 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681a      	ldr	r2, [r3, #0]
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4619      	mov	r1, r3
 8004628:	4610      	mov	r0, r2
 800462a:	f000 fac2 	bl	8004bb2 <TIM_ITRx_SetConfig>
      break;
 800462e:	e003      	b.n	8004638 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004630:	2301      	movs	r3, #1
 8004632:	73fb      	strb	r3, [r7, #15]
      break;
 8004634:	e000      	b.n	8004638 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004636:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2201      	movs	r2, #1
 800463c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2200      	movs	r2, #0
 8004644:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004648:	7bfb      	ldrb	r3, [r7, #15]
}
 800464a:	4618      	mov	r0, r3
 800464c:	3710      	adds	r7, #16
 800464e:	46bd      	mov	sp, r7
 8004650:	bd80      	pop	{r7, pc}
	...

08004654 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004654:	b480      	push	{r7}
 8004656:	b085      	sub	sp, #20
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
 800465c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	4a40      	ldr	r2, [pc, #256]	; (8004768 <TIM_Base_SetConfig+0x114>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d013      	beq.n	8004694 <TIM_Base_SetConfig+0x40>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004672:	d00f      	beq.n	8004694 <TIM_Base_SetConfig+0x40>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	4a3d      	ldr	r2, [pc, #244]	; (800476c <TIM_Base_SetConfig+0x118>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d00b      	beq.n	8004694 <TIM_Base_SetConfig+0x40>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	4a3c      	ldr	r2, [pc, #240]	; (8004770 <TIM_Base_SetConfig+0x11c>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d007      	beq.n	8004694 <TIM_Base_SetConfig+0x40>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	4a3b      	ldr	r2, [pc, #236]	; (8004774 <TIM_Base_SetConfig+0x120>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d003      	beq.n	8004694 <TIM_Base_SetConfig+0x40>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	4a3a      	ldr	r2, [pc, #232]	; (8004778 <TIM_Base_SetConfig+0x124>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d108      	bne.n	80046a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800469a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	68fa      	ldr	r2, [r7, #12]
 80046a2:	4313      	orrs	r3, r2
 80046a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	4a2f      	ldr	r2, [pc, #188]	; (8004768 <TIM_Base_SetConfig+0x114>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d02b      	beq.n	8004706 <TIM_Base_SetConfig+0xb2>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046b4:	d027      	beq.n	8004706 <TIM_Base_SetConfig+0xb2>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	4a2c      	ldr	r2, [pc, #176]	; (800476c <TIM_Base_SetConfig+0x118>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d023      	beq.n	8004706 <TIM_Base_SetConfig+0xb2>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	4a2b      	ldr	r2, [pc, #172]	; (8004770 <TIM_Base_SetConfig+0x11c>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d01f      	beq.n	8004706 <TIM_Base_SetConfig+0xb2>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	4a2a      	ldr	r2, [pc, #168]	; (8004774 <TIM_Base_SetConfig+0x120>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d01b      	beq.n	8004706 <TIM_Base_SetConfig+0xb2>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	4a29      	ldr	r2, [pc, #164]	; (8004778 <TIM_Base_SetConfig+0x124>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d017      	beq.n	8004706 <TIM_Base_SetConfig+0xb2>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	4a28      	ldr	r2, [pc, #160]	; (800477c <TIM_Base_SetConfig+0x128>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d013      	beq.n	8004706 <TIM_Base_SetConfig+0xb2>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	4a27      	ldr	r2, [pc, #156]	; (8004780 <TIM_Base_SetConfig+0x12c>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d00f      	beq.n	8004706 <TIM_Base_SetConfig+0xb2>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	4a26      	ldr	r2, [pc, #152]	; (8004784 <TIM_Base_SetConfig+0x130>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d00b      	beq.n	8004706 <TIM_Base_SetConfig+0xb2>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	4a25      	ldr	r2, [pc, #148]	; (8004788 <TIM_Base_SetConfig+0x134>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d007      	beq.n	8004706 <TIM_Base_SetConfig+0xb2>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	4a24      	ldr	r2, [pc, #144]	; (800478c <TIM_Base_SetConfig+0x138>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d003      	beq.n	8004706 <TIM_Base_SetConfig+0xb2>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	4a23      	ldr	r2, [pc, #140]	; (8004790 <TIM_Base_SetConfig+0x13c>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d108      	bne.n	8004718 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800470c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	68db      	ldr	r3, [r3, #12]
 8004712:	68fa      	ldr	r2, [r7, #12]
 8004714:	4313      	orrs	r3, r2
 8004716:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	695b      	ldr	r3, [r3, #20]
 8004722:	4313      	orrs	r3, r2
 8004724:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	68fa      	ldr	r2, [r7, #12]
 800472a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	689a      	ldr	r2, [r3, #8]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	681a      	ldr	r2, [r3, #0]
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	4a0a      	ldr	r2, [pc, #40]	; (8004768 <TIM_Base_SetConfig+0x114>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d003      	beq.n	800474c <TIM_Base_SetConfig+0xf8>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	4a0c      	ldr	r2, [pc, #48]	; (8004778 <TIM_Base_SetConfig+0x124>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d103      	bne.n	8004754 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	691a      	ldr	r2, [r3, #16]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2201      	movs	r2, #1
 8004758:	615a      	str	r2, [r3, #20]
}
 800475a:	bf00      	nop
 800475c:	3714      	adds	r7, #20
 800475e:	46bd      	mov	sp, r7
 8004760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004764:	4770      	bx	lr
 8004766:	bf00      	nop
 8004768:	40010000 	.word	0x40010000
 800476c:	40000400 	.word	0x40000400
 8004770:	40000800 	.word	0x40000800
 8004774:	40000c00 	.word	0x40000c00
 8004778:	40010400 	.word	0x40010400
 800477c:	40014000 	.word	0x40014000
 8004780:	40014400 	.word	0x40014400
 8004784:	40014800 	.word	0x40014800
 8004788:	40001800 	.word	0x40001800
 800478c:	40001c00 	.word	0x40001c00
 8004790:	40002000 	.word	0x40002000

08004794 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004794:	b480      	push	{r7}
 8004796:	b087      	sub	sp, #28
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
 800479c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6a1b      	ldr	r3, [r3, #32]
 80047a2:	f023 0201 	bic.w	r2, r3, #1
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6a1b      	ldr	r3, [r3, #32]
 80047ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	699b      	ldr	r3, [r3, #24]
 80047ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	f023 0303 	bic.w	r3, r3, #3
 80047ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	68fa      	ldr	r2, [r7, #12]
 80047d2:	4313      	orrs	r3, r2
 80047d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	f023 0302 	bic.w	r3, r3, #2
 80047dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	689b      	ldr	r3, [r3, #8]
 80047e2:	697a      	ldr	r2, [r7, #20]
 80047e4:	4313      	orrs	r3, r2
 80047e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	4a20      	ldr	r2, [pc, #128]	; (800486c <TIM_OC1_SetConfig+0xd8>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d003      	beq.n	80047f8 <TIM_OC1_SetConfig+0x64>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	4a1f      	ldr	r2, [pc, #124]	; (8004870 <TIM_OC1_SetConfig+0xdc>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d10c      	bne.n	8004812 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	f023 0308 	bic.w	r3, r3, #8
 80047fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	68db      	ldr	r3, [r3, #12]
 8004804:	697a      	ldr	r2, [r7, #20]
 8004806:	4313      	orrs	r3, r2
 8004808:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	f023 0304 	bic.w	r3, r3, #4
 8004810:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	4a15      	ldr	r2, [pc, #84]	; (800486c <TIM_OC1_SetConfig+0xd8>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d003      	beq.n	8004822 <TIM_OC1_SetConfig+0x8e>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	4a14      	ldr	r2, [pc, #80]	; (8004870 <TIM_OC1_SetConfig+0xdc>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d111      	bne.n	8004846 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004822:	693b      	ldr	r3, [r7, #16]
 8004824:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004828:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800482a:	693b      	ldr	r3, [r7, #16]
 800482c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004830:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	695b      	ldr	r3, [r3, #20]
 8004836:	693a      	ldr	r2, [r7, #16]
 8004838:	4313      	orrs	r3, r2
 800483a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	699b      	ldr	r3, [r3, #24]
 8004840:	693a      	ldr	r2, [r7, #16]
 8004842:	4313      	orrs	r3, r2
 8004844:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	693a      	ldr	r2, [r7, #16]
 800484a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	68fa      	ldr	r2, [r7, #12]
 8004850:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	685a      	ldr	r2, [r3, #4]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	697a      	ldr	r2, [r7, #20]
 800485e:	621a      	str	r2, [r3, #32]
}
 8004860:	bf00      	nop
 8004862:	371c      	adds	r7, #28
 8004864:	46bd      	mov	sp, r7
 8004866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486a:	4770      	bx	lr
 800486c:	40010000 	.word	0x40010000
 8004870:	40010400 	.word	0x40010400

08004874 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004874:	b480      	push	{r7}
 8004876:	b087      	sub	sp, #28
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
 800487c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6a1b      	ldr	r3, [r3, #32]
 8004882:	f023 0210 	bic.w	r2, r3, #16
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6a1b      	ldr	r3, [r3, #32]
 800488e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	699b      	ldr	r3, [r3, #24]
 800489a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	021b      	lsls	r3, r3, #8
 80048b2:	68fa      	ldr	r2, [r7, #12]
 80048b4:	4313      	orrs	r3, r2
 80048b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	f023 0320 	bic.w	r3, r3, #32
 80048be:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	689b      	ldr	r3, [r3, #8]
 80048c4:	011b      	lsls	r3, r3, #4
 80048c6:	697a      	ldr	r2, [r7, #20]
 80048c8:	4313      	orrs	r3, r2
 80048ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	4a22      	ldr	r2, [pc, #136]	; (8004958 <TIM_OC2_SetConfig+0xe4>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d003      	beq.n	80048dc <TIM_OC2_SetConfig+0x68>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	4a21      	ldr	r2, [pc, #132]	; (800495c <TIM_OC2_SetConfig+0xe8>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d10d      	bne.n	80048f8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80048dc:	697b      	ldr	r3, [r7, #20]
 80048de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80048e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	68db      	ldr	r3, [r3, #12]
 80048e8:	011b      	lsls	r3, r3, #4
 80048ea:	697a      	ldr	r2, [r7, #20]
 80048ec:	4313      	orrs	r3, r2
 80048ee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80048f0:	697b      	ldr	r3, [r7, #20]
 80048f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048f6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	4a17      	ldr	r2, [pc, #92]	; (8004958 <TIM_OC2_SetConfig+0xe4>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d003      	beq.n	8004908 <TIM_OC2_SetConfig+0x94>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	4a16      	ldr	r2, [pc, #88]	; (800495c <TIM_OC2_SetConfig+0xe8>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d113      	bne.n	8004930 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004908:	693b      	ldr	r3, [r7, #16]
 800490a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800490e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004910:	693b      	ldr	r3, [r7, #16]
 8004912:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004916:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	695b      	ldr	r3, [r3, #20]
 800491c:	009b      	lsls	r3, r3, #2
 800491e:	693a      	ldr	r2, [r7, #16]
 8004920:	4313      	orrs	r3, r2
 8004922:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	699b      	ldr	r3, [r3, #24]
 8004928:	009b      	lsls	r3, r3, #2
 800492a:	693a      	ldr	r2, [r7, #16]
 800492c:	4313      	orrs	r3, r2
 800492e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	693a      	ldr	r2, [r7, #16]
 8004934:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	68fa      	ldr	r2, [r7, #12]
 800493a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	685a      	ldr	r2, [r3, #4]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	697a      	ldr	r2, [r7, #20]
 8004948:	621a      	str	r2, [r3, #32]
}
 800494a:	bf00      	nop
 800494c:	371c      	adds	r7, #28
 800494e:	46bd      	mov	sp, r7
 8004950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004954:	4770      	bx	lr
 8004956:	bf00      	nop
 8004958:	40010000 	.word	0x40010000
 800495c:	40010400 	.word	0x40010400

08004960 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004960:	b480      	push	{r7}
 8004962:	b087      	sub	sp, #28
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
 8004968:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6a1b      	ldr	r3, [r3, #32]
 800496e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6a1b      	ldr	r3, [r3, #32]
 800497a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	69db      	ldr	r3, [r3, #28]
 8004986:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800498e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	f023 0303 	bic.w	r3, r3, #3
 8004996:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	68fa      	ldr	r2, [r7, #12]
 800499e:	4313      	orrs	r3, r2
 80049a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80049a2:	697b      	ldr	r3, [r7, #20]
 80049a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80049a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	689b      	ldr	r3, [r3, #8]
 80049ae:	021b      	lsls	r3, r3, #8
 80049b0:	697a      	ldr	r2, [r7, #20]
 80049b2:	4313      	orrs	r3, r2
 80049b4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	4a21      	ldr	r2, [pc, #132]	; (8004a40 <TIM_OC3_SetConfig+0xe0>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d003      	beq.n	80049c6 <TIM_OC3_SetConfig+0x66>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	4a20      	ldr	r2, [pc, #128]	; (8004a44 <TIM_OC3_SetConfig+0xe4>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d10d      	bne.n	80049e2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80049cc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	68db      	ldr	r3, [r3, #12]
 80049d2:	021b      	lsls	r3, r3, #8
 80049d4:	697a      	ldr	r2, [r7, #20]
 80049d6:	4313      	orrs	r3, r2
 80049d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80049da:	697b      	ldr	r3, [r7, #20]
 80049dc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80049e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	4a16      	ldr	r2, [pc, #88]	; (8004a40 <TIM_OC3_SetConfig+0xe0>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d003      	beq.n	80049f2 <TIM_OC3_SetConfig+0x92>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	4a15      	ldr	r2, [pc, #84]	; (8004a44 <TIM_OC3_SetConfig+0xe4>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d113      	bne.n	8004a1a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80049f2:	693b      	ldr	r3, [r7, #16]
 80049f4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80049f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80049fa:	693b      	ldr	r3, [r7, #16]
 80049fc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004a00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	695b      	ldr	r3, [r3, #20]
 8004a06:	011b      	lsls	r3, r3, #4
 8004a08:	693a      	ldr	r2, [r7, #16]
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	699b      	ldr	r3, [r3, #24]
 8004a12:	011b      	lsls	r3, r3, #4
 8004a14:	693a      	ldr	r2, [r7, #16]
 8004a16:	4313      	orrs	r3, r2
 8004a18:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	693a      	ldr	r2, [r7, #16]
 8004a1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	68fa      	ldr	r2, [r7, #12]
 8004a24:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	685a      	ldr	r2, [r3, #4]
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	697a      	ldr	r2, [r7, #20]
 8004a32:	621a      	str	r2, [r3, #32]
}
 8004a34:	bf00      	nop
 8004a36:	371c      	adds	r7, #28
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3e:	4770      	bx	lr
 8004a40:	40010000 	.word	0x40010000
 8004a44:	40010400 	.word	0x40010400

08004a48 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b087      	sub	sp, #28
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
 8004a50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6a1b      	ldr	r3, [r3, #32]
 8004a56:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6a1b      	ldr	r3, [r3, #32]
 8004a62:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	69db      	ldr	r3, [r3, #28]
 8004a6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a7e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	021b      	lsls	r3, r3, #8
 8004a86:	68fa      	ldr	r2, [r7, #12]
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004a8c:	693b      	ldr	r3, [r7, #16]
 8004a8e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004a92:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	689b      	ldr	r3, [r3, #8]
 8004a98:	031b      	lsls	r3, r3, #12
 8004a9a:	693a      	ldr	r2, [r7, #16]
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	4a12      	ldr	r2, [pc, #72]	; (8004aec <TIM_OC4_SetConfig+0xa4>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d003      	beq.n	8004ab0 <TIM_OC4_SetConfig+0x68>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	4a11      	ldr	r2, [pc, #68]	; (8004af0 <TIM_OC4_SetConfig+0xa8>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d109      	bne.n	8004ac4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004ab0:	697b      	ldr	r3, [r7, #20]
 8004ab2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ab6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	695b      	ldr	r3, [r3, #20]
 8004abc:	019b      	lsls	r3, r3, #6
 8004abe:	697a      	ldr	r2, [r7, #20]
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	697a      	ldr	r2, [r7, #20]
 8004ac8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	68fa      	ldr	r2, [r7, #12]
 8004ace:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	685a      	ldr	r2, [r3, #4]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	693a      	ldr	r2, [r7, #16]
 8004adc:	621a      	str	r2, [r3, #32]
}
 8004ade:	bf00      	nop
 8004ae0:	371c      	adds	r7, #28
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae8:	4770      	bx	lr
 8004aea:	bf00      	nop
 8004aec:	40010000 	.word	0x40010000
 8004af0:	40010400 	.word	0x40010400

08004af4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004af4:	b480      	push	{r7}
 8004af6:	b087      	sub	sp, #28
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	60f8      	str	r0, [r7, #12]
 8004afc:	60b9      	str	r1, [r7, #8]
 8004afe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	6a1b      	ldr	r3, [r3, #32]
 8004b04:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	6a1b      	ldr	r3, [r3, #32]
 8004b0a:	f023 0201 	bic.w	r2, r3, #1
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	699b      	ldr	r3, [r3, #24]
 8004b16:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004b18:	693b      	ldr	r3, [r7, #16]
 8004b1a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004b1e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	011b      	lsls	r3, r3, #4
 8004b24:	693a      	ldr	r2, [r7, #16]
 8004b26:	4313      	orrs	r3, r2
 8004b28:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	f023 030a 	bic.w	r3, r3, #10
 8004b30:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004b32:	697a      	ldr	r2, [r7, #20]
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	4313      	orrs	r3, r2
 8004b38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	693a      	ldr	r2, [r7, #16]
 8004b3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	697a      	ldr	r2, [r7, #20]
 8004b44:	621a      	str	r2, [r3, #32]
}
 8004b46:	bf00      	nop
 8004b48:	371c      	adds	r7, #28
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b50:	4770      	bx	lr

08004b52 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b52:	b480      	push	{r7}
 8004b54:	b087      	sub	sp, #28
 8004b56:	af00      	add	r7, sp, #0
 8004b58:	60f8      	str	r0, [r7, #12]
 8004b5a:	60b9      	str	r1, [r7, #8]
 8004b5c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	6a1b      	ldr	r3, [r3, #32]
 8004b62:	f023 0210 	bic.w	r2, r3, #16
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	699b      	ldr	r3, [r3, #24]
 8004b6e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	6a1b      	ldr	r3, [r3, #32]
 8004b74:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004b76:	697b      	ldr	r3, [r7, #20]
 8004b78:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004b7c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	031b      	lsls	r3, r3, #12
 8004b82:	697a      	ldr	r2, [r7, #20]
 8004b84:	4313      	orrs	r3, r2
 8004b86:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004b88:	693b      	ldr	r3, [r7, #16]
 8004b8a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004b8e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	011b      	lsls	r3, r3, #4
 8004b94:	693a      	ldr	r2, [r7, #16]
 8004b96:	4313      	orrs	r3, r2
 8004b98:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	697a      	ldr	r2, [r7, #20]
 8004b9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	693a      	ldr	r2, [r7, #16]
 8004ba4:	621a      	str	r2, [r3, #32]
}
 8004ba6:	bf00      	nop
 8004ba8:	371c      	adds	r7, #28
 8004baa:	46bd      	mov	sp, r7
 8004bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb0:	4770      	bx	lr

08004bb2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004bb2:	b480      	push	{r7}
 8004bb4:	b085      	sub	sp, #20
 8004bb6:	af00      	add	r7, sp, #0
 8004bb8:	6078      	str	r0, [r7, #4]
 8004bba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	689b      	ldr	r3, [r3, #8]
 8004bc0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bc8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004bca:	683a      	ldr	r2, [r7, #0]
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	f043 0307 	orr.w	r3, r3, #7
 8004bd4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	68fa      	ldr	r2, [r7, #12]
 8004bda:	609a      	str	r2, [r3, #8]
}
 8004bdc:	bf00      	nop
 8004bde:	3714      	adds	r7, #20
 8004be0:	46bd      	mov	sp, r7
 8004be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be6:	4770      	bx	lr

08004be8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004be8:	b480      	push	{r7}
 8004bea:	b087      	sub	sp, #28
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	60f8      	str	r0, [r7, #12]
 8004bf0:	60b9      	str	r1, [r7, #8]
 8004bf2:	607a      	str	r2, [r7, #4]
 8004bf4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	689b      	ldr	r3, [r3, #8]
 8004bfa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004bfc:	697b      	ldr	r3, [r7, #20]
 8004bfe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c02:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	021a      	lsls	r2, r3, #8
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	431a      	orrs	r2, r3
 8004c0c:	68bb      	ldr	r3, [r7, #8]
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	697a      	ldr	r2, [r7, #20]
 8004c12:	4313      	orrs	r3, r2
 8004c14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	697a      	ldr	r2, [r7, #20]
 8004c1a:	609a      	str	r2, [r3, #8]
}
 8004c1c:	bf00      	nop
 8004c1e:	371c      	adds	r7, #28
 8004c20:	46bd      	mov	sp, r7
 8004c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c26:	4770      	bx	lr

08004c28 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b087      	sub	sp, #28
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	60f8      	str	r0, [r7, #12]
 8004c30:	60b9      	str	r1, [r7, #8]
 8004c32:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	f003 031f 	and.w	r3, r3, #31
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c40:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	6a1a      	ldr	r2, [r3, #32]
 8004c46:	697b      	ldr	r3, [r7, #20]
 8004c48:	43db      	mvns	r3, r3
 8004c4a:	401a      	ands	r2, r3
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	6a1a      	ldr	r2, [r3, #32]
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	f003 031f 	and.w	r3, r3, #31
 8004c5a:	6879      	ldr	r1, [r7, #4]
 8004c5c:	fa01 f303 	lsl.w	r3, r1, r3
 8004c60:	431a      	orrs	r2, r3
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	621a      	str	r2, [r3, #32]
}
 8004c66:	bf00      	nop
 8004c68:	371c      	adds	r7, #28
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c70:	4770      	bx	lr
	...

08004c74 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004c74:	b480      	push	{r7}
 8004c76:	b085      	sub	sp, #20
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
 8004c7c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c84:	2b01      	cmp	r3, #1
 8004c86:	d101      	bne.n	8004c8c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004c88:	2302      	movs	r3, #2
 8004c8a:	e05a      	b.n	8004d42 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2201      	movs	r2, #1
 8004c90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2202      	movs	r2, #2
 8004c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	689b      	ldr	r3, [r3, #8]
 8004caa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cb2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	68fa      	ldr	r2, [r7, #12]
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	68fa      	ldr	r2, [r7, #12]
 8004cc4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a21      	ldr	r2, [pc, #132]	; (8004d50 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d022      	beq.n	8004d16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cd8:	d01d      	beq.n	8004d16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a1d      	ldr	r2, [pc, #116]	; (8004d54 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d018      	beq.n	8004d16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a1b      	ldr	r2, [pc, #108]	; (8004d58 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d013      	beq.n	8004d16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a1a      	ldr	r2, [pc, #104]	; (8004d5c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d00e      	beq.n	8004d16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a18      	ldr	r2, [pc, #96]	; (8004d60 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d009      	beq.n	8004d16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a17      	ldr	r2, [pc, #92]	; (8004d64 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d004      	beq.n	8004d16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a15      	ldr	r2, [pc, #84]	; (8004d68 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d10c      	bne.n	8004d30 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d1c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	68ba      	ldr	r2, [r7, #8]
 8004d24:	4313      	orrs	r3, r2
 8004d26:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	68ba      	ldr	r2, [r7, #8]
 8004d2e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2201      	movs	r2, #1
 8004d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d40:	2300      	movs	r3, #0
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	3714      	adds	r7, #20
 8004d46:	46bd      	mov	sp, r7
 8004d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4c:	4770      	bx	lr
 8004d4e:	bf00      	nop
 8004d50:	40010000 	.word	0x40010000
 8004d54:	40000400 	.word	0x40000400
 8004d58:	40000800 	.word	0x40000800
 8004d5c:	40000c00 	.word	0x40000c00
 8004d60:	40010400 	.word	0x40010400
 8004d64:	40014000 	.word	0x40014000
 8004d68:	40001800 	.word	0x40001800

08004d6c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b085      	sub	sp, #20
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
 8004d74:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004d76:	2300      	movs	r3, #0
 8004d78:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d80:	2b01      	cmp	r3, #1
 8004d82:	d101      	bne.n	8004d88 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004d84:	2302      	movs	r3, #2
 8004d86:	e03d      	b.n	8004e04 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2201      	movs	r2, #1
 8004d8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	68db      	ldr	r3, [r3, #12]
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	689b      	ldr	r3, [r3, #8]
 8004da8:	4313      	orrs	r3, r2
 8004daa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	4313      	orrs	r3, r2
 8004db8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	691b      	ldr	r3, [r3, #16]
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	695b      	ldr	r3, [r3, #20]
 8004de0:	4313      	orrs	r3, r2
 8004de2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	69db      	ldr	r3, [r3, #28]
 8004dee:	4313      	orrs	r3, r2
 8004df0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	68fa      	ldr	r2, [r7, #12]
 8004df8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e02:	2300      	movs	r3, #0
}
 8004e04:	4618      	mov	r0, r3
 8004e06:	3714      	adds	r7, #20
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0e:	4770      	bx	lr

08004e10 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b082      	sub	sp, #8
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d101      	bne.n	8004e22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	e03f      	b.n	8004ea2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e28:	b2db      	uxtb	r3, r3
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d106      	bne.n	8004e3c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2200      	movs	r2, #0
 8004e32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e36:	6878      	ldr	r0, [r7, #4]
 8004e38:	f7fc fb80 	bl	800153c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2224      	movs	r2, #36	; 0x24
 8004e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	68da      	ldr	r2, [r3, #12]
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004e52:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004e54:	6878      	ldr	r0, [r7, #4]
 8004e56:	f000 f929 	bl	80050ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	691a      	ldr	r2, [r3, #16]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004e68:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	695a      	ldr	r2, [r3, #20]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004e78:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	68da      	ldr	r2, [r3, #12]
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004e88:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2220      	movs	r2, #32
 8004e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2220      	movs	r2, #32
 8004e9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004ea0:	2300      	movs	r3, #0
}
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	3708      	adds	r7, #8
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	bd80      	pop	{r7, pc}

08004eaa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004eaa:	b580      	push	{r7, lr}
 8004eac:	b08a      	sub	sp, #40	; 0x28
 8004eae:	af02      	add	r7, sp, #8
 8004eb0:	60f8      	str	r0, [r7, #12]
 8004eb2:	60b9      	str	r1, [r7, #8]
 8004eb4:	603b      	str	r3, [r7, #0]
 8004eb6:	4613      	mov	r3, r2
 8004eb8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004eba:	2300      	movs	r3, #0
 8004ebc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ec4:	b2db      	uxtb	r3, r3
 8004ec6:	2b20      	cmp	r3, #32
 8004ec8:	d17c      	bne.n	8004fc4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d002      	beq.n	8004ed6 <HAL_UART_Transmit+0x2c>
 8004ed0:	88fb      	ldrh	r3, [r7, #6]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d101      	bne.n	8004eda <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	e075      	b.n	8004fc6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ee0:	2b01      	cmp	r3, #1
 8004ee2:	d101      	bne.n	8004ee8 <HAL_UART_Transmit+0x3e>
 8004ee4:	2302      	movs	r3, #2
 8004ee6:	e06e      	b.n	8004fc6 <HAL_UART_Transmit+0x11c>
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	2201      	movs	r2, #1
 8004eec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	2221      	movs	r2, #33	; 0x21
 8004efa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004efe:	f7fc fc67 	bl	80017d0 <HAL_GetTick>
 8004f02:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	88fa      	ldrh	r2, [r7, #6]
 8004f08:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	88fa      	ldrh	r2, [r7, #6]
 8004f0e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	689b      	ldr	r3, [r3, #8]
 8004f14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f18:	d108      	bne.n	8004f2c <HAL_UART_Transmit+0x82>
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	691b      	ldr	r3, [r3, #16]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d104      	bne.n	8004f2c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004f22:	2300      	movs	r3, #0
 8004f24:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004f26:	68bb      	ldr	r3, [r7, #8]
 8004f28:	61bb      	str	r3, [r7, #24]
 8004f2a:	e003      	b.n	8004f34 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004f30:	2300      	movs	r3, #0
 8004f32:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	2200      	movs	r2, #0
 8004f38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004f3c:	e02a      	b.n	8004f94 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	9300      	str	r3, [sp, #0]
 8004f42:	697b      	ldr	r3, [r7, #20]
 8004f44:	2200      	movs	r2, #0
 8004f46:	2180      	movs	r1, #128	; 0x80
 8004f48:	68f8      	ldr	r0, [r7, #12]
 8004f4a:	f000 f840 	bl	8004fce <UART_WaitOnFlagUntilTimeout>
 8004f4e:	4603      	mov	r3, r0
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d001      	beq.n	8004f58 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004f54:	2303      	movs	r3, #3
 8004f56:	e036      	b.n	8004fc6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004f58:	69fb      	ldr	r3, [r7, #28]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d10b      	bne.n	8004f76 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004f5e:	69bb      	ldr	r3, [r7, #24]
 8004f60:	881b      	ldrh	r3, [r3, #0]
 8004f62:	461a      	mov	r2, r3
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f6c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004f6e:	69bb      	ldr	r3, [r7, #24]
 8004f70:	3302      	adds	r3, #2
 8004f72:	61bb      	str	r3, [r7, #24]
 8004f74:	e007      	b.n	8004f86 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004f76:	69fb      	ldr	r3, [r7, #28]
 8004f78:	781a      	ldrb	r2, [r3, #0]
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004f80:	69fb      	ldr	r3, [r7, #28]
 8004f82:	3301      	adds	r3, #1
 8004f84:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004f8a:	b29b      	uxth	r3, r3
 8004f8c:	3b01      	subs	r3, #1
 8004f8e:	b29a      	uxth	r2, r3
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004f98:	b29b      	uxth	r3, r3
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d1cf      	bne.n	8004f3e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	9300      	str	r3, [sp, #0]
 8004fa2:	697b      	ldr	r3, [r7, #20]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	2140      	movs	r1, #64	; 0x40
 8004fa8:	68f8      	ldr	r0, [r7, #12]
 8004faa:	f000 f810 	bl	8004fce <UART_WaitOnFlagUntilTimeout>
 8004fae:	4603      	mov	r3, r0
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d001      	beq.n	8004fb8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004fb4:	2303      	movs	r3, #3
 8004fb6:	e006      	b.n	8004fc6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	2220      	movs	r2, #32
 8004fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	e000      	b.n	8004fc6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004fc4:	2302      	movs	r3, #2
  }
}
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	3720      	adds	r7, #32
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bd80      	pop	{r7, pc}

08004fce <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004fce:	b580      	push	{r7, lr}
 8004fd0:	b090      	sub	sp, #64	; 0x40
 8004fd2:	af00      	add	r7, sp, #0
 8004fd4:	60f8      	str	r0, [r7, #12]
 8004fd6:	60b9      	str	r1, [r7, #8]
 8004fd8:	603b      	str	r3, [r7, #0]
 8004fda:	4613      	mov	r3, r2
 8004fdc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fde:	e050      	b.n	8005082 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fe0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004fe2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fe6:	d04c      	beq.n	8005082 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004fe8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d007      	beq.n	8004ffe <UART_WaitOnFlagUntilTimeout+0x30>
 8004fee:	f7fc fbef 	bl	80017d0 <HAL_GetTick>
 8004ff2:	4602      	mov	r2, r0
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	1ad3      	subs	r3, r2, r3
 8004ff8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004ffa:	429a      	cmp	r2, r3
 8004ffc:	d241      	bcs.n	8005082 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	330c      	adds	r3, #12
 8005004:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005008:	e853 3f00 	ldrex	r3, [r3]
 800500c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800500e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005010:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005014:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	330c      	adds	r3, #12
 800501c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800501e:	637a      	str	r2, [r7, #52]	; 0x34
 8005020:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005022:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005024:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005026:	e841 2300 	strex	r3, r2, [r1]
 800502a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800502c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800502e:	2b00      	cmp	r3, #0
 8005030:	d1e5      	bne.n	8004ffe <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	3314      	adds	r3, #20
 8005038:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800503a:	697b      	ldr	r3, [r7, #20]
 800503c:	e853 3f00 	ldrex	r3, [r3]
 8005040:	613b      	str	r3, [r7, #16]
   return(result);
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	f023 0301 	bic.w	r3, r3, #1
 8005048:	63bb      	str	r3, [r7, #56]	; 0x38
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	3314      	adds	r3, #20
 8005050:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005052:	623a      	str	r2, [r7, #32]
 8005054:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005056:	69f9      	ldr	r1, [r7, #28]
 8005058:	6a3a      	ldr	r2, [r7, #32]
 800505a:	e841 2300 	strex	r3, r2, [r1]
 800505e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005060:	69bb      	ldr	r3, [r7, #24]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d1e5      	bne.n	8005032 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	2220      	movs	r2, #32
 800506a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	2220      	movs	r2, #32
 8005072:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	2200      	movs	r2, #0
 800507a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800507e:	2303      	movs	r3, #3
 8005080:	e00f      	b.n	80050a2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	681a      	ldr	r2, [r3, #0]
 8005088:	68bb      	ldr	r3, [r7, #8]
 800508a:	4013      	ands	r3, r2
 800508c:	68ba      	ldr	r2, [r7, #8]
 800508e:	429a      	cmp	r2, r3
 8005090:	bf0c      	ite	eq
 8005092:	2301      	moveq	r3, #1
 8005094:	2300      	movne	r3, #0
 8005096:	b2db      	uxtb	r3, r3
 8005098:	461a      	mov	r2, r3
 800509a:	79fb      	ldrb	r3, [r7, #7]
 800509c:	429a      	cmp	r2, r3
 800509e:	d09f      	beq.n	8004fe0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80050a0:	2300      	movs	r3, #0
}
 80050a2:	4618      	mov	r0, r3
 80050a4:	3740      	adds	r7, #64	; 0x40
 80050a6:	46bd      	mov	sp, r7
 80050a8:	bd80      	pop	{r7, pc}
	...

080050ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80050ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050b0:	b09f      	sub	sp, #124	; 0x7c
 80050b2:	af00      	add	r7, sp, #0
 80050b4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80050b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	691b      	ldr	r3, [r3, #16]
 80050bc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80050c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050c2:	68d9      	ldr	r1, [r3, #12]
 80050c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050c6:	681a      	ldr	r2, [r3, #0]
 80050c8:	ea40 0301 	orr.w	r3, r0, r1
 80050cc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80050ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050d0:	689a      	ldr	r2, [r3, #8]
 80050d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050d4:	691b      	ldr	r3, [r3, #16]
 80050d6:	431a      	orrs	r2, r3
 80050d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050da:	695b      	ldr	r3, [r3, #20]
 80050dc:	431a      	orrs	r2, r3
 80050de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050e0:	69db      	ldr	r3, [r3, #28]
 80050e2:	4313      	orrs	r3, r2
 80050e4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80050e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	68db      	ldr	r3, [r3, #12]
 80050ec:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80050f0:	f021 010c 	bic.w	r1, r1, #12
 80050f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050f6:	681a      	ldr	r2, [r3, #0]
 80050f8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80050fa:	430b      	orrs	r3, r1
 80050fc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80050fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	695b      	ldr	r3, [r3, #20]
 8005104:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005108:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800510a:	6999      	ldr	r1, [r3, #24]
 800510c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800510e:	681a      	ldr	r2, [r3, #0]
 8005110:	ea40 0301 	orr.w	r3, r0, r1
 8005114:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005116:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005118:	681a      	ldr	r2, [r3, #0]
 800511a:	4bc5      	ldr	r3, [pc, #788]	; (8005430 <UART_SetConfig+0x384>)
 800511c:	429a      	cmp	r2, r3
 800511e:	d004      	beq.n	800512a <UART_SetConfig+0x7e>
 8005120:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005122:	681a      	ldr	r2, [r3, #0]
 8005124:	4bc3      	ldr	r3, [pc, #780]	; (8005434 <UART_SetConfig+0x388>)
 8005126:	429a      	cmp	r2, r3
 8005128:	d103      	bne.n	8005132 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800512a:	f7fd ff8b 	bl	8003044 <HAL_RCC_GetPCLK2Freq>
 800512e:	6778      	str	r0, [r7, #116]	; 0x74
 8005130:	e002      	b.n	8005138 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005132:	f7fd ff73 	bl	800301c <HAL_RCC_GetPCLK1Freq>
 8005136:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005138:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800513a:	69db      	ldr	r3, [r3, #28]
 800513c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005140:	f040 80b6 	bne.w	80052b0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005144:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005146:	461c      	mov	r4, r3
 8005148:	f04f 0500 	mov.w	r5, #0
 800514c:	4622      	mov	r2, r4
 800514e:	462b      	mov	r3, r5
 8005150:	1891      	adds	r1, r2, r2
 8005152:	6439      	str	r1, [r7, #64]	; 0x40
 8005154:	415b      	adcs	r3, r3
 8005156:	647b      	str	r3, [r7, #68]	; 0x44
 8005158:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800515c:	1912      	adds	r2, r2, r4
 800515e:	eb45 0303 	adc.w	r3, r5, r3
 8005162:	f04f 0000 	mov.w	r0, #0
 8005166:	f04f 0100 	mov.w	r1, #0
 800516a:	00d9      	lsls	r1, r3, #3
 800516c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005170:	00d0      	lsls	r0, r2, #3
 8005172:	4602      	mov	r2, r0
 8005174:	460b      	mov	r3, r1
 8005176:	1911      	adds	r1, r2, r4
 8005178:	6639      	str	r1, [r7, #96]	; 0x60
 800517a:	416b      	adcs	r3, r5
 800517c:	667b      	str	r3, [r7, #100]	; 0x64
 800517e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005180:	685b      	ldr	r3, [r3, #4]
 8005182:	461a      	mov	r2, r3
 8005184:	f04f 0300 	mov.w	r3, #0
 8005188:	1891      	adds	r1, r2, r2
 800518a:	63b9      	str	r1, [r7, #56]	; 0x38
 800518c:	415b      	adcs	r3, r3
 800518e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005190:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005194:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005198:	f7fb f88a 	bl	80002b0 <__aeabi_uldivmod>
 800519c:	4602      	mov	r2, r0
 800519e:	460b      	mov	r3, r1
 80051a0:	4ba5      	ldr	r3, [pc, #660]	; (8005438 <UART_SetConfig+0x38c>)
 80051a2:	fba3 2302 	umull	r2, r3, r3, r2
 80051a6:	095b      	lsrs	r3, r3, #5
 80051a8:	011e      	lsls	r6, r3, #4
 80051aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80051ac:	461c      	mov	r4, r3
 80051ae:	f04f 0500 	mov.w	r5, #0
 80051b2:	4622      	mov	r2, r4
 80051b4:	462b      	mov	r3, r5
 80051b6:	1891      	adds	r1, r2, r2
 80051b8:	6339      	str	r1, [r7, #48]	; 0x30
 80051ba:	415b      	adcs	r3, r3
 80051bc:	637b      	str	r3, [r7, #52]	; 0x34
 80051be:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80051c2:	1912      	adds	r2, r2, r4
 80051c4:	eb45 0303 	adc.w	r3, r5, r3
 80051c8:	f04f 0000 	mov.w	r0, #0
 80051cc:	f04f 0100 	mov.w	r1, #0
 80051d0:	00d9      	lsls	r1, r3, #3
 80051d2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80051d6:	00d0      	lsls	r0, r2, #3
 80051d8:	4602      	mov	r2, r0
 80051da:	460b      	mov	r3, r1
 80051dc:	1911      	adds	r1, r2, r4
 80051de:	65b9      	str	r1, [r7, #88]	; 0x58
 80051e0:	416b      	adcs	r3, r5
 80051e2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80051e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051e6:	685b      	ldr	r3, [r3, #4]
 80051e8:	461a      	mov	r2, r3
 80051ea:	f04f 0300 	mov.w	r3, #0
 80051ee:	1891      	adds	r1, r2, r2
 80051f0:	62b9      	str	r1, [r7, #40]	; 0x28
 80051f2:	415b      	adcs	r3, r3
 80051f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80051f6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80051fa:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80051fe:	f7fb f857 	bl	80002b0 <__aeabi_uldivmod>
 8005202:	4602      	mov	r2, r0
 8005204:	460b      	mov	r3, r1
 8005206:	4b8c      	ldr	r3, [pc, #560]	; (8005438 <UART_SetConfig+0x38c>)
 8005208:	fba3 1302 	umull	r1, r3, r3, r2
 800520c:	095b      	lsrs	r3, r3, #5
 800520e:	2164      	movs	r1, #100	; 0x64
 8005210:	fb01 f303 	mul.w	r3, r1, r3
 8005214:	1ad3      	subs	r3, r2, r3
 8005216:	00db      	lsls	r3, r3, #3
 8005218:	3332      	adds	r3, #50	; 0x32
 800521a:	4a87      	ldr	r2, [pc, #540]	; (8005438 <UART_SetConfig+0x38c>)
 800521c:	fba2 2303 	umull	r2, r3, r2, r3
 8005220:	095b      	lsrs	r3, r3, #5
 8005222:	005b      	lsls	r3, r3, #1
 8005224:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005228:	441e      	add	r6, r3
 800522a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800522c:	4618      	mov	r0, r3
 800522e:	f04f 0100 	mov.w	r1, #0
 8005232:	4602      	mov	r2, r0
 8005234:	460b      	mov	r3, r1
 8005236:	1894      	adds	r4, r2, r2
 8005238:	623c      	str	r4, [r7, #32]
 800523a:	415b      	adcs	r3, r3
 800523c:	627b      	str	r3, [r7, #36]	; 0x24
 800523e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005242:	1812      	adds	r2, r2, r0
 8005244:	eb41 0303 	adc.w	r3, r1, r3
 8005248:	f04f 0400 	mov.w	r4, #0
 800524c:	f04f 0500 	mov.w	r5, #0
 8005250:	00dd      	lsls	r5, r3, #3
 8005252:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005256:	00d4      	lsls	r4, r2, #3
 8005258:	4622      	mov	r2, r4
 800525a:	462b      	mov	r3, r5
 800525c:	1814      	adds	r4, r2, r0
 800525e:	653c      	str	r4, [r7, #80]	; 0x50
 8005260:	414b      	adcs	r3, r1
 8005262:	657b      	str	r3, [r7, #84]	; 0x54
 8005264:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005266:	685b      	ldr	r3, [r3, #4]
 8005268:	461a      	mov	r2, r3
 800526a:	f04f 0300 	mov.w	r3, #0
 800526e:	1891      	adds	r1, r2, r2
 8005270:	61b9      	str	r1, [r7, #24]
 8005272:	415b      	adcs	r3, r3
 8005274:	61fb      	str	r3, [r7, #28]
 8005276:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800527a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800527e:	f7fb f817 	bl	80002b0 <__aeabi_uldivmod>
 8005282:	4602      	mov	r2, r0
 8005284:	460b      	mov	r3, r1
 8005286:	4b6c      	ldr	r3, [pc, #432]	; (8005438 <UART_SetConfig+0x38c>)
 8005288:	fba3 1302 	umull	r1, r3, r3, r2
 800528c:	095b      	lsrs	r3, r3, #5
 800528e:	2164      	movs	r1, #100	; 0x64
 8005290:	fb01 f303 	mul.w	r3, r1, r3
 8005294:	1ad3      	subs	r3, r2, r3
 8005296:	00db      	lsls	r3, r3, #3
 8005298:	3332      	adds	r3, #50	; 0x32
 800529a:	4a67      	ldr	r2, [pc, #412]	; (8005438 <UART_SetConfig+0x38c>)
 800529c:	fba2 2303 	umull	r2, r3, r2, r3
 80052a0:	095b      	lsrs	r3, r3, #5
 80052a2:	f003 0207 	and.w	r2, r3, #7
 80052a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4432      	add	r2, r6
 80052ac:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80052ae:	e0b9      	b.n	8005424 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80052b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80052b2:	461c      	mov	r4, r3
 80052b4:	f04f 0500 	mov.w	r5, #0
 80052b8:	4622      	mov	r2, r4
 80052ba:	462b      	mov	r3, r5
 80052bc:	1891      	adds	r1, r2, r2
 80052be:	6139      	str	r1, [r7, #16]
 80052c0:	415b      	adcs	r3, r3
 80052c2:	617b      	str	r3, [r7, #20]
 80052c4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80052c8:	1912      	adds	r2, r2, r4
 80052ca:	eb45 0303 	adc.w	r3, r5, r3
 80052ce:	f04f 0000 	mov.w	r0, #0
 80052d2:	f04f 0100 	mov.w	r1, #0
 80052d6:	00d9      	lsls	r1, r3, #3
 80052d8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80052dc:	00d0      	lsls	r0, r2, #3
 80052de:	4602      	mov	r2, r0
 80052e0:	460b      	mov	r3, r1
 80052e2:	eb12 0804 	adds.w	r8, r2, r4
 80052e6:	eb43 0905 	adc.w	r9, r3, r5
 80052ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052ec:	685b      	ldr	r3, [r3, #4]
 80052ee:	4618      	mov	r0, r3
 80052f0:	f04f 0100 	mov.w	r1, #0
 80052f4:	f04f 0200 	mov.w	r2, #0
 80052f8:	f04f 0300 	mov.w	r3, #0
 80052fc:	008b      	lsls	r3, r1, #2
 80052fe:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005302:	0082      	lsls	r2, r0, #2
 8005304:	4640      	mov	r0, r8
 8005306:	4649      	mov	r1, r9
 8005308:	f7fa ffd2 	bl	80002b0 <__aeabi_uldivmod>
 800530c:	4602      	mov	r2, r0
 800530e:	460b      	mov	r3, r1
 8005310:	4b49      	ldr	r3, [pc, #292]	; (8005438 <UART_SetConfig+0x38c>)
 8005312:	fba3 2302 	umull	r2, r3, r3, r2
 8005316:	095b      	lsrs	r3, r3, #5
 8005318:	011e      	lsls	r6, r3, #4
 800531a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800531c:	4618      	mov	r0, r3
 800531e:	f04f 0100 	mov.w	r1, #0
 8005322:	4602      	mov	r2, r0
 8005324:	460b      	mov	r3, r1
 8005326:	1894      	adds	r4, r2, r2
 8005328:	60bc      	str	r4, [r7, #8]
 800532a:	415b      	adcs	r3, r3
 800532c:	60fb      	str	r3, [r7, #12]
 800532e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005332:	1812      	adds	r2, r2, r0
 8005334:	eb41 0303 	adc.w	r3, r1, r3
 8005338:	f04f 0400 	mov.w	r4, #0
 800533c:	f04f 0500 	mov.w	r5, #0
 8005340:	00dd      	lsls	r5, r3, #3
 8005342:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005346:	00d4      	lsls	r4, r2, #3
 8005348:	4622      	mov	r2, r4
 800534a:	462b      	mov	r3, r5
 800534c:	1814      	adds	r4, r2, r0
 800534e:	64bc      	str	r4, [r7, #72]	; 0x48
 8005350:	414b      	adcs	r3, r1
 8005352:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005354:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005356:	685b      	ldr	r3, [r3, #4]
 8005358:	4618      	mov	r0, r3
 800535a:	f04f 0100 	mov.w	r1, #0
 800535e:	f04f 0200 	mov.w	r2, #0
 8005362:	f04f 0300 	mov.w	r3, #0
 8005366:	008b      	lsls	r3, r1, #2
 8005368:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800536c:	0082      	lsls	r2, r0, #2
 800536e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005372:	f7fa ff9d 	bl	80002b0 <__aeabi_uldivmod>
 8005376:	4602      	mov	r2, r0
 8005378:	460b      	mov	r3, r1
 800537a:	4b2f      	ldr	r3, [pc, #188]	; (8005438 <UART_SetConfig+0x38c>)
 800537c:	fba3 1302 	umull	r1, r3, r3, r2
 8005380:	095b      	lsrs	r3, r3, #5
 8005382:	2164      	movs	r1, #100	; 0x64
 8005384:	fb01 f303 	mul.w	r3, r1, r3
 8005388:	1ad3      	subs	r3, r2, r3
 800538a:	011b      	lsls	r3, r3, #4
 800538c:	3332      	adds	r3, #50	; 0x32
 800538e:	4a2a      	ldr	r2, [pc, #168]	; (8005438 <UART_SetConfig+0x38c>)
 8005390:	fba2 2303 	umull	r2, r3, r2, r3
 8005394:	095b      	lsrs	r3, r3, #5
 8005396:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800539a:	441e      	add	r6, r3
 800539c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800539e:	4618      	mov	r0, r3
 80053a0:	f04f 0100 	mov.w	r1, #0
 80053a4:	4602      	mov	r2, r0
 80053a6:	460b      	mov	r3, r1
 80053a8:	1894      	adds	r4, r2, r2
 80053aa:	603c      	str	r4, [r7, #0]
 80053ac:	415b      	adcs	r3, r3
 80053ae:	607b      	str	r3, [r7, #4]
 80053b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80053b4:	1812      	adds	r2, r2, r0
 80053b6:	eb41 0303 	adc.w	r3, r1, r3
 80053ba:	f04f 0400 	mov.w	r4, #0
 80053be:	f04f 0500 	mov.w	r5, #0
 80053c2:	00dd      	lsls	r5, r3, #3
 80053c4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80053c8:	00d4      	lsls	r4, r2, #3
 80053ca:	4622      	mov	r2, r4
 80053cc:	462b      	mov	r3, r5
 80053ce:	eb12 0a00 	adds.w	sl, r2, r0
 80053d2:	eb43 0b01 	adc.w	fp, r3, r1
 80053d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053d8:	685b      	ldr	r3, [r3, #4]
 80053da:	4618      	mov	r0, r3
 80053dc:	f04f 0100 	mov.w	r1, #0
 80053e0:	f04f 0200 	mov.w	r2, #0
 80053e4:	f04f 0300 	mov.w	r3, #0
 80053e8:	008b      	lsls	r3, r1, #2
 80053ea:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80053ee:	0082      	lsls	r2, r0, #2
 80053f0:	4650      	mov	r0, sl
 80053f2:	4659      	mov	r1, fp
 80053f4:	f7fa ff5c 	bl	80002b0 <__aeabi_uldivmod>
 80053f8:	4602      	mov	r2, r0
 80053fa:	460b      	mov	r3, r1
 80053fc:	4b0e      	ldr	r3, [pc, #56]	; (8005438 <UART_SetConfig+0x38c>)
 80053fe:	fba3 1302 	umull	r1, r3, r3, r2
 8005402:	095b      	lsrs	r3, r3, #5
 8005404:	2164      	movs	r1, #100	; 0x64
 8005406:	fb01 f303 	mul.w	r3, r1, r3
 800540a:	1ad3      	subs	r3, r2, r3
 800540c:	011b      	lsls	r3, r3, #4
 800540e:	3332      	adds	r3, #50	; 0x32
 8005410:	4a09      	ldr	r2, [pc, #36]	; (8005438 <UART_SetConfig+0x38c>)
 8005412:	fba2 2303 	umull	r2, r3, r2, r3
 8005416:	095b      	lsrs	r3, r3, #5
 8005418:	f003 020f 	and.w	r2, r3, #15
 800541c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4432      	add	r2, r6
 8005422:	609a      	str	r2, [r3, #8]
}
 8005424:	bf00      	nop
 8005426:	377c      	adds	r7, #124	; 0x7c
 8005428:	46bd      	mov	sp, r7
 800542a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800542e:	bf00      	nop
 8005430:	40011000 	.word	0x40011000
 8005434:	40011400 	.word	0x40011400
 8005438:	51eb851f 	.word	0x51eb851f

0800543c <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b084      	sub	sp, #16
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
 8005444:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005446:	2300      	movs	r3, #0
 8005448:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 800544a:	6839      	ldr	r1, [r7, #0]
 800544c:	6878      	ldr	r0, [r7, #4]
 800544e:	f001 fcb2 	bl	8006db6 <VL53L0X_get_offset_calibration_data_micro_meter>
 8005452:	4603      	mov	r3, r0
 8005454:	73fb      	strb	r3, [r7, #15]
		pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
	return Status;
 8005456:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800545a:	4618      	mov	r0, r3
 800545c:	3710      	adds	r7, #16
 800545e:	46bd      	mov	sp, r7
 8005460:	bd80      	pop	{r7, pc}
	...

08005464 <VL53L0X_DataInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev)
{
 8005464:	b5b0      	push	{r4, r5, r7, lr}
 8005466:	b096      	sub	sp, #88	; 0x58
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800546c:	2300      	movs	r3, #0
 800546e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		0xFE,
		0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
 8005472:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005476:	2b00      	cmp	r3, #0
 8005478:	d107      	bne.n	800548a <VL53L0X_DataInit+0x26>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 800547a:	2200      	movs	r2, #0
 800547c:	2188      	movs	r1, #136	; 0x88
 800547e:	6878      	ldr	r0, [r7, #4]
 8005480:	f004 feaa 	bl	800a1d8 <VL53L0X_WrByte>
 8005484:	4603      	mov	r3, r0
 8005486:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2200      	movs	r2, #0
 800548e:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005498:	f8a3 2152 	strh.w	r2, [r3, #338]	; 0x152

	/* Dmax default Parameter */
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80054a2:	f8a3 2154 	strh.w	r2, [r3, #340]	; 0x154
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	4a9e      	ldr	r2, [pc, #632]	; (8005724 <VL53L0X_DataInit+0x2c0>)
 80054aa:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
		(FixPoint1616_t)((0x00016B85))); /* 1.42 No Cover Glass*/

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	4a9d      	ldr	r2, [pc, #628]	; (8005728 <VL53L0X_DataInit+0x2c4>)
 80054b2:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2200      	movs	r2, #0
 80054ba:	621a      	str	r2, [r3, #32]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 80054bc:	f107 0310 	add.w	r3, r7, #16
 80054c0:	4619      	mov	r1, r3
 80054c2:	6878      	ldr	r0, [r7, #4]
 80054c4:	f000 fac2 	bl	8005a4c <VL53L0X_GetDeviceParameters>
 80054c8:	4603      	mov	r3, r0
 80054ca:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (Status == VL53L0X_ERROR_NONE) {
 80054ce:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d112      	bne.n	80054fc <VL53L0X_DataInit+0x98>
		/* initialize PAL values */
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 80054d6:	2300      	movs	r3, #0
 80054d8:	743b      	strb	r3, [r7, #16]
		CurrentParameters.HistogramMode = VL53L0X_HISTOGRAMMODE_DISABLED;
 80054da:	2300      	movs	r3, #0
 80054dc:	747b      	strb	r3, [r7, #17]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	f103 0410 	add.w	r4, r3, #16
 80054e4:	f107 0510 	add.w	r5, r7, #16
 80054e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80054ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80054ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80054ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80054f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80054f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80054f4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80054f8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2264      	movs	r2, #100	; 0x64
 8005500:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	f44f 7261 	mov.w	r2, #900	; 0x384
 800550a:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8005514:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800551e:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2201      	movs	r2, #1
 8005526:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150

	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800552a:	2201      	movs	r2, #1
 800552c:	2180      	movs	r1, #128	; 0x80
 800552e:	6878      	ldr	r0, [r7, #4]
 8005530:	f004 fe52 	bl	800a1d8 <VL53L0X_WrByte>
 8005534:	4603      	mov	r3, r0
 8005536:	461a      	mov	r2, r3
 8005538:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800553c:	4313      	orrs	r3, r2
 800553e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8005542:	2201      	movs	r2, #1
 8005544:	21ff      	movs	r1, #255	; 0xff
 8005546:	6878      	ldr	r0, [r7, #4]
 8005548:	f004 fe46 	bl	800a1d8 <VL53L0X_WrByte>
 800554c:	4603      	mov	r3, r0
 800554e:	461a      	mov	r2, r3
 8005550:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005554:	4313      	orrs	r3, r2
 8005556:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800555a:	2200      	movs	r2, #0
 800555c:	2100      	movs	r1, #0
 800555e:	6878      	ldr	r0, [r7, #4]
 8005560:	f004 fe3a 	bl	800a1d8 <VL53L0X_WrByte>
 8005564:	4603      	mov	r3, r0
 8005566:	461a      	mov	r2, r3
 8005568:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800556c:	4313      	orrs	r3, r2
 800556e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 8005572:	f107 030f 	add.w	r3, r7, #15
 8005576:	461a      	mov	r2, r3
 8005578:	2191      	movs	r1, #145	; 0x91
 800557a:	6878      	ldr	r0, [r7, #4]
 800557c:	f004 feae 	bl	800a2dc <VL53L0X_RdByte>
 8005580:	4603      	mov	r3, r0
 8005582:	461a      	mov	r2, r3
 8005584:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005588:	4313      	orrs	r3, r2
 800558a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	PALDevDataSet(Dev, StopVariable, StopVariable);
 800558e:	7bfa      	ldrb	r2, [r7, #15]
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8005596:	2201      	movs	r2, #1
 8005598:	2100      	movs	r1, #0
 800559a:	6878      	ldr	r0, [r7, #4]
 800559c:	f004 fe1c 	bl	800a1d8 <VL53L0X_WrByte>
 80055a0:	4603      	mov	r3, r0
 80055a2:	461a      	mov	r2, r3
 80055a4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80055a8:	4313      	orrs	r3, r2
 80055aa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80055ae:	2200      	movs	r2, #0
 80055b0:	21ff      	movs	r1, #255	; 0xff
 80055b2:	6878      	ldr	r0, [r7, #4]
 80055b4:	f004 fe10 	bl	800a1d8 <VL53L0X_WrByte>
 80055b8:	4603      	mov	r3, r0
 80055ba:	461a      	mov	r2, r3
 80055bc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80055c0:	4313      	orrs	r3, r2
 80055c2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 80055c6:	2200      	movs	r2, #0
 80055c8:	2180      	movs	r1, #128	; 0x80
 80055ca:	6878      	ldr	r0, [r7, #4]
 80055cc:	f004 fe04 	bl	800a1d8 <VL53L0X_WrByte>
 80055d0:	4603      	mov	r3, r0
 80055d2:	461a      	mov	r2, r3
 80055d4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80055d8:	4313      	orrs	r3, r2
 80055da:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80055de:	2300      	movs	r3, #0
 80055e0:	653b      	str	r3, [r7, #80]	; 0x50
 80055e2:	e014      	b.n	800560e <VL53L0X_DataInit+0x1aa>
		if (Status == VL53L0X_ERROR_NONE)
 80055e4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d114      	bne.n	8005616 <VL53L0X_DataInit+0x1b2>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 80055ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80055ee:	b29b      	uxth	r3, r3
 80055f0:	2201      	movs	r2, #1
 80055f2:	4619      	mov	r1, r3
 80055f4:	6878      	ldr	r0, [r7, #4]
 80055f6:	f000 fd35 	bl	8006064 <VL53L0X_SetLimitCheckEnable>
 80055fa:	4603      	mov	r3, r0
 80055fc:	461a      	mov	r2, r3
 80055fe:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005602:	4313      	orrs	r3, r2
 8005604:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8005608:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800560a:	3301      	adds	r3, #1
 800560c:	653b      	str	r3, [r7, #80]	; 0x50
 800560e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005610:	2b05      	cmp	r3, #5
 8005612:	dde7      	ble.n	80055e4 <VL53L0X_DataInit+0x180>
 8005614:	e000      	b.n	8005618 <VL53L0X_DataInit+0x1b4>
		else
			break;
 8005616:	bf00      	nop

	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
 8005618:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800561c:	2b00      	cmp	r3, #0
 800561e:	d107      	bne.n	8005630 <VL53L0X_DataInit+0x1cc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8005620:	2200      	movs	r2, #0
 8005622:	2102      	movs	r1, #2
 8005624:	6878      	ldr	r0, [r7, #4]
 8005626:	f000 fd1d 	bl	8006064 <VL53L0X_SetLimitCheckEnable>
 800562a:	4603      	mov	r3, r0
 800562c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8005630:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005634:	2b00      	cmp	r3, #0
 8005636:	d107      	bne.n	8005648 <VL53L0X_DataInit+0x1e4>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8005638:	2200      	movs	r2, #0
 800563a:	2103      	movs	r1, #3
 800563c:	6878      	ldr	r0, [r7, #4]
 800563e:	f000 fd11 	bl	8006064 <VL53L0X_SetLimitCheckEnable>
 8005642:	4603      	mov	r3, r0
 8005644:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8005648:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800564c:	2b00      	cmp	r3, #0
 800564e:	d107      	bne.n	8005660 <VL53L0X_DataInit+0x1fc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8005650:	2200      	movs	r2, #0
 8005652:	2104      	movs	r1, #4
 8005654:	6878      	ldr	r0, [r7, #4]
 8005656:	f000 fd05 	bl	8006064 <VL53L0X_SetLimitCheckEnable>
 800565a:	4603      	mov	r3, r0
 800565c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8005660:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005664:	2b00      	cmp	r3, #0
 8005666:	d107      	bne.n	8005678 <VL53L0X_DataInit+0x214>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8005668:	2200      	movs	r2, #0
 800566a:	2105      	movs	r1, #5
 800566c:	6878      	ldr	r0, [r7, #4]
 800566e:	f000 fcf9 	bl	8006064 <VL53L0X_SetLimitCheckEnable>
 8005672:	4603      	mov	r3, r0
 8005674:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 8005678:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800567c:	2b00      	cmp	r3, #0
 800567e:	d108      	bne.n	8005692 <VL53L0X_DataInit+0x22e>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8005680:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 8005684:	2100      	movs	r1, #0
 8005686:	6878      	ldr	r0, [r7, #4]
 8005688:	f000 fd9c 	bl	80061c4 <VL53L0X_SetLimitCheckValue>
 800568c:	4603      	mov	r3, r0
 800568e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8005692:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005696:	2b00      	cmp	r3, #0
 8005698:	d108      	bne.n	80056ac <VL53L0X_DataInit+0x248>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 800569a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800569e:	2101      	movs	r1, #1
 80056a0:	6878      	ldr	r0, [r7, #4]
 80056a2:	f000 fd8f 	bl	80061c4 <VL53L0X_SetLimitCheckValue>
 80056a6:	4603      	mov	r3, r0
 80056a8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80056ac:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d108      	bne.n	80056c6 <VL53L0X_DataInit+0x262>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 80056b4:	f44f 120c 	mov.w	r2, #2293760	; 0x230000
 80056b8:	2102      	movs	r1, #2
 80056ba:	6878      	ldr	r0, [r7, #4]
 80056bc:	f000 fd82 	bl	80061c4 <VL53L0X_SetLimitCheckValue>
 80056c0:	4603      	mov	r3, r0
 80056c2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				(FixPoint1616_t)(35 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80056c6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d107      	bne.n	80056de <VL53L0X_DataInit+0x27a>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 80056ce:	2200      	movs	r2, #0
 80056d0:	2103      	movs	r1, #3
 80056d2:	6878      	ldr	r0, [r7, #4]
 80056d4:	f000 fd76 	bl	80061c4 <VL53L0X_SetLimitCheckValue>
 80056d8:	4603      	mov	r3, r0
 80056da:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				(FixPoint1616_t)(0 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80056de:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d10f      	bne.n	8005706 <VL53L0X_DataInit+0x2a2>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	22ff      	movs	r2, #255	; 0xff
 80056ea:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80056ee:	22ff      	movs	r2, #255	; 0xff
 80056f0:	2101      	movs	r1, #1
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	f004 fd70 	bl	800a1d8 <VL53L0X_WrByte>
 80056f8:	4603      	mov	r3, r0
 80056fa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			0xFF);

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2201      	movs	r2, #1
 8005702:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
	}

	if (Status == VL53L0X_ERROR_NONE)
 8005706:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800570a:	2b00      	cmp	r3, #0
 800570c:	d103      	bne.n	8005716 <VL53L0X_DataInit+0x2b2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2200      	movs	r2, #0
 8005712:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115


	LOG_FUNCTION_END(Status);
	return Status;
 8005716:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 800571a:	4618      	mov	r0, r3
 800571c:	3758      	adds	r7, #88	; 0x58
 800571e:	46bd      	mov	sp, r7
 8005720:	bdb0      	pop	{r4, r5, r7, pc}
 8005722:	bf00      	nop
 8005724:	00016b85 	.word	0x00016b85
 8005728:	000970a4 	.word	0x000970a4

0800572c <VL53L0X_StaticInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev)
{
 800572c:	b5b0      	push	{r4, r5, r7, lr}
 800572e:	b09e      	sub	sp, #120	; 0x78
 8005730:	af02      	add	r7, sp, #8
 8005732:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005734:	2300      	movs	r3, #0
 8005736:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 800573a:	f107 031c 	add.w	r3, r7, #28
 800573e:	2240      	movs	r2, #64	; 0x40
 8005740:	2100      	movs	r1, #0
 8005742:	4618      	mov	r0, r3
 8005744:	f004 feb0 	bl	800a4a8 <memset>
	uint8_t *pTuningSettingBuffer;
	uint16_t tempword = 0;
 8005748:	2300      	movs	r3, #0
 800574a:	837b      	strh	r3, [r7, #26]
	uint8_t tempbyte = 0;
 800574c:	2300      	movs	r3, #0
 800574e:	767b      	strb	r3, [r7, #25]
	uint8_t UseInternalTuningSettings = 0;
 8005750:	2300      	movs	r3, #0
 8005752:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint32_t count = 0;
 8005756:	2300      	movs	r3, #0
 8005758:	663b      	str	r3, [r7, #96]	; 0x60
	uint8_t isApertureSpads = 0;
 800575a:	2300      	movs	r3, #0
 800575c:	763b      	strb	r3, [r7, #24]
	uint32_t refSpadCount = 0;
 800575e:	2300      	movs	r3, #0
 8005760:	617b      	str	r3, [r7, #20]
	uint8_t ApertureSpads = 0;
 8005762:	2300      	movs	r3, #0
 8005764:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t vcselPulsePeriodPCLK;
	uint32_t seqTimeoutMicroSecs;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 1);
 8005768:	2101      	movs	r1, #1
 800576a:	6878      	ldr	r0, [r7, #4]
 800576c:	f002 fa79 	bl	8007c62 <VL53L0X_get_info_from_device>
 8005770:	4603      	mov	r3, r0
 8005772:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	/* set the ref spad from NVM */
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 800577c:	663b      	str	r3, [r7, #96]	; 0x60
		ReferenceSpadCount);
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 8005784:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		ReferenceSpadType);

	/* NVM value invalid */
	if ((ApertureSpads > 1) ||
 8005788:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800578c:	2b01      	cmp	r3, #1
 800578e:	d80d      	bhi.n	80057ac <VL53L0X_StaticInit+0x80>
 8005790:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005794:	2b01      	cmp	r3, #1
 8005796:	d102      	bne.n	800579e <VL53L0X_StaticInit+0x72>
		((ApertureSpads == 1) && (count > 32)) ||
 8005798:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800579a:	2b20      	cmp	r3, #32
 800579c:	d806      	bhi.n	80057ac <VL53L0X_StaticInit+0x80>
 800579e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d10e      	bne.n	80057c4 <VL53L0X_StaticInit+0x98>
		((ApertureSpads == 0) && (count > 12)))
 80057a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80057a8:	2b0c      	cmp	r3, #12
 80057aa:	d90b      	bls.n	80057c4 <VL53L0X_StaticInit+0x98>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 80057ac:	f107 0218 	add.w	r2, r7, #24
 80057b0:	f107 0314 	add.w	r3, r7, #20
 80057b4:	4619      	mov	r1, r3
 80057b6:	6878      	ldr	r0, [r7, #4]
 80057b8:	f001 fcf8 	bl	80071ac <VL53L0X_perform_ref_spad_management>
 80057bc:	4603      	mov	r3, r0
 80057be:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 80057c2:	e009      	b.n	80057d8 <VL53L0X_StaticInit+0xac>
			&isApertureSpads);
	else
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 80057c4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80057c8:	461a      	mov	r2, r3
 80057ca:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80057cc:	6878      	ldr	r0, [r7, #4]
 80057ce:	f001 fef9 	bl	80075c4 <VL53L0X_set_reference_spads>
 80057d2:	4603      	mov	r3, r0
 80057d4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Initialize tuning settings buffer to prevent compiler warning. */
	pTuningSettingBuffer = DefaultTuningSettings;
 80057d8:	4b94      	ldr	r3, [pc, #592]	; (8005a2c <VL53L0X_StaticInit+0x300>)
 80057da:	66bb      	str	r3, [r7, #104]	; 0x68

	if (Status == VL53L0X_ERROR_NONE) {
 80057dc:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d10f      	bne.n	8005804 <VL53L0X_StaticInit+0xd8>
		UseInternalTuningSettings = PALDevDataGet(Dev,
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 80057ea:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			UseInternalTuningSettings);

		if (UseInternalTuningSettings == 0)
 80057ee:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d104      	bne.n	8005800 <VL53L0X_StaticInit+0xd4>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 80057fc:	66bb      	str	r3, [r7, #104]	; 0x68
 80057fe:	e001      	b.n	8005804 <VL53L0X_StaticInit+0xd8>
				pTuningSettingsPointer);
		else
			pTuningSettingBuffer = DefaultTuningSettings;
 8005800:	4b8a      	ldr	r3, [pc, #552]	; (8005a2c <VL53L0X_StaticInit+0x300>)
 8005802:	66bb      	str	r3, [r7, #104]	; 0x68

	}

	if (Status == VL53L0X_ERROR_NONE)
 8005804:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005808:	2b00      	cmp	r3, #0
 800580a:	d106      	bne.n	800581a <VL53L0X_StaticInit+0xee>
		Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 800580c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800580e:	6878      	ldr	r0, [r7, #4]
 8005810:	f003 fdcc 	bl	80093ac <VL53L0X_load_tuning_settings>
 8005814:	4603      	mov	r3, r0
 8005816:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Set interrupt config to new sample ready */
	if (Status == VL53L0X_ERROR_NONE) {
 800581a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800581e:	2b00      	cmp	r3, #0
 8005820:	d10a      	bne.n	8005838 <VL53L0X_StaticInit+0x10c>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 8005822:	2300      	movs	r3, #0
 8005824:	9300      	str	r3, [sp, #0]
 8005826:	2304      	movs	r3, #4
 8005828:	2200      	movs	r2, #0
 800582a:	2100      	movs	r1, #0
 800582c:	6878      	ldr	r0, [r7, #4]
 800582e:	f001 f8f1 	bl	8006a14 <VL53L0X_SetGpioConfig>
 8005832:	4603      	mov	r3, r0
 8005834:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
		VL53L0X_INTERRUPTPOLARITY_LOW);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005838:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800583c:	2b00      	cmp	r3, #0
 800583e:	d121      	bne.n	8005884 <VL53L0X_StaticInit+0x158>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8005840:	2201      	movs	r2, #1
 8005842:	21ff      	movs	r1, #255	; 0xff
 8005844:	6878      	ldr	r0, [r7, #4]
 8005846:	f004 fcc7 	bl	800a1d8 <VL53L0X_WrByte>
 800584a:	4603      	mov	r3, r0
 800584c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 8005850:	f107 031a 	add.w	r3, r7, #26
 8005854:	461a      	mov	r2, r3
 8005856:	2184      	movs	r1, #132	; 0x84
 8005858:	6878      	ldr	r0, [r7, #4]
 800585a:	f004 fd69 	bl	800a330 <VL53L0X_RdWord>
 800585e:	4603      	mov	r3, r0
 8005860:	461a      	mov	r2, r3
 8005862:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8005866:	4313      	orrs	r3, r2
 8005868:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800586c:	2200      	movs	r2, #0
 800586e:	21ff      	movs	r1, #255	; 0xff
 8005870:	6878      	ldr	r0, [r7, #4]
 8005872:	f004 fcb1 	bl	800a1d8 <VL53L0X_WrByte>
 8005876:	4603      	mov	r3, r0
 8005878:	461a      	mov	r2, r3
 800587a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800587e:	4313      	orrs	r3, r2
 8005880:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005884:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005888:	2b00      	cmp	r3, #0
 800588a:	d105      	bne.n	8005898 <VL53L0X_StaticInit+0x16c>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 800588c:	8b7b      	ldrh	r3, [r7, #26]
 800588e:	011b      	lsls	r3, r3, #4
 8005890:	461a      	mov	r2, r3
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
			VL53L0X_FIXPOINT412TOFIXPOINT1616(tempword));
	}

	/* After static init, some device parameters may be changed,
	 * so update them */
	if (Status == VL53L0X_ERROR_NONE)
 8005898:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800589c:	2b00      	cmp	r3, #0
 800589e:	d108      	bne.n	80058b2 <VL53L0X_StaticInit+0x186>
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 80058a0:	f107 031c 	add.w	r3, r7, #28
 80058a4:	4619      	mov	r1, r3
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	f000 f8d0 	bl	8005a4c <VL53L0X_GetDeviceParameters>
 80058ac:	4603      	mov	r3, r0
 80058ae:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	if (Status == VL53L0X_ERROR_NONE) {
 80058b2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d110      	bne.n	80058dc <VL53L0X_StaticInit+0x1b0>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 80058ba:	f107 0319 	add.w	r3, r7, #25
 80058be:	4619      	mov	r1, r3
 80058c0:	6878      	ldr	r0, [r7, #4]
 80058c2:	f000 f992 	bl	8005bea <VL53L0X_GetFractionEnable>
 80058c6:	4603      	mov	r3, r0
 80058c8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (Status == VL53L0X_ERROR_NONE)
 80058cc:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d103      	bne.n	80058dc <VL53L0X_StaticInit+0x1b0>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 80058d4:	7e7a      	ldrb	r2, [r7, #25]
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131

	}

	if (Status == VL53L0X_ERROR_NONE)
 80058dc:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d10e      	bne.n	8005902 <VL53L0X_StaticInit+0x1d6>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	f103 0410 	add.w	r4, r3, #16
 80058ea:	f107 051c 	add.w	r5, r7, #28
 80058ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80058f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80058f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80058f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80058f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80058f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80058fa:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80058fe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	/* read the sequence config and save it */
	if (Status == VL53L0X_ERROR_NONE) {
 8005902:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005906:	2b00      	cmp	r3, #0
 8005908:	d111      	bne.n	800592e <VL53L0X_StaticInit+0x202>
		Status = VL53L0X_RdByte(Dev,
 800590a:	f107 0319 	add.w	r3, r7, #25
 800590e:	461a      	mov	r2, r3
 8005910:	2101      	movs	r1, #1
 8005912:	6878      	ldr	r0, [r7, #4]
 8005914:	f004 fce2 	bl	800a2dc <VL53L0X_RdByte>
 8005918:	4603      	mov	r3, r0
 800591a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
		if (Status == VL53L0X_ERROR_NONE)
 800591e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005922:	2b00      	cmp	r3, #0
 8005924:	d103      	bne.n	800592e <VL53L0X_StaticInit+0x202>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 8005926:	7e7a      	ldrb	r2, [r7, #25]
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	/* Disable MSRC and TCC by default */
	if (Status == VL53L0X_ERROR_NONE)
 800592e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005932:	2b00      	cmp	r3, #0
 8005934:	d107      	bne.n	8005946 <VL53L0X_StaticInit+0x21a>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8005936:	2200      	movs	r2, #0
 8005938:	2100      	movs	r1, #0
 800593a:	6878      	ldr	r0, [r7, #4]
 800593c:	f000 f9ca 	bl	8005cd4 <VL53L0X_SetSequenceStepEnable>
 8005940:	4603      	mov	r3, r0
 8005942:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					VL53L0X_SEQUENCESTEP_TCC, 0);


	if (Status == VL53L0X_ERROR_NONE)
 8005946:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800594a:	2b00      	cmp	r3, #0
 800594c:	d107      	bne.n	800595e <VL53L0X_StaticInit+0x232>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 800594e:	2200      	movs	r2, #0
 8005950:	2102      	movs	r1, #2
 8005952:	6878      	ldr	r0, [r7, #4]
 8005954:	f000 f9be 	bl	8005cd4 <VL53L0X_SetSequenceStepEnable>
 8005958:	4603      	mov	r3, r0
 800595a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_SEQUENCESTEP_MSRC, 0);


	/* Set PAL State to standby */
	if (Status == VL53L0X_ERROR_NONE)
 800595e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005962:	2b00      	cmp	r3, #0
 8005964:	d103      	bne.n	800596e <VL53L0X_StaticInit+0x242>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2203      	movs	r2, #3
 800596a:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132



	/* Store pre-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 800596e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005972:	2b00      	cmp	r3, #0
 8005974:	d109      	bne.n	800598a <VL53L0X_StaticInit+0x25e>
		Status = VL53L0X_GetVcselPulsePeriod(
 8005976:	f107 0313 	add.w	r3, r7, #19
 800597a:	461a      	mov	r2, r3
 800597c:	2100      	movs	r1, #0
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	f000 f990 	bl	8005ca4 <VL53L0X_GetVcselPulsePeriod>
 8005984:	4603      	mov	r3, r0
 8005986:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_PRE_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800598a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800598e:	2b00      	cmp	r3, #0
 8005990:	d103      	bne.n	800599a <VL53L0X_StaticInit+0x26e>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8005992:	7cfa      	ldrb	r2, [r7, #19]
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				PreRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store final-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 800599a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d109      	bne.n	80059b6 <VL53L0X_StaticInit+0x28a>
		Status = VL53L0X_GetVcselPulsePeriod(
 80059a2:	f107 0313 	add.w	r3, r7, #19
 80059a6:	461a      	mov	r2, r3
 80059a8:	2101      	movs	r1, #1
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f000 f97a 	bl	8005ca4 <VL53L0X_GetVcselPulsePeriod>
 80059b0:	4603      	mov	r3, r0
 80059b2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80059b6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d103      	bne.n	80059c6 <VL53L0X_StaticInit+0x29a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 80059be:	7cfa      	ldrb	r2, [r7, #19]
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				FinalRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store pre-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 80059c6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d109      	bne.n	80059e2 <VL53L0X_StaticInit+0x2b6>
		Status = get_sequence_step_timeout(
 80059ce:	f107 030c 	add.w	r3, r7, #12
 80059d2:	461a      	mov	r2, r3
 80059d4:	2103      	movs	r1, #3
 80059d6:	6878      	ldr	r0, [r7, #4]
 80059d8:	f002 fec4 	bl	8008764 <get_sequence_step_timeout>
 80059dc:	4603      	mov	r3, r0
 80059de:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_PRE_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80059e2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d103      	bne.n	80059f2 <VL53L0X_StaticInit+0x2c6>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 80059ea:	68fa      	ldr	r2, [r7, #12]
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
			PreRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	/* Store final-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 80059f2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d109      	bne.n	8005a0e <VL53L0X_StaticInit+0x2e2>
		Status = get_sequence_step_timeout(
 80059fa:	f107 030c 	add.w	r3, r7, #12
 80059fe:	461a      	mov	r2, r3
 8005a00:	2104      	movs	r1, #4
 8005a02:	6878      	ldr	r0, [r7, #4]
 8005a04:	f002 feae 	bl	8008764 <get_sequence_step_timeout>
 8005a08:	4603      	mov	r3, r0
 8005a0a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005a0e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d103      	bne.n	8005a1e <VL53L0X_StaticInit+0x2f2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8005a16:	68fa      	ldr	r2, [r7, #12]
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
			FinalRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005a1e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
}
 8005a22:	4618      	mov	r0, r3
 8005a24:	3770      	adds	r7, #112	; 0x70
 8005a26:	46bd      	mov	sp, r7
 8005a28:	bdb0      	pop	{r4, r5, r7, pc}
 8005a2a:	bf00      	nop
 8005a2c:	20000238 	.word	0x20000238

08005a30 <VL53L0X_WaitDeviceBooted>:

VL53L0X_Error VL53L0X_WaitDeviceBooted(VL53L0X_DEV Dev)
{
 8005a30:	b480      	push	{r7}
 8005a32:	b085      	sub	sp, #20
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NOT_IMPLEMENTED;
 8005a38:	239d      	movs	r3, #157	; 0x9d
 8005a3a:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	/* not implemented on VL53L0X */

	LOG_FUNCTION_END(Status);
	return Status;
 8005a3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005a40:	4618      	mov	r0, r3
 8005a42:	3714      	adds	r7, #20
 8005a44:	46bd      	mov	sp, r7
 8005a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4a:	4770      	bx	lr

08005a4c <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b084      	sub	sp, #16
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
 8005a54:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005a56:	2300      	movs	r3, #0
 8005a58:	73fb      	strb	r3, [r7, #15]
	int i;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	4619      	mov	r1, r3
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f000 f8b0 	bl	8005bc4 <VL53L0X_GetDeviceMode>
 8005a64:	4603      	mov	r3, r0
 8005a66:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8005a68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d107      	bne.n	8005a80 <VL53L0X_GetDeviceParameters+0x34>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	3308      	adds	r3, #8
 8005a74:	4619      	mov	r1, r3
 8005a76:	6878      	ldr	r0, [r7, #4]
 8005a78:	f000 fa78 	bl	8005f6c <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 8005a7c:	4603      	mov	r3, r0
 8005a7e:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 8005a80:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d102      	bne.n	8005a8e <VL53L0X_GetDeviceParameters+0x42>
		pDeviceParameters->XTalkCompensationEnable = 0;
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 8005a8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d107      	bne.n	8005aa6 <VL53L0X_GetDeviceParameters+0x5a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	3310      	adds	r3, #16
 8005a9a:	4619      	mov	r1, r3
 8005a9c:	6878      	ldr	r0, [r7, #4]
 8005a9e:	f000 faae 	bl	8005ffe <VL53L0X_GetXTalkCompensationRateMegaCps>
 8005aa2:	4603      	mov	r3, r0
 8005aa4:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 8005aa6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d107      	bne.n	8005abe <VL53L0X_GetDeviceParameters+0x72>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	3314      	adds	r3, #20
 8005ab2:	4619      	mov	r1, r3
 8005ab4:	6878      	ldr	r0, [r7, #4]
 8005ab6:	f7ff fcc1 	bl	800543c <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 8005aba:	4603      	mov	r3, r0
 8005abc:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 8005abe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d134      	bne.n	8005b30 <VL53L0X_GetDeviceParameters+0xe4>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	60bb      	str	r3, [r7, #8]
 8005aca:	e02a      	b.n	8005b22 <VL53L0X_GetDeviceParameters+0xd6>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 8005acc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d12a      	bne.n	8005b2a <VL53L0X_GetDeviceParameters+0xde>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	b299      	uxth	r1, r3
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	3308      	adds	r3, #8
 8005adc:	009b      	lsls	r3, r3, #2
 8005ade:	683a      	ldr	r2, [r7, #0]
 8005ae0:	4413      	add	r3, r2
 8005ae2:	3304      	adds	r3, #4
 8005ae4:	461a      	mov	r2, r3
 8005ae6:	6878      	ldr	r0, [r7, #4]
 8005ae8:	f000 fbce 	bl	8006288 <VL53L0X_GetLimitCheckValue>
 8005aec:	4603      	mov	r3, r0
 8005aee:	461a      	mov	r2, r3
 8005af0:	7bfb      	ldrb	r3, [r7, #15]
 8005af2:	4313      	orrs	r3, r2
 8005af4:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 8005af6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d117      	bne.n	8005b2e <VL53L0X_GetDeviceParameters+0xe2>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 8005afe:	68bb      	ldr	r3, [r7, #8]
 8005b00:	b299      	uxth	r1, r3
 8005b02:	68bb      	ldr	r3, [r7, #8]
 8005b04:	3318      	adds	r3, #24
 8005b06:	683a      	ldr	r2, [r7, #0]
 8005b08:	4413      	add	r3, r2
 8005b0a:	461a      	mov	r2, r3
 8005b0c:	6878      	ldr	r0, [r7, #4]
 8005b0e:	f000 fb35 	bl	800617c <VL53L0X_GetLimitCheckEnable>
 8005b12:	4603      	mov	r3, r0
 8005b14:	461a      	mov	r2, r3
 8005b16:	7bfb      	ldrb	r3, [r7, #15]
 8005b18:	4313      	orrs	r3, r2
 8005b1a:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	3301      	adds	r3, #1
 8005b20:	60bb      	str	r3, [r7, #8]
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	2b05      	cmp	r3, #5
 8005b26:	ddd1      	ble.n	8005acc <VL53L0X_GetDeviceParameters+0x80>
 8005b28:	e002      	b.n	8005b30 <VL53L0X_GetDeviceParameters+0xe4>
				break;
 8005b2a:	bf00      	nop
 8005b2c:	e000      	b.n	8005b30 <VL53L0X_GetDeviceParameters+0xe4>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 8005b2e:	bf00      	nop
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005b30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d107      	bne.n	8005b48 <VL53L0X_GetDeviceParameters+0xfc>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	333c      	adds	r3, #60	; 0x3c
 8005b3c:	4619      	mov	r1, r3
 8005b3e:	6878      	ldr	r0, [r7, #4]
 8005b40:	f000 fc30 	bl	80063a4 <VL53L0X_GetWrapAroundCheckEnable>
 8005b44:	4603      	mov	r3, r0
 8005b46:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 8005b48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d107      	bne.n	8005b60 <VL53L0X_GetDeviceParameters+0x114>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	3304      	adds	r3, #4
 8005b54:	4619      	mov	r1, r3
 8005b56:	6878      	ldr	r0, [r7, #4]
 8005b58:	f000 f879 	bl	8005c4e <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005b60:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005b64:	4618      	mov	r0, r3
 8005b66:	3710      	adds	r7, #16
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	bd80      	pop	{r7, pc}

08005b6c <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev, VL53L0X_DeviceModes DeviceMode)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b085      	sub	sp, #20
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
 8005b74:	460b      	mov	r3, r1
 8005b76:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005b78:	2300      	movs	r3, #0
 8005b7a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 8005b7c:	78fb      	ldrb	r3, [r7, #3]
 8005b7e:	2b15      	cmp	r3, #21
 8005b80:	bf8c      	ite	hi
 8005b82:	2201      	movhi	r2, #1
 8005b84:	2200      	movls	r2, #0
 8005b86:	b2d2      	uxtb	r2, r2
 8005b88:	2a00      	cmp	r2, #0
 8005b8a:	d10e      	bne.n	8005baa <VL53L0X_SetDeviceMode+0x3e>
 8005b8c:	2201      	movs	r2, #1
 8005b8e:	409a      	lsls	r2, r3
 8005b90:	4b0b      	ldr	r3, [pc, #44]	; (8005bc0 <VL53L0X_SetDeviceMode+0x54>)
 8005b92:	4013      	ands	r3, r2
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	bf14      	ite	ne
 8005b98:	2301      	movne	r3, #1
 8005b9a:	2300      	moveq	r3, #0
 8005b9c:	b2db      	uxtb	r3, r3
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d003      	beq.n	8005baa <VL53L0X_SetDeviceMode+0x3e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	78fa      	ldrb	r2, [r7, #3]
 8005ba6:	741a      	strb	r2, [r3, #16]
		break;
 8005ba8:	e001      	b.n	8005bae <VL53L0X_SetDeviceMode+0x42>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8005baa:	23f8      	movs	r3, #248	; 0xf8
 8005bac:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005bae:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	3714      	adds	r7, #20
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbc:	4770      	bx	lr
 8005bbe:	bf00      	nop
 8005bc0:	0030000b 	.word	0x0030000b

08005bc4 <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	b085      	sub	sp, #20
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
 8005bcc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005bce:	2300      	movs	r3, #0
 8005bd0:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	7c1a      	ldrb	r2, [r3, #16]
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8005bda:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005bde:	4618      	mov	r0, r3
 8005be0:	3714      	adds	r7, #20
 8005be2:	46bd      	mov	sp, r7
 8005be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be8:	4770      	bx	lr

08005bea <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 8005bea:	b580      	push	{r7, lr}
 8005bec:	b084      	sub	sp, #16
 8005bee:	af00      	add	r7, sp, #0
 8005bf0:	6078      	str	r0, [r7, #4]
 8005bf2:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 8005bf8:	683a      	ldr	r2, [r7, #0]
 8005bfa:	2109      	movs	r1, #9
 8005bfc:	6878      	ldr	r0, [r7, #4]
 8005bfe:	f004 fb6d 	bl	800a2dc <VL53L0X_RdByte>
 8005c02:	4603      	mov	r3, r0
 8005c04:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8005c06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d106      	bne.n	8005c1c <VL53L0X_GetFractionEnable+0x32>
		*pEnabled = (*pEnabled & 1);
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	781b      	ldrb	r3, [r3, #0]
 8005c12:	f003 0301 	and.w	r3, r3, #1
 8005c16:	b2da      	uxtb	r2, r3
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8005c1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005c20:	4618      	mov	r0, r3
 8005c22:	3710      	adds	r7, #16
 8005c24:	46bd      	mov	sp, r7
 8005c26:	bd80      	pop	{r7, pc}

08005c28 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b084      	sub	sp, #16
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
 8005c30:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005c32:	2300      	movs	r3, #0
 8005c34:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 8005c36:	6839      	ldr	r1, [r7, #0]
 8005c38:	6878      	ldr	r0, [r7, #4]
 8005c3a:	f003 fa26 	bl	800908a <VL53L0X_set_measurement_timing_budget_micro_seconds>
 8005c3e:	4603      	mov	r3, r0
 8005c40:	73fb      	strb	r3, [r7, #15]
		MeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);

	return Status;
 8005c42:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005c46:	4618      	mov	r0, r3
 8005c48:	3710      	adds	r7, #16
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	bd80      	pop	{r7, pc}

08005c4e <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 8005c4e:	b580      	push	{r7, lr}
 8005c50:	b084      	sub	sp, #16
 8005c52:	af00      	add	r7, sp, #0
 8005c54:	6078      	str	r0, [r7, #4]
 8005c56:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005c58:	2300      	movs	r3, #0
 8005c5a:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 8005c5c:	6839      	ldr	r1, [r7, #0]
 8005c5e:	6878      	ldr	r0, [r7, #4]
 8005c60:	f003 faf3 	bl	800924a <VL53L0X_get_measurement_timing_budget_micro_seconds>
 8005c64:	4603      	mov	r3, r0
 8005c66:	73fb      	strb	r3, [r7, #15]
		pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 8005c68:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	3710      	adds	r7, #16
 8005c70:	46bd      	mov	sp, r7
 8005c72:	bd80      	pop	{r7, pc}

08005c74 <VL53L0X_SetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_SetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b084      	sub	sp, #16
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
 8005c7c:	460b      	mov	r3, r1
 8005c7e:	70fb      	strb	r3, [r7, #3]
 8005c80:	4613      	mov	r3, r2
 8005c82:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005c84:	2300      	movs	r3, #0
 8005c86:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_vcsel_pulse_period(Dev, VcselPeriodType,
 8005c88:	78ba      	ldrb	r2, [r7, #2]
 8005c8a:	78fb      	ldrb	r3, [r7, #3]
 8005c8c:	4619      	mov	r1, r3
 8005c8e:	6878      	ldr	r0, [r7, #4]
 8005c90:	f002 ff3b 	bl	8008b0a <VL53L0X_set_vcsel_pulse_period>
 8005c94:	4603      	mov	r3, r0
 8005c96:	73fb      	strb	r3, [r7, #15]
		VCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 8005c98:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	3710      	adds	r7, #16
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	bd80      	pop	{r7, pc}

08005ca4 <VL53L0X_GetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b086      	sub	sp, #24
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	60f8      	str	r0, [r7, #12]
 8005cac:	460b      	mov	r3, r1
 8005cae:	607a      	str	r2, [r7, #4]
 8005cb0:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 8005cb6:	7afb      	ldrb	r3, [r7, #11]
 8005cb8:	687a      	ldr	r2, [r7, #4]
 8005cba:	4619      	mov	r1, r3
 8005cbc:	68f8      	ldr	r0, [r7, #12]
 8005cbe:	f003 f9ad 	bl	800901c <VL53L0X_get_vcsel_pulse_period>
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	75fb      	strb	r3, [r7, #23]
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 8005cc6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005cca:	4618      	mov	r0, r3
 8005ccc:	3718      	adds	r7, #24
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	bd80      	pop	{r7, pc}
	...

08005cd4 <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b086      	sub	sp, #24
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
 8005cdc:	460b      	mov	r3, r1
 8005cde:	70fb      	strb	r3, [r7, #3]
 8005ce0:	4613      	mov	r3, r2
 8005ce2:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8005ce8:	2300      	movs	r3, #0
 8005cea:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfigNew = 0;
 8005cec:	2300      	movs	r3, #0
 8005cee:	75bb      	strb	r3, [r7, #22]
	uint32_t MeasurementTimingBudgetMicroSeconds;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8005cf0:	f107 030f 	add.w	r3, r7, #15
 8005cf4:	461a      	mov	r2, r3
 8005cf6:	2101      	movs	r1, #1
 8005cf8:	6878      	ldr	r0, [r7, #4]
 8005cfa:	f004 faef 	bl	800a2dc <VL53L0X_RdByte>
 8005cfe:	4603      	mov	r3, r0
 8005d00:	75fb      	strb	r3, [r7, #23]
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;
 8005d02:	7bfb      	ldrb	r3, [r7, #15]
 8005d04:	75bb      	strb	r3, [r7, #22]

	if (Status == VL53L0X_ERROR_NONE) {
 8005d06:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d15a      	bne.n	8005dc4 <VL53L0X_SetSequenceStepEnable+0xf0>
		if (SequenceStepEnabled == 1) {
 8005d0e:	78bb      	ldrb	r3, [r7, #2]
 8005d10:	2b01      	cmp	r3, #1
 8005d12:	d12b      	bne.n	8005d6c <VL53L0X_SetSequenceStepEnable+0x98>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 8005d14:	78fb      	ldrb	r3, [r7, #3]
 8005d16:	2b04      	cmp	r3, #4
 8005d18:	d825      	bhi.n	8005d66 <VL53L0X_SetSequenceStepEnable+0x92>
 8005d1a:	a201      	add	r2, pc, #4	; (adr r2, 8005d20 <VL53L0X_SetSequenceStepEnable+0x4c>)
 8005d1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d20:	08005d35 	.word	0x08005d35
 8005d24:	08005d3f 	.word	0x08005d3f
 8005d28:	08005d49 	.word	0x08005d49
 8005d2c:	08005d53 	.word	0x08005d53
 8005d30:	08005d5d 	.word	0x08005d5d
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 8005d34:	7dbb      	ldrb	r3, [r7, #22]
 8005d36:	f043 0310 	orr.w	r3, r3, #16
 8005d3a:	75bb      	strb	r3, [r7, #22]
				break;
 8005d3c:	e043      	b.n	8005dc6 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew |= 0x28;
 8005d3e:	7dbb      	ldrb	r3, [r7, #22]
 8005d40:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8005d44:	75bb      	strb	r3, [r7, #22]
				break;
 8005d46:	e03e      	b.n	8005dc6 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew |= 0x04;
 8005d48:	7dbb      	ldrb	r3, [r7, #22]
 8005d4a:	f043 0304 	orr.w	r3, r3, #4
 8005d4e:	75bb      	strb	r3, [r7, #22]
				break;
 8005d50:	e039      	b.n	8005dc6 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew |= 0x40;
 8005d52:	7dbb      	ldrb	r3, [r7, #22]
 8005d54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d58:	75bb      	strb	r3, [r7, #22]
				break;
 8005d5a:	e034      	b.n	8005dc6 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew |= 0x80;
 8005d5c:	7dbb      	ldrb	r3, [r7, #22]
 8005d5e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005d62:	75bb      	strb	r3, [r7, #22]
				break;
 8005d64:	e02f      	b.n	8005dc6 <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005d66:	23fc      	movs	r3, #252	; 0xfc
 8005d68:	75fb      	strb	r3, [r7, #23]
 8005d6a:	e02c      	b.n	8005dc6 <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		} else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
 8005d6c:	78fb      	ldrb	r3, [r7, #3]
 8005d6e:	2b04      	cmp	r3, #4
 8005d70:	d825      	bhi.n	8005dbe <VL53L0X_SetSequenceStepEnable+0xea>
 8005d72:	a201      	add	r2, pc, #4	; (adr r2, 8005d78 <VL53L0X_SetSequenceStepEnable+0xa4>)
 8005d74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d78:	08005d8d 	.word	0x08005d8d
 8005d7c:	08005d97 	.word	0x08005d97
 8005d80:	08005da1 	.word	0x08005da1
 8005d84:	08005dab 	.word	0x08005dab
 8005d88:	08005db5 	.word	0x08005db5
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 8005d8c:	7dbb      	ldrb	r3, [r7, #22]
 8005d8e:	f023 0310 	bic.w	r3, r3, #16
 8005d92:	75bb      	strb	r3, [r7, #22]
				break;
 8005d94:	e017      	b.n	8005dc6 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew &= 0xd7;
 8005d96:	7dbb      	ldrb	r3, [r7, #22]
 8005d98:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8005d9c:	75bb      	strb	r3, [r7, #22]
				break;
 8005d9e:	e012      	b.n	8005dc6 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew &= 0xfb;
 8005da0:	7dbb      	ldrb	r3, [r7, #22]
 8005da2:	f023 0304 	bic.w	r3, r3, #4
 8005da6:	75bb      	strb	r3, [r7, #22]
				break;
 8005da8:	e00d      	b.n	8005dc6 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew &= 0xbf;
 8005daa:	7dbb      	ldrb	r3, [r7, #22]
 8005dac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005db0:	75bb      	strb	r3, [r7, #22]
				break;
 8005db2:	e008      	b.n	8005dc6 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew &= 0x7f;
 8005db4:	7dbb      	ldrb	r3, [r7, #22]
 8005db6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005dba:	75bb      	strb	r3, [r7, #22]
				break;
 8005dbc:	e003      	b.n	8005dc6 <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005dbe:	23fc      	movs	r3, #252	; 0xfc
 8005dc0:	75fb      	strb	r3, [r7, #23]
 8005dc2:	e000      	b.n	8005dc6 <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		}
 8005dc4:	bf00      	nop
	}

	if (SequenceConfigNew != SequenceConfig) {
 8005dc6:	7bfb      	ldrb	r3, [r7, #15]
 8005dc8:	7dba      	ldrb	r2, [r7, #22]
 8005dca:	429a      	cmp	r2, r3
 8005dcc:	d01e      	beq.n	8005e0c <VL53L0X_SetSequenceStepEnable+0x138>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
 8005dce:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d107      	bne.n	8005de6 <VL53L0X_SetSequenceStepEnable+0x112>
			Status = VL53L0X_WrByte(Dev,
 8005dd6:	7dbb      	ldrb	r3, [r7, #22]
 8005dd8:	461a      	mov	r2, r3
 8005dda:	2101      	movs	r1, #1
 8005ddc:	6878      	ldr	r0, [r7, #4]
 8005dde:	f004 f9fb 	bl	800a1d8 <VL53L0X_WrByte>
 8005de2:	4603      	mov	r3, r0
 8005de4:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 8005de6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d103      	bne.n	8005df6 <VL53L0X_SetSequenceStepEnable+0x122>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	7dba      	ldrb	r2, [r7, #22]
 8005df2:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130


		/* Recalculate timing budget */
		if (Status == VL53L0X_ERROR_NONE) {
 8005df6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d106      	bne.n	8005e0c <VL53L0X_SetSequenceStepEnable+0x138>
			VL53L0X_GETPARAMETERFIELD(Dev,
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	695b      	ldr	r3, [r3, #20]
 8005e02:	613b      	str	r3, [r7, #16]
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 8005e04:	6939      	ldr	r1, [r7, #16]
 8005e06:	6878      	ldr	r0, [r7, #4]
 8005e08:	f7ff ff0e 	bl	8005c28 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
		}
	}

	LOG_FUNCTION_END(Status);

	return Status;
 8005e0c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005e10:	4618      	mov	r0, r3
 8005e12:	3718      	adds	r7, #24
 8005e14:	46bd      	mov	sp, r7
 8005e16:	bd80      	pop	{r7, pc}

08005e18 <sequence_step_enabled>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 8005e18:	b480      	push	{r7}
 8005e1a:	b087      	sub	sp, #28
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	60f8      	str	r0, [r7, #12]
 8005e20:	607b      	str	r3, [r7, #4]
 8005e22:	460b      	mov	r3, r1
 8005e24:	72fb      	strb	r3, [r7, #11]
 8005e26:	4613      	mov	r3, r2
 8005e28:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2200      	movs	r2, #0
 8005e32:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 8005e34:	7afb      	ldrb	r3, [r7, #11]
 8005e36:	2b04      	cmp	r3, #4
 8005e38:	d836      	bhi.n	8005ea8 <sequence_step_enabled+0x90>
 8005e3a:	a201      	add	r2, pc, #4	; (adr r2, 8005e40 <sequence_step_enabled+0x28>)
 8005e3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e40:	08005e55 	.word	0x08005e55
 8005e44:	08005e67 	.word	0x08005e67
 8005e48:	08005e79 	.word	0x08005e79
 8005e4c:	08005e8b 	.word	0x08005e8b
 8005e50:	08005e9d 	.word	0x08005e9d
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 8005e54:	7abb      	ldrb	r3, [r7, #10]
 8005e56:	111b      	asrs	r3, r3, #4
 8005e58:	b2db      	uxtb	r3, r3
 8005e5a:	f003 0301 	and.w	r3, r3, #1
 8005e5e:	b2da      	uxtb	r2, r3
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	701a      	strb	r2, [r3, #0]
		break;
 8005e64:	e022      	b.n	8005eac <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 8005e66:	7abb      	ldrb	r3, [r7, #10]
 8005e68:	10db      	asrs	r3, r3, #3
 8005e6a:	b2db      	uxtb	r3, r3
 8005e6c:	f003 0301 	and.w	r3, r3, #1
 8005e70:	b2da      	uxtb	r2, r3
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	701a      	strb	r2, [r3, #0]
		break;
 8005e76:	e019      	b.n	8005eac <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 8005e78:	7abb      	ldrb	r3, [r7, #10]
 8005e7a:	109b      	asrs	r3, r3, #2
 8005e7c:	b2db      	uxtb	r3, r3
 8005e7e:	f003 0301 	and.w	r3, r3, #1
 8005e82:	b2da      	uxtb	r2, r3
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	701a      	strb	r2, [r3, #0]
		break;
 8005e88:	e010      	b.n	8005eac <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 8005e8a:	7abb      	ldrb	r3, [r7, #10]
 8005e8c:	119b      	asrs	r3, r3, #6
 8005e8e:	b2db      	uxtb	r3, r3
 8005e90:	f003 0301 	and.w	r3, r3, #1
 8005e94:	b2da      	uxtb	r2, r3
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	701a      	strb	r2, [r3, #0]
		break;
 8005e9a:	e007      	b.n	8005eac <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 8005e9c:	7abb      	ldrb	r3, [r7, #10]
 8005e9e:	09db      	lsrs	r3, r3, #7
 8005ea0:	b2da      	uxtb	r2, r3
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	701a      	strb	r2, [r3, #0]
		break;
 8005ea6:	e001      	b.n	8005eac <sequence_step_enabled+0x94>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005ea8:	23fc      	movs	r3, #252	; 0xfc
 8005eaa:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005eac:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	371c      	adds	r7, #28
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eba:	4770      	bx	lr

08005ebc <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b084      	sub	sp, #16
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
 8005ec4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 8005eca:	2300      	movs	r3, #0
 8005ecc:	73bb      	strb	r3, [r7, #14]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8005ece:	f107 030e 	add.w	r3, r7, #14
 8005ed2:	461a      	mov	r2, r3
 8005ed4:	2101      	movs	r1, #1
 8005ed6:	6878      	ldr	r0, [r7, #4]
 8005ed8:	f004 fa00 	bl	800a2dc <VL53L0X_RdByte>
 8005edc:	4603      	mov	r3, r0
 8005ede:	73fb      	strb	r3, [r7, #15]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 8005ee0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d107      	bne.n	8005ef8 <VL53L0X_GetSequenceStepEnables+0x3c>
		Status = sequence_step_enabled(Dev,
 8005ee8:	7bba      	ldrb	r2, [r7, #14]
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	2100      	movs	r1, #0
 8005eee:	6878      	ldr	r0, [r7, #4]
 8005ef0:	f7ff ff92 	bl	8005e18 <sequence_step_enabled>
 8005ef4:	4603      	mov	r3, r0
 8005ef6:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8005ef8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d108      	bne.n	8005f12 <VL53L0X_GetSequenceStepEnables+0x56>
		Status = sequence_step_enabled(Dev,
 8005f00:	7bba      	ldrb	r2, [r7, #14]
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	3302      	adds	r3, #2
 8005f06:	2101      	movs	r1, #1
 8005f08:	6878      	ldr	r0, [r7, #4]
 8005f0a:	f7ff ff85 	bl	8005e18 <sequence_step_enabled>
 8005f0e:	4603      	mov	r3, r0
 8005f10:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8005f12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d108      	bne.n	8005f2c <VL53L0X_GetSequenceStepEnables+0x70>
		Status = sequence_step_enabled(Dev,
 8005f1a:	7bba      	ldrb	r2, [r7, #14]
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	3301      	adds	r3, #1
 8005f20:	2102      	movs	r1, #2
 8005f22:	6878      	ldr	r0, [r7, #4]
 8005f24:	f7ff ff78 	bl	8005e18 <sequence_step_enabled>
 8005f28:	4603      	mov	r3, r0
 8005f2a:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8005f2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d108      	bne.n	8005f46 <VL53L0X_GetSequenceStepEnables+0x8a>
		Status = sequence_step_enabled(Dev,
 8005f34:	7bba      	ldrb	r2, [r7, #14]
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	3303      	adds	r3, #3
 8005f3a:	2103      	movs	r1, #3
 8005f3c:	6878      	ldr	r0, [r7, #4]
 8005f3e:	f7ff ff6b 	bl	8005e18 <sequence_step_enabled>
 8005f42:	4603      	mov	r3, r0
 8005f44:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8005f46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d108      	bne.n	8005f60 <VL53L0X_GetSequenceStepEnables+0xa4>
		Status = sequence_step_enabled(Dev,
 8005f4e:	7bba      	ldrb	r2, [r7, #14]
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	3304      	adds	r3, #4
 8005f54:	2104      	movs	r1, #4
 8005f56:	6878      	ldr	r0, [r7, #4]
 8005f58:	f7ff ff5e 	bl	8005e18 <sequence_step_enabled>
 8005f5c:	4603      	mov	r3, r0
 8005f5e:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005f60:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005f64:	4618      	mov	r0, r3
 8005f66:	3710      	adds	r7, #16
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	bd80      	pop	{r7, pc}

08005f6c <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b084      	sub	sp, #16
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
 8005f74:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005f76:	2300      	movs	r3, #0
 8005f78:	73fb      	strb	r3, [r7, #15]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 8005f7a:	f107 030c 	add.w	r3, r7, #12
 8005f7e:	461a      	mov	r2, r3
 8005f80:	21f8      	movs	r1, #248	; 0xf8
 8005f82:	6878      	ldr	r0, [r7, #4]
 8005f84:	f004 f9d4 	bl	800a330 <VL53L0X_RdWord>
 8005f88:	4603      	mov	r3, r0
 8005f8a:	73fb      	strb	r3, [r7, #15]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 8005f8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d108      	bne.n	8005fa6 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
		Status = VL53L0X_RdDWord(Dev,
 8005f94:	f107 0308 	add.w	r3, r7, #8
 8005f98:	461a      	mov	r2, r3
 8005f9a:	2104      	movs	r1, #4
 8005f9c:	6878      	ldr	r0, [r7, #4]
 8005f9e:	f004 f9ff 	bl	800a3a0 <VL53L0X_RdDWord>
 8005fa2:	4603      	mov	r3, r0
 8005fa4:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005fa6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d10c      	bne.n	8005fc8 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5c>
		if (osc_calibrate_val != 0) {
 8005fae:	89bb      	ldrh	r3, [r7, #12]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d005      	beq.n	8005fc0 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x54>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	89ba      	ldrh	r2, [r7, #12]
 8005fb8:	fbb3 f2f2 	udiv	r2, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	681a      	ldr	r2, [r3, #0]
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	619a      	str	r2, [r3, #24]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005fc8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005fcc:	4618      	mov	r0, r3
 8005fce:	3710      	adds	r7, #16
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	bd80      	pop	{r7, pc}

08005fd4 <VL53L0X_GetXTalkCompensationEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
	uint8_t *pXTalkCompensationEnable)
{
 8005fd4:	b480      	push	{r7}
 8005fd6:	b085      	sub	sp, #20
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
 8005fdc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005fde:	2300      	movs	r3, #0
 8005fe0:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp8;
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	7f1b      	ldrb	r3, [r3, #28]
 8005fe6:	73bb      	strb	r3, [r7, #14]
	*pXTalkCompensationEnable = Temp8;
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	7bba      	ldrb	r2, [r7, #14]
 8005fec:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8005fee:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	3714      	adds	r7, #20
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffc:	4770      	bx	lr

08005ffe <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 8005ffe:	b580      	push	{r7, lr}
 8006000:	b086      	sub	sp, #24
 8006002:	af00      	add	r7, sp, #0
 8006004:	6078      	str	r0, [r7, #4]
 8006006:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006008:	2300      	movs	r3, #0
 800600a:	75fb      	strb	r3, [r7, #23]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 800600c:	f107 030e 	add.w	r3, r7, #14
 8006010:	461a      	mov	r2, r3
 8006012:	2120      	movs	r1, #32
 8006014:	6878      	ldr	r0, [r7, #4]
 8006016:	f004 f98b 	bl	800a330 <VL53L0X_RdWord>
 800601a:	4603      	mov	r3, r0
 800601c:	75fb      	strb	r3, [r7, #23]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 800601e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d118      	bne.n	8006058 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
		if (Value == 0) {
 8006026:	89fb      	ldrh	r3, [r7, #14]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d109      	bne.n	8006040 <VL53L0X_GetXTalkCompensationRateMegaCps+0x42>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6a1b      	ldr	r3, [r3, #32]
 8006030:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	693a      	ldr	r2, [r7, #16]
 8006036:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2200      	movs	r2, #0
 800603c:	771a      	strb	r2, [r3, #28]
 800603e:	e00b      	b.n	8006058 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 8006040:	89fb      	ldrh	r3, [r7, #14]
 8006042:	00db      	lsls	r3, r3, #3
 8006044:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	693a      	ldr	r2, [r7, #16]
 800604a:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	693a      	ldr	r2, [r7, #16]
 8006050:	621a      	str	r2, [r3, #32]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2201      	movs	r2, #1
 8006056:	771a      	strb	r2, [r3, #28]
				1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006058:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800605c:	4618      	mov	r0, r3
 800605e:	3718      	adds	r7, #24
 8006060:	46bd      	mov	sp, r7
 8006062:	bd80      	pop	{r7, pc}

08006064 <VL53L0X_SetLimitCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b086      	sub	sp, #24
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
 800606c:	460b      	mov	r3, r1
 800606e:	807b      	strh	r3, [r7, #2]
 8006070:	4613      	mov	r3, r2
 8006072:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006074:	2300      	movs	r3, #0
 8006076:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t TempFix1616 = 0;
 8006078:	2300      	movs	r3, #0
 800607a:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 800607c:	2300      	movs	r3, #0
 800607e:	73fb      	strb	r3, [r7, #15]
	uint8_t LimitCheckDisable = 0;
 8006080:	2300      	movs	r3, #0
 8006082:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8006084:	887b      	ldrh	r3, [r7, #2]
 8006086:	2b05      	cmp	r3, #5
 8006088:	d902      	bls.n	8006090 <VL53L0X_SetLimitCheckEnable+0x2c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800608a:	23fc      	movs	r3, #252	; 0xfc
 800608c:	75fb      	strb	r3, [r7, #23]
 800608e:	e05b      	b.n	8006148 <VL53L0X_SetLimitCheckEnable+0xe4>
	} else {
		if (LimitCheckEnable == 0) {
 8006090:	787b      	ldrb	r3, [r7, #1]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d106      	bne.n	80060a4 <VL53L0X_SetLimitCheckEnable+0x40>
			TempFix1616 = 0;
 8006096:	2300      	movs	r3, #0
 8006098:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 800609a:	2300      	movs	r3, #0
 800609c:	73fb      	strb	r3, [r7, #15]
			LimitCheckDisable = 1;
 800609e:	2301      	movs	r3, #1
 80060a0:	73bb      	strb	r3, [r7, #14]
 80060a2:	e00a      	b.n	80060ba <VL53L0X_SetLimitCheckEnable+0x56>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80060a4:	887b      	ldrh	r3, [r7, #2]
 80060a6:	687a      	ldr	r2, [r7, #4]
 80060a8:	330c      	adds	r3, #12
 80060aa:	009b      	lsls	r3, r3, #2
 80060ac:	4413      	add	r3, r2
 80060ae:	685b      	ldr	r3, [r3, #4]
 80060b0:	613b      	str	r3, [r7, #16]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 80060b2:	2300      	movs	r3, #0
 80060b4:	73bb      	strb	r3, [r7, #14]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 80060b6:	2301      	movs	r3, #1
 80060b8:	73fb      	strb	r3, [r7, #15]
		}

		switch (LimitCheckId) {
 80060ba:	887b      	ldrh	r3, [r7, #2]
 80060bc:	2b05      	cmp	r3, #5
 80060be:	d841      	bhi.n	8006144 <VL53L0X_SetLimitCheckEnable+0xe0>
 80060c0:	a201      	add	r2, pc, #4	; (adr r2, 80060c8 <VL53L0X_SetLimitCheckEnable+0x64>)
 80060c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060c6:	bf00      	nop
 80060c8:	080060e1 	.word	0x080060e1
 80060cc:	080060eb 	.word	0x080060eb
 80060d0:	08006101 	.word	0x08006101
 80060d4:	0800610b 	.word	0x0800610b
 80060d8:	08006115 	.word	0x08006115
 80060dc:	0800612d 	.word	0x0800612d

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	7bfa      	ldrb	r2, [r7, #15]
 80060e4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckEnableInt);

			break;
 80060e8:	e02e      	b.n	8006148 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 80060ea:	693b      	ldr	r3, [r7, #16]
 80060ec:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 80060ee:	b29b      	uxth	r3, r3
 80060f0:	461a      	mov	r2, r3
 80060f2:	2144      	movs	r1, #68	; 0x44
 80060f4:	6878      	ldr	r0, [r7, #4]
 80060f6:	f004 f893 	bl	800a220 <VL53L0X_WrWord>
 80060fa:	4603      	mov	r3, r0
 80060fc:	75fb      	strb	r3, [r7, #23]

			break;
 80060fe:	e023      	b.n	8006148 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	7bfa      	ldrb	r2, [r7, #15]
 8006104:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckEnableInt);

			break;
 8006108:	e01e      	b.n	8006148 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	7bfa      	ldrb	r2, [r7, #15]
 800610e:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckEnableInt);

			break;
 8006112:	e019      	b.n	8006148 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
 8006114:	7bbb      	ldrb	r3, [r7, #14]
 8006116:	005b      	lsls	r3, r3, #1
 8006118:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 800611a:	7b7b      	ldrb	r3, [r7, #13]
 800611c:	22fe      	movs	r2, #254	; 0xfe
 800611e:	2160      	movs	r1, #96	; 0x60
 8006120:	6878      	ldr	r0, [r7, #4]
 8006122:	f004 f8a7 	bl	800a274 <VL53L0X_UpdateByte>
 8006126:	4603      	mov	r3, r0
 8006128:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xFE, Temp8);

			break;
 800612a:	e00d      	b.n	8006148 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
 800612c:	7bbb      	ldrb	r3, [r7, #14]
 800612e:	011b      	lsls	r3, r3, #4
 8006130:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8006132:	7b7b      	ldrb	r3, [r7, #13]
 8006134:	22ef      	movs	r2, #239	; 0xef
 8006136:	2160      	movs	r1, #96	; 0x60
 8006138:	6878      	ldr	r0, [r7, #4]
 800613a:	f004 f89b 	bl	800a274 <VL53L0X_UpdateByte>
 800613e:	4603      	mov	r3, r0
 8006140:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xEF, Temp8);

			break;
 8006142:	e001      	b.n	8006148 <VL53L0X_SetLimitCheckEnable+0xe4>


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006144:	23fc      	movs	r3, #252	; 0xfc
 8006146:	75fb      	strb	r3, [r7, #23]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006148:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d10f      	bne.n	8006170 <VL53L0X_SetLimitCheckEnable+0x10c>
		if (LimitCheckEnable == 0) {
 8006150:	787b      	ldrb	r3, [r7, #1]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d106      	bne.n	8006164 <VL53L0X_SetLimitCheckEnable+0x100>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8006156:	887b      	ldrh	r3, [r7, #2]
 8006158:	687a      	ldr	r2, [r7, #4]
 800615a:	4413      	add	r3, r2
 800615c:	2200      	movs	r2, #0
 800615e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8006162:	e005      	b.n	8006170 <VL53L0X_SetLimitCheckEnable+0x10c>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8006164:	887b      	ldrh	r3, [r7, #2]
 8006166:	687a      	ldr	r2, [r7, #4]
 8006168:	4413      	add	r3, r2
 800616a:	2201      	movs	r2, #1
 800616c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				LimitCheckId, 1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006170:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006174:	4618      	mov	r0, r3
 8006176:	3718      	adds	r7, #24
 8006178:	46bd      	mov	sp, r7
 800617a:	bd80      	pop	{r7, pc}

0800617c <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 800617c:	b480      	push	{r7}
 800617e:	b087      	sub	sp, #28
 8006180:	af00      	add	r7, sp, #0
 8006182:	60f8      	str	r0, [r7, #12]
 8006184:	460b      	mov	r3, r1
 8006186:	607a      	str	r2, [r7, #4]
 8006188:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800618a:	2300      	movs	r3, #0
 800618c:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 800618e:	897b      	ldrh	r3, [r7, #10]
 8006190:	2b05      	cmp	r3, #5
 8006192:	d905      	bls.n	80061a0 <VL53L0X_GetLimitCheckEnable+0x24>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006194:	23fc      	movs	r3, #252	; 0xfc
 8006196:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2200      	movs	r2, #0
 800619c:	701a      	strb	r2, [r3, #0]
 800619e:	e008      	b.n	80061b2 <VL53L0X_GetLimitCheckEnable+0x36>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80061a0:	897b      	ldrh	r3, [r7, #10]
 80061a2:	68fa      	ldr	r2, [r7, #12]
 80061a4:	4413      	add	r3, r2
 80061a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80061aa:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	7dba      	ldrb	r2, [r7, #22]
 80061b0:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80061b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80061b6:	4618      	mov	r0, r3
 80061b8:	371c      	adds	r7, #28
 80061ba:	46bd      	mov	sp, r7
 80061bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c0:	4770      	bx	lr
	...

080061c4 <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b086      	sub	sp, #24
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	60f8      	str	r0, [r7, #12]
 80061cc:	460b      	mov	r3, r1
 80061ce:	607a      	str	r2, [r7, #4]
 80061d0:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80061d2:	2300      	movs	r3, #0
 80061d4:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 80061d6:	897b      	ldrh	r3, [r7, #10]
 80061d8:	68fa      	ldr	r2, [r7, #12]
 80061da:	4413      	add	r3, r2
 80061dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80061e0:	75bb      	strb	r3, [r7, #22]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 80061e2:	7dbb      	ldrb	r3, [r7, #22]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d107      	bne.n	80061f8 <VL53L0X_SetLimitCheckValue+0x34>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80061e8:	897b      	ldrh	r3, [r7, #10]
 80061ea:	68fa      	ldr	r2, [r7, #12]
 80061ec:	330c      	adds	r3, #12
 80061ee:	009b      	lsls	r3, r3, #2
 80061f0:	4413      	add	r3, r2
 80061f2:	687a      	ldr	r2, [r7, #4]
 80061f4:	605a      	str	r2, [r3, #4]
 80061f6:	e040      	b.n	800627a <VL53L0X_SetLimitCheckValue+0xb6>
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 80061f8:	897b      	ldrh	r3, [r7, #10]
 80061fa:	2b05      	cmp	r3, #5
 80061fc:	d830      	bhi.n	8006260 <VL53L0X_SetLimitCheckValue+0x9c>
 80061fe:	a201      	add	r2, pc, #4	; (adr r2, 8006204 <VL53L0X_SetLimitCheckValue+0x40>)
 8006200:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006204:	0800621d 	.word	0x0800621d
 8006208:	08006225 	.word	0x08006225
 800620c:	0800623b 	.word	0x0800623b
 8006210:	08006243 	.word	0x08006243
 8006214:	0800624b 	.word	0x0800624b
 8006218:	0800624b 	.word	0x0800624b

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	687a      	ldr	r2, [r7, #4]
 8006220:	635a      	str	r2, [r3, #52]	; 0x34
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 8006222:	e01f      	b.n	8006264 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8006228:	b29b      	uxth	r3, r3
 800622a:	461a      	mov	r2, r3
 800622c:	2144      	movs	r1, #68	; 0x44
 800622e:	68f8      	ldr	r0, [r7, #12]
 8006230:	f003 fff6 	bl	800a220 <VL53L0X_WrWord>
 8006234:	4603      	mov	r3, r0
 8006236:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8006238:	e014      	b.n	8006264 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	687a      	ldr	r2, [r7, #4]
 800623e:	63da      	str	r2, [r3, #60]	; 0x3c
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckValue);

			break;
 8006240:	e010      	b.n	8006264 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	687a      	ldr	r2, [r7, #4]
 8006246:	641a      	str	r2, [r3, #64]	; 0x40
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckValue);

			break;
 8006248:	e00c      	b.n	8006264 <VL53L0X_SetLimitCheckValue+0xa0>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 800624e:	b29b      	uxth	r3, r3
 8006250:	461a      	mov	r2, r3
 8006252:	2164      	movs	r1, #100	; 0x64
 8006254:	68f8      	ldr	r0, [r7, #12]
 8006256:	f003 ffe3 	bl	800a220 <VL53L0X_WrWord>
 800625a:	4603      	mov	r3, r0
 800625c:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 800625e:	e001      	b.n	8006264 <VL53L0X_SetLimitCheckValue+0xa0>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006260:	23fc      	movs	r3, #252	; 0xfc
 8006262:	75fb      	strb	r3, [r7, #23]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 8006264:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d106      	bne.n	800627a <VL53L0X_SetLimitCheckValue+0xb6>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800626c:	897b      	ldrh	r3, [r7, #10]
 800626e:	68fa      	ldr	r2, [r7, #12]
 8006270:	330c      	adds	r3, #12
 8006272:	009b      	lsls	r3, r3, #2
 8006274:	4413      	add	r3, r2
 8006276:	687a      	ldr	r2, [r7, #4]
 8006278:	605a      	str	r2, [r3, #4]
				LimitCheckId, LimitCheckValue);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800627a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800627e:	4618      	mov	r0, r3
 8006280:	3718      	adds	r7, #24
 8006282:	46bd      	mov	sp, r7
 8006284:	bd80      	pop	{r7, pc}
 8006286:	bf00      	nop

08006288 <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b088      	sub	sp, #32
 800628c:	af00      	add	r7, sp, #0
 800628e:	60f8      	str	r0, [r7, #12]
 8006290:	460b      	mov	r3, r1
 8006292:	607a      	str	r2, [r7, #4]
 8006294:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006296:	2300      	movs	r3, #0
 8006298:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 800629a:	2300      	movs	r3, #0
 800629c:	77bb      	strb	r3, [r7, #30]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 800629e:	897b      	ldrh	r3, [r7, #10]
 80062a0:	2b05      	cmp	r3, #5
 80062a2:	d847      	bhi.n	8006334 <VL53L0X_GetLimitCheckValue+0xac>
 80062a4:	a201      	add	r2, pc, #4	; (adr r2, 80062ac <VL53L0X_GetLimitCheckValue+0x24>)
 80062a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062aa:	bf00      	nop
 80062ac:	080062c5 	.word	0x080062c5
 80062b0:	080062d1 	.word	0x080062d1
 80062b4:	080062f7 	.word	0x080062f7
 80062b8:	08006303 	.word	0x08006303
 80062bc:	0800630f 	.word	0x0800630f
 80062c0:	0800630f 	.word	0x0800630f

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062c8:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 80062ca:	2300      	movs	r3, #0
 80062cc:	77bb      	strb	r3, [r7, #30]
		break;
 80062ce:	e033      	b.n	8006338 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 80062d0:	f107 0316 	add.w	r3, r7, #22
 80062d4:	461a      	mov	r2, r3
 80062d6:	2144      	movs	r1, #68	; 0x44
 80062d8:	68f8      	ldr	r0, [r7, #12]
 80062da:	f004 f829 	bl	800a330 <VL53L0X_RdWord>
 80062de:	4603      	mov	r3, r0
 80062e0:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 80062e2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d102      	bne.n	80062f0 <VL53L0X_GetLimitCheckValue+0x68>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 80062ea:	8afb      	ldrh	r3, [r7, #22]
 80062ec:	025b      	lsls	r3, r3, #9
 80062ee:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 80062f0:	2301      	movs	r3, #1
 80062f2:	77bb      	strb	r3, [r7, #30]
		break;
 80062f4:	e020      	b.n	8006338 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062fa:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 80062fc:	2300      	movs	r3, #0
 80062fe:	77bb      	strb	r3, [r7, #30]
		break;
 8006300:	e01a      	b.n	8006338 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006306:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, TempFix1616);
		EnableZeroValue = 0;
 8006308:	2300      	movs	r3, #0
 800630a:	77bb      	strb	r3, [r7, #30]
		break;
 800630c:	e014      	b.n	8006338 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 800630e:	f107 0316 	add.w	r3, r7, #22
 8006312:	461a      	mov	r2, r3
 8006314:	2164      	movs	r1, #100	; 0x64
 8006316:	68f8      	ldr	r0, [r7, #12]
 8006318:	f004 f80a 	bl	800a330 <VL53L0X_RdWord>
 800631c:	4603      	mov	r3, r0
 800631e:	77fb      	strb	r3, [r7, #31]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8006320:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d102      	bne.n	800632e <VL53L0X_GetLimitCheckValue+0xa6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8006328:	8afb      	ldrh	r3, [r7, #22]
 800632a:	025b      	lsls	r3, r3, #9
 800632c:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 800632e:	2300      	movs	r3, #0
 8006330:	77bb      	strb	r3, [r7, #30]
		break;
 8006332:	e001      	b.n	8006338 <VL53L0X_GetLimitCheckValue+0xb0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006334:	23fc      	movs	r3, #252	; 0xfc
 8006336:	77fb      	strb	r3, [r7, #31]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006338:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d12a      	bne.n	8006396 <VL53L0X_GetLimitCheckValue+0x10e>

		if (EnableZeroValue == 1) {
 8006340:	7fbb      	ldrb	r3, [r7, #30]
 8006342:	2b01      	cmp	r3, #1
 8006344:	d124      	bne.n	8006390 <VL53L0X_GetLimitCheckValue+0x108>

			if (TempFix1616 == 0) {
 8006346:	69bb      	ldr	r3, [r7, #24]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d110      	bne.n	800636e <VL53L0X_GetLimitCheckValue+0xe6>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 800634c:	897b      	ldrh	r3, [r7, #10]
 800634e:	68fa      	ldr	r2, [r7, #12]
 8006350:	330c      	adds	r3, #12
 8006352:	009b      	lsls	r3, r3, #2
 8006354:	4413      	add	r3, r2
 8006356:	685b      	ldr	r3, [r3, #4]
 8006358:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	69ba      	ldr	r2, [r7, #24]
 800635e:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8006360:	897b      	ldrh	r3, [r7, #10]
 8006362:	68fa      	ldr	r2, [r7, #12]
 8006364:	4413      	add	r3, r2
 8006366:	2200      	movs	r2, #0
 8006368:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800636c:	e013      	b.n	8006396 <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	69ba      	ldr	r2, [r7, #24]
 8006372:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8006374:	897b      	ldrh	r3, [r7, #10]
 8006376:	68fa      	ldr	r2, [r7, #12]
 8006378:	330c      	adds	r3, #12
 800637a:	009b      	lsls	r3, r3, #2
 800637c:	4413      	add	r3, r2
 800637e:	69ba      	ldr	r2, [r7, #24]
 8006380:	605a      	str	r2, [r3, #4]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8006382:	897b      	ldrh	r3, [r7, #10]
 8006384:	68fa      	ldr	r2, [r7, #12]
 8006386:	4413      	add	r3, r2
 8006388:	2201      	movs	r2, #1
 800638a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800638e:	e002      	b.n	8006396 <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	69ba      	ldr	r2, [r7, #24]
 8006394:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006396:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 800639a:	4618      	mov	r0, r3
 800639c:	3720      	adds	r7, #32
 800639e:	46bd      	mov	sp, r7
 80063a0:	bd80      	pop	{r7, pc}
 80063a2:	bf00      	nop

080063a4 <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b084      	sub	sp, #16
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
 80063ac:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80063ae:	2300      	movs	r3, #0
 80063b0:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 80063b2:	f107 030e 	add.w	r3, r7, #14
 80063b6:	461a      	mov	r2, r3
 80063b8:	2101      	movs	r1, #1
 80063ba:	6878      	ldr	r0, [r7, #4]
 80063bc:	f003 ff8e 	bl	800a2dc <VL53L0X_RdByte>
 80063c0:	4603      	mov	r3, r0
 80063c2:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 80063c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d10e      	bne.n	80063ea <VL53L0X_GetWrapAroundCheckEnable+0x46>
		PALDevDataSet(Dev, SequenceConfig, data);
 80063cc:	7bba      	ldrb	r2, [r7, #14]
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		if (data & (0x01 << 7))
 80063d4:	7bbb      	ldrb	r3, [r7, #14]
 80063d6:	b25b      	sxtb	r3, r3
 80063d8:	2b00      	cmp	r3, #0
 80063da:	da03      	bge.n	80063e4 <VL53L0X_GetWrapAroundCheckEnable+0x40>
			*pWrapAroundCheckEnable = 0x01;
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	2201      	movs	r2, #1
 80063e0:	701a      	strb	r2, [r3, #0]
 80063e2:	e002      	b.n	80063ea <VL53L0X_GetWrapAroundCheckEnable+0x46>
		else
			*pWrapAroundCheckEnable = 0x00;
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	2200      	movs	r2, #0
 80063e8:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80063ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d104      	bne.n	80063fc <VL53L0X_GetWrapAroundCheckEnable+0x58>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	781a      	ldrb	r2, [r3, #0]
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80063fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006400:	4618      	mov	r0, r3
 8006402:	3710      	adds	r7, #16
 8006404:	46bd      	mov	sp, r7
 8006406:	bd80      	pop	{r7, pc}

08006408 <VL53L0X_PerformSingleMeasurement>:

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev)
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b084      	sub	sp, #16
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006410:	2300      	movs	r3, #0
 8006412:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8006414:	f107 030e 	add.w	r3, r7, #14
 8006418:	4619      	mov	r1, r3
 800641a:	6878      	ldr	r0, [r7, #4]
 800641c:	f7ff fbd2 	bl	8005bc4 <VL53L0X_GetDeviceMode>
 8006420:	4603      	mov	r3, r0
 8006422:	73fb      	strb	r3, [r7, #15]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8006424:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d107      	bne.n	800643c <VL53L0X_PerformSingleMeasurement+0x34>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 800642c:	7bbb      	ldrb	r3, [r7, #14]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d104      	bne.n	800643c <VL53L0X_PerformSingleMeasurement+0x34>
		Status = VL53L0X_StartMeasurement(Dev);
 8006432:	6878      	ldr	r0, [r7, #4]
 8006434:	f000 f898 	bl	8006568 <VL53L0X_StartMeasurement>
 8006438:	4603      	mov	r3, r0
 800643a:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 800643c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d104      	bne.n	800644e <VL53L0X_PerformSingleMeasurement+0x46>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8006444:	6878      	ldr	r0, [r7, #4]
 8006446:	f001 fb3f 	bl	8007ac8 <VL53L0X_measurement_poll_for_completion>
 800644a:	4603      	mov	r3, r0
 800644c:	73fb      	strb	r3, [r7, #15]


	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 800644e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d106      	bne.n	8006464 <VL53L0X_PerformSingleMeasurement+0x5c>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8006456:	7bbb      	ldrb	r3, [r7, #14]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d103      	bne.n	8006464 <VL53L0X_PerformSingleMeasurement+0x5c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2203      	movs	r2, #3
 8006460:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132


	LOG_FUNCTION_END(Status);
	return Status;
 8006464:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006468:	4618      	mov	r0, r3
 800646a:	3710      	adds	r7, #16
 800646c:	46bd      	mov	sp, r7
 800646e:	bd80      	pop	{r7, pc}

08006470 <VL53L0X_PerformRefCalibration>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev, uint8_t *pVhvSettings,
	uint8_t *pPhaseCal)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b086      	sub	sp, #24
 8006474:	af00      	add	r7, sp, #0
 8006476:	60f8      	str	r0, [r7, #12]
 8006478:	60b9      	str	r1, [r7, #8]
 800647a:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800647c:	2300      	movs	r3, #0
 800647e:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 8006480:	2301      	movs	r3, #1
 8006482:	687a      	ldr	r2, [r7, #4]
 8006484:	68b9      	ldr	r1, [r7, #8]
 8006486:	68f8      	ldr	r0, [r7, #12]
 8006488:	f001 fae1 	bl	8007a4e <VL53L0X_perform_ref_calibration>
 800648c:	4603      	mov	r3, r0
 800648e:	75fb      	strb	r3, [r7, #23]
		pPhaseCal, 1);

	LOG_FUNCTION_END(Status);
	return Status;
 8006490:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006494:	4618      	mov	r0, r3
 8006496:	3718      	adds	r7, #24
 8006498:	46bd      	mov	sp, r7
 800649a:	bd80      	pop	{r7, pc}

0800649c <VL53L0X_CheckAndLoadInterruptSettings>:
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
	uint8_t StartNotStopFlag)
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b086      	sub	sp, #24
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
 80064a4:	460b      	mov	r3, r1
 80064a6:	70fb      	strb	r3, [r7, #3]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80064a8:	2300      	movs	r3, #0
 80064aa:	75fb      	strb	r3, [r7, #23]

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 80064b2:	75bb      	strb	r3, [r7, #22]
		Pin0GpioFunctionality);

	if ((InterruptConfig ==
 80064b4:	7dbb      	ldrb	r3, [r7, #22]
 80064b6:	2b01      	cmp	r3, #1
 80064b8:	d005      	beq.n	80064c6 <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW) ||
 80064ba:	7dbb      	ldrb	r3, [r7, #22]
 80064bc:	2b02      	cmp	r3, #2
 80064be:	d002      	beq.n	80064c6 <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 80064c0:	7dbb      	ldrb	r3, [r7, #22]
 80064c2:	2b03      	cmp	r3, #3
 80064c4:	d147      	bne.n	8006556 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT)) {

		Status = VL53L0X_GetInterruptThresholds(Dev,
 80064c6:	f107 030c 	add.w	r3, r7, #12
 80064ca:	f107 0210 	add.w	r2, r7, #16
 80064ce:	2101      	movs	r1, #1
 80064d0:	6878      	ldr	r0, [r7, #4]
 80064d2:	f000 fbc3 	bl	8006c5c <VL53L0X_GetInterruptThresholds>
 80064d6:	4603      	mov	r3, r0
 80064d8:	75fb      	strb	r3, [r7, #23]
			VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
			&ThresholdLow, &ThresholdHigh);

		if (((ThresholdLow > 255*65536) ||
 80064da:	693b      	ldr	r3, [r7, #16]
 80064dc:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 80064e0:	d803      	bhi.n	80064ea <VL53L0X_CheckAndLoadInterruptSettings+0x4e>
			(ThresholdHigh > 255*65536)) &&
 80064e2:	68fb      	ldr	r3, [r7, #12]
		if (((ThresholdLow > 255*65536) ||
 80064e4:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 80064e8:	d935      	bls.n	8006556 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(ThresholdHigh > 255*65536)) &&
 80064ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d131      	bne.n	8006556 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 80064f2:	78fb      	ldrb	r3, [r7, #3]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d006      	beq.n	8006506 <VL53L0X_CheckAndLoadInterruptSettings+0x6a>
				Status = VL53L0X_load_tuning_settings(Dev,
 80064f8:	491a      	ldr	r1, [pc, #104]	; (8006564 <VL53L0X_CheckAndLoadInterruptSettings+0xc8>)
 80064fa:	6878      	ldr	r0, [r7, #4]
 80064fc:	f002 ff56 	bl	80093ac <VL53L0X_load_tuning_settings>
 8006500:	4603      	mov	r3, r0
 8006502:	75fb      	strb	r3, [r7, #23]
 8006504:	e027      	b.n	8006556 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
					InterruptThresholdSettings);
			} else {
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 8006506:	2204      	movs	r2, #4
 8006508:	21ff      	movs	r1, #255	; 0xff
 800650a:	6878      	ldr	r0, [r7, #4]
 800650c:	f003 fe64 	bl	800a1d8 <VL53L0X_WrByte>
 8006510:	4603      	mov	r3, r0
 8006512:	461a      	mov	r2, r3
 8006514:	7dfb      	ldrb	r3, [r7, #23]
 8006516:	4313      	orrs	r3, r2
 8006518:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 800651a:	2200      	movs	r2, #0
 800651c:	2170      	movs	r1, #112	; 0x70
 800651e:	6878      	ldr	r0, [r7, #4]
 8006520:	f003 fe5a 	bl	800a1d8 <VL53L0X_WrByte>
 8006524:	4603      	mov	r3, r0
 8006526:	461a      	mov	r2, r3
 8006528:	7dfb      	ldrb	r3, [r7, #23]
 800652a:	4313      	orrs	r3, r2
 800652c:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800652e:	2200      	movs	r2, #0
 8006530:	21ff      	movs	r1, #255	; 0xff
 8006532:	6878      	ldr	r0, [r7, #4]
 8006534:	f003 fe50 	bl	800a1d8 <VL53L0X_WrByte>
 8006538:	4603      	mov	r3, r0
 800653a:	461a      	mov	r2, r3
 800653c:	7dfb      	ldrb	r3, [r7, #23]
 800653e:	4313      	orrs	r3, r2
 8006540:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8006542:	2200      	movs	r2, #0
 8006544:	2180      	movs	r1, #128	; 0x80
 8006546:	6878      	ldr	r0, [r7, #4]
 8006548:	f003 fe46 	bl	800a1d8 <VL53L0X_WrByte>
 800654c:	4603      	mov	r3, r0
 800654e:	461a      	mov	r2, r3
 8006550:	7dfb      	ldrb	r3, [r7, #23]
 8006552:	4313      	orrs	r3, r2
 8006554:	75fb      	strb	r3, [r7, #23]
		}


	}

	return Status;
 8006556:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 800655a:	4618      	mov	r0, r3
 800655c:	3718      	adds	r7, #24
 800655e:	46bd      	mov	sp, r7
 8006560:	bd80      	pop	{r7, pc}
 8006562:	bf00      	nop
 8006564:	20000080 	.word	0x20000080

08006568 <VL53L0X_StartMeasurement>:


VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b086      	sub	sp, #24
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006570:	2300      	movs	r3, #0
 8006572:	75fb      	strb	r3, [r7, #23]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 8006574:	2301      	movs	r3, #1
 8006576:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8006578:	f107 030e 	add.w	r3, r7, #14
 800657c:	4619      	mov	r1, r3
 800657e:	6878      	ldr	r0, [r7, #4]
 8006580:	f7ff fb20 	bl	8005bc4 <VL53L0X_GetDeviceMode>

	Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 8006584:	2201      	movs	r2, #1
 8006586:	2180      	movs	r1, #128	; 0x80
 8006588:	6878      	ldr	r0, [r7, #4]
 800658a:	f003 fe25 	bl	800a1d8 <VL53L0X_WrByte>
 800658e:	4603      	mov	r3, r0
 8006590:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8006592:	2201      	movs	r2, #1
 8006594:	21ff      	movs	r1, #255	; 0xff
 8006596:	6878      	ldr	r0, [r7, #4]
 8006598:	f003 fe1e 	bl	800a1d8 <VL53L0X_WrByte>
 800659c:	4603      	mov	r3, r0
 800659e:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 80065a0:	2200      	movs	r2, #0
 80065a2:	2100      	movs	r1, #0
 80065a4:	6878      	ldr	r0, [r7, #4]
 80065a6:	f003 fe17 	bl	800a1d8 <VL53L0X_WrByte>
 80065aa:	4603      	mov	r3, r0
 80065ac:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x91, PALDevDataGet(Dev, StopVariable));
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 80065b4:	461a      	mov	r2, r3
 80065b6:	2191      	movs	r1, #145	; 0x91
 80065b8:	6878      	ldr	r0, [r7, #4]
 80065ba:	f003 fe0d 	bl	800a1d8 <VL53L0X_WrByte>
 80065be:	4603      	mov	r3, r0
 80065c0:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 80065c2:	2201      	movs	r2, #1
 80065c4:	2100      	movs	r1, #0
 80065c6:	6878      	ldr	r0, [r7, #4]
 80065c8:	f003 fe06 	bl	800a1d8 <VL53L0X_WrByte>
 80065cc:	4603      	mov	r3, r0
 80065ce:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80065d0:	2200      	movs	r2, #0
 80065d2:	21ff      	movs	r1, #255	; 0xff
 80065d4:	6878      	ldr	r0, [r7, #4]
 80065d6:	f003 fdff 	bl	800a1d8 <VL53L0X_WrByte>
 80065da:	4603      	mov	r3, r0
 80065dc:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
 80065de:	2200      	movs	r2, #0
 80065e0:	2180      	movs	r1, #128	; 0x80
 80065e2:	6878      	ldr	r0, [r7, #4]
 80065e4:	f003 fdf8 	bl	800a1d8 <VL53L0X_WrByte>
 80065e8:	4603      	mov	r3, r0
 80065ea:	75fb      	strb	r3, [r7, #23]

	switch (DeviceMode) {
 80065ec:	7bbb      	ldrb	r3, [r7, #14]
 80065ee:	2b03      	cmp	r3, #3
 80065f0:	d054      	beq.n	800669c <VL53L0X_StartMeasurement+0x134>
 80065f2:	2b03      	cmp	r3, #3
 80065f4:	dc6c      	bgt.n	80066d0 <VL53L0X_StartMeasurement+0x168>
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d002      	beq.n	8006600 <VL53L0X_StartMeasurement+0x98>
 80065fa:	2b01      	cmp	r3, #1
 80065fc:	d034      	beq.n	8006668 <VL53L0X_StartMeasurement+0x100>
 80065fe:	e067      	b.n	80066d0 <VL53L0X_StartMeasurement+0x168>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 8006600:	2201      	movs	r2, #1
 8006602:	2100      	movs	r1, #0
 8006604:	6878      	ldr	r0, [r7, #4]
 8006606:	f003 fde7 	bl	800a1d8 <VL53L0X_WrByte>
 800660a:	4603      	mov	r3, r0
 800660c:	75fb      	strb	r3, [r7, #23]

		Byte = StartStopByte;
 800660e:	7bfb      	ldrb	r3, [r7, #15]
 8006610:	737b      	strb	r3, [r7, #13]
		if (Status == VL53L0X_ERROR_NONE) {
 8006612:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d15d      	bne.n	80066d6 <VL53L0X_StartMeasurement+0x16e>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 800661a:	2300      	movs	r3, #0
 800661c:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 800661e:	693b      	ldr	r3, [r7, #16]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d008      	beq.n	8006636 <VL53L0X_StartMeasurement+0xce>
					Status = VL53L0X_RdByte(Dev,
 8006624:	f107 030d 	add.w	r3, r7, #13
 8006628:	461a      	mov	r2, r3
 800662a:	2100      	movs	r1, #0
 800662c:	6878      	ldr	r0, [r7, #4]
 800662e:	f003 fe55 	bl	800a2dc <VL53L0X_RdByte>
 8006632:	4603      	mov	r3, r0
 8006634:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 8006636:	693b      	ldr	r3, [r7, #16]
 8006638:	3301      	adds	r3, #1
 800663a:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 800663c:	7b7a      	ldrb	r2, [r7, #13]
 800663e:	7bfb      	ldrb	r3, [r7, #15]
 8006640:	4013      	ands	r3, r2
 8006642:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8006644:	7bfa      	ldrb	r2, [r7, #15]
 8006646:	429a      	cmp	r2, r3
 8006648:	d107      	bne.n	800665a <VL53L0X_StartMeasurement+0xf2>
				&& (Status == VL53L0X_ERROR_NONE)
 800664a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d103      	bne.n	800665a <VL53L0X_StartMeasurement+0xf2>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8006652:	693b      	ldr	r3, [r7, #16]
 8006654:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8006658:	d3e1      	bcc.n	800661e <VL53L0X_StartMeasurement+0xb6>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 800665a:	693b      	ldr	r3, [r7, #16]
 800665c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8006660:	d339      	bcc.n	80066d6 <VL53L0X_StartMeasurement+0x16e>
				Status = VL53L0X_ERROR_TIME_OUT;
 8006662:	23f9      	movs	r3, #249	; 0xf9
 8006664:	75fb      	strb	r3, [r7, #23]

		}

		break;
 8006666:	e036      	b.n	80066d6 <VL53L0X_StartMeasurement+0x16e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8006668:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d105      	bne.n	800667c <VL53L0X_StartMeasurement+0x114>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8006670:	2101      	movs	r1, #1
 8006672:	6878      	ldr	r0, [r7, #4]
 8006674:	f7ff ff12 	bl	800649c <VL53L0X_CheckAndLoadInterruptSettings>
 8006678:	4603      	mov	r3, r0
 800667a:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 800667c:	2202      	movs	r2, #2
 800667e:	2100      	movs	r1, #0
 8006680:	6878      	ldr	r0, [r7, #4]
 8006682:	f003 fda9 	bl	800a1d8 <VL53L0X_WrByte>
 8006686:	4603      	mov	r3, r0
 8006688:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 800668a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d123      	bne.n	80066da <VL53L0X_StartMeasurement+0x172>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2204      	movs	r2, #4
 8006696:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 800669a:	e01e      	b.n	80066da <VL53L0X_StartMeasurement+0x172>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 800669c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d105      	bne.n	80066b0 <VL53L0X_StartMeasurement+0x148>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 80066a4:	2101      	movs	r1, #1
 80066a6:	6878      	ldr	r0, [r7, #4]
 80066a8:	f7ff fef8 	bl	800649c <VL53L0X_CheckAndLoadInterruptSettings>
 80066ac:	4603      	mov	r3, r0
 80066ae:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 80066b0:	2204      	movs	r2, #4
 80066b2:	2100      	movs	r1, #0
 80066b4:	6878      	ldr	r0, [r7, #4]
 80066b6:	f003 fd8f 	bl	800a1d8 <VL53L0X_WrByte>
 80066ba:	4603      	mov	r3, r0
 80066bc:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 80066be:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d10b      	bne.n	80066de <VL53L0X_StartMeasurement+0x176>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2204      	movs	r2, #4
 80066ca:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 80066ce:	e006      	b.n	80066de <VL53L0X_StartMeasurement+0x176>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 80066d0:	23f8      	movs	r3, #248	; 0xf8
 80066d2:	75fb      	strb	r3, [r7, #23]
 80066d4:	e004      	b.n	80066e0 <VL53L0X_StartMeasurement+0x178>
		break;
 80066d6:	bf00      	nop
 80066d8:	e002      	b.n	80066e0 <VL53L0X_StartMeasurement+0x178>
		break;
 80066da:	bf00      	nop
 80066dc:	e000      	b.n	80066e0 <VL53L0X_StartMeasurement+0x178>
		break;
 80066de:	bf00      	nop
	}


	LOG_FUNCTION_END(Status);
	return Status;
 80066e0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80066e4:	4618      	mov	r0, r3
 80066e6:	3718      	adds	r7, #24
 80066e8:	46bd      	mov	sp, r7
 80066ea:	bd80      	pop	{r7, pc}

080066ec <VL53L0X_GetMeasurementDataReady>:
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b084      	sub	sp, #16
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
 80066f4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80066f6:	2300      	movs	r3, #0
 80066f8:	73fb      	strb	r3, [r7, #15]
	uint8_t SysRangeStatusRegister;
	uint8_t InterruptConfig;
	uint32_t InterruptMask;
	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 8006700:	73bb      	strb	r3, [r7, #14]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 8006702:	7bbb      	ldrb	r3, [r7, #14]
 8006704:	2b04      	cmp	r3, #4
 8006706:	d112      	bne.n	800672e <VL53L0X_GetMeasurementDataReady+0x42>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 8006708:	f107 0308 	add.w	r3, r7, #8
 800670c:	4619      	mov	r1, r3
 800670e:	6878      	ldr	r0, [r7, #4]
 8006710:	f000 fb1a 	bl	8006d48 <VL53L0X_GetInterruptMaskStatus>
 8006714:	4603      	mov	r3, r0
 8006716:	73fb      	strb	r3, [r7, #15]
		if (InterruptMask ==
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	2b04      	cmp	r3, #4
 800671c:	d103      	bne.n	8006726 <VL53L0X_GetMeasurementDataReady+0x3a>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	2201      	movs	r2, #1
 8006722:	701a      	strb	r2, [r3, #0]
 8006724:	e01c      	b.n	8006760 <VL53L0X_GetMeasurementDataReady+0x74>
		else
			*pMeasurementDataReady = 0;
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	2200      	movs	r2, #0
 800672a:	701a      	strb	r2, [r3, #0]
 800672c:	e018      	b.n	8006760 <VL53L0X_GetMeasurementDataReady+0x74>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 800672e:	f107 030d 	add.w	r3, r7, #13
 8006732:	461a      	mov	r2, r3
 8006734:	2114      	movs	r1, #20
 8006736:	6878      	ldr	r0, [r7, #4]
 8006738:	f003 fdd0 	bl	800a2dc <VL53L0X_RdByte>
 800673c:	4603      	mov	r3, r0
 800673e:	73fb      	strb	r3, [r7, #15]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 8006740:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d10b      	bne.n	8006760 <VL53L0X_GetMeasurementDataReady+0x74>
			if (SysRangeStatusRegister & 0x01)
 8006748:	7b7b      	ldrb	r3, [r7, #13]
 800674a:	f003 0301 	and.w	r3, r3, #1
 800674e:	2b00      	cmp	r3, #0
 8006750:	d003      	beq.n	800675a <VL53L0X_GetMeasurementDataReady+0x6e>
				*pMeasurementDataReady = 1;
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	2201      	movs	r2, #1
 8006756:	701a      	strb	r2, [r3, #0]
 8006758:	e002      	b.n	8006760 <VL53L0X_GetMeasurementDataReady+0x74>
			else
				*pMeasurementDataReady = 0;
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	2200      	movs	r2, #0
 800675e:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006760:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006764:	4618      	mov	r0, r3
 8006766:	3710      	adds	r7, #16
 8006768:	46bd      	mov	sp, r7
 800676a:	bd80      	pop	{r7, pc}

0800676c <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 800676c:	b5b0      	push	{r4, r5, r7, lr}
 800676e:	b096      	sub	sp, #88	; 0x58
 8006770:	af02      	add	r7, sp, #8
 8006772:	6078      	str	r0, [r7, #4]
 8006774:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006776:	2300      	movs	r3, #0
 8006778:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 800677c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8006780:	230c      	movs	r3, #12
 8006782:	2114      	movs	r1, #20
 8006784:	6878      	ldr	r0, [r7, #4]
 8006786:	f003 fcfb 	bl	800a180 <VL53L0X_ReadMulti>
 800678a:	4603      	mov	r3, r0
 800678c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if (Status == VL53L0X_ERROR_NONE) {
 8006790:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8006794:	2b00      	cmp	r3, #0
 8006796:	f040 80d1 	bne.w	800693c <VL53L0X_GetRangingMeasurementData+0x1d0>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	2200      	movs	r2, #0
 800679e:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	2200      	movs	r2, #0
 80067a4:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 80067a6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80067aa:	b29b      	uxth	r3, r3
 80067ac:	021b      	lsls	r3, r3, #8
 80067ae:	b29a      	uxth	r2, r3
 80067b0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80067b4:	b29b      	uxth	r3, r3
 80067b6:	4413      	add	r3, r2
 80067b8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	2200      	movs	r2, #0
 80067c0:	605a      	str	r2, [r3, #4]

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 80067c2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80067c6:	b29b      	uxth	r3, r3
 80067c8:	021b      	lsls	r3, r3, #8
 80067ca:	b29a      	uxth	r2, r3
 80067cc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80067d0:	b29b      	uxth	r3, r3
 80067d2:	4413      	add	r3, r2
 80067d4:	b29b      	uxth	r3, r3
 80067d6:	025b      	lsls	r3, r3, #9
 80067d8:	647b      	str	r3, [r7, #68]	; 0x44
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80067de:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 80067e0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80067e4:	b29b      	uxth	r3, r3
 80067e6:	021b      	lsls	r3, r3, #8
 80067e8:	b29a      	uxth	r2, r3
 80067ea:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80067ee:	b29b      	uxth	r3, r3
 80067f0:	4413      	add	r3, r2
 80067f2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 80067f6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80067fa:	025b      	lsls	r3, r3, #9
 80067fc:	461a      	mov	r2, r3
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 8006802:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8006806:	b29b      	uxth	r3, r3
 8006808:	021b      	lsls	r3, r3, #8
 800680a:	b29a      	uxth	r2, r3
 800680c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006810:	b29b      	uxth	r3, r3
 8006812:	4413      	add	r3, r2
 8006814:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800681e:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 8006820:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006824:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	f8b3 3152 	ldrh.w	r3, [r3, #338]	; 0x152
 800682e:	87bb      	strh	r3, [r7, #60]	; 0x3c
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 8006836:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 800683a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800683c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006840:	d046      	beq.n	80068d0 <VL53L0X_GetRangingMeasurementData+0x164>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 8006842:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8006844:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8006848:	fb02 f303 	mul.w	r3, r2, r3
 800684c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8006850:	4a57      	ldr	r2, [pc, #348]	; (80069b0 <VL53L0X_GetRangingMeasurementData+0x244>)
 8006852:	fb82 1203 	smull	r1, r2, r2, r3
 8006856:	1192      	asrs	r2, r2, #6
 8006858:	17db      	asrs	r3, r3, #31
 800685a:	1ad3      	subs	r3, r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 800685c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6a1b      	ldr	r3, [r3, #32]
 8006864:	873b      	strh	r3, [r7, #56]	; 0x38
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	7f1b      	ldrb	r3, [r3, #28]
 800686a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 800686e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006872:	2b00      	cmp	r3, #0
 8006874:	d02c      	beq.n	80068d0 <VL53L0X_GetRangingMeasurementData+0x164>

				if ((SignalRate
					- ((XTalkCompensationRateMegaCps
					* EffectiveSpadRtnCount) >> 8))
 8006876:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006878:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800687c:	fb02 f303 	mul.w	r3, r2, r3
 8006880:	121a      	asrs	r2, r3, #8
					<= 0) {
 8006882:	6c7b      	ldr	r3, [r7, #68]	; 0x44
				if ((SignalRate
 8006884:	429a      	cmp	r2, r3
 8006886:	d10d      	bne.n	80068a4 <VL53L0X_GetRangingMeasurementData+0x138>
					if (RangeFractionalEnable)
 8006888:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800688c:	2b00      	cmp	r3, #0
 800688e:	d004      	beq.n	800689a <VL53L0X_GetRangingMeasurementData+0x12e>
						XtalkRangeMilliMeter = 8888;
 8006890:	f242 23b8 	movw	r3, #8888	; 0x22b8
 8006894:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8006898:	e016      	b.n	80068c8 <VL53L0X_GetRangingMeasurementData+0x15c>
					else
						XtalkRangeMilliMeter = 8888
 800689a:	f648 23e0 	movw	r3, #35552	; 0x8ae0
 800689e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80068a2:	e011      	b.n	80068c8 <VL53L0X_GetRangingMeasurementData+0x15c>
							<< 2;
				} else {
					XtalkRangeMilliMeter =
					(tmpuint16 * SignalRate)
 80068a4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80068a8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80068aa:	fb02 f203 	mul.w	r2, r2, r3
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 80068ae:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80068b0:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 80068b4:	fb01 f303 	mul.w	r3, r1, r3
						>> 8));
 80068b8:	121b      	asrs	r3, r3, #8
 80068ba:	4619      	mov	r1, r3
						- ((XTalkCompensationRateMegaCps
 80068bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80068be:	1a5b      	subs	r3, r3, r1
						/ (SignalRate
 80068c0:	fbb2 f3f3 	udiv	r3, r2, r3
					XtalkRangeMilliMeter =
 80068c4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				}

				tmpuint16 = XtalkRangeMilliMeter;
 80068c8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80068cc:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			}

		}

		if (RangeFractionalEnable) {
 80068d0:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d00d      	beq.n	80068f4 <VL53L0X_GetRangingMeasurementData+0x188>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 80068d8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80068dc:	089b      	lsrs	r3, r3, #2
 80068de:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 80068e4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80068e8:	b2db      	uxtb	r3, r3
 80068ea:	019b      	lsls	r3, r3, #6
 80068ec:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	75da      	strb	r2, [r3, #23]
 80068f2:	e006      	b.n	8006902 <VL53L0X_GetRangingMeasurementData+0x196>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 80068fa:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	2200      	movs	r2, #0
 8006900:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 8006902:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8006906:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 800690a:	f107 0336 	add.w	r3, r7, #54	; 0x36
 800690e:	9301      	str	r3, [sp, #4]
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	9300      	str	r3, [sp, #0]
 8006914:	4613      	mov	r3, r2
 8006916:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006918:	6878      	ldr	r0, [r7, #4]
 800691a:	f003 f9e5 	bl	8009ce8 <VL53L0X_get_pal_range_status>
 800691e:	4603      	mov	r3, r0
 8006920:	461a      	mov	r2, r3
 8006922:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8006926:	4313      	orrs	r3, r2
 8006928:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 800692c:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8006930:	2b00      	cmp	r3, #0
 8006932:	d103      	bne.n	800693c <VL53L0X_GetRangingMeasurementData+0x1d0>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 8006934:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 800693c:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8006940:	2b00      	cmp	r3, #0
 8006942:	d12f      	bne.n	80069a4 <VL53L0X_GetRangingMeasurementData+0x238>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	f107 040c 	add.w	r4, r7, #12
 800694a:	f103 0550 	add.w	r5, r3, #80	; 0x50
 800694e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006950:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006952:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8006956:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	891b      	ldrh	r3, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 800695e:	82bb      	strh	r3, [r7, #20]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	7ddb      	ldrb	r3, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 8006964:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	895b      	ldrh	r3, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 800696c:	82fb      	strh	r3, [r7, #22]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	685b      	ldr	r3, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 8006972:	613b      	str	r3, [r7, #16]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	68db      	ldr	r3, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 8006978:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	691b      	ldr	r3, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 800697e:	61fb      	str	r3, [r7, #28]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	8a9b      	ldrh	r3, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 8006984:	843b      	strh	r3, [r7, #32]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	7e1b      	ldrb	r3, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 800698a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	f103 0450 	add.w	r4, r3, #80	; 0x50
 8006994:	f107 050c 	add.w	r5, r7, #12
 8006998:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800699a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800699c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80069a0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80069a4:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 80069a8:	4618      	mov	r0, r3
 80069aa:	3750      	adds	r7, #80	; 0x50
 80069ac:	46bd      	mov	sp, r7
 80069ae:	bdb0      	pop	{r4, r5, r7, pc}
 80069b0:	10624dd3 	.word	0x10624dd3

080069b4 <VL53L0X_PerformSingleRangingMeasurement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b084      	sub	sp, #16
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
 80069bc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80069be:	2300      	movs	r3, #0
 80069c0:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* This function will do a complete single ranging
	 * Here we fix the mode! */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 80069c2:	2100      	movs	r1, #0
 80069c4:	6878      	ldr	r0, [r7, #4]
 80069c6:	f7ff f8d1 	bl	8005b6c <VL53L0X_SetDeviceMode>
 80069ca:	4603      	mov	r3, r0
 80069cc:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80069ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d104      	bne.n	80069e0 <VL53L0X_PerformSingleRangingMeasurement+0x2c>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 80069d6:	6878      	ldr	r0, [r7, #4]
 80069d8:	f7ff fd16 	bl	8006408 <VL53L0X_PerformSingleMeasurement>
 80069dc:	4603      	mov	r3, r0
 80069de:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 80069e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d105      	bne.n	80069f4 <VL53L0X_PerformSingleRangingMeasurement+0x40>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 80069e8:	6839      	ldr	r1, [r7, #0]
 80069ea:	6878      	ldr	r0, [r7, #4]
 80069ec:	f7ff febe 	bl	800676c <VL53L0X_GetRangingMeasurementData>
 80069f0:	4603      	mov	r3, r0
 80069f2:	73fb      	strb	r3, [r7, #15]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 80069f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d105      	bne.n	8006a08 <VL53L0X_PerformSingleRangingMeasurement+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 80069fc:	2100      	movs	r1, #0
 80069fe:	6878      	ldr	r0, [r7, #4]
 8006a00:	f000 f962 	bl	8006cc8 <VL53L0X_ClearInterruptMask>
 8006a04:	4603      	mov	r3, r0
 8006a06:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(Status);
	return Status;
 8006a08:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	3710      	adds	r7, #16
 8006a10:	46bd      	mov	sp, r7
 8006a12:	bd80      	pop	{r7, pc}

08006a14 <VL53L0X_SetGpioConfig>:
/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
	VL53L0X_DeviceModes DeviceMode, VL53L0X_GpioFunctionality Functionality,
	VL53L0X_InterruptPolarity Polarity)
{
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b084      	sub	sp, #16
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
 8006a1c:	4608      	mov	r0, r1
 8006a1e:	4611      	mov	r1, r2
 8006a20:	461a      	mov	r2, r3
 8006a22:	4603      	mov	r3, r0
 8006a24:	70fb      	strb	r3, [r7, #3]
 8006a26:	460b      	mov	r3, r1
 8006a28:	70bb      	strb	r3, [r7, #2]
 8006a2a:	4613      	mov	r3, r2
 8006a2c:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006a2e:	2300      	movs	r3, #0
 8006a30:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	if (Pin != 0) {
 8006a32:	78fb      	ldrb	r3, [r7, #3]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d002      	beq.n	8006a3e <VL53L0X_SetGpioConfig+0x2a>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 8006a38:	23f6      	movs	r3, #246	; 0xf6
 8006a3a:	73fb      	strb	r3, [r7, #15]
 8006a3c:	e107      	b.n	8006c4e <VL53L0X_SetGpioConfig+0x23a>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 8006a3e:	78bb      	ldrb	r3, [r7, #2]
 8006a40:	2b14      	cmp	r3, #20
 8006a42:	d110      	bne.n	8006a66 <VL53L0X_SetGpioConfig+0x52>
		if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 8006a44:	7e3b      	ldrb	r3, [r7, #24]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d102      	bne.n	8006a50 <VL53L0X_SetGpioConfig+0x3c>
			data = 0x10;
 8006a4a:	2310      	movs	r3, #16
 8006a4c:	73bb      	strb	r3, [r7, #14]
 8006a4e:	e001      	b.n	8006a54 <VL53L0X_SetGpioConfig+0x40>
		else
			data = 1;
 8006a50:	2301      	movs	r3, #1
 8006a52:	73bb      	strb	r3, [r7, #14]

		Status = VL53L0X_WrByte(Dev,
 8006a54:	7bbb      	ldrb	r3, [r7, #14]
 8006a56:	461a      	mov	r2, r3
 8006a58:	2184      	movs	r1, #132	; 0x84
 8006a5a:	6878      	ldr	r0, [r7, #4]
 8006a5c:	f003 fbbc 	bl	800a1d8 <VL53L0X_WrByte>
 8006a60:	4603      	mov	r3, r0
 8006a62:	73fb      	strb	r3, [r7, #15]
 8006a64:	e0f3      	b.n	8006c4e <VL53L0X_SetGpioConfig+0x23a>
		VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);

	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 8006a66:	78bb      	ldrb	r3, [r7, #2]
 8006a68:	2b15      	cmp	r3, #21
 8006a6a:	f040 8097 	bne.w	8006b9c <VL53L0X_SetGpioConfig+0x188>

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8006a6e:	2201      	movs	r2, #1
 8006a70:	21ff      	movs	r1, #255	; 0xff
 8006a72:	6878      	ldr	r0, [r7, #4]
 8006a74:	f003 fbb0 	bl	800a1d8 <VL53L0X_WrByte>
 8006a78:	4603      	mov	r3, r0
 8006a7a:	461a      	mov	r2, r3
 8006a7c:	7bfb      	ldrb	r3, [r7, #15]
 8006a7e:	4313      	orrs	r3, r2
 8006a80:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8006a82:	2200      	movs	r2, #0
 8006a84:	2100      	movs	r1, #0
 8006a86:	6878      	ldr	r0, [r7, #4]
 8006a88:	f003 fba6 	bl	800a1d8 <VL53L0X_WrByte>
 8006a8c:	4603      	mov	r3, r0
 8006a8e:	461a      	mov	r2, r3
 8006a90:	7bfb      	ldrb	r3, [r7, #15]
 8006a92:	4313      	orrs	r3, r2
 8006a94:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8006a96:	2200      	movs	r2, #0
 8006a98:	21ff      	movs	r1, #255	; 0xff
 8006a9a:	6878      	ldr	r0, [r7, #4]
 8006a9c:	f003 fb9c 	bl	800a1d8 <VL53L0X_WrByte>
 8006aa0:	4603      	mov	r3, r0
 8006aa2:	461a      	mov	r2, r3
 8006aa4:	7bfb      	ldrb	r3, [r7, #15]
 8006aa6:	4313      	orrs	r3, r2
 8006aa8:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8006aaa:	2201      	movs	r2, #1
 8006aac:	2180      	movs	r1, #128	; 0x80
 8006aae:	6878      	ldr	r0, [r7, #4]
 8006ab0:	f003 fb92 	bl	800a1d8 <VL53L0X_WrByte>
 8006ab4:	4603      	mov	r3, r0
 8006ab6:	461a      	mov	r2, r3
 8006ab8:	7bfb      	ldrb	r3, [r7, #15]
 8006aba:	4313      	orrs	r3, r2
 8006abc:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 8006abe:	2202      	movs	r2, #2
 8006ac0:	2185      	movs	r1, #133	; 0x85
 8006ac2:	6878      	ldr	r0, [r7, #4]
 8006ac4:	f003 fb88 	bl	800a1d8 <VL53L0X_WrByte>
 8006ac8:	4603      	mov	r3, r0
 8006aca:	461a      	mov	r2, r3
 8006acc:	7bfb      	ldrb	r3, [r7, #15]
 8006ace:	4313      	orrs	r3, r2
 8006ad0:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 8006ad2:	2204      	movs	r2, #4
 8006ad4:	21ff      	movs	r1, #255	; 0xff
 8006ad6:	6878      	ldr	r0, [r7, #4]
 8006ad8:	f003 fb7e 	bl	800a1d8 <VL53L0X_WrByte>
 8006adc:	4603      	mov	r3, r0
 8006ade:	461a      	mov	r2, r3
 8006ae0:	7bfb      	ldrb	r3, [r7, #15]
 8006ae2:	4313      	orrs	r3, r2
 8006ae4:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	21cd      	movs	r1, #205	; 0xcd
 8006aea:	6878      	ldr	r0, [r7, #4]
 8006aec:	f003 fb74 	bl	800a1d8 <VL53L0X_WrByte>
 8006af0:	4603      	mov	r3, r0
 8006af2:	461a      	mov	r2, r3
 8006af4:	7bfb      	ldrb	r3, [r7, #15]
 8006af6:	4313      	orrs	r3, r2
 8006af8:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 8006afa:	2211      	movs	r2, #17
 8006afc:	21cc      	movs	r1, #204	; 0xcc
 8006afe:	6878      	ldr	r0, [r7, #4]
 8006b00:	f003 fb6a 	bl	800a1d8 <VL53L0X_WrByte>
 8006b04:	4603      	mov	r3, r0
 8006b06:	461a      	mov	r2, r3
 8006b08:	7bfb      	ldrb	r3, [r7, #15]
 8006b0a:	4313      	orrs	r3, r2
 8006b0c:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 8006b0e:	2207      	movs	r2, #7
 8006b10:	21ff      	movs	r1, #255	; 0xff
 8006b12:	6878      	ldr	r0, [r7, #4]
 8006b14:	f003 fb60 	bl	800a1d8 <VL53L0X_WrByte>
 8006b18:	4603      	mov	r3, r0
 8006b1a:	461a      	mov	r2, r3
 8006b1c:	7bfb      	ldrb	r3, [r7, #15]
 8006b1e:	4313      	orrs	r3, r2
 8006b20:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 8006b22:	2200      	movs	r2, #0
 8006b24:	21be      	movs	r1, #190	; 0xbe
 8006b26:	6878      	ldr	r0, [r7, #4]
 8006b28:	f003 fb56 	bl	800a1d8 <VL53L0X_WrByte>
 8006b2c:	4603      	mov	r3, r0
 8006b2e:	461a      	mov	r2, r3
 8006b30:	7bfb      	ldrb	r3, [r7, #15]
 8006b32:	4313      	orrs	r3, r2
 8006b34:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 8006b36:	2206      	movs	r2, #6
 8006b38:	21ff      	movs	r1, #255	; 0xff
 8006b3a:	6878      	ldr	r0, [r7, #4]
 8006b3c:	f003 fb4c 	bl	800a1d8 <VL53L0X_WrByte>
 8006b40:	4603      	mov	r3, r0
 8006b42:	461a      	mov	r2, r3
 8006b44:	7bfb      	ldrb	r3, [r7, #15]
 8006b46:	4313      	orrs	r3, r2
 8006b48:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 8006b4a:	2209      	movs	r2, #9
 8006b4c:	21cc      	movs	r1, #204	; 0xcc
 8006b4e:	6878      	ldr	r0, [r7, #4]
 8006b50:	f003 fb42 	bl	800a1d8 <VL53L0X_WrByte>
 8006b54:	4603      	mov	r3, r0
 8006b56:	461a      	mov	r2, r3
 8006b58:	7bfb      	ldrb	r3, [r7, #15]
 8006b5a:	4313      	orrs	r3, r2
 8006b5c:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8006b5e:	2200      	movs	r2, #0
 8006b60:	21ff      	movs	r1, #255	; 0xff
 8006b62:	6878      	ldr	r0, [r7, #4]
 8006b64:	f003 fb38 	bl	800a1d8 <VL53L0X_WrByte>
 8006b68:	4603      	mov	r3, r0
 8006b6a:	461a      	mov	r2, r3
 8006b6c:	7bfb      	ldrb	r3, [r7, #15]
 8006b6e:	4313      	orrs	r3, r2
 8006b70:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8006b72:	2201      	movs	r2, #1
 8006b74:	21ff      	movs	r1, #255	; 0xff
 8006b76:	6878      	ldr	r0, [r7, #4]
 8006b78:	f003 fb2e 	bl	800a1d8 <VL53L0X_WrByte>
 8006b7c:	4603      	mov	r3, r0
 8006b7e:	461a      	mov	r2, r3
 8006b80:	7bfb      	ldrb	r3, [r7, #15]
 8006b82:	4313      	orrs	r3, r2
 8006b84:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8006b86:	2200      	movs	r2, #0
 8006b88:	2100      	movs	r1, #0
 8006b8a:	6878      	ldr	r0, [r7, #4]
 8006b8c:	f003 fb24 	bl	800a1d8 <VL53L0X_WrByte>
 8006b90:	4603      	mov	r3, r0
 8006b92:	461a      	mov	r2, r3
 8006b94:	7bfb      	ldrb	r3, [r7, #15]
 8006b96:	4313      	orrs	r3, r2
 8006b98:	73fb      	strb	r3, [r7, #15]
 8006b9a:	e058      	b.n	8006c4e <VL53L0X_SetGpioConfig+0x23a>

	} else {

		if (Status == VL53L0X_ERROR_NONE) {
 8006b9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d121      	bne.n	8006be8 <VL53L0X_SetGpioConfig+0x1d4>
			switch (Functionality) {
 8006ba4:	787b      	ldrb	r3, [r7, #1]
 8006ba6:	2b04      	cmp	r3, #4
 8006ba8:	d81b      	bhi.n	8006be2 <VL53L0X_SetGpioConfig+0x1ce>
 8006baa:	a201      	add	r2, pc, #4	; (adr r2, 8006bb0 <VL53L0X_SetGpioConfig+0x19c>)
 8006bac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bb0:	08006bc5 	.word	0x08006bc5
 8006bb4:	08006bcb 	.word	0x08006bcb
 8006bb8:	08006bd1 	.word	0x08006bd1
 8006bbc:	08006bd7 	.word	0x08006bd7
 8006bc0:	08006bdd 	.word	0x08006bdd
			case VL53L0X_GPIOFUNCTIONALITY_OFF:
				data = 0x00;
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	73bb      	strb	r3, [r7, #14]
				break;
 8006bc8:	e00f      	b.n	8006bea <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
				data = 0x01;
 8006bca:	2301      	movs	r3, #1
 8006bcc:	73bb      	strb	r3, [r7, #14]
				break;
 8006bce:	e00c      	b.n	8006bea <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
				data = 0x02;
 8006bd0:	2302      	movs	r3, #2
 8006bd2:	73bb      	strb	r3, [r7, #14]
				break;
 8006bd4:	e009      	b.n	8006bea <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
				data = 0x03;
 8006bd6:	2303      	movs	r3, #3
 8006bd8:	73bb      	strb	r3, [r7, #14]
				break;
 8006bda:	e006      	b.n	8006bea <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
				data = 0x04;
 8006bdc:	2304      	movs	r3, #4
 8006bde:	73bb      	strb	r3, [r7, #14]
				break;
 8006be0:	e003      	b.n	8006bea <VL53L0X_SetGpioConfig+0x1d6>
			default:
				Status =
 8006be2:	23f5      	movs	r3, #245	; 0xf5
 8006be4:	73fb      	strb	r3, [r7, #15]
 8006be6:	e000      	b.n	8006bea <VL53L0X_SetGpioConfig+0x1d6>
				VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
			}
		}
 8006be8:	bf00      	nop

		if (Status == VL53L0X_ERROR_NONE)
 8006bea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d107      	bne.n	8006c02 <VL53L0X_SetGpioConfig+0x1ee>
			Status = VL53L0X_WrByte(Dev,
 8006bf2:	7bbb      	ldrb	r3, [r7, #14]
 8006bf4:	461a      	mov	r2, r3
 8006bf6:	210a      	movs	r1, #10
 8006bf8:	6878      	ldr	r0, [r7, #4]
 8006bfa:	f003 faed 	bl	800a1d8 <VL53L0X_WrByte>
 8006bfe:	4603      	mov	r3, r0
 8006c00:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

		if (Status == VL53L0X_ERROR_NONE) {
 8006c02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d10f      	bne.n	8006c2a <VL53L0X_SetGpioConfig+0x216>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 8006c0a:	7e3b      	ldrb	r3, [r7, #24]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d102      	bne.n	8006c16 <VL53L0X_SetGpioConfig+0x202>
				data = 0;
 8006c10:	2300      	movs	r3, #0
 8006c12:	73bb      	strb	r3, [r7, #14]
 8006c14:	e001      	b.n	8006c1a <VL53L0X_SetGpioConfig+0x206>
			else
				data = (uint8_t)(1 << 4);
 8006c16:	2310      	movs	r3, #16
 8006c18:	73bb      	strb	r3, [r7, #14]

			Status = VL53L0X_UpdateByte(Dev,
 8006c1a:	7bbb      	ldrb	r3, [r7, #14]
 8006c1c:	22ef      	movs	r2, #239	; 0xef
 8006c1e:	2184      	movs	r1, #132	; 0x84
 8006c20:	6878      	ldr	r0, [r7, #4]
 8006c22:	f003 fb27 	bl	800a274 <VL53L0X_UpdateByte>
 8006c26:	4603      	mov	r3, r0
 8006c28:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, 0xEF, data);
		}

		if (Status == VL53L0X_ERROR_NONE)
 8006c2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d103      	bne.n	8006c3a <VL53L0X_SetGpioConfig+0x226>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	787a      	ldrb	r2, [r7, #1]
 8006c36:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
				Pin0GpioFunctionality, Functionality);

		if (Status == VL53L0X_ERROR_NONE)
 8006c3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d105      	bne.n	8006c4e <VL53L0X_SetGpioConfig+0x23a>
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8006c42:	2100      	movs	r1, #0
 8006c44:	6878      	ldr	r0, [r7, #4]
 8006c46:	f000 f83f 	bl	8006cc8 <VL53L0X_ClearInterruptMask>
 8006c4a:	4603      	mov	r3, r0
 8006c4c:	73fb      	strb	r3, [r7, #15]

	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006c4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006c52:	4618      	mov	r0, r3
 8006c54:	3710      	adds	r7, #16
 8006c56:	46bd      	mov	sp, r7
 8006c58:	bd80      	pop	{r7, pc}
 8006c5a:	bf00      	nop

08006c5c <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b086      	sub	sp, #24
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	60f8      	str	r0, [r7, #12]
 8006c64:	607a      	str	r2, [r7, #4]
 8006c66:	603b      	str	r3, [r7, #0]
 8006c68:	460b      	mov	r3, r1
 8006c6a:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	75fb      	strb	r3, [r7, #23]
	uint16_t Threshold16;
	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 8006c70:	f107 0314 	add.w	r3, r7, #20
 8006c74:	461a      	mov	r2, r3
 8006c76:	210e      	movs	r1, #14
 8006c78:	68f8      	ldr	r0, [r7, #12]
 8006c7a:	f003 fb59 	bl	800a330 <VL53L0X_RdWord>
 8006c7e:	4603      	mov	r3, r0
 8006c80:	75fb      	strb	r3, [r7, #23]
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8006c82:	8abb      	ldrh	r3, [r7, #20]
 8006c84:	045b      	lsls	r3, r3, #17
 8006c86:	461a      	mov	r2, r3
 8006c88:	4b0e      	ldr	r3, [pc, #56]	; (8006cc4 <VL53L0X_GetInterruptThresholds+0x68>)
 8006c8a:	4013      	ands	r3, r2
 8006c8c:	687a      	ldr	r2, [r7, #4]
 8006c8e:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 8006c90:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d10f      	bne.n	8006cb8 <VL53L0X_GetInterruptThresholds+0x5c>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 8006c98:	f107 0314 	add.w	r3, r7, #20
 8006c9c:	461a      	mov	r2, r3
 8006c9e:	210c      	movs	r1, #12
 8006ca0:	68f8      	ldr	r0, [r7, #12]
 8006ca2:	f003 fb45 	bl	800a330 <VL53L0X_RdWord>
 8006ca6:	4603      	mov	r3, r0
 8006ca8:	75fb      	strb	r3, [r7, #23]
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8006caa:	8abb      	ldrh	r3, [r7, #20]
 8006cac:	045b      	lsls	r3, r3, #17
 8006cae:	461a      	mov	r2, r3
 8006cb0:	4b04      	ldr	r3, [pc, #16]	; (8006cc4 <VL53L0X_GetInterruptThresholds+0x68>)
 8006cb2:	4013      	ands	r3, r2
		*pThresholdHigh =
 8006cb4:	683a      	ldr	r2, [r7, #0]
 8006cb6:	6013      	str	r3, [r2, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006cb8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	3718      	adds	r7, #24
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	bd80      	pop	{r7, pc}
 8006cc4:	1ffe0000 	.word	0x1ffe0000

08006cc8 <VL53L0X_ClearInterruptMask>:
	return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask)
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b084      	sub	sp, #16
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
 8006cd0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	73fb      	strb	r3, [r7, #15]
	uint8_t LoopCount;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	73bb      	strb	r3, [r7, #14]
	do {
		Status = VL53L0X_WrByte(Dev,
 8006cda:	2201      	movs	r2, #1
 8006cdc:	210b      	movs	r1, #11
 8006cde:	6878      	ldr	r0, [r7, #4]
 8006ce0:	f003 fa7a 	bl	800a1d8 <VL53L0X_WrByte>
 8006ce4:	4603      	mov	r3, r0
 8006ce6:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 8006ce8:	2200      	movs	r2, #0
 8006cea:	210b      	movs	r1, #11
 8006cec:	6878      	ldr	r0, [r7, #4]
 8006cee:	f003 fa73 	bl	800a1d8 <VL53L0X_WrByte>
 8006cf2:	4603      	mov	r3, r0
 8006cf4:	461a      	mov	r2, r3
 8006cf6:	7bfb      	ldrb	r3, [r7, #15]
 8006cf8:	4313      	orrs	r3, r2
 8006cfa:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 8006cfc:	f107 030d 	add.w	r3, r7, #13
 8006d00:	461a      	mov	r2, r3
 8006d02:	2113      	movs	r1, #19
 8006d04:	6878      	ldr	r0, [r7, #4]
 8006d06:	f003 fae9 	bl	800a2dc <VL53L0X_RdByte>
 8006d0a:	4603      	mov	r3, r0
 8006d0c:	461a      	mov	r2, r3
 8006d0e:	7bfb      	ldrb	r3, [r7, #15]
 8006d10:	4313      	orrs	r3, r2
 8006d12:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 8006d14:	7bbb      	ldrb	r3, [r7, #14]
 8006d16:	3301      	adds	r3, #1
 8006d18:	73bb      	strb	r3, [r7, #14]
	} while (((Byte & 0x07) != 0x00)
 8006d1a:	7b7b      	ldrb	r3, [r7, #13]
 8006d1c:	f003 0307 	and.w	r3, r3, #7
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d006      	beq.n	8006d32 <VL53L0X_ClearInterruptMask+0x6a>
			&& (LoopCount < 3)
 8006d24:	7bbb      	ldrb	r3, [r7, #14]
 8006d26:	2b02      	cmp	r3, #2
 8006d28:	d803      	bhi.n	8006d32 <VL53L0X_ClearInterruptMask+0x6a>
			&& (Status == VL53L0X_ERROR_NONE));
 8006d2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d0d3      	beq.n	8006cda <VL53L0X_ClearInterruptMask+0x12>


	if (LoopCount >= 3)
 8006d32:	7bbb      	ldrb	r3, [r7, #14]
 8006d34:	2b02      	cmp	r3, #2
 8006d36:	d901      	bls.n	8006d3c <VL53L0X_ClearInterruptMask+0x74>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 8006d38:	23f4      	movs	r3, #244	; 0xf4
 8006d3a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8006d3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006d40:	4618      	mov	r0, r3
 8006d42:	3710      	adds	r7, #16
 8006d44:	46bd      	mov	sp, r7
 8006d46:	bd80      	pop	{r7, pc}

08006d48 <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b084      	sub	sp, #16
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
 8006d50:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006d52:	2300      	movs	r3, #0
 8006d54:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 8006d56:	f107 030e 	add.w	r3, r7, #14
 8006d5a:	461a      	mov	r2, r3
 8006d5c:	2113      	movs	r1, #19
 8006d5e:	6878      	ldr	r0, [r7, #4]
 8006d60:	f003 fabc 	bl	800a2dc <VL53L0X_RdByte>
 8006d64:	4603      	mov	r3, r0
 8006d66:	73fb      	strb	r3, [r7, #15]
	*pInterruptMaskStatus = Byte & 0x07;
 8006d68:	7bbb      	ldrb	r3, [r7, #14]
 8006d6a:	f003 0207 	and.w	r2, r3, #7
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 8006d72:	7bbb      	ldrb	r3, [r7, #14]
 8006d74:	f003 0318 	and.w	r3, r3, #24
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d001      	beq.n	8006d80 <VL53L0X_GetInterruptMaskStatus+0x38>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 8006d7c:	23fa      	movs	r3, #250	; 0xfa
 8006d7e:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8006d80:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006d84:	4618      	mov	r0, r3
 8006d86:	3710      	adds	r7, #16
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	bd80      	pop	{r7, pc}

08006d8c <VL53L0X_PerformRefSpadManagement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b086      	sub	sp, #24
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	60f8      	str	r0, [r7, #12]
 8006d94:	60b9      	str	r1, [r7, #8]
 8006d96:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006d98:	2300      	movs	r3, #0
 8006d9a:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 8006d9c:	687a      	ldr	r2, [r7, #4]
 8006d9e:	68b9      	ldr	r1, [r7, #8]
 8006da0:	68f8      	ldr	r0, [r7, #12]
 8006da2:	f000 fa03 	bl	80071ac <VL53L0X_perform_ref_spad_management>
 8006da6:	4603      	mov	r3, r0
 8006da8:	75fb      	strb	r3, [r7, #23]
		isApertureSpads);

	LOG_FUNCTION_END(Status);

	return Status;
 8006daa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006dae:	4618      	mov	r0, r3
 8006db0:	3718      	adds	r7, #24
 8006db2:	46bd      	mov	sp, r7
 8006db4:	bd80      	pop	{r7, pc}

08006db6 <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 8006db6:	b580      	push	{r7, lr}
 8006db8:	b084      	sub	sp, #16
 8006dba:	af00      	add	r7, sp, #0
 8006dbc:	6078      	str	r0, [r7, #4]
 8006dbe:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	73fb      	strb	r3, [r7, #15]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 8006dc4:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8006dc8:	81bb      	strh	r3, [r7, #12]
	int16_t cOffsetRange = 4096;
 8006dca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006dce:	817b      	strh	r3, [r7, #10]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 8006dd0:	f107 0308 	add.w	r3, r7, #8
 8006dd4:	461a      	mov	r2, r3
 8006dd6:	2128      	movs	r1, #40	; 0x28
 8006dd8:	6878      	ldr	r0, [r7, #4]
 8006dda:	f003 faa9 	bl	800a330 <VL53L0X_RdWord>
 8006dde:	4603      	mov	r3, r0
 8006de0:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 8006de2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d11e      	bne.n	8006e28 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 8006dea:	893b      	ldrh	r3, [r7, #8]
 8006dec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006df0:	b29b      	uxth	r3, r3
 8006df2:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 8006df4:	893b      	ldrh	r3, [r7, #8]
 8006df6:	461a      	mov	r2, r3
 8006df8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006dfc:	429a      	cmp	r2, r3
 8006dfe:	dd0b      	ble.n	8006e18 <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 8006e00:	893a      	ldrh	r2, [r7, #8]
 8006e02:	897b      	ldrh	r3, [r7, #10]
 8006e04:	1ad3      	subs	r3, r2, r3
 8006e06:	b29b      	uxth	r3, r3
 8006e08:	b21b      	sxth	r3, r3
 8006e0a:	461a      	mov	r2, r3
					* 250;
 8006e0c:	23fa      	movs	r3, #250	; 0xfa
 8006e0e:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	601a      	str	r2, [r3, #0]
 8006e16:	e007      	b.n	8006e28 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 8006e18:	893b      	ldrh	r3, [r7, #8]
 8006e1a:	b21b      	sxth	r3, r3
 8006e1c:	461a      	mov	r2, r3
 8006e1e:	23fa      	movs	r3, #250	; 0xfa
 8006e20:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	601a      	str	r2, [r3, #0]

	}

	return Status;
 8006e28:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	3710      	adds	r7, #16
 8006e30:	46bd      	mov	sp, r7
 8006e32:	bd80      	pop	{r7, pc}

08006e34 <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 8006e34:	b480      	push	{r7}
 8006e36:	b08b      	sub	sp, #44	; 0x2c
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	60f8      	str	r0, [r7, #12]
 8006e3c:	60b9      	str	r1, [r7, #8]
 8006e3e:	607a      	str	r2, [r7, #4]
 8006e40:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 8006e42:	2308      	movs	r3, #8
 8006e44:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
 8006e46:	2300      	movs	r3, #0
 8006e48:	77bb      	strb	r3, [r7, #30]
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	f04f 32ff 	mov.w	r2, #4294967295
 8006e50:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 8006e52:	687a      	ldr	r2, [r7, #4]
 8006e54:	69bb      	ldr	r3, [r7, #24]
 8006e56:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e5a:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	69ba      	ldr	r2, [r7, #24]
 8006e60:	fbb3 f2f2 	udiv	r2, r3, r2
 8006e64:	69b9      	ldr	r1, [r7, #24]
 8006e66:	fb01 f202 	mul.w	r2, r1, r2
 8006e6a:	1a9b      	subs	r3, r3, r2
 8006e6c:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8006e6e:	697b      	ldr	r3, [r7, #20]
 8006e70:	627b      	str	r3, [r7, #36]	; 0x24
 8006e72:	e030      	b.n	8006ed6 <get_next_good_spad+0xa2>
				coarseIndex++) {
		fineIndex = 0;
 8006e74:	2300      	movs	r3, #0
 8006e76:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 8006e78:	68fa      	ldr	r2, [r7, #12]
 8006e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e7c:	4413      	add	r3, r2
 8006e7e:	781b      	ldrb	r3, [r3, #0]
 8006e80:	77fb      	strb	r3, [r7, #31]

		if (coarseIndex == startIndex) {
 8006e82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e84:	697b      	ldr	r3, [r7, #20]
 8006e86:	429a      	cmp	r2, r3
 8006e88:	d11e      	bne.n	8006ec8 <get_next_good_spad+0x94>
			/* locate the bit position of the provided current
			 * spad bit before iterating */
			dataByte >>= fineOffset;
 8006e8a:	7ffa      	ldrb	r2, [r7, #31]
 8006e8c:	693b      	ldr	r3, [r7, #16]
 8006e8e:	fa42 f303 	asr.w	r3, r2, r3
 8006e92:	77fb      	strb	r3, [r7, #31]
			fineIndex = fineOffset;
 8006e94:	693b      	ldr	r3, [r7, #16]
 8006e96:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 8006e98:	e016      	b.n	8006ec8 <get_next_good_spad+0x94>
			if ((dataByte & 0x1) == 1) {
 8006e9a:	7ffb      	ldrb	r3, [r7, #31]
 8006e9c:	f003 0301 	and.w	r3, r3, #1
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d00b      	beq.n	8006ebc <get_next_good_spad+0x88>
				success = 1;
 8006ea4:	2301      	movs	r3, #1
 8006ea6:	77bb      	strb	r3, [r7, #30]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 8006ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eaa:	69ba      	ldr	r2, [r7, #24]
 8006eac:	fb02 f203 	mul.w	r2, r2, r3
 8006eb0:	6a3b      	ldr	r3, [r7, #32]
 8006eb2:	4413      	add	r3, r2
 8006eb4:	461a      	mov	r2, r3
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	601a      	str	r2, [r3, #0]
				break;
 8006eba:	e009      	b.n	8006ed0 <get_next_good_spad+0x9c>
			}
			dataByte >>= 1;
 8006ebc:	7ffb      	ldrb	r3, [r7, #31]
 8006ebe:	085b      	lsrs	r3, r3, #1
 8006ec0:	77fb      	strb	r3, [r7, #31]
			fineIndex++;
 8006ec2:	6a3b      	ldr	r3, [r7, #32]
 8006ec4:	3301      	adds	r3, #1
 8006ec6:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 8006ec8:	6a3a      	ldr	r2, [r7, #32]
 8006eca:	69bb      	ldr	r3, [r7, #24]
 8006ecc:	429a      	cmp	r2, r3
 8006ece:	d3e4      	bcc.n	8006e9a <get_next_good_spad+0x66>
				coarseIndex++) {
 8006ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ed2:	3301      	adds	r3, #1
 8006ed4:	627b      	str	r3, [r7, #36]	; 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8006ed6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ed8:	68bb      	ldr	r3, [r7, #8]
 8006eda:	429a      	cmp	r2, r3
 8006edc:	d202      	bcs.n	8006ee4 <get_next_good_spad+0xb0>
 8006ede:	7fbb      	ldrb	r3, [r7, #30]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d0c7      	beq.n	8006e74 <get_next_good_spad+0x40>
		}
	}
}
 8006ee4:	bf00      	nop
 8006ee6:	372c      	adds	r7, #44	; 0x2c
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eee:	4770      	bx	lr

08006ef0 <is_aperture>:


uint8_t is_aperture(uint32_t spadIndex)
{
 8006ef0:	b480      	push	{r7}
 8006ef2:	b085      	sub	sp, #20
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
 8006ef8:	2301      	movs	r3, #1
 8006efa:	73fb      	strb	r3, [r7, #15]
	quadrant = spadIndex >> 6;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	099b      	lsrs	r3, r3, #6
 8006f00:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 8006f02:	4a07      	ldr	r2, [pc, #28]	; (8006f20 <is_aperture+0x30>)
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d101      	bne.n	8006f12 <is_aperture+0x22>
		isAperture = 0;
 8006f0e:	2300      	movs	r3, #0
 8006f10:	73fb      	strb	r3, [r7, #15]

	return isAperture;
 8006f12:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f14:	4618      	mov	r0, r3
 8006f16:	3714      	adds	r7, #20
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1e:	4770      	bx	lr
 8006f20:	2000032c 	.word	0x2000032c

08006f24 <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 8006f24:	b480      	push	{r7}
 8006f26:	b089      	sub	sp, #36	; 0x24
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	60f8      	str	r0, [r7, #12]
 8006f2c:	60b9      	str	r1, [r7, #8]
 8006f2e:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8006f30:	2300      	movs	r3, #0
 8006f32:	77fb      	strb	r3, [r7, #31]
	uint32_t cSpadsPerByte = 8;
 8006f34:	2308      	movs	r3, #8
 8006f36:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 8006f38:	687a      	ldr	r2, [r7, #4]
 8006f3a:	69bb      	ldr	r3, [r7, #24]
 8006f3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f40:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	69ba      	ldr	r2, [r7, #24]
 8006f46:	fbb3 f2f2 	udiv	r2, r3, r2
 8006f4a:	69b9      	ldr	r1, [r7, #24]
 8006f4c:	fb01 f202 	mul.w	r2, r1, r2
 8006f50:	1a9b      	subs	r3, r3, r2
 8006f52:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 8006f54:	697a      	ldr	r2, [r7, #20]
 8006f56:	68bb      	ldr	r3, [r7, #8]
 8006f58:	429a      	cmp	r2, r3
 8006f5a:	d302      	bcc.n	8006f62 <enable_spad_bit+0x3e>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 8006f5c:	23ce      	movs	r3, #206	; 0xce
 8006f5e:	77fb      	strb	r3, [r7, #31]
 8006f60:	e010      	b.n	8006f84 <enable_spad_bit+0x60>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 8006f62:	68fa      	ldr	r2, [r7, #12]
 8006f64:	697b      	ldr	r3, [r7, #20]
 8006f66:	4413      	add	r3, r2
 8006f68:	781b      	ldrb	r3, [r3, #0]
 8006f6a:	b25a      	sxtb	r2, r3
 8006f6c:	2101      	movs	r1, #1
 8006f6e:	693b      	ldr	r3, [r7, #16]
 8006f70:	fa01 f303 	lsl.w	r3, r1, r3
 8006f74:	b25b      	sxtb	r3, r3
 8006f76:	4313      	orrs	r3, r2
 8006f78:	b259      	sxtb	r1, r3
 8006f7a:	68fa      	ldr	r2, [r7, #12]
 8006f7c:	697b      	ldr	r3, [r7, #20]
 8006f7e:	4413      	add	r3, r2
 8006f80:	b2ca      	uxtb	r2, r1
 8006f82:	701a      	strb	r2, [r3, #0]

	return status;
 8006f84:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8006f88:	4618      	mov	r0, r3
 8006f8a:	3724      	adds	r7, #36	; 0x24
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f92:	4770      	bx	lr

08006f94 <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b084      	sub	sp, #16
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
 8006f9c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 8006f9e:	2306      	movs	r3, #6
 8006fa0:	683a      	ldr	r2, [r7, #0]
 8006fa2:	21b0      	movs	r1, #176	; 0xb0
 8006fa4:	6878      	ldr	r0, [r7, #4]
 8006fa6:	f003 f8bb 	bl	800a120 <VL53L0X_WriteMulti>
 8006faa:	4603      	mov	r3, r0
 8006fac:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 8006fae:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	3710      	adds	r7, #16
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	bd80      	pop	{r7, pc}

08006fba <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 8006fba:	b580      	push	{r7, lr}
 8006fbc:	b084      	sub	sp, #16
 8006fbe:	af00      	add	r7, sp, #0
 8006fc0:	6078      	str	r0, [r7, #4]
 8006fc2:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 8006fc4:	2306      	movs	r3, #6
 8006fc6:	683a      	ldr	r2, [r7, #0]
 8006fc8:	21b0      	movs	r1, #176	; 0xb0
 8006fca:	6878      	ldr	r0, [r7, #4]
 8006fcc:	f003 f8d8 	bl	800a180 <VL53L0X_ReadMulti>
 8006fd0:	4603      	mov	r3, r0
 8006fd2:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
 8006fd4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006fd8:	4618      	mov	r0, r3
 8006fda:	3710      	adds	r7, #16
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	bd80      	pop	{r7, pc}

08006fe0 <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b08c      	sub	sp, #48	; 0x30
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	60f8      	str	r0, [r7, #12]
 8006fe8:	607a      	str	r2, [r7, #4]
 8006fea:	603b      	str	r3, [r7, #0]
 8006fec:	460b      	mov	r3, r1
 8006fee:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 8006ff6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ff8:	61fb      	str	r3, [r7, #28]
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
 8006ffa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ffc:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 8006ffe:	2300      	movs	r3, #0
 8007000:	62bb      	str	r3, [r7, #40]	; 0x28
 8007002:	e02b      	b.n	800705c <enable_ref_spads+0x7c>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 8007004:	f107 031c 	add.w	r3, r7, #28
 8007008:	6a3a      	ldr	r2, [r7, #32]
 800700a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800700c:	6878      	ldr	r0, [r7, #4]
 800700e:	f7ff ff11 	bl	8006e34 <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 8007012:	69fb      	ldr	r3, [r7, #28]
 8007014:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007018:	d103      	bne.n	8007022 <enable_ref_spads+0x42>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 800701a:	23ce      	movs	r3, #206	; 0xce
 800701c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 8007020:	e020      	b.n	8007064 <enable_ref_spads+0x84>
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 8007022:	69fb      	ldr	r3, [r7, #28]
 8007024:	461a      	mov	r2, r3
 8007026:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007028:	4413      	add	r3, r2
 800702a:	4618      	mov	r0, r3
 800702c:	f7ff ff60 	bl	8006ef0 <is_aperture>
 8007030:	4603      	mov	r3, r0
 8007032:	461a      	mov	r2, r3
 8007034:	7afb      	ldrb	r3, [r7, #11]
 8007036:	4293      	cmp	r3, r2
 8007038:	d003      	beq.n	8007042 <enable_ref_spads+0x62>
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 800703a:	23ce      	movs	r3, #206	; 0xce
 800703c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 8007040:	e010      	b.n	8007064 <enable_ref_spads+0x84>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 8007042:	69fb      	ldr	r3, [r7, #28]
 8007044:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 8007046:	6a3a      	ldr	r2, [r7, #32]
 8007048:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800704a:	6838      	ldr	r0, [r7, #0]
 800704c:	f7ff ff6a 	bl	8006f24 <enable_spad_bit>
		currentSpad++;
 8007050:	6a3b      	ldr	r3, [r7, #32]
 8007052:	3301      	adds	r3, #1
 8007054:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 8007056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007058:	3301      	adds	r3, #1
 800705a:	62bb      	str	r3, [r7, #40]	; 0x28
 800705c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800705e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007060:	429a      	cmp	r2, r3
 8007062:	d3cf      	bcc.n	8007004 <enable_ref_spads+0x24>
	}
	*lastSpad = currentSpad;
 8007064:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007066:	6a3a      	ldr	r2, [r7, #32]
 8007068:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 800706a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800706e:	2b00      	cmp	r3, #0
 8007070:	d106      	bne.n	8007080 <enable_ref_spads+0xa0>
		status = set_ref_spad_map(Dev, spadArray);
 8007072:	6839      	ldr	r1, [r7, #0]
 8007074:	68f8      	ldr	r0, [r7, #12]
 8007076:	f7ff ff8d 	bl	8006f94 <set_ref_spad_map>
 800707a:	4603      	mov	r3, r0
 800707c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


	if (status == VL53L0X_ERROR_NONE) {
 8007080:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007084:	2b00      	cmp	r3, #0
 8007086:	d121      	bne.n	80070cc <enable_ref_spads+0xec>
		status = get_ref_spad_map(Dev, checkSpadArray);
 8007088:	f107 0314 	add.w	r3, r7, #20
 800708c:	4619      	mov	r1, r3
 800708e:	68f8      	ldr	r0, [r7, #12]
 8007090:	f7ff ff93 	bl	8006fba <get_ref_spad_map>
 8007094:	4603      	mov	r3, r0
 8007096:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		i = 0;
 800709a:	2300      	movs	r3, #0
 800709c:	627b      	str	r3, [r7, #36]	; 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 800709e:	e011      	b.n	80070c4 <enable_ref_spads+0xe4>
			if (spadArray[i] != checkSpadArray[i]) {
 80070a0:	683a      	ldr	r2, [r7, #0]
 80070a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070a4:	4413      	add	r3, r2
 80070a6:	781a      	ldrb	r2, [r3, #0]
 80070a8:	f107 0114 	add.w	r1, r7, #20
 80070ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ae:	440b      	add	r3, r1
 80070b0:	781b      	ldrb	r3, [r3, #0]
 80070b2:	429a      	cmp	r2, r3
 80070b4:	d003      	beq.n	80070be <enable_ref_spads+0xde>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 80070b6:	23ce      	movs	r3, #206	; 0xce
 80070b8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 80070bc:	e006      	b.n	80070cc <enable_ref_spads+0xec>
			}
			i++;
 80070be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070c0:	3301      	adds	r3, #1
 80070c2:	627b      	str	r3, [r7, #36]	; 0x24
		while (i < size) {
 80070c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070c8:	429a      	cmp	r2, r3
 80070ca:	d3e9      	bcc.n	80070a0 <enable_ref_spads+0xc0>
		}
	}
	return status;
 80070cc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80070d0:	4618      	mov	r0, r3
 80070d2:	3730      	adds	r7, #48	; 0x30
 80070d4:	46bd      	mov	sp, r7
 80070d6:	bd80      	pop	{r7, pc}

080070d8 <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b08a      	sub	sp, #40	; 0x28
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
 80070e0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 80070e2:	2300      	movs	r3, #0
 80070e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 80070e8:	2300      	movs	r3, #0
 80070ea:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 80070f4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
 80070f8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d107      	bne.n	8007110 <perform_ref_signal_measurement+0x38>
		status = VL53L0X_WrByte(Dev,
 8007100:	22c0      	movs	r2, #192	; 0xc0
 8007102:	2101      	movs	r1, #1
 8007104:	6878      	ldr	r0, [r7, #4]
 8007106:	f003 f867 	bl	800a1d8 <VL53L0X_WrByte>
 800710a:	4603      	mov	r3, r0
 800710c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 8007110:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007114:	2b00      	cmp	r3, #0
 8007116:	d108      	bne.n	800712a <perform_ref_signal_measurement+0x52>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 8007118:	f107 0308 	add.w	r3, r7, #8
 800711c:	4619      	mov	r1, r3
 800711e:	6878      	ldr	r0, [r7, #4]
 8007120:	f7ff fc48 	bl	80069b4 <VL53L0X_PerformSingleRangingMeasurement>
 8007124:	4603      	mov	r3, r0
 8007126:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 800712a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800712e:	2b00      	cmp	r3, #0
 8007130:	d107      	bne.n	8007142 <perform_ref_signal_measurement+0x6a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8007132:	2201      	movs	r2, #1
 8007134:	21ff      	movs	r1, #255	; 0xff
 8007136:	6878      	ldr	r0, [r7, #4]
 8007138:	f003 f84e 	bl	800a1d8 <VL53L0X_WrByte>
 800713c:	4603      	mov	r3, r0
 800713e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE)
 8007142:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007146:	2b00      	cmp	r3, #0
 8007148:	d107      	bne.n	800715a <perform_ref_signal_measurement+0x82>
		status = VL53L0X_RdWord(Dev,
 800714a:	683a      	ldr	r2, [r7, #0]
 800714c:	21b6      	movs	r1, #182	; 0xb6
 800714e:	6878      	ldr	r0, [r7, #4]
 8007150:	f003 f8ee 	bl	800a330 <VL53L0X_RdWord>
 8007154:	4603      	mov	r3, r0
 8007156:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 800715a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800715e:	2b00      	cmp	r3, #0
 8007160:	d107      	bne.n	8007172 <perform_ref_signal_measurement+0x9a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8007162:	2200      	movs	r2, #0
 8007164:	21ff      	movs	r1, #255	; 0xff
 8007166:	6878      	ldr	r0, [r7, #4]
 8007168:	f003 f836 	bl	800a1d8 <VL53L0X_WrByte>
 800716c:	4603      	mov	r3, r0
 800716e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE) {
 8007172:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007176:	2b00      	cmp	r3, #0
 8007178:	d112      	bne.n	80071a0 <perform_ref_signal_measurement+0xc8>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800717a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800717e:	461a      	mov	r2, r3
 8007180:	2101      	movs	r1, #1
 8007182:	6878      	ldr	r0, [r7, #4]
 8007184:	f003 f828 	bl	800a1d8 <VL53L0X_WrByte>
 8007188:	4603      	mov	r3, r0
 800718a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 800718e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007192:	2b00      	cmp	r3, #0
 8007194:	d104      	bne.n	80071a0 <perform_ref_signal_measurement+0xc8>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800719c:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
	}

	return status;
 80071a0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80071a4:	4618      	mov	r0, r3
 80071a6:	3728      	adds	r7, #40	; 0x28
 80071a8:	46bd      	mov	sp, r7
 80071aa:	bd80      	pop	{r7, pc}

080071ac <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
 80071ac:	b590      	push	{r4, r7, lr}
 80071ae:	b09d      	sub	sp, #116	; 0x74
 80071b0:	af06      	add	r7, sp, #24
 80071b2:	60f8      	str	r0, [r7, #12]
 80071b4:	60b9      	str	r1, [r7, #8]
 80071b6:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80071b8:	2300      	movs	r3, #0
 80071ba:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 80071be:	23b4      	movs	r3, #180	; 0xb4
 80071c0:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	uint32_t minimumSpadCount = 3;
 80071c4:	2303      	movs	r3, #3
 80071c6:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t maxSpadCount = 44;
 80071c8:	232c      	movs	r3, #44	; 0x2c
 80071ca:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t currentSpadIndex = 0;
 80071cc:	2300      	movs	r3, #0
 80071ce:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t lastSpadIndex = 0;
 80071d0:	2300      	movs	r3, #0
 80071d2:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 80071d4:	2300      	movs	r3, #0
 80071d6:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 80071d8:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80071dc:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 80071de:	2300      	movs	r3, #0
 80071e0:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t index = 0;
 80071e2:	2300      	movs	r3, #0
 80071e4:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t spadArraySize = 6;
 80071e6:	2306      	movs	r3, #6
 80071e8:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t signalRateDiff = 0;
 80071ea:	2300      	movs	r3, #0
 80071ec:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t lastSignalRateDiff = 0;
 80071ee:	2300      	movs	r3, #0
 80071f0:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t complete = 0;
 80071f2:	2300      	movs	r3, #0
 80071f4:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint8_t VhvSettings = 0;
 80071f8:	2300      	movs	r3, #0
 80071fa:	747b      	strb	r3, [r7, #17]
	uint8_t PhaseCal = 0;
 80071fc:	2300      	movs	r3, #0
 80071fe:	743b      	strb	r3, [r7, #16]
	uint32_t refSpadCount_int = 0;
 8007200:	2300      	movs	r3, #0
 8007202:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t	 isApertureSpads_int = 0;
 8007204:	2300      	movs	r3, #0
 8007206:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	f8b3 313c 	ldrh.w	r3, [r3, #316]	; 0x13c
 8007210:	85fb      	strh	r3, [r7, #46]	; 0x2e
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
 8007212:	2300      	movs	r3, #0
 8007214:	64bb      	str	r3, [r7, #72]	; 0x48
 8007216:	e009      	b.n	800722c <VL53L0X_perform_ref_spad_management+0x80>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8007218:	68fa      	ldr	r2, [r7, #12]
 800721a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800721c:	4413      	add	r3, r2
 800721e:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8007222:	2200      	movs	r2, #0
 8007224:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 8007226:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007228:	3301      	adds	r3, #1
 800722a:	64bb      	str	r3, [r7, #72]	; 0x48
 800722c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800722e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007230:	429a      	cmp	r2, r3
 8007232:	d3f1      	bcc.n	8007218 <VL53L0X_perform_ref_spad_management+0x6c>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8007234:	2201      	movs	r2, #1
 8007236:	21ff      	movs	r1, #255	; 0xff
 8007238:	68f8      	ldr	r0, [r7, #12]
 800723a:	f002 ffcd 	bl	800a1d8 <VL53L0X_WrByte>
 800723e:	4603      	mov	r3, r0
 8007240:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8007244:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007248:	2b00      	cmp	r3, #0
 800724a:	d107      	bne.n	800725c <VL53L0X_perform_ref_spad_management+0xb0>
		Status = VL53L0X_WrByte(Dev,
 800724c:	2200      	movs	r2, #0
 800724e:	214f      	movs	r1, #79	; 0x4f
 8007250:	68f8      	ldr	r0, [r7, #12]
 8007252:	f002 ffc1 	bl	800a1d8 <VL53L0X_WrByte>
 8007256:	4603      	mov	r3, r0
 8007258:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 800725c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007260:	2b00      	cmp	r3, #0
 8007262:	d107      	bne.n	8007274 <VL53L0X_perform_ref_spad_management+0xc8>
		Status = VL53L0X_WrByte(Dev,
 8007264:	222c      	movs	r2, #44	; 0x2c
 8007266:	214e      	movs	r1, #78	; 0x4e
 8007268:	68f8      	ldr	r0, [r7, #12]
 800726a:	f002 ffb5 	bl	800a1d8 <VL53L0X_WrByte>
 800726e:	4603      	mov	r3, r0
 8007270:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8007274:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007278:	2b00      	cmp	r3, #0
 800727a:	d107      	bne.n	800728c <VL53L0X_perform_ref_spad_management+0xe0>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800727c:	2200      	movs	r2, #0
 800727e:	21ff      	movs	r1, #255	; 0xff
 8007280:	68f8      	ldr	r0, [r7, #12]
 8007282:	f002 ffa9 	bl	800a1d8 <VL53L0X_WrByte>
 8007286:	4603      	mov	r3, r0
 8007288:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 800728c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007290:	2b00      	cmp	r3, #0
 8007292:	d109      	bne.n	80072a8 <VL53L0X_perform_ref_spad_management+0xfc>
		Status = VL53L0X_WrByte(Dev,
 8007294:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8007298:	461a      	mov	r2, r3
 800729a:	21b6      	movs	r1, #182	; 0xb6
 800729c:	68f8      	ldr	r0, [r7, #12]
 800729e:	f002 ff9b 	bl	800a1d8 <VL53L0X_WrByte>
 80072a2:	4603      	mov	r3, r0
 80072a4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
 80072a8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d107      	bne.n	80072c0 <VL53L0X_perform_ref_spad_management+0x114>
		Status = VL53L0X_WrByte(Dev,
 80072b0:	2200      	movs	r2, #0
 80072b2:	2180      	movs	r1, #128	; 0x80
 80072b4:	68f8      	ldr	r0, [r7, #12]
 80072b6:	f002 ff8f 	bl	800a1d8 <VL53L0X_WrByte>
 80072ba:	4603      	mov	r3, r0
 80072bc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
 80072c0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d10a      	bne.n	80072de <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 80072c8:	f107 0210 	add.w	r2, r7, #16
 80072cc:	f107 0111 	add.w	r1, r7, #17
 80072d0:	2300      	movs	r3, #0
 80072d2:	68f8      	ldr	r0, [r7, #12]
 80072d4:	f000 fbbb 	bl	8007a4e <VL53L0X_perform_ref_calibration>
 80072d8:	4603      	mov	r3, r0
 80072da:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
 80072de:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d121      	bne.n	800732a <VL53L0X_perform_ref_spad_management+0x17e>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 80072e6:	2300      	movs	r3, #0
 80072e8:	653b      	str	r3, [r7, #80]	; 0x50
		lastSpadIndex = currentSpadIndex;
 80072ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80072ec:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 80072ee:	2300      	movs	r3, #0
 80072f0:	64fb      	str	r3, [r7, #76]	; 0x4c
		Status = enable_ref_spads(Dev,
 80072f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80072f4:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	f503 7492 	add.w	r4, r3, #292	; 0x124
		Status = enable_ref_spads(Dev,
 8007302:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8007306:	f107 0218 	add.w	r2, r7, #24
 800730a:	9204      	str	r2, [sp, #16]
 800730c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800730e:	9203      	str	r2, [sp, #12]
 8007310:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007312:	9202      	str	r2, [sp, #8]
 8007314:	9301      	str	r3, [sp, #4]
 8007316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007318:	9300      	str	r3, [sp, #0]
 800731a:	4623      	mov	r3, r4
 800731c:	4602      	mov	r2, r0
 800731e:	68f8      	ldr	r0, [r7, #12]
 8007320:	f7ff fe5e 	bl	8006fe0 <enable_ref_spads>
 8007324:	4603      	mov	r3, r0
 8007326:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800732a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800732e:	2b00      	cmp	r3, #0
 8007330:	d174      	bne.n	800741c <VL53L0X_perform_ref_spad_management+0x270>
		currentSpadIndex = lastSpadIndex;
 8007332:	69bb      	ldr	r3, [r7, #24]
 8007334:	653b      	str	r3, [r7, #80]	; 0x50

		Status = perform_ref_signal_measurement(Dev,
 8007336:	f107 0312 	add.w	r3, r7, #18
 800733a:	4619      	mov	r1, r3
 800733c:	68f8      	ldr	r0, [r7, #12]
 800733e:	f7ff fecb 	bl	80070d8 <perform_ref_signal_measurement>
 8007342:	4603      	mov	r3, r0
 8007344:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 8007348:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800734c:	2b00      	cmp	r3, #0
 800734e:	d161      	bne.n	8007414 <VL53L0X_perform_ref_spad_management+0x268>
			(peakSignalRateRef > targetRefRate)) {
 8007350:	8a7b      	ldrh	r3, [r7, #18]
		if ((Status == VL53L0X_ERROR_NONE) &&
 8007352:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007354:	429a      	cmp	r2, r3
 8007356:	d25d      	bcs.n	8007414 <VL53L0X_perform_ref_spad_management+0x268>
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs */

			for (index = 0; index < spadArraySize; index++)
 8007358:	2300      	movs	r3, #0
 800735a:	64bb      	str	r3, [r7, #72]	; 0x48
 800735c:	e009      	b.n	8007372 <VL53L0X_perform_ref_spad_management+0x1c6>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800735e:	68fa      	ldr	r2, [r7, #12]
 8007360:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007362:	4413      	add	r3, r2
 8007364:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8007368:	2200      	movs	r2, #0
 800736a:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 800736c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800736e:	3301      	adds	r3, #1
 8007370:	64bb      	str	r3, [r7, #72]	; 0x48
 8007372:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007376:	429a      	cmp	r2, r3
 8007378:	d3f1      	bcc.n	800735e <VL53L0X_perform_ref_spad_management+0x1b2>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
 800737a:	e002      	b.n	8007382 <VL53L0X_perform_ref_spad_management+0x1d6>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 800737c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800737e:	3301      	adds	r3, #1
 8007380:	653b      	str	r3, [r7, #80]	; 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 8007382:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 8007386:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007388:	4413      	add	r3, r2
 800738a:	4618      	mov	r0, r3
 800738c:	f7ff fdb0 	bl	8006ef0 <is_aperture>
 8007390:	4603      	mov	r3, r0
 8007392:	2b00      	cmp	r3, #0
 8007394:	d103      	bne.n	800739e <VL53L0X_perform_ref_spad_management+0x1f2>
				== 0) && (currentSpadIndex < maxSpadCount)) {
 8007396:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800739a:	429a      	cmp	r2, r3
 800739c:	d3ee      	bcc.n	800737c <VL53L0X_perform_ref_spad_management+0x1d0>
			}

			needAptSpads = 1;
 800739e:	2301      	movs	r3, #1
 80073a0:	64fb      	str	r3, [r7, #76]	; 0x4c

			Status = enable_ref_spads(Dev,
 80073a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073a4:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	f503 7492 	add.w	r4, r3, #292	; 0x124
			Status = enable_ref_spads(Dev,
 80073b2:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80073b6:	f107 0218 	add.w	r2, r7, #24
 80073ba:	9204      	str	r2, [sp, #16]
 80073bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80073be:	9203      	str	r2, [sp, #12]
 80073c0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80073c2:	9202      	str	r2, [sp, #8]
 80073c4:	9301      	str	r3, [sp, #4]
 80073c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073c8:	9300      	str	r3, [sp, #0]
 80073ca:	4623      	mov	r3, r4
 80073cc:	4602      	mov	r2, r0
 80073ce:	68f8      	ldr	r0, [r7, #12]
 80073d0:	f7ff fe06 	bl	8006fe0 <enable_ref_spads>
 80073d4:	4603      	mov	r3, r0
 80073d6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 80073da:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d11b      	bne.n	800741a <VL53L0X_perform_ref_spad_management+0x26e>
				currentSpadIndex = lastSpadIndex;
 80073e2:	69bb      	ldr	r3, [r7, #24]
 80073e4:	653b      	str	r3, [r7, #80]	; 0x50
				Status = perform_ref_signal_measurement(Dev,
 80073e6:	f107 0312 	add.w	r3, r7, #18
 80073ea:	4619      	mov	r1, r3
 80073ec:	68f8      	ldr	r0, [r7, #12]
 80073ee:	f7ff fe73 	bl	80070d8 <perform_ref_signal_measurement>
 80073f2:	4603      	mov	r3, r0
 80073f4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 80073f8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d10c      	bne.n	800741a <VL53L0X_perform_ref_spad_management+0x26e>
					(peakSignalRateRef > targetRefRate)) {
 8007400:	8a7b      	ldrh	r3, [r7, #18]
				if ((Status == VL53L0X_ERROR_NONE) &&
 8007402:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007404:	429a      	cmp	r2, r3
 8007406:	d208      	bcs.n	800741a <VL53L0X_perform_ref_spad_management+0x26e>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
 8007408:	2301      	movs	r3, #1
 800740a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					refSpadCount_int = minimumSpadCount;
 800740e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007410:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 8007412:	e002      	b.n	800741a <VL53L0X_perform_ref_spad_management+0x26e>
				}
			}
		} else {
			needAptSpads = 0;
 8007414:	2300      	movs	r3, #0
 8007416:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007418:	e000      	b.n	800741c <VL53L0X_perform_ref_spad_management+0x270>
			if (Status == VL53L0X_ERROR_NONE) {
 800741a:	bf00      	nop
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 800741c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007420:	2b00      	cmp	r3, #0
 8007422:	f040 80af 	bne.w	8007584 <VL53L0X_perform_ref_spad_management+0x3d8>
		(peakSignalRateRef < targetRefRate)) {
 8007426:	8a7b      	ldrh	r3, [r7, #18]
	if ((Status == VL53L0X_ERROR_NONE) &&
 8007428:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800742a:	429a      	cmp	r2, r3
 800742c:	f240 80aa 	bls.w	8007584 <VL53L0X_perform_ref_spad_management+0x3d8>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
 8007430:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007432:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		refSpadCount_int	= minimumSpadCount;
 8007436:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007438:	63fb      	str	r3, [r7, #60]	; 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	f503 7192 	add.w	r1, r3, #292	; 0x124
 8007440:	f107 031c 	add.w	r3, r7, #28
 8007444:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007446:	4618      	mov	r0, r3
 8007448:	f003 f820 	bl	800a48c <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 800744c:	8a7b      	ldrh	r3, [r7, #18]
 800744e:	461a      	mov	r2, r3
 8007450:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007452:	1ad3      	subs	r3, r2, r3
 8007454:	2b00      	cmp	r3, #0
 8007456:	bfb8      	it	lt
 8007458:	425b      	neglt	r3, r3
 800745a:	647b      	str	r3, [r7, #68]	; 0x44
			targetRefRate);
		complete = 0;
 800745c:	2300      	movs	r3, #0
 800745e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

		while (!complete) {
 8007462:	e086      	b.n	8007572 <VL53L0X_perform_ref_spad_management+0x3c6>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	f503 7095 	add.w	r0, r3, #298	; 0x12a
			get_next_good_spad(
 800746a:	f107 0314 	add.w	r3, r7, #20
 800746e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007470:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007472:	f7ff fcdf 	bl	8006e34 <get_next_good_spad>
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
 8007476:	697b      	ldr	r3, [r7, #20]
 8007478:	f1b3 3fff 	cmp.w	r3, #4294967295
 800747c:	d103      	bne.n	8007486 <VL53L0X_perform_ref_spad_management+0x2da>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 800747e:	23ce      	movs	r3, #206	; 0xce
 8007480:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 8007484:	e07e      	b.n	8007584 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 8007486:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800748a:	697a      	ldr	r2, [r7, #20]
 800748c:	4413      	add	r3, r2
 800748e:	4618      	mov	r0, r3
 8007490:	f7ff fd2e 	bl	8006ef0 <is_aperture>
 8007494:	4603      	mov	r3, r0
 8007496:	461a      	mov	r2, r3
 8007498:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800749a:	4293      	cmp	r3, r2
 800749c:	d003      	beq.n	80074a6 <VL53L0X_perform_ref_spad_management+0x2fa>
					needAptSpads) {
				/* At this point we have enabled the maximum
				 * number of Aperture spads.
				 */
				complete = 1;
 800749e:	2301      	movs	r3, #1
 80074a0:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
				break;
 80074a4:	e06e      	b.n	8007584 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			(refSpadCount_int)++;
 80074a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074a8:	3301      	adds	r3, #1
 80074aa:	63fb      	str	r3, [r7, #60]	; 0x3c

			currentSpadIndex = nextGoodSpad;
 80074ac:	697b      	ldr	r3, [r7, #20]
 80074ae:	653b      	str	r3, [r7, #80]	; 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	f503 7392 	add.w	r3, r3, #292	; 0x124
			Status = enable_spad_bit(
 80074b6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80074b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80074ba:	4618      	mov	r0, r3
 80074bc:	f7ff fd32 	bl	8006f24 <enable_spad_bit>
 80074c0:	4603      	mov	r3, r0
 80074c2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 80074c6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d10c      	bne.n	80074e8 <VL53L0X_perform_ref_spad_management+0x33c>
				currentSpadIndex++;
 80074ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80074d0:	3301      	adds	r3, #1
 80074d2:	653b      	str	r3, [r7, #80]	; 0x50
				/* Proceed to apply the additional spad and
				 * perform measurement. */
				Status = set_ref_spad_map(Dev,
					Dev->Data.SpadData.RefSpadEnables);
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	f503 7392 	add.w	r3, r3, #292	; 0x124
				Status = set_ref_spad_map(Dev,
 80074da:	4619      	mov	r1, r3
 80074dc:	68f8      	ldr	r0, [r7, #12]
 80074de:	f7ff fd59 	bl	8006f94 <set_ref_spad_map>
 80074e2:	4603      	mov	r3, r0
 80074e4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}

			if (Status != VL53L0X_ERROR_NONE)
 80074e8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d146      	bne.n	800757e <VL53L0X_perform_ref_spad_management+0x3d2>
				break;

			Status = perform_ref_signal_measurement(Dev,
 80074f0:	f107 0312 	add.w	r3, r7, #18
 80074f4:	4619      	mov	r1, r3
 80074f6:	68f8      	ldr	r0, [r7, #12]
 80074f8:	f7ff fdee 	bl	80070d8 <perform_ref_signal_measurement>
 80074fc:	4603      	mov	r3, r0
 80074fe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 8007502:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007506:	2b00      	cmp	r3, #0
 8007508:	d13b      	bne.n	8007582 <VL53L0X_perform_ref_spad_management+0x3d6>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 800750a:	8a7b      	ldrh	r3, [r7, #18]
 800750c:	461a      	mov	r2, r3
 800750e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007510:	1ad3      	subs	r3, r2, r3
 8007512:	2b00      	cmp	r3, #0
 8007514:	bfb8      	it	lt
 8007516:	425b      	neglt	r3, r3
 8007518:	627b      	str	r3, [r7, #36]	; 0x24

			if (peakSignalRateRef > targetRefRate) {
 800751a:	8a7b      	ldrh	r3, [r7, #18]
 800751c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800751e:	429a      	cmp	r2, r3
 8007520:	d21c      	bcs.n	800755c <VL53L0X_perform_ref_spad_management+0x3b0>
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
 8007522:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007524:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007526:	429a      	cmp	r2, r3
 8007528:	d914      	bls.n	8007554 <VL53L0X_perform_ref_spad_management+0x3a8>
					/* Previous spad map produced a closer
					 * measurement, so choose this. */
					Status = set_ref_spad_map(Dev,
 800752a:	f107 031c 	add.w	r3, r7, #28
 800752e:	4619      	mov	r1, r3
 8007530:	68f8      	ldr	r0, [r7, #12]
 8007532:	f7ff fd2f 	bl	8006f94 <set_ref_spad_map>
 8007536:	4603      	mov	r3, r0
 8007538:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	f503 7392 	add.w	r3, r3, #292	; 0x124
					memcpy(
 8007542:	f107 011c 	add.w	r1, r7, #28
 8007546:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007548:	4618      	mov	r0, r3
 800754a:	f002 ff9f 	bl	800a48c <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 800754e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007550:	3b01      	subs	r3, #1
 8007552:	63fb      	str	r3, [r7, #60]	; 0x3c
				}
				complete = 1;
 8007554:	2301      	movs	r3, #1
 8007556:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800755a:	e00a      	b.n	8007572 <VL53L0X_perform_ref_spad_management+0x3c6>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 800755c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800755e:	647b      	str	r3, [r7, #68]	; 0x44
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	f503 7192 	add.w	r1, r3, #292	; 0x124
				memcpy(lastSpadArray,
 8007566:	f107 031c 	add.w	r3, r7, #28
 800756a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800756c:	4618      	mov	r0, r3
 800756e:	f002 ff8d 	bl	800a48c <memcpy>
		while (!complete) {
 8007572:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007576:	2b00      	cmp	r3, #0
 8007578:	f43f af74 	beq.w	8007464 <VL53L0X_perform_ref_spad_management+0x2b8>
 800757c:	e002      	b.n	8007584 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 800757e:	bf00      	nop
 8007580:	e000      	b.n	8007584 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 8007582:	bf00      	nop
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007584:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007588:	2b00      	cmp	r3, #0
 800758a:	d115      	bne.n	80075b8 <VL53L0X_perform_ref_spad_management+0x40c>
		*refSpadCount = refSpadCount_int;
 800758c:	68bb      	ldr	r3, [r7, #8]
 800758e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007590:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8007598:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	2201      	movs	r2, #1
 800759e:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80075a2:	68bb      	ldr	r3, [r7, #8]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	b2da      	uxtb	r2, r3
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	781a      	ldrb	r2, [r3, #0]
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
 80075b8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 80075bc:	4618      	mov	r0, r3
 80075be:	375c      	adds	r7, #92	; 0x5c
 80075c0:	46bd      	mov	sp, r7
 80075c2:	bd90      	pop	{r4, r7, pc}

080075c4 <VL53L0X_set_reference_spads>:

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 80075c4:	b590      	push	{r4, r7, lr}
 80075c6:	b093      	sub	sp, #76	; 0x4c
 80075c8:	af06      	add	r7, sp, #24
 80075ca:	60f8      	str	r0, [r7, #12]
 80075cc:	60b9      	str	r1, [r7, #8]
 80075ce:	4613      	mov	r3, r2
 80075d0:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80075d2:	2300      	movs	r3, #0
 80075d4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t currentSpadIndex = 0;
 80075d8:	2300      	movs	r3, #0
 80075da:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t startSelect = 0xB4;
 80075dc:	23b4      	movs	r3, #180	; 0xb4
 80075de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t spadArraySize = 6;
 80075e2:	2306      	movs	r3, #6
 80075e4:	61fb      	str	r3, [r7, #28]
	uint32_t maxSpadCount = 44;
 80075e6:	232c      	movs	r3, #44	; 0x2c
 80075e8:	61bb      	str	r3, [r7, #24]
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80075ea:	2201      	movs	r2, #1
 80075ec:	21ff      	movs	r1, #255	; 0xff
 80075ee:	68f8      	ldr	r0, [r7, #12]
 80075f0:	f002 fdf2 	bl	800a1d8 <VL53L0X_WrByte>
 80075f4:	4603      	mov	r3, r0
 80075f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 80075fa:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d107      	bne.n	8007612 <VL53L0X_set_reference_spads+0x4e>
		Status = VL53L0X_WrByte(Dev,
 8007602:	2200      	movs	r2, #0
 8007604:	214f      	movs	r1, #79	; 0x4f
 8007606:	68f8      	ldr	r0, [r7, #12]
 8007608:	f002 fde6 	bl	800a1d8 <VL53L0X_WrByte>
 800760c:	4603      	mov	r3, r0
 800760e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8007612:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007616:	2b00      	cmp	r3, #0
 8007618:	d107      	bne.n	800762a <VL53L0X_set_reference_spads+0x66>
		Status = VL53L0X_WrByte(Dev,
 800761a:	222c      	movs	r2, #44	; 0x2c
 800761c:	214e      	movs	r1, #78	; 0x4e
 800761e:	68f8      	ldr	r0, [r7, #12]
 8007620:	f002 fdda 	bl	800a1d8 <VL53L0X_WrByte>
 8007624:	4603      	mov	r3, r0
 8007626:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 800762a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800762e:	2b00      	cmp	r3, #0
 8007630:	d107      	bne.n	8007642 <VL53L0X_set_reference_spads+0x7e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8007632:	2200      	movs	r2, #0
 8007634:	21ff      	movs	r1, #255	; 0xff
 8007636:	68f8      	ldr	r0, [r7, #12]
 8007638:	f002 fdce 	bl	800a1d8 <VL53L0X_WrByte>
 800763c:	4603      	mov	r3, r0
 800763e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 8007642:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007646:	2b00      	cmp	r3, #0
 8007648:	d109      	bne.n	800765e <VL53L0X_set_reference_spads+0x9a>
		Status = VL53L0X_WrByte(Dev,
 800764a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800764e:	461a      	mov	r2, r3
 8007650:	21b6      	movs	r1, #182	; 0xb6
 8007652:	68f8      	ldr	r0, [r7, #12]
 8007654:	f002 fdc0 	bl	800a1d8 <VL53L0X_WrByte>
 8007658:	4603      	mov	r3, r0
 800765a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
 800765e:	2300      	movs	r3, #0
 8007660:	627b      	str	r3, [r7, #36]	; 0x24
 8007662:	e009      	b.n	8007678 <VL53L0X_set_reference_spads+0xb4>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8007664:	68fa      	ldr	r2, [r7, #12]
 8007666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007668:	4413      	add	r3, r2
 800766a:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800766e:	2200      	movs	r2, #0
 8007670:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 8007672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007674:	3301      	adds	r3, #1
 8007676:	627b      	str	r3, [r7, #36]	; 0x24
 8007678:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800767a:	69fb      	ldr	r3, [r7, #28]
 800767c:	429a      	cmp	r2, r3
 800767e:	d3f1      	bcc.n	8007664 <VL53L0X_set_reference_spads+0xa0>

	if (isApertureSpads) {
 8007680:	79fb      	ldrb	r3, [r7, #7]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d011      	beq.n	80076aa <VL53L0X_set_reference_spads+0xe6>
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 8007686:	e002      	b.n	800768e <VL53L0X_set_reference_spads+0xca>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
 8007688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800768a:	3301      	adds	r3, #1
 800768c:	62bb      	str	r3, [r7, #40]	; 0x28
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 800768e:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8007692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007694:	4413      	add	r3, r2
 8007696:	4618      	mov	r0, r3
 8007698:	f7ff fc2a 	bl	8006ef0 <is_aperture>
 800769c:	4603      	mov	r3, r0
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d103      	bne.n	80076aa <VL53L0X_set_reference_spads+0xe6>
 80076a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80076a4:	69bb      	ldr	r3, [r7, #24]
 80076a6:	429a      	cmp	r2, r3
 80076a8:	d3ee      	bcc.n	8007688 <VL53L0X_set_reference_spads+0xc4>
		}
	}
	Status = enable_ref_spads(Dev,
				isApertureSpads,
				Dev->Data.SpadData.RefGoodSpadMap,
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	f503 7095 	add.w	r0, r3, #298	; 0x12a
				Dev->Data.SpadData.RefSpadEnables,
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	f503 7492 	add.w	r4, r3, #292	; 0x124
	Status = enable_ref_spads(Dev,
 80076b6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80076ba:	79f9      	ldrb	r1, [r7, #7]
 80076bc:	f107 0214 	add.w	r2, r7, #20
 80076c0:	9204      	str	r2, [sp, #16]
 80076c2:	68ba      	ldr	r2, [r7, #8]
 80076c4:	9203      	str	r2, [sp, #12]
 80076c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80076c8:	9202      	str	r2, [sp, #8]
 80076ca:	9301      	str	r3, [sp, #4]
 80076cc:	69fb      	ldr	r3, [r7, #28]
 80076ce:	9300      	str	r3, [sp, #0]
 80076d0:	4623      	mov	r3, r4
 80076d2:	4602      	mov	r2, r0
 80076d4:	68f8      	ldr	r0, [r7, #12]
 80076d6:	f7ff fc83 	bl	8006fe0 <enable_ref_spads>
 80076da:	4603      	mov	r3, r0
 80076dc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 80076e0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d10c      	bne.n	8007702 <VL53L0X_set_reference_spads+0x13e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	2201      	movs	r2, #1
 80076ec:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80076f0:	68bb      	ldr	r3, [r7, #8]
 80076f2:	b2da      	uxtb	r2, r3
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	79fa      	ldrb	r2, [r7, #7]
 80076fe:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
 8007702:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8007706:	4618      	mov	r0, r3
 8007708:	3734      	adds	r7, #52	; 0x34
 800770a:	46bd      	mov	sp, r7
 800770c:	bd90      	pop	{r4, r7, pc}

0800770e <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 800770e:	b580      	push	{r7, lr}
 8007710:	b084      	sub	sp, #16
 8007712:	af00      	add	r7, sp, #0
 8007714:	6078      	str	r0, [r7, #4]
 8007716:	460b      	mov	r3, r1
 8007718:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800771a:	2300      	movs	r3, #0
 800771c:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800771e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007722:	2b00      	cmp	r3, #0
 8007724:	d10a      	bne.n	800773c <VL53L0X_perform_single_ref_calibration+0x2e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 8007726:	78fb      	ldrb	r3, [r7, #3]
 8007728:	f043 0301 	orr.w	r3, r3, #1
 800772c:	b2db      	uxtb	r3, r3
 800772e:	461a      	mov	r2, r3
 8007730:	2100      	movs	r1, #0
 8007732:	6878      	ldr	r0, [r7, #4]
 8007734:	f002 fd50 	bl	800a1d8 <VL53L0X_WrByte>
 8007738:	4603      	mov	r3, r0
 800773a:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 800773c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d104      	bne.n	800774e <VL53L0X_perform_single_ref_calibration+0x40>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8007744:	6878      	ldr	r0, [r7, #4]
 8007746:	f000 f9bf 	bl	8007ac8 <VL53L0X_measurement_poll_for_completion>
 800774a:	4603      	mov	r3, r0
 800774c:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800774e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d105      	bne.n	8007762 <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8007756:	2100      	movs	r1, #0
 8007758:	6878      	ldr	r0, [r7, #4]
 800775a:	f7ff fab5 	bl	8006cc8 <VL53L0X_ClearInterruptMask>
 800775e:	4603      	mov	r3, r0
 8007760:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8007762:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007766:	2b00      	cmp	r3, #0
 8007768:	d106      	bne.n	8007778 <VL53L0X_perform_single_ref_calibration+0x6a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 800776a:	2200      	movs	r2, #0
 800776c:	2100      	movs	r1, #0
 800776e:	6878      	ldr	r0, [r7, #4]
 8007770:	f002 fd32 	bl	800a1d8 <VL53L0X_WrByte>
 8007774:	4603      	mov	r3, r0
 8007776:	73fb      	strb	r3, [r7, #15]

	return Status;
 8007778:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800777c:	4618      	mov	r0, r3
 800777e:	3710      	adds	r7, #16
 8007780:	46bd      	mov	sp, r7
 8007782:	bd80      	pop	{r7, pc}

08007784 <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 8007784:	b580      	push	{r7, lr}
 8007786:	b084      	sub	sp, #16
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
 800778c:	4608      	mov	r0, r1
 800778e:	4611      	mov	r1, r2
 8007790:	461a      	mov	r2, r3
 8007792:	4603      	mov	r3, r0
 8007794:	70fb      	strb	r3, [r7, #3]
 8007796:	460b      	mov	r3, r1
 8007798:	70bb      	strb	r3, [r7, #2]
 800779a:	4613      	mov	r3, r2
 800779c:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800779e:	2300      	movs	r3, #0
 80077a0:	73fb      	strb	r3, [r7, #15]
	uint8_t PhaseCalint = 0;
 80077a2:	2300      	movs	r3, #0
 80077a4:	73bb      	strb	r3, [r7, #14]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80077a6:	2201      	movs	r2, #1
 80077a8:	21ff      	movs	r1, #255	; 0xff
 80077aa:	6878      	ldr	r0, [r7, #4]
 80077ac:	f002 fd14 	bl	800a1d8 <VL53L0X_WrByte>
 80077b0:	4603      	mov	r3, r0
 80077b2:	461a      	mov	r2, r3
 80077b4:	7bfb      	ldrb	r3, [r7, #15]
 80077b6:	4313      	orrs	r3, r2
 80077b8:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80077ba:	2200      	movs	r2, #0
 80077bc:	2100      	movs	r1, #0
 80077be:	6878      	ldr	r0, [r7, #4]
 80077c0:	f002 fd0a 	bl	800a1d8 <VL53L0X_WrByte>
 80077c4:	4603      	mov	r3, r0
 80077c6:	461a      	mov	r2, r3
 80077c8:	7bfb      	ldrb	r3, [r7, #15]
 80077ca:	4313      	orrs	r3, r2
 80077cc:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80077ce:	2200      	movs	r2, #0
 80077d0:	21ff      	movs	r1, #255	; 0xff
 80077d2:	6878      	ldr	r0, [r7, #4]
 80077d4:	f002 fd00 	bl	800a1d8 <VL53L0X_WrByte>
 80077d8:	4603      	mov	r3, r0
 80077da:	461a      	mov	r2, r3
 80077dc:	7bfb      	ldrb	r3, [r7, #15]
 80077de:	4313      	orrs	r3, r2
 80077e0:	73fb      	strb	r3, [r7, #15]

	if (read_not_write) {
 80077e2:	78fb      	ldrb	r3, [r7, #3]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d01e      	beq.n	8007826 <VL53L0X_ref_calibration_io+0xa2>
		if (vhv_enable)
 80077e8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d009      	beq.n	8007804 <VL53L0X_ref_calibration_io+0x80>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 80077f0:	69ba      	ldr	r2, [r7, #24]
 80077f2:	21cb      	movs	r1, #203	; 0xcb
 80077f4:	6878      	ldr	r0, [r7, #4]
 80077f6:	f002 fd71 	bl	800a2dc <VL53L0X_RdByte>
 80077fa:	4603      	mov	r3, r0
 80077fc:	461a      	mov	r2, r3
 80077fe:	7bfb      	ldrb	r3, [r7, #15]
 8007800:	4313      	orrs	r3, r2
 8007802:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 8007804:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007808:	2b00      	cmp	r3, #0
 800780a:	d02a      	beq.n	8007862 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 800780c:	f107 030e 	add.w	r3, r7, #14
 8007810:	461a      	mov	r2, r3
 8007812:	21ee      	movs	r1, #238	; 0xee
 8007814:	6878      	ldr	r0, [r7, #4]
 8007816:	f002 fd61 	bl	800a2dc <VL53L0X_RdByte>
 800781a:	4603      	mov	r3, r0
 800781c:	461a      	mov	r2, r3
 800781e:	7bfb      	ldrb	r3, [r7, #15]
 8007820:	4313      	orrs	r3, r2
 8007822:	73fb      	strb	r3, [r7, #15]
 8007824:	e01d      	b.n	8007862 <VL53L0X_ref_calibration_io+0xde>
	} else {
		if (vhv_enable)
 8007826:	f897 3020 	ldrb.w	r3, [r7, #32]
 800782a:	2b00      	cmp	r3, #0
 800782c:	d00a      	beq.n	8007844 <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 800782e:	78bb      	ldrb	r3, [r7, #2]
 8007830:	461a      	mov	r2, r3
 8007832:	21cb      	movs	r1, #203	; 0xcb
 8007834:	6878      	ldr	r0, [r7, #4]
 8007836:	f002 fccf 	bl	800a1d8 <VL53L0X_WrByte>
 800783a:	4603      	mov	r3, r0
 800783c:	461a      	mov	r2, r3
 800783e:	7bfb      	ldrb	r3, [r7, #15]
 8007840:	4313      	orrs	r3, r2
 8007842:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 8007844:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007848:	2b00      	cmp	r3, #0
 800784a:	d00a      	beq.n	8007862 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 800784c:	787b      	ldrb	r3, [r7, #1]
 800784e:	2280      	movs	r2, #128	; 0x80
 8007850:	21ee      	movs	r1, #238	; 0xee
 8007852:	6878      	ldr	r0, [r7, #4]
 8007854:	f002 fd0e 	bl	800a274 <VL53L0X_UpdateByte>
 8007858:	4603      	mov	r3, r0
 800785a:	461a      	mov	r2, r3
 800785c:	7bfb      	ldrb	r3, [r7, #15]
 800785e:	4313      	orrs	r3, r2
 8007860:	73fb      	strb	r3, [r7, #15]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8007862:	2201      	movs	r2, #1
 8007864:	21ff      	movs	r1, #255	; 0xff
 8007866:	6878      	ldr	r0, [r7, #4]
 8007868:	f002 fcb6 	bl	800a1d8 <VL53L0X_WrByte>
 800786c:	4603      	mov	r3, r0
 800786e:	461a      	mov	r2, r3
 8007870:	7bfb      	ldrb	r3, [r7, #15]
 8007872:	4313      	orrs	r3, r2
 8007874:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8007876:	2201      	movs	r2, #1
 8007878:	2100      	movs	r1, #0
 800787a:	6878      	ldr	r0, [r7, #4]
 800787c:	f002 fcac 	bl	800a1d8 <VL53L0X_WrByte>
 8007880:	4603      	mov	r3, r0
 8007882:	461a      	mov	r2, r3
 8007884:	7bfb      	ldrb	r3, [r7, #15]
 8007886:	4313      	orrs	r3, r2
 8007888:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800788a:	2200      	movs	r2, #0
 800788c:	21ff      	movs	r1, #255	; 0xff
 800788e:	6878      	ldr	r0, [r7, #4]
 8007890:	f002 fca2 	bl	800a1d8 <VL53L0X_WrByte>
 8007894:	4603      	mov	r3, r0
 8007896:	461a      	mov	r2, r3
 8007898:	7bfb      	ldrb	r3, [r7, #15]
 800789a:	4313      	orrs	r3, r2
 800789c:	73fb      	strb	r3, [r7, #15]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 800789e:	7bbb      	ldrb	r3, [r7, #14]
 80078a0:	f023 0310 	bic.w	r3, r3, #16
 80078a4:	b2da      	uxtb	r2, r3
 80078a6:	69fb      	ldr	r3, [r7, #28]
 80078a8:	701a      	strb	r2, [r3, #0]

	return Status;
 80078aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80078ae:	4618      	mov	r0, r3
 80078b0:	3710      	adds	r7, #16
 80078b2:	46bd      	mov	sp, r7
 80078b4:	bd80      	pop	{r7, pc}

080078b6 <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 80078b6:	b580      	push	{r7, lr}
 80078b8:	b08a      	sub	sp, #40	; 0x28
 80078ba:	af04      	add	r7, sp, #16
 80078bc:	60f8      	str	r0, [r7, #12]
 80078be:	60b9      	str	r1, [r7, #8]
 80078c0:	4611      	mov	r1, r2
 80078c2:	461a      	mov	r2, r3
 80078c4:	460b      	mov	r3, r1
 80078c6:	71fb      	strb	r3, [r7, #7]
 80078c8:	4613      	mov	r3, r2
 80078ca:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80078cc:	2300      	movs	r3, #0
 80078ce:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 80078d0:	2300      	movs	r3, #0
 80078d2:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 80078d4:	2300      	movs	r3, #0
 80078d6:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 80078d8:	2300      	movs	r3, #0
 80078da:	753b      	strb	r3, [r7, #20]
	uint8_t PhaseCalInt = 0;
 80078dc:	2300      	movs	r3, #0
 80078de:	74fb      	strb	r3, [r7, #19]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 80078e0:	79bb      	ldrb	r3, [r7, #6]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d003      	beq.n	80078ee <VL53L0X_perform_vhv_calibration+0x38>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 80078ec:	75bb      	strb	r3, [r7, #22]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 80078ee:	2201      	movs	r2, #1
 80078f0:	2101      	movs	r1, #1
 80078f2:	68f8      	ldr	r0, [r7, #12]
 80078f4:	f002 fc70 	bl	800a1d8 <VL53L0X_WrByte>
 80078f8:	4603      	mov	r3, r0
 80078fa:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 80078fc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d105      	bne.n	8007910 <VL53L0X_perform_vhv_calibration+0x5a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 8007904:	2140      	movs	r1, #64	; 0x40
 8007906:	68f8      	ldr	r0, [r7, #12]
 8007908:	f7ff ff01 	bl	800770e <VL53L0X_perform_single_ref_calibration>
 800790c:	4603      	mov	r3, r0
 800790e:	75fb      	strb	r3, [r7, #23]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8007910:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d115      	bne.n	8007944 <VL53L0X_perform_vhv_calibration+0x8e>
 8007918:	79fb      	ldrb	r3, [r7, #7]
 800791a:	2b01      	cmp	r3, #1
 800791c:	d112      	bne.n	8007944 <VL53L0X_perform_vhv_calibration+0x8e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 800791e:	7d39      	ldrb	r1, [r7, #20]
 8007920:	7d7a      	ldrb	r2, [r7, #21]
 8007922:	2300      	movs	r3, #0
 8007924:	9303      	str	r3, [sp, #12]
 8007926:	2301      	movs	r3, #1
 8007928:	9302      	str	r3, [sp, #8]
 800792a:	f107 0313 	add.w	r3, r7, #19
 800792e:	9301      	str	r3, [sp, #4]
 8007930:	68bb      	ldr	r3, [r7, #8]
 8007932:	9300      	str	r3, [sp, #0]
 8007934:	460b      	mov	r3, r1
 8007936:	2101      	movs	r1, #1
 8007938:	68f8      	ldr	r0, [r7, #12]
 800793a:	f7ff ff23 	bl	8007784 <VL53L0X_ref_calibration_io>
 800793e:	4603      	mov	r3, r0
 8007940:	75fb      	strb	r3, [r7, #23]
 8007942:	e002      	b.n	800794a <VL53L0X_perform_vhv_calibration+0x94>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 8007944:	68bb      	ldr	r3, [r7, #8]
 8007946:	2200      	movs	r2, #0
 8007948:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 800794a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d112      	bne.n	8007978 <VL53L0X_perform_vhv_calibration+0xc2>
 8007952:	79bb      	ldrb	r3, [r7, #6]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d00f      	beq.n	8007978 <VL53L0X_perform_vhv_calibration+0xc2>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8007958:	7dbb      	ldrb	r3, [r7, #22]
 800795a:	461a      	mov	r2, r3
 800795c:	2101      	movs	r1, #1
 800795e:	68f8      	ldr	r0, [r7, #12]
 8007960:	f002 fc3a 	bl	800a1d8 <VL53L0X_WrByte>
 8007964:	4603      	mov	r3, r0
 8007966:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8007968:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d103      	bne.n	8007978 <VL53L0X_perform_vhv_calibration+0xc2>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	7dba      	ldrb	r2, [r7, #22]
 8007974:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8007978:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800797c:	4618      	mov	r0, r3
 800797e:	3718      	adds	r7, #24
 8007980:	46bd      	mov	sp, r7
 8007982:	bd80      	pop	{r7, pc}

08007984 <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8007984:	b580      	push	{r7, lr}
 8007986:	b08a      	sub	sp, #40	; 0x28
 8007988:	af04      	add	r7, sp, #16
 800798a:	60f8      	str	r0, [r7, #12]
 800798c:	60b9      	str	r1, [r7, #8]
 800798e:	4611      	mov	r1, r2
 8007990:	461a      	mov	r2, r3
 8007992:	460b      	mov	r3, r1
 8007994:	71fb      	strb	r3, [r7, #7]
 8007996:	4613      	mov	r3, r2
 8007998:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800799a:	2300      	movs	r3, #0
 800799c:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800799e:	2300      	movs	r3, #0
 80079a0:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 80079a2:	2300      	movs	r3, #0
 80079a4:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 80079a6:	2300      	movs	r3, #0
 80079a8:	753b      	strb	r3, [r7, #20]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 80079aa:	79bb      	ldrb	r3, [r7, #6]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d003      	beq.n	80079b8 <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 80079b6:	75bb      	strb	r3, [r7, #22]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 80079b8:	2202      	movs	r2, #2
 80079ba:	2101      	movs	r1, #1
 80079bc:	68f8      	ldr	r0, [r7, #12]
 80079be:	f002 fc0b 	bl	800a1d8 <VL53L0X_WrByte>
 80079c2:	4603      	mov	r3, r0
 80079c4:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 80079c6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d105      	bne.n	80079da <VL53L0X_perform_phase_calibration+0x56>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 80079ce:	2100      	movs	r1, #0
 80079d0:	68f8      	ldr	r0, [r7, #12]
 80079d2:	f7ff fe9c 	bl	800770e <VL53L0X_perform_single_ref_calibration>
 80079d6:	4603      	mov	r3, r0
 80079d8:	75fb      	strb	r3, [r7, #23]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 80079da:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d115      	bne.n	8007a0e <VL53L0X_perform_phase_calibration+0x8a>
 80079e2:	79fb      	ldrb	r3, [r7, #7]
 80079e4:	2b01      	cmp	r3, #1
 80079e6:	d112      	bne.n	8007a0e <VL53L0X_perform_phase_calibration+0x8a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 80079e8:	7d39      	ldrb	r1, [r7, #20]
 80079ea:	7d7a      	ldrb	r2, [r7, #21]
 80079ec:	2301      	movs	r3, #1
 80079ee:	9303      	str	r3, [sp, #12]
 80079f0:	2300      	movs	r3, #0
 80079f2:	9302      	str	r3, [sp, #8]
 80079f4:	68bb      	ldr	r3, [r7, #8]
 80079f6:	9301      	str	r3, [sp, #4]
 80079f8:	f107 0313 	add.w	r3, r7, #19
 80079fc:	9300      	str	r3, [sp, #0]
 80079fe:	460b      	mov	r3, r1
 8007a00:	2101      	movs	r1, #1
 8007a02:	68f8      	ldr	r0, [r7, #12]
 8007a04:	f7ff febe 	bl	8007784 <VL53L0X_ref_calibration_io>
 8007a08:	4603      	mov	r3, r0
 8007a0a:	75fb      	strb	r3, [r7, #23]
 8007a0c:	e002      	b.n	8007a14 <VL53L0X_perform_phase_calibration+0x90>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 8007a0e:	68bb      	ldr	r3, [r7, #8]
 8007a10:	2200      	movs	r2, #0
 8007a12:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8007a14:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d112      	bne.n	8007a42 <VL53L0X_perform_phase_calibration+0xbe>
 8007a1c:	79bb      	ldrb	r3, [r7, #6]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d00f      	beq.n	8007a42 <VL53L0X_perform_phase_calibration+0xbe>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8007a22:	7dbb      	ldrb	r3, [r7, #22]
 8007a24:	461a      	mov	r2, r3
 8007a26:	2101      	movs	r1, #1
 8007a28:	68f8      	ldr	r0, [r7, #12]
 8007a2a:	f002 fbd5 	bl	800a1d8 <VL53L0X_WrByte>
 8007a2e:	4603      	mov	r3, r0
 8007a30:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8007a32:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d103      	bne.n	8007a42 <VL53L0X_perform_phase_calibration+0xbe>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	7dba      	ldrb	r2, [r7, #22]
 8007a3e:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8007a42:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007a46:	4618      	mov	r0, r3
 8007a48:	3718      	adds	r7, #24
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	bd80      	pop	{r7, pc}

08007a4e <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 8007a4e:	b580      	push	{r7, lr}
 8007a50:	b086      	sub	sp, #24
 8007a52:	af00      	add	r7, sp, #0
 8007a54:	60f8      	str	r0, [r7, #12]
 8007a56:	60b9      	str	r1, [r7, #8]
 8007a58:	607a      	str	r2, [r7, #4]
 8007a5a:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8007a60:	2300      	movs	r3, #0
 8007a62:	75bb      	strb	r3, [r7, #22]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8007a6a:	75bb      	strb	r3, [r7, #22]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
 8007a6c:	78fa      	ldrb	r2, [r7, #3]
 8007a6e:	2300      	movs	r3, #0
 8007a70:	68b9      	ldr	r1, [r7, #8]
 8007a72:	68f8      	ldr	r0, [r7, #12]
 8007a74:	f7ff ff1f 	bl	80078b6 <VL53L0X_perform_vhv_calibration>
 8007a78:	4603      	mov	r3, r0
 8007a7a:	75fb      	strb	r3, [r7, #23]
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 8007a7c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d107      	bne.n	8007a94 <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
 8007a84:	78fa      	ldrb	r2, [r7, #3]
 8007a86:	2300      	movs	r3, #0
 8007a88:	6879      	ldr	r1, [r7, #4]
 8007a8a:	68f8      	ldr	r0, [r7, #12]
 8007a8c:	f7ff ff7a 	bl	8007984 <VL53L0X_perform_phase_calibration>
 8007a90:	4603      	mov	r3, r0
 8007a92:	75fb      	strb	r3, [r7, #23]
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 8007a94:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d10f      	bne.n	8007abc <VL53L0X_perform_ref_calibration+0x6e>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8007a9c:	7dbb      	ldrb	r3, [r7, #22]
 8007a9e:	461a      	mov	r2, r3
 8007aa0:	2101      	movs	r1, #1
 8007aa2:	68f8      	ldr	r0, [r7, #12]
 8007aa4:	f002 fb98 	bl	800a1d8 <VL53L0X_WrByte>
 8007aa8:	4603      	mov	r3, r0
 8007aaa:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8007aac:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d103      	bne.n	8007abc <VL53L0X_perform_ref_calibration+0x6e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	7dba      	ldrb	r2, [r7, #22]
 8007ab8:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8007abc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	3718      	adds	r7, #24
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	bd80      	pop	{r7, pc}

08007ac8 <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b086      	sub	sp, #24
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	75fb      	strb	r3, [r7, #23]
	uint8_t NewDataReady = 0;
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	LoopNb = 0;
 8007ad8:	2300      	movs	r3, #0
 8007ada:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8007adc:	f107 030f 	add.w	r3, r7, #15
 8007ae0:	4619      	mov	r1, r3
 8007ae2:	6878      	ldr	r0, [r7, #4]
 8007ae4:	f7fe fe02 	bl	80066ec <VL53L0X_GetMeasurementDataReady>
 8007ae8:	4603      	mov	r3, r0
 8007aea:	75fb      	strb	r3, [r7, #23]
		if (Status != 0)
 8007aec:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d110      	bne.n	8007b16 <VL53L0X_measurement_poll_for_completion+0x4e>
			break; /* the error is set */

		if (NewDataReady == 1)
 8007af4:	7bfb      	ldrb	r3, [r7, #15]
 8007af6:	2b01      	cmp	r3, #1
 8007af8:	d00f      	beq.n	8007b1a <VL53L0X_measurement_poll_for_completion+0x52>
			break; /* done note that status == 0 */

		LoopNb++;
 8007afa:	693b      	ldr	r3, [r7, #16]
 8007afc:	3301      	adds	r3, #1
 8007afe:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 8007b00:	693b      	ldr	r3, [r7, #16]
 8007b02:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8007b06:	d302      	bcc.n	8007b0e <VL53L0X_measurement_poll_for_completion+0x46>
			Status = VL53L0X_ERROR_TIME_OUT;
 8007b08:	23f9      	movs	r3, #249	; 0xf9
 8007b0a:	75fb      	strb	r3, [r7, #23]
			break;
 8007b0c:	e006      	b.n	8007b1c <VL53L0X_measurement_poll_for_completion+0x54>
		}

		VL53L0X_PollingDelay(Dev);
 8007b0e:	6878      	ldr	r0, [r7, #4]
 8007b10:	f002 fc82 	bl	800a418 <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8007b14:	e7e2      	b.n	8007adc <VL53L0X_measurement_poll_for_completion+0x14>
			break; /* the error is set */
 8007b16:	bf00      	nop
 8007b18:	e000      	b.n	8007b1c <VL53L0X_measurement_poll_for_completion+0x54>
			break; /* done note that status == 0 */
 8007b1a:	bf00      	nop
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
 8007b1c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007b20:	4618      	mov	r0, r3
 8007b22:	3718      	adds	r7, #24
 8007b24:	46bd      	mov	sp, r7
 8007b26:	bd80      	pop	{r7, pc}

08007b28 <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 8007b28:	b480      	push	{r7}
 8007b2a:	b085      	sub	sp, #20
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	4603      	mov	r3, r0
 8007b30:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 8007b32:	2300      	movs	r3, #0
 8007b34:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 8007b36:	79fb      	ldrb	r3, [r7, #7]
 8007b38:	3301      	adds	r3, #1
 8007b3a:	b2db      	uxtb	r3, r3
 8007b3c:	005b      	lsls	r3, r3, #1
 8007b3e:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 8007b40:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b42:	4618      	mov	r0, r3
 8007b44:	3714      	adds	r7, #20
 8007b46:	46bd      	mov	sp, r7
 8007b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4c:	4770      	bx	lr

08007b4e <VL53L0X_encode_vcsel_period>:

uint8_t VL53L0X_encode_vcsel_period(uint8_t vcsel_period_pclks)
{
 8007b4e:	b480      	push	{r7}
 8007b50:	b085      	sub	sp, #20
 8007b52:	af00      	add	r7, sp, #0
 8007b54:	4603      	mov	r3, r0
 8007b56:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real period
	 * in PLL clocks
	 */

	uint8_t vcsel_period_reg = 0;
 8007b58:	2300      	movs	r3, #0
 8007b5a:	73fb      	strb	r3, [r7, #15]

	vcsel_period_reg = (vcsel_period_pclks >> 1) - 1;
 8007b5c:	79fb      	ldrb	r3, [r7, #7]
 8007b5e:	085b      	lsrs	r3, r3, #1
 8007b60:	b2db      	uxtb	r3, r3
 8007b62:	3b01      	subs	r3, #1
 8007b64:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_reg;
 8007b66:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b68:	4618      	mov	r0, r3
 8007b6a:	3714      	adds	r7, #20
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b72:	4770      	bx	lr

08007b74 <VL53L0X_isqrt>:


uint32_t VL53L0X_isqrt(uint32_t num)
{
 8007b74:	b480      	push	{r7}
 8007b76:	b085      	sub	sp, #20
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 8007b80:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007b84:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 8007b86:	e002      	b.n	8007b8e <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 8007b88:	68bb      	ldr	r3, [r7, #8]
 8007b8a:	089b      	lsrs	r3, r3, #2
 8007b8c:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 8007b8e:	68ba      	ldr	r2, [r7, #8]
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	429a      	cmp	r2, r3
 8007b94:	d8f8      	bhi.n	8007b88 <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 8007b96:	e017      	b.n	8007bc8 <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 8007b98:	68fa      	ldr	r2, [r7, #12]
 8007b9a:	68bb      	ldr	r3, [r7, #8]
 8007b9c:	4413      	add	r3, r2
 8007b9e:	687a      	ldr	r2, [r7, #4]
 8007ba0:	429a      	cmp	r2, r3
 8007ba2:	d30b      	bcc.n	8007bbc <VL53L0X_isqrt+0x48>
			num -= res + bit;
 8007ba4:	68fa      	ldr	r2, [r7, #12]
 8007ba6:	68bb      	ldr	r3, [r7, #8]
 8007ba8:	4413      	add	r3, r2
 8007baa:	687a      	ldr	r2, [r7, #4]
 8007bac:	1ad3      	subs	r3, r2, r3
 8007bae:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	085b      	lsrs	r3, r3, #1
 8007bb4:	68ba      	ldr	r2, [r7, #8]
 8007bb6:	4413      	add	r3, r2
 8007bb8:	60fb      	str	r3, [r7, #12]
 8007bba:	e002      	b.n	8007bc2 <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	085b      	lsrs	r3, r3, #1
 8007bc0:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 8007bc2:	68bb      	ldr	r3, [r7, #8]
 8007bc4:	089b      	lsrs	r3, r3, #2
 8007bc6:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 8007bc8:	68bb      	ldr	r3, [r7, #8]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d1e4      	bne.n	8007b98 <VL53L0X_isqrt+0x24>
	}

	return res;
 8007bce:	68fb      	ldr	r3, [r7, #12]
}
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	3714      	adds	r7, #20
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bda:	4770      	bx	lr

08007bdc <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b086      	sub	sp, #24
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007be4:	2300      	movs	r3, #0
 8007be6:	75fb      	strb	r3, [r7, #23]
	uint8_t strobe;
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 8007be8:	2200      	movs	r2, #0
 8007bea:	2183      	movs	r1, #131	; 0x83
 8007bec:	6878      	ldr	r0, [r7, #4]
 8007bee:	f002 faf3 	bl	800a1d8 <VL53L0X_WrByte>
 8007bf2:	4603      	mov	r3, r0
 8007bf4:	461a      	mov	r2, r3
 8007bf6:	7dfb      	ldrb	r3, [r7, #23]
 8007bf8:	4313      	orrs	r3, r2
 8007bfa:	75fb      	strb	r3, [r7, #23]

	/* polling
	 * use timeout to avoid deadlock*/
	if (Status == VL53L0X_ERROR_NONE) {
 8007bfc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d11e      	bne.n	8007c42 <VL53L0X_device_read_strobe+0x66>
		LoopNb = 0;
 8007c04:	2300      	movs	r3, #0
 8007c06:	613b      	str	r3, [r7, #16]
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 8007c08:	f107 030f 	add.w	r3, r7, #15
 8007c0c:	461a      	mov	r2, r3
 8007c0e:	2183      	movs	r1, #131	; 0x83
 8007c10:	6878      	ldr	r0, [r7, #4]
 8007c12:	f002 fb63 	bl	800a2dc <VL53L0X_RdByte>
 8007c16:	4603      	mov	r3, r0
 8007c18:	75fb      	strb	r3, [r7, #23]
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 8007c1a:	7bfb      	ldrb	r3, [r7, #15]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d10a      	bne.n	8007c36 <VL53L0X_device_read_strobe+0x5a>
 8007c20:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d106      	bne.n	8007c36 <VL53L0X_device_read_strobe+0x5a>
					break;

			LoopNb = LoopNb + 1;
 8007c28:	693b      	ldr	r3, [r7, #16]
 8007c2a:	3301      	adds	r3, #1
 8007c2c:	613b      	str	r3, [r7, #16]
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 8007c2e:	693b      	ldr	r3, [r7, #16]
 8007c30:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8007c34:	d3e8      	bcc.n	8007c08 <VL53L0X_device_read_strobe+0x2c>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 8007c36:	693b      	ldr	r3, [r7, #16]
 8007c38:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8007c3c:	d301      	bcc.n	8007c42 <VL53L0X_device_read_strobe+0x66>
			Status = VL53L0X_ERROR_TIME_OUT;
 8007c3e:	23f9      	movs	r3, #249	; 0xf9
 8007c40:	75fb      	strb	r3, [r7, #23]

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 8007c42:	2201      	movs	r2, #1
 8007c44:	2183      	movs	r1, #131	; 0x83
 8007c46:	6878      	ldr	r0, [r7, #4]
 8007c48:	f002 fac6 	bl	800a1d8 <VL53L0X_WrByte>
 8007c4c:	4603      	mov	r3, r0
 8007c4e:	461a      	mov	r2, r3
 8007c50:	7dfb      	ldrb	r3, [r7, #23]
 8007c52:	4313      	orrs	r3, r2
 8007c54:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);
	return Status;
 8007c56:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	3718      	adds	r7, #24
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	bd80      	pop	{r7, pc}

08007c62 <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 8007c62:	b580      	push	{r7, lr}
 8007c64:	b098      	sub	sp, #96	; 0x60
 8007c66:	af00      	add	r7, sp, #0
 8007c68:	6078      	str	r0, [r7, #4]
 8007c6a:	460b      	mov	r3, r1
 8007c6c:	70fb      	strb	r3, [r7, #3]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007c6e:	2300      	movs	r3, #0
 8007c70:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t byte;
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
 8007c74:	2300      	movs	r3, #0
 8007c76:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t ReferenceSpadType = 0;
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	uint32_t PartUIDUpper = 0;
 8007c80:	2300      	movs	r3, #0
 8007c82:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PartUIDLower = 0;
 8007c84:	2300      	movs	r3, #0
 8007c86:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t OffsetFixed1104_mm = 0;
 8007c88:	2300      	movs	r3, #0
 8007c8a:	64bb      	str	r3, [r7, #72]	; 0x48
	int16_t OffsetMicroMeters = 0;
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 8007c92:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8007c96:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t DistMeasFixed1104_400_mm = 0;
 8007c98:	2300      	movs	r3, #0
 8007c9a:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	653b      	str	r3, [r7, #80]	; 0x50
	char ProductId[19];
	char *ProductId_tmp;
	uint8_t ReadDataFromDeviceDone;
	FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	643b      	str	r3, [r7, #64]	; 0x40
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 8007caa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done*/
	if (ReadDataFromDeviceDone != 7) {
 8007cae:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007cb2:	2b07      	cmp	r3, #7
 8007cb4:	f000 8408 	beq.w	80084c8 <VL53L0X_get_info_from_device+0x866>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8007cb8:	2201      	movs	r2, #1
 8007cba:	2180      	movs	r1, #128	; 0x80
 8007cbc:	6878      	ldr	r0, [r7, #4]
 8007cbe:	f002 fa8b 	bl	800a1d8 <VL53L0X_WrByte>
 8007cc2:	4603      	mov	r3, r0
 8007cc4:	461a      	mov	r2, r3
 8007cc6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007cca:	4313      	orrs	r3, r2
 8007ccc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8007cd0:	2201      	movs	r2, #1
 8007cd2:	21ff      	movs	r1, #255	; 0xff
 8007cd4:	6878      	ldr	r0, [r7, #4]
 8007cd6:	f002 fa7f 	bl	800a1d8 <VL53L0X_WrByte>
 8007cda:	4603      	mov	r3, r0
 8007cdc:	461a      	mov	r2, r3
 8007cde:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007ce2:	4313      	orrs	r3, r2
 8007ce4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8007ce8:	2200      	movs	r2, #0
 8007cea:	2100      	movs	r1, #0
 8007cec:	6878      	ldr	r0, [r7, #4]
 8007cee:	f002 fa73 	bl	800a1d8 <VL53L0X_WrByte>
 8007cf2:	4603      	mov	r3, r0
 8007cf4:	461a      	mov	r2, r3
 8007cf6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007cfa:	4313      	orrs	r3, r2
 8007cfc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8007d00:	2206      	movs	r2, #6
 8007d02:	21ff      	movs	r1, #255	; 0xff
 8007d04:	6878      	ldr	r0, [r7, #4]
 8007d06:	f002 fa67 	bl	800a1d8 <VL53L0X_WrByte>
 8007d0a:	4603      	mov	r3, r0
 8007d0c:	461a      	mov	r2, r3
 8007d0e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007d12:	4313      	orrs	r3, r2
 8007d14:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8007d18:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8007d1c:	461a      	mov	r2, r3
 8007d1e:	2183      	movs	r1, #131	; 0x83
 8007d20:	6878      	ldr	r0, [r7, #4]
 8007d22:	f002 fadb 	bl	800a2dc <VL53L0X_RdByte>
 8007d26:	4603      	mov	r3, r0
 8007d28:	461a      	mov	r2, r3
 8007d2a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007d2e:	4313      	orrs	r3, r2
 8007d30:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 8007d34:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007d38:	f043 0304 	orr.w	r3, r3, #4
 8007d3c:	b2db      	uxtb	r3, r3
 8007d3e:	461a      	mov	r2, r3
 8007d40:	2183      	movs	r1, #131	; 0x83
 8007d42:	6878      	ldr	r0, [r7, #4]
 8007d44:	f002 fa48 	bl	800a1d8 <VL53L0X_WrByte>
 8007d48:	4603      	mov	r3, r0
 8007d4a:	461a      	mov	r2, r3
 8007d4c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007d50:	4313      	orrs	r3, r2
 8007d52:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 8007d56:	2207      	movs	r2, #7
 8007d58:	21ff      	movs	r1, #255	; 0xff
 8007d5a:	6878      	ldr	r0, [r7, #4]
 8007d5c:	f002 fa3c 	bl	800a1d8 <VL53L0X_WrByte>
 8007d60:	4603      	mov	r3, r0
 8007d62:	461a      	mov	r2, r3
 8007d64:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007d68:	4313      	orrs	r3, r2
 8007d6a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 8007d6e:	2201      	movs	r2, #1
 8007d70:	2181      	movs	r1, #129	; 0x81
 8007d72:	6878      	ldr	r0, [r7, #4]
 8007d74:	f002 fa30 	bl	800a1d8 <VL53L0X_WrByte>
 8007d78:	4603      	mov	r3, r0
 8007d7a:	461a      	mov	r2, r3
 8007d7c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007d80:	4313      	orrs	r3, r2
 8007d82:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_PollingDelay(Dev);
 8007d86:	6878      	ldr	r0, [r7, #4]
 8007d88:	f002 fb46 	bl	800a418 <VL53L0X_PollingDelay>
 8007d8c:	4603      	mov	r3, r0
 8007d8e:	461a      	mov	r2, r3
 8007d90:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007d94:	4313      	orrs	r3, r2
 8007d96:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8007d9a:	2201      	movs	r2, #1
 8007d9c:	2180      	movs	r1, #128	; 0x80
 8007d9e:	6878      	ldr	r0, [r7, #4]
 8007da0:	f002 fa1a 	bl	800a1d8 <VL53L0X_WrByte>
 8007da4:	4603      	mov	r3, r0
 8007da6:	461a      	mov	r2, r3
 8007da8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007dac:	4313      	orrs	r3, r2
 8007dae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		if (((option & 1) == 1) &&
 8007db2:	78fb      	ldrb	r3, [r7, #3]
 8007db4:	f003 0301 	and.w	r3, r3, #1
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	f000 8098 	beq.w	8007eee <VL53L0X_get_info_from_device+0x28c>
			((ReadDataFromDeviceDone & 1) == 0)) {
 8007dbe:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007dc2:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	f040 8091 	bne.w	8007eee <VL53L0X_get_info_from_device+0x28c>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 8007dcc:	226b      	movs	r2, #107	; 0x6b
 8007dce:	2194      	movs	r1, #148	; 0x94
 8007dd0:	6878      	ldr	r0, [r7, #4]
 8007dd2:	f002 fa01 	bl	800a1d8 <VL53L0X_WrByte>
 8007dd6:	4603      	mov	r3, r0
 8007dd8:	461a      	mov	r2, r3
 8007dda:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007dde:	4313      	orrs	r3, r2
 8007de0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8007de4:	6878      	ldr	r0, [r7, #4]
 8007de6:	f7ff fef9 	bl	8007bdc <VL53L0X_device_read_strobe>
 8007dea:	4603      	mov	r3, r0
 8007dec:	461a      	mov	r2, r3
 8007dee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007df2:	4313      	orrs	r3, r2
 8007df4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8007df8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007dfc:	461a      	mov	r2, r3
 8007dfe:	2190      	movs	r1, #144	; 0x90
 8007e00:	6878      	ldr	r0, [r7, #4]
 8007e02:	f002 facd 	bl	800a3a0 <VL53L0X_RdDWord>
 8007e06:	4603      	mov	r3, r0
 8007e08:	461a      	mov	r2, r3
 8007e0a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007e0e:	4313      	orrs	r3, r2
 8007e10:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 8007e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e16:	0a1b      	lsrs	r3, r3, #8
 8007e18:	b2db      	uxtb	r3, r3
 8007e1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e1e:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 8007e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e24:	0bdb      	lsrs	r3, r3, #15
 8007e26:	b2db      	uxtb	r3, r3
 8007e28:	f003 0301 	and.w	r3, r3, #1
 8007e2c:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 8007e30:	2224      	movs	r2, #36	; 0x24
 8007e32:	2194      	movs	r1, #148	; 0x94
 8007e34:	6878      	ldr	r0, [r7, #4]
 8007e36:	f002 f9cf 	bl	800a1d8 <VL53L0X_WrByte>
 8007e3a:	4603      	mov	r3, r0
 8007e3c:	461a      	mov	r2, r3
 8007e3e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007e42:	4313      	orrs	r3, r2
 8007e44:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8007e48:	6878      	ldr	r0, [r7, #4]
 8007e4a:	f7ff fec7 	bl	8007bdc <VL53L0X_device_read_strobe>
 8007e4e:	4603      	mov	r3, r0
 8007e50:	461a      	mov	r2, r3
 8007e52:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007e56:	4313      	orrs	r3, r2
 8007e58:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8007e5c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007e60:	461a      	mov	r2, r3
 8007e62:	2190      	movs	r1, #144	; 0x90
 8007e64:	6878      	ldr	r0, [r7, #4]
 8007e66:	f002 fa9b 	bl	800a3a0 <VL53L0X_RdDWord>
 8007e6a:	4603      	mov	r3, r0
 8007e6c:	461a      	mov	r2, r3
 8007e6e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007e72:	4313      	orrs	r3, r2
 8007e74:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 8007e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e7a:	0e1b      	lsrs	r3, r3, #24
 8007e7c:	b2db      	uxtb	r3, r3
 8007e7e:	723b      	strb	r3, [r7, #8]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 8007e80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e82:	0c1b      	lsrs	r3, r3, #16
 8007e84:	b2db      	uxtb	r3, r3
 8007e86:	727b      	strb	r3, [r7, #9]
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 8007e88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e8a:	0a1b      	lsrs	r3, r3, #8
 8007e8c:	b2db      	uxtb	r3, r3
 8007e8e:	72bb      	strb	r3, [r7, #10]
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 8007e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e92:	b2db      	uxtb	r3, r3
 8007e94:	72fb      	strb	r3, [r7, #11]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 8007e96:	2225      	movs	r2, #37	; 0x25
 8007e98:	2194      	movs	r1, #148	; 0x94
 8007e9a:	6878      	ldr	r0, [r7, #4]
 8007e9c:	f002 f99c 	bl	800a1d8 <VL53L0X_WrByte>
 8007ea0:	4603      	mov	r3, r0
 8007ea2:	461a      	mov	r2, r3
 8007ea4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007ea8:	4313      	orrs	r3, r2
 8007eaa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8007eae:	6878      	ldr	r0, [r7, #4]
 8007eb0:	f7ff fe94 	bl	8007bdc <VL53L0X_device_read_strobe>
 8007eb4:	4603      	mov	r3, r0
 8007eb6:	461a      	mov	r2, r3
 8007eb8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007ebc:	4313      	orrs	r3, r2
 8007ebe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8007ec2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007ec6:	461a      	mov	r2, r3
 8007ec8:	2190      	movs	r1, #144	; 0x90
 8007eca:	6878      	ldr	r0, [r7, #4]
 8007ecc:	f002 fa68 	bl	800a3a0 <VL53L0X_RdDWord>
 8007ed0:	4603      	mov	r3, r0
 8007ed2:	461a      	mov	r2, r3
 8007ed4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007ed8:	4313      	orrs	r3, r2
 8007eda:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 8007ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ee0:	0e1b      	lsrs	r3, r3, #24
 8007ee2:	b2db      	uxtb	r3, r3
 8007ee4:	733b      	strb	r3, [r7, #12]
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 8007ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ee8:	0c1b      	lsrs	r3, r3, #16
 8007eea:	b2db      	uxtb	r3, r3
 8007eec:	737b      	strb	r3, [r7, #13]
				& 0xff);
		}

		if (((option & 2) == 2) &&
 8007eee:	78fb      	ldrb	r3, [r7, #3]
 8007ef0:	f003 0302 	and.w	r3, r3, #2
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	f000 8189 	beq.w	800820c <VL53L0X_get_info_from_device+0x5aa>
			((ReadDataFromDeviceDone & 2) == 0)) {
 8007efa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007efe:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	f040 8182 	bne.w	800820c <VL53L0X_get_info_from_device+0x5aa>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 8007f08:	2202      	movs	r2, #2
 8007f0a:	2194      	movs	r1, #148	; 0x94
 8007f0c:	6878      	ldr	r0, [r7, #4]
 8007f0e:	f002 f963 	bl	800a1d8 <VL53L0X_WrByte>
 8007f12:	4603      	mov	r3, r0
 8007f14:	461a      	mov	r2, r3
 8007f16:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007f1a:	4313      	orrs	r3, r2
 8007f1c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8007f20:	6878      	ldr	r0, [r7, #4]
 8007f22:	f7ff fe5b 	bl	8007bdc <VL53L0X_device_read_strobe>
 8007f26:	4603      	mov	r3, r0
 8007f28:	461a      	mov	r2, r3
 8007f2a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007f2e:	4313      	orrs	r3, r2
 8007f30:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 8007f34:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8007f38:	461a      	mov	r2, r3
 8007f3a:	2190      	movs	r1, #144	; 0x90
 8007f3c:	6878      	ldr	r0, [r7, #4]
 8007f3e:	f002 f9cd 	bl	800a2dc <VL53L0X_RdByte>
 8007f42:	4603      	mov	r3, r0
 8007f44:	461a      	mov	r2, r3
 8007f46:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007f4a:	4313      	orrs	r3, r2
 8007f4c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8007f50:	227b      	movs	r2, #123	; 0x7b
 8007f52:	2194      	movs	r1, #148	; 0x94
 8007f54:	6878      	ldr	r0, [r7, #4]
 8007f56:	f002 f93f 	bl	800a1d8 <VL53L0X_WrByte>
 8007f5a:	4603      	mov	r3, r0
 8007f5c:	461a      	mov	r2, r3
 8007f5e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007f62:	4313      	orrs	r3, r2
 8007f64:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8007f68:	6878      	ldr	r0, [r7, #4]
 8007f6a:	f7ff fe37 	bl	8007bdc <VL53L0X_device_read_strobe>
 8007f6e:	4603      	mov	r3, r0
 8007f70:	461a      	mov	r2, r3
 8007f72:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007f76:	4313      	orrs	r3, r2
 8007f78:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 8007f7c:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8007f80:	461a      	mov	r2, r3
 8007f82:	2190      	movs	r1, #144	; 0x90
 8007f84:	6878      	ldr	r0, [r7, #4]
 8007f86:	f002 f9a9 	bl	800a2dc <VL53L0X_RdByte>
 8007f8a:	4603      	mov	r3, r0
 8007f8c:	461a      	mov	r2, r3
 8007f8e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007f92:	4313      	orrs	r3, r2
 8007f94:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 8007f98:	2277      	movs	r2, #119	; 0x77
 8007f9a:	2194      	movs	r1, #148	; 0x94
 8007f9c:	6878      	ldr	r0, [r7, #4]
 8007f9e:	f002 f91b 	bl	800a1d8 <VL53L0X_WrByte>
 8007fa2:	4603      	mov	r3, r0
 8007fa4:	461a      	mov	r2, r3
 8007fa6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007faa:	4313      	orrs	r3, r2
 8007fac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8007fb0:	6878      	ldr	r0, [r7, #4]
 8007fb2:	f7ff fe13 	bl	8007bdc <VL53L0X_device_read_strobe>
 8007fb6:	4603      	mov	r3, r0
 8007fb8:	461a      	mov	r2, r3
 8007fba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007fbe:	4313      	orrs	r3, r2
 8007fc0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8007fc4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007fc8:	461a      	mov	r2, r3
 8007fca:	2190      	movs	r1, #144	; 0x90
 8007fcc:	6878      	ldr	r0, [r7, #4]
 8007fce:	f002 f9e7 	bl	800a3a0 <VL53L0X_RdDWord>
 8007fd2:	4603      	mov	r3, r0
 8007fd4:	461a      	mov	r2, r3
 8007fd6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007fda:	4313      	orrs	r3, r2
 8007fdc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 8007fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fe2:	0e5b      	lsrs	r3, r3, #25
 8007fe4:	b2db      	uxtb	r3, r3
 8007fe6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007fea:	b2db      	uxtb	r3, r3
 8007fec:	743b      	strb	r3, [r7, #16]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 8007fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ff0:	0c9b      	lsrs	r3, r3, #18
 8007ff2:	b2db      	uxtb	r3, r3
 8007ff4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ff8:	b2db      	uxtb	r3, r3
 8007ffa:	747b      	strb	r3, [r7, #17]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 8007ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ffe:	0adb      	lsrs	r3, r3, #11
 8008000:	b2db      	uxtb	r3, r3
 8008002:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008006:	b2db      	uxtb	r3, r3
 8008008:	74bb      	strb	r3, [r7, #18]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 800800a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800800c:	091b      	lsrs	r3, r3, #4
 800800e:	b2db      	uxtb	r3, r3
 8008010:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008014:	b2db      	uxtb	r3, r3
 8008016:	74fb      	strb	r3, [r7, #19]

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 8008018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800801a:	b2db      	uxtb	r3, r3
 800801c:	00db      	lsls	r3, r3, #3
 800801e:	b2db      	uxtb	r3, r3
 8008020:	f003 0378 	and.w	r3, r3, #120	; 0x78
 8008024:	b2db      	uxtb	r3, r3
 8008026:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 800802a:	2278      	movs	r2, #120	; 0x78
 800802c:	2194      	movs	r1, #148	; 0x94
 800802e:	6878      	ldr	r0, [r7, #4]
 8008030:	f002 f8d2 	bl	800a1d8 <VL53L0X_WrByte>
 8008034:	4603      	mov	r3, r0
 8008036:	461a      	mov	r2, r3
 8008038:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800803c:	4313      	orrs	r3, r2
 800803e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8008042:	6878      	ldr	r0, [r7, #4]
 8008044:	f7ff fdca 	bl	8007bdc <VL53L0X_device_read_strobe>
 8008048:	4603      	mov	r3, r0
 800804a:	461a      	mov	r2, r3
 800804c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008050:	4313      	orrs	r3, r2
 8008052:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8008056:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800805a:	461a      	mov	r2, r3
 800805c:	2190      	movs	r1, #144	; 0x90
 800805e:	6878      	ldr	r0, [r7, #4]
 8008060:	f002 f99e 	bl	800a3a0 <VL53L0X_RdDWord>
 8008064:	4603      	mov	r3, r0
 8008066:	461a      	mov	r2, r3
 8008068:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800806c:	4313      	orrs	r3, r2
 800806e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 8008072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008074:	0f5b      	lsrs	r3, r3, #29
 8008076:	b2db      	uxtb	r3, r3
 8008078:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800807c:	b2da      	uxtb	r2, r3
			ProductId[4] = (char)(byte +
 800807e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008082:	4413      	add	r3, r2
 8008084:	b2db      	uxtb	r3, r3
 8008086:	753b      	strb	r3, [r7, #20]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 8008088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800808a:	0d9b      	lsrs	r3, r3, #22
 800808c:	b2db      	uxtb	r3, r3
 800808e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008092:	b2db      	uxtb	r3, r3
 8008094:	757b      	strb	r3, [r7, #21]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 8008096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008098:	0bdb      	lsrs	r3, r3, #15
 800809a:	b2db      	uxtb	r3, r3
 800809c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80080a0:	b2db      	uxtb	r3, r3
 80080a2:	75bb      	strb	r3, [r7, #22]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 80080a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080a6:	0a1b      	lsrs	r3, r3, #8
 80080a8:	b2db      	uxtb	r3, r3
 80080aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80080ae:	b2db      	uxtb	r3, r3
 80080b0:	75fb      	strb	r3, [r7, #23]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 80080b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080b4:	085b      	lsrs	r3, r3, #1
 80080b6:	b2db      	uxtb	r3, r3
 80080b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80080bc:	b2db      	uxtb	r3, r3
 80080be:	763b      	strb	r3, [r7, #24]

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 80080c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080c2:	b2db      	uxtb	r3, r3
 80080c4:	019b      	lsls	r3, r3, #6
 80080c6:	b2db      	uxtb	r3, r3
 80080c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080cc:	b2db      	uxtb	r3, r3
 80080ce:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 80080d2:	2279      	movs	r2, #121	; 0x79
 80080d4:	2194      	movs	r1, #148	; 0x94
 80080d6:	6878      	ldr	r0, [r7, #4]
 80080d8:	f002 f87e 	bl	800a1d8 <VL53L0X_WrByte>
 80080dc:	4603      	mov	r3, r0
 80080de:	461a      	mov	r2, r3
 80080e0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80080e4:	4313      	orrs	r3, r2
 80080e6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 80080ea:	6878      	ldr	r0, [r7, #4]
 80080ec:	f7ff fd76 	bl	8007bdc <VL53L0X_device_read_strobe>
 80080f0:	4603      	mov	r3, r0
 80080f2:	461a      	mov	r2, r3
 80080f4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80080f8:	4313      	orrs	r3, r2
 80080fa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80080fe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008102:	461a      	mov	r2, r3
 8008104:	2190      	movs	r1, #144	; 0x90
 8008106:	6878      	ldr	r0, [r7, #4]
 8008108:	f002 f94a 	bl	800a3a0 <VL53L0X_RdDWord>
 800810c:	4603      	mov	r3, r0
 800810e:	461a      	mov	r2, r3
 8008110:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008114:	4313      	orrs	r3, r2
 8008116:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 800811a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800811c:	0e9b      	lsrs	r3, r3, #26
 800811e:	b2db      	uxtb	r3, r3
 8008120:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008124:	b2da      	uxtb	r2, r3
			ProductId[9] = (char)(byte +
 8008126:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800812a:	4413      	add	r3, r2
 800812c:	b2db      	uxtb	r3, r3
 800812e:	767b      	strb	r3, [r7, #25]
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 8008130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008132:	0cdb      	lsrs	r3, r3, #19
 8008134:	b2db      	uxtb	r3, r3
 8008136:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800813a:	b2db      	uxtb	r3, r3
 800813c:	76bb      	strb	r3, [r7, #26]
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 800813e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008140:	0b1b      	lsrs	r3, r3, #12
 8008142:	b2db      	uxtb	r3, r3
 8008144:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008148:	b2db      	uxtb	r3, r3
 800814a:	76fb      	strb	r3, [r7, #27]
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 800814c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800814e:	095b      	lsrs	r3, r3, #5
 8008150:	b2db      	uxtb	r3, r3
 8008152:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008156:	b2db      	uxtb	r3, r3
 8008158:	773b      	strb	r3, [r7, #28]

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 800815a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800815c:	b2db      	uxtb	r3, r3
 800815e:	009b      	lsls	r3, r3, #2
 8008160:	b2db      	uxtb	r3, r3
 8008162:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8008166:	b2db      	uxtb	r3, r3
 8008168:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 800816c:	227a      	movs	r2, #122	; 0x7a
 800816e:	2194      	movs	r1, #148	; 0x94
 8008170:	6878      	ldr	r0, [r7, #4]
 8008172:	f002 f831 	bl	800a1d8 <VL53L0X_WrByte>
 8008176:	4603      	mov	r3, r0
 8008178:	461a      	mov	r2, r3
 800817a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800817e:	4313      	orrs	r3, r2
 8008180:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 8008184:	6878      	ldr	r0, [r7, #4]
 8008186:	f7ff fd29 	bl	8007bdc <VL53L0X_device_read_strobe>
 800818a:	4603      	mov	r3, r0
 800818c:	461a      	mov	r2, r3
 800818e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008192:	4313      	orrs	r3, r2
 8008194:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8008198:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800819c:	461a      	mov	r2, r3
 800819e:	2190      	movs	r1, #144	; 0x90
 80081a0:	6878      	ldr	r0, [r7, #4]
 80081a2:	f002 f8fd 	bl	800a3a0 <VL53L0X_RdDWord>
 80081a6:	4603      	mov	r3, r0
 80081a8:	461a      	mov	r2, r3
 80081aa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80081ae:	4313      	orrs	r3, r2
 80081b0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 80081b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081b6:	0f9b      	lsrs	r3, r3, #30
 80081b8:	b2db      	uxtb	r3, r3
 80081ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80081be:	b2da      	uxtb	r2, r3
			ProductId[13] = (char)(byte +
 80081c0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80081c4:	4413      	add	r3, r2
 80081c6:	b2db      	uxtb	r3, r3
 80081c8:	777b      	strb	r3, [r7, #29]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 80081ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081cc:	0ddb      	lsrs	r3, r3, #23
 80081ce:	b2db      	uxtb	r3, r3
 80081d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80081d4:	b2db      	uxtb	r3, r3
 80081d6:	77bb      	strb	r3, [r7, #30]
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 80081d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081da:	0c1b      	lsrs	r3, r3, #16
 80081dc:	b2db      	uxtb	r3, r3
 80081de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80081e2:	b2db      	uxtb	r3, r3
 80081e4:	77fb      	strb	r3, [r7, #31]
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 80081e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081e8:	0a5b      	lsrs	r3, r3, #9
 80081ea:	b2db      	uxtb	r3, r3
 80081ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80081f0:	b2db      	uxtb	r3, r3
 80081f2:	f887 3020 	strb.w	r3, [r7, #32]
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 80081f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081f8:	089b      	lsrs	r3, r3, #2
 80081fa:	b2db      	uxtb	r3, r3
 80081fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008200:	b2db      	uxtb	r3, r3
 8008202:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			ProductId[18] = '\0';
 8008206:	2300      	movs	r3, #0
 8008208:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

		}

		if (((option & 4) == 4) &&
 800820c:	78fb      	ldrb	r3, [r7, #3]
 800820e:	f003 0304 	and.w	r3, r3, #4
 8008212:	2b00      	cmp	r3, #0
 8008214:	f000 80f1 	beq.w	80083fa <VL53L0X_get_info_from_device+0x798>
			((ReadDataFromDeviceDone & 4) == 0)) {
 8008218:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800821c:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 8008220:	2b00      	cmp	r3, #0
 8008222:	f040 80ea 	bne.w	80083fa <VL53L0X_get_info_from_device+0x798>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8008226:	227b      	movs	r2, #123	; 0x7b
 8008228:	2194      	movs	r1, #148	; 0x94
 800822a:	6878      	ldr	r0, [r7, #4]
 800822c:	f001 ffd4 	bl	800a1d8 <VL53L0X_WrByte>
 8008230:	4603      	mov	r3, r0
 8008232:	461a      	mov	r2, r3
 8008234:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008238:	4313      	orrs	r3, r2
 800823a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800823e:	6878      	ldr	r0, [r7, #4]
 8008240:	f7ff fccc 	bl	8007bdc <VL53L0X_device_read_strobe>
 8008244:	4603      	mov	r3, r0
 8008246:	461a      	mov	r2, r3
 8008248:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800824c:	4313      	orrs	r3, r2
 800824e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 8008252:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008256:	461a      	mov	r2, r3
 8008258:	2190      	movs	r1, #144	; 0x90
 800825a:	6878      	ldr	r0, [r7, #4]
 800825c:	f002 f8a0 	bl	800a3a0 <VL53L0X_RdDWord>
 8008260:	4603      	mov	r3, r0
 8008262:	461a      	mov	r2, r3
 8008264:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008268:	4313      	orrs	r3, r2
 800826a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 800826e:	227c      	movs	r2, #124	; 0x7c
 8008270:	2194      	movs	r1, #148	; 0x94
 8008272:	6878      	ldr	r0, [r7, #4]
 8008274:	f001 ffb0 	bl	800a1d8 <VL53L0X_WrByte>
 8008278:	4603      	mov	r3, r0
 800827a:	461a      	mov	r2, r3
 800827c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008280:	4313      	orrs	r3, r2
 8008282:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8008286:	6878      	ldr	r0, [r7, #4]
 8008288:	f7ff fca8 	bl	8007bdc <VL53L0X_device_read_strobe>
 800828c:	4603      	mov	r3, r0
 800828e:	461a      	mov	r2, r3
 8008290:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008294:	4313      	orrs	r3, r2
 8008296:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 800829a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800829e:	461a      	mov	r2, r3
 80082a0:	2190      	movs	r1, #144	; 0x90
 80082a2:	6878      	ldr	r0, [r7, #4]
 80082a4:	f002 f87c 	bl	800a3a0 <VL53L0X_RdDWord>
 80082a8:	4603      	mov	r3, r0
 80082aa:	461a      	mov	r2, r3
 80082ac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80082b0:	4313      	orrs	r3, r2
 80082b2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 80082b6:	2273      	movs	r2, #115	; 0x73
 80082b8:	2194      	movs	r1, #148	; 0x94
 80082ba:	6878      	ldr	r0, [r7, #4]
 80082bc:	f001 ff8c 	bl	800a1d8 <VL53L0X_WrByte>
 80082c0:	4603      	mov	r3, r0
 80082c2:	461a      	mov	r2, r3
 80082c4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80082c8:	4313      	orrs	r3, r2
 80082ca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80082ce:	6878      	ldr	r0, [r7, #4]
 80082d0:	f7ff fc84 	bl	8007bdc <VL53L0X_device_read_strobe>
 80082d4:	4603      	mov	r3, r0
 80082d6:	461a      	mov	r2, r3
 80082d8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80082dc:	4313      	orrs	r3, r2
 80082de:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80082e2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80082e6:	461a      	mov	r2, r3
 80082e8:	2190      	movs	r1, #144	; 0x90
 80082ea:	6878      	ldr	r0, [r7, #4]
 80082ec:	f002 f858 	bl	800a3a0 <VL53L0X_RdDWord>
 80082f0:	4603      	mov	r3, r0
 80082f2:	461a      	mov	r2, r3
 80082f4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80082f8:	4313      	orrs	r3, r2
 80082fa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x0000000ff) << 8;
 80082fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008300:	021b      	lsls	r3, r3, #8
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 8008302:	b29b      	uxth	r3, r3
 8008304:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 8008306:	2274      	movs	r2, #116	; 0x74
 8008308:	2194      	movs	r1, #148	; 0x94
 800830a:	6878      	ldr	r0, [r7, #4]
 800830c:	f001 ff64 	bl	800a1d8 <VL53L0X_WrByte>
 8008310:	4603      	mov	r3, r0
 8008312:	461a      	mov	r2, r3
 8008314:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008318:	4313      	orrs	r3, r2
 800831a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800831e:	6878      	ldr	r0, [r7, #4]
 8008320:	f7ff fc5c 	bl	8007bdc <VL53L0X_device_read_strobe>
 8008324:	4603      	mov	r3, r0
 8008326:	461a      	mov	r2, r3
 8008328:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800832c:	4313      	orrs	r3, r2
 800832e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8008332:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008336:	461a      	mov	r2, r3
 8008338:	2190      	movs	r1, #144	; 0x90
 800833a:	6878      	ldr	r0, [r7, #4]
 800833c:	f002 f830 	bl	800a3a0 <VL53L0X_RdDWord>
 8008340:	4603      	mov	r3, r0
 8008342:	461a      	mov	r2, r3
 8008344:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008348:	4313      	orrs	r3, r2
 800834a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 800834e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008350:	0e1b      	lsrs	r3, r3, #24
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 8008352:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008354:	4313      	orrs	r3, r2
 8008356:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 8008358:	2275      	movs	r2, #117	; 0x75
 800835a:	2194      	movs	r1, #148	; 0x94
 800835c:	6878      	ldr	r0, [r7, #4]
 800835e:	f001 ff3b 	bl	800a1d8 <VL53L0X_WrByte>
 8008362:	4603      	mov	r3, r0
 8008364:	461a      	mov	r2, r3
 8008366:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800836a:	4313      	orrs	r3, r2
 800836c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8008370:	6878      	ldr	r0, [r7, #4]
 8008372:	f7ff fc33 	bl	8007bdc <VL53L0X_device_read_strobe>
 8008376:	4603      	mov	r3, r0
 8008378:	461a      	mov	r2, r3
 800837a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800837e:	4313      	orrs	r3, r2
 8008380:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8008384:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008388:	461a      	mov	r2, r3
 800838a:	2190      	movs	r1, #144	; 0x90
 800838c:	6878      	ldr	r0, [r7, #4]
 800838e:	f002 f807 	bl	800a3a0 <VL53L0X_RdDWord>
 8008392:	4603      	mov	r3, r0
 8008394:	461a      	mov	r2, r3
 8008396:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800839a:	4313      	orrs	r3, r2
 800839c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
							<< 8;
 80083a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083a2:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
 80083a4:	b29b      	uxth	r3, r3
 80083a6:	657b      	str	r3, [r7, #84]	; 0x54

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 80083a8:	2276      	movs	r2, #118	; 0x76
 80083aa:	2194      	movs	r1, #148	; 0x94
 80083ac:	6878      	ldr	r0, [r7, #4]
 80083ae:	f001 ff13 	bl	800a1d8 <VL53L0X_WrByte>
 80083b2:	4603      	mov	r3, r0
 80083b4:	461a      	mov	r2, r3
 80083b6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80083ba:	4313      	orrs	r3, r2
 80083bc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80083c0:	6878      	ldr	r0, [r7, #4]
 80083c2:	f7ff fc0b 	bl	8007bdc <VL53L0X_device_read_strobe>
 80083c6:	4603      	mov	r3, r0
 80083c8:	461a      	mov	r2, r3
 80083ca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80083ce:	4313      	orrs	r3, r2
 80083d0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80083d4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80083d8:	461a      	mov	r2, r3
 80083da:	2190      	movs	r1, #144	; 0x90
 80083dc:	6878      	ldr	r0, [r7, #4]
 80083de:	f001 ffdf 	bl	800a3a0 <VL53L0X_RdDWord>
 80083e2:	4603      	mov	r3, r0
 80083e4:	461a      	mov	r2, r3
 80083e6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80083ea:	4313      	orrs	r3, r2
 80083ec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 80083f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083f2:	0e1b      	lsrs	r3, r3, #24
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 80083f4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80083f6:	4313      	orrs	r3, r2
 80083f8:	657b      	str	r3, [r7, #84]	; 0x54
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 80083fa:	2200      	movs	r2, #0
 80083fc:	2181      	movs	r1, #129	; 0x81
 80083fe:	6878      	ldr	r0, [r7, #4]
 8008400:	f001 feea 	bl	800a1d8 <VL53L0X_WrByte>
 8008404:	4603      	mov	r3, r0
 8008406:	461a      	mov	r2, r3
 8008408:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800840c:	4313      	orrs	r3, r2
 800840e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8008412:	2206      	movs	r2, #6
 8008414:	21ff      	movs	r1, #255	; 0xff
 8008416:	6878      	ldr	r0, [r7, #4]
 8008418:	f001 fede 	bl	800a1d8 <VL53L0X_WrByte>
 800841c:	4603      	mov	r3, r0
 800841e:	461a      	mov	r2, r3
 8008420:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008424:	4313      	orrs	r3, r2
 8008426:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 800842a:	f107 0337 	add.w	r3, r7, #55	; 0x37
 800842e:	461a      	mov	r2, r3
 8008430:	2183      	movs	r1, #131	; 0x83
 8008432:	6878      	ldr	r0, [r7, #4]
 8008434:	f001 ff52 	bl	800a2dc <VL53L0X_RdByte>
 8008438:	4603      	mov	r3, r0
 800843a:	461a      	mov	r2, r3
 800843c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008440:	4313      	orrs	r3, r2
 8008442:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 8008446:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800844a:	f023 0304 	bic.w	r3, r3, #4
 800844e:	b2db      	uxtb	r3, r3
 8008450:	461a      	mov	r2, r3
 8008452:	2183      	movs	r1, #131	; 0x83
 8008454:	6878      	ldr	r0, [r7, #4]
 8008456:	f001 febf 	bl	800a1d8 <VL53L0X_WrByte>
 800845a:	4603      	mov	r3, r0
 800845c:	461a      	mov	r2, r3
 800845e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008462:	4313      	orrs	r3, r2
 8008464:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8008468:	2201      	movs	r2, #1
 800846a:	21ff      	movs	r1, #255	; 0xff
 800846c:	6878      	ldr	r0, [r7, #4]
 800846e:	f001 feb3 	bl	800a1d8 <VL53L0X_WrByte>
 8008472:	4603      	mov	r3, r0
 8008474:	461a      	mov	r2, r3
 8008476:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800847a:	4313      	orrs	r3, r2
 800847c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8008480:	2201      	movs	r2, #1
 8008482:	2100      	movs	r1, #0
 8008484:	6878      	ldr	r0, [r7, #4]
 8008486:	f001 fea7 	bl	800a1d8 <VL53L0X_WrByte>
 800848a:	4603      	mov	r3, r0
 800848c:	461a      	mov	r2, r3
 800848e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008492:	4313      	orrs	r3, r2
 8008494:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8008498:	2200      	movs	r2, #0
 800849a:	21ff      	movs	r1, #255	; 0xff
 800849c:	6878      	ldr	r0, [r7, #4]
 800849e:	f001 fe9b 	bl	800a1d8 <VL53L0X_WrByte>
 80084a2:	4603      	mov	r3, r0
 80084a4:	461a      	mov	r2, r3
 80084a6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80084aa:	4313      	orrs	r3, r2
 80084ac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 80084b0:	2200      	movs	r2, #0
 80084b2:	2180      	movs	r1, #128	; 0x80
 80084b4:	6878      	ldr	r0, [r7, #4]
 80084b6:	f001 fe8f 	bl	800a1d8 <VL53L0X_WrByte>
 80084ba:	4603      	mov	r3, r0
 80084bc:	461a      	mov	r2, r3
 80084be:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80084c2:	4313      	orrs	r3, r2
 80084c4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 80084c8:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	f040 808f 	bne.w	80085f0 <VL53L0X_get_info_from_device+0x98e>
 80084d2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80084d6:	2b07      	cmp	r3, #7
 80084d8:	f000 808a 	beq.w	80085f0 <VL53L0X_get_info_from_device+0x98e>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 80084dc:	78fb      	ldrb	r3, [r7, #3]
 80084de:	f003 0301 	and.w	r3, r3, #1
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d024      	beq.n	8008530 <VL53L0X_get_info_from_device+0x8ce>
			((ReadDataFromDeviceDone & 1) == 0)) {
 80084e6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80084ea:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d11e      	bne.n	8008530 <VL53L0X_get_info_from_device+0x8ce>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 80084f8:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
				ReferenceSpadCount, ReferenceSpadCount);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 8008502:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
				ReferenceSpadType, ReferenceSpadType);

			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8008506:	2300      	movs	r3, #0
 8008508:	64fb      	str	r3, [r7, #76]	; 0x4c
 800850a:	e00e      	b.n	800852a <VL53L0X_get_info_from_device+0x8c8>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
 800850c:	f107 0208 	add.w	r2, r7, #8
 8008510:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008512:	4413      	add	r3, r2
 8008514:	7819      	ldrb	r1, [r3, #0]
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 8008516:	687a      	ldr	r2, [r7, #4]
 8008518:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800851a:	4413      	add	r3, r2
 800851c:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 8008520:	460a      	mov	r2, r1
 8008522:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8008524:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008526:	3301      	adds	r3, #1
 8008528:	64fb      	str	r3, [r7, #76]	; 0x4c
 800852a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800852c:	2b05      	cmp	r3, #5
 800852e:	dded      	ble.n	800850c <VL53L0X_get_info_from_device+0x8aa>
			}
		}

		if (((option & 2) == 2) &&
 8008530:	78fb      	ldrb	r3, [r7, #3]
 8008532:	f003 0302 	and.w	r3, r3, #2
 8008536:	2b00      	cmp	r3, #0
 8008538:	d018      	beq.n	800856c <VL53L0X_get_info_from_device+0x90a>
			((ReadDataFromDeviceDone & 2) == 0)) {
 800853a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800853e:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 8008542:	2b00      	cmp	r3, #0
 8008544:	d112      	bne.n	800856c <VL53L0X_get_info_from_device+0x90a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8008546:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
					ModuleId, ModuleId);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8008550:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
					Revision, Revision);

			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	33f3      	adds	r3, #243	; 0xf3
 800855e:	63bb      	str	r3, [r7, #56]	; 0x38
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 8008560:	f107 0310 	add.w	r3, r7, #16
 8008564:	4619      	mov	r1, r3
 8008566:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008568:	f001 ffc6 	bl	800a4f8 <strcpy>

		}

		if (((option & 4) == 4) &&
 800856c:	78fb      	ldrb	r3, [r7, #3]
 800856e:	f003 0304 	and.w	r3, r3, #4
 8008572:	2b00      	cmp	r3, #0
 8008574:	d030      	beq.n	80085d8 <VL53L0X_get_info_from_device+0x976>
			((ReadDataFromDeviceDone & 4) == 0)) {
 8008576:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800857a:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 800857e:	2b00      	cmp	r3, #0
 8008580:	d12a      	bne.n	80085d8 <VL53L0X_get_info_from_device+0x976>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8008582:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800858a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 8008592:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008594:	025b      	lsls	r3, r3, #9
 8008596:	643b      	str	r3, [r7, #64]	; 0x40
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800859c:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
 80085a0:	2300      	movs	r3, #0
 80085a2:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			if (DistMeasFixed1104_400_mm != 0) {
 80085a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d011      	beq.n	80085d0 <VL53L0X_get_info_from_device+0x96e>
					OffsetFixed1104_mm =
 80085ac:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80085ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80085b0:	1ad3      	subs	r3, r2, r3
 80085b2:	64bb      	str	r3, [r7, #72]	; 0x48
						DistMeasFixed1104_400_mm -
						DistMeasTgtFixed1104_mm;
					OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 80085b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80085b6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80085ba:	fb02 f303 	mul.w	r3, r2, r3
 80085be:	091b      	lsrs	r3, r3, #4
					OffsetMicroMeters = (OffsetFixed1104_mm
 80085c0:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
					OffsetMicroMeters *= -1;
 80085c4:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80085c8:	425b      	negs	r3, r3
 80085ca:	b29b      	uxth	r3, r3
 80085cc:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			}

			PALDevDataSet(Dev,
 80085d0:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	60da      	str	r2, [r3, #12]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 80085d8:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80085dc:	78fb      	ldrb	r3, [r7, #3]
 80085de:	4313      	orrs	r3, r2
 80085e0:	b2db      	uxtb	r3, r3
 80085e2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 80085e6:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80085f0:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 80085f4:	4618      	mov	r0, r3
 80085f6:	3760      	adds	r7, #96	; 0x60
 80085f8:	46bd      	mov	sp, r7
 80085fa:	bd80      	pop	{r7, pc}

080085fc <VL53L0X_calc_macro_period_ps>:


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev, uint8_t vcsel_period_pclks)
{
 80085fc:	b480      	push	{r7}
 80085fe:	b087      	sub	sp, #28
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]
 8008604:	460b      	mov	r3, r1
 8008606:	70fb      	strb	r3, [r7, #3]
	LOG_FUNCTION_START("");

	/* The above calculation will produce rounding errors,
	   therefore set fixed value
	*/
	PLL_period_ps = 1655;
 8008608:	f240 6277 	movw	r2, #1655	; 0x677
 800860c:	f04f 0300 	mov.w	r3, #0
 8008610:	e9c7 2304 	strd	r2, r3, [r7, #16]

	macro_period_vclks = 2304;
 8008614:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8008618:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 800861a:	78fb      	ldrb	r3, [r7, #3]
 800861c:	68fa      	ldr	r2, [r7, #12]
 800861e:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 8008622:	693a      	ldr	r2, [r7, #16]
 8008624:	fb02 f303 	mul.w	r3, r2, r3
 8008628:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
	return macro_period_ps;
 800862a:	68bb      	ldr	r3, [r7, #8]
}
 800862c:	4618      	mov	r0, r3
 800862e:	371c      	adds	r7, #28
 8008630:	46bd      	mov	sp, r7
 8008632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008636:	4770      	bx	lr

08008638 <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 8008638:	b480      	push	{r7}
 800863a:	b087      	sub	sp, #28
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 8008640:	2300      	movs	r3, #0
 8008642:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 8008644:	2300      	movs	r3, #0
 8008646:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 8008648:	2300      	movs	r3, #0
 800864a:	81fb      	strh	r3, [r7, #14]

	if (timeout_macro_clks > 0) {
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	2b00      	cmp	r3, #0
 8008650:	d017      	beq.n	8008682 <VL53L0X_encode_timeout+0x4a>
		ls_byte = timeout_macro_clks - 1;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	3b01      	subs	r3, #1
 8008656:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 8008658:	e005      	b.n	8008666 <VL53L0X_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 800865a:	693b      	ldr	r3, [r7, #16]
 800865c:	085b      	lsrs	r3, r3, #1
 800865e:	613b      	str	r3, [r7, #16]
			ms_byte++;
 8008660:	89fb      	ldrh	r3, [r7, #14]
 8008662:	3301      	adds	r3, #1
 8008664:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 8008666:	693b      	ldr	r3, [r7, #16]
 8008668:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800866c:	2b00      	cmp	r3, #0
 800866e:	d1f4      	bne.n	800865a <VL53L0X_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 8008670:	89fb      	ldrh	r3, [r7, #14]
 8008672:	021b      	lsls	r3, r3, #8
 8008674:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 8008676:	693b      	ldr	r3, [r7, #16]
 8008678:	b29b      	uxth	r3, r3
 800867a:	b2db      	uxtb	r3, r3
 800867c:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 800867e:	4413      	add	r3, r2
 8008680:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 8008682:	8afb      	ldrh	r3, [r7, #22]

}
 8008684:	4618      	mov	r0, r3
 8008686:	371c      	adds	r7, #28
 8008688:	46bd      	mov	sp, r7
 800868a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868e:	4770      	bx	lr

08008690 <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 8008690:	b480      	push	{r7}
 8008692:	b085      	sub	sp, #20
 8008694:	af00      	add	r7, sp, #0
 8008696:	4603      	mov	r3, r0
 8008698:	80fb      	strh	r3, [r7, #6]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 800869a:	2300      	movs	r3, #0
 800869c:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800869e:	88fb      	ldrh	r3, [r7, #6]
 80086a0:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 80086a2:	88fa      	ldrh	r2, [r7, #6]
 80086a4:	0a12      	lsrs	r2, r2, #8
 80086a6:	b292      	uxth	r2, r2
 80086a8:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 80086aa:	3301      	adds	r3, #1
 80086ac:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 80086ae:	68fb      	ldr	r3, [r7, #12]
}
 80086b0:	4618      	mov	r0, r3
 80086b2:	3714      	adds	r7, #20
 80086b4:	46bd      	mov	sp, r7
 80086b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ba:	4770      	bx	lr

080086bc <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 80086bc:	b580      	push	{r7, lr}
 80086be:	b088      	sub	sp, #32
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	60f8      	str	r0, [r7, #12]
 80086c4:	60b9      	str	r1, [r7, #8]
 80086c6:	4613      	mov	r3, r2
 80086c8:	71fb      	strb	r3, [r7, #7]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 80086ca:	2300      	movs	r3, #0
 80086cc:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 80086ce:	79fb      	ldrb	r3, [r7, #7]
 80086d0:	4619      	mov	r1, r3
 80086d2:	68f8      	ldr	r0, [r7, #12]
 80086d4:	f7ff ff92 	bl	80085fc <VL53L0X_calc_macro_period_ps>
 80086d8:	61b8      	str	r0, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 80086da:	69bb      	ldr	r3, [r7, #24]
 80086dc:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80086e0:	4a0a      	ldr	r2, [pc, #40]	; (800870c <VL53L0X_calc_timeout_mclks+0x50>)
 80086e2:	fba2 2303 	umull	r2, r3, r2, r3
 80086e6:	099b      	lsrs	r3, r3, #6
 80086e8:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 80086ea:	68bb      	ldr	r3, [r7, #8]
 80086ec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80086f0:	fb02 f203 	mul.w	r2, r2, r3
		+ (macro_period_ns / 2)) / macro_period_ns);
 80086f4:	697b      	ldr	r3, [r7, #20]
 80086f6:	085b      	lsrs	r3, r3, #1
 80086f8:	441a      	add	r2, r3
	timeout_period_mclks =
 80086fa:	697b      	ldr	r3, [r7, #20]
 80086fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8008700:	61fb      	str	r3, [r7, #28]

    return timeout_period_mclks;
 8008702:	69fb      	ldr	r3, [r7, #28]
}
 8008704:	4618      	mov	r0, r3
 8008706:	3720      	adds	r7, #32
 8008708:	46bd      	mov	sp, r7
 800870a:	bd80      	pop	{r7, pc}
 800870c:	10624dd3 	.word	0x10624dd3

08008710 <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 8008710:	b580      	push	{r7, lr}
 8008712:	b086      	sub	sp, #24
 8008714:	af00      	add	r7, sp, #0
 8008716:	6078      	str	r0, [r7, #4]
 8008718:	460b      	mov	r3, r1
 800871a:	807b      	strh	r3, [r7, #2]
 800871c:	4613      	mov	r3, r2
 800871e:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 8008720:	2300      	movs	r3, #0
 8008722:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 8008724:	787b      	ldrb	r3, [r7, #1]
 8008726:	4619      	mov	r1, r3
 8008728:	6878      	ldr	r0, [r7, #4]
 800872a:	f7ff ff67 	bl	80085fc <VL53L0X_calc_macro_period_ps>
 800872e:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8008730:	693b      	ldr	r3, [r7, #16]
 8008732:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8008736:	4a0a      	ldr	r2, [pc, #40]	; (8008760 <VL53L0X_calc_timeout_us+0x50>)
 8008738:	fba2 2303 	umull	r2, r3, r2, r3
 800873c:	099b      	lsrs	r3, r3, #6
 800873e:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 8008740:	887b      	ldrh	r3, [r7, #2]
 8008742:	68fa      	ldr	r2, [r7, #12]
 8008744:	fb02 f303 	mul.w	r3, r2, r3
 8008748:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
	actual_timeout_period_us =
 800874c:	4a04      	ldr	r2, [pc, #16]	; (8008760 <VL53L0X_calc_timeout_us+0x50>)
 800874e:	fba2 2303 	umull	r2, r3, r2, r3
 8008752:	099b      	lsrs	r3, r3, #6
 8008754:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 8008756:	697b      	ldr	r3, [r7, #20]
}
 8008758:	4618      	mov	r0, r3
 800875a:	3718      	adds	r7, #24
 800875c:	46bd      	mov	sp, r7
 800875e:	bd80      	pop	{r7, pc}
 8008760:	10624dd3 	.word	0x10624dd3

08008764 <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 8008764:	b580      	push	{r7, lr}
 8008766:	b08c      	sub	sp, #48	; 0x30
 8008768:	af00      	add	r7, sp, #0
 800876a:	60f8      	str	r0, [r7, #12]
 800876c:	460b      	mov	r3, r1
 800876e:	607a      	str	r2, [r7, #4]
 8008770:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008772:	2300      	movs	r3, #0
 8008774:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 8008778:	2300      	movs	r3, #0
 800877a:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t TimeoutMicroSeconds = 0;
 800877e:	2300      	movs	r3, #0
 8008780:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 8008782:	2300      	movs	r3, #0
 8008784:	83fb      	strh	r3, [r7, #30]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 8008786:	2300      	movs	r3, #0
 8008788:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800878a:	7afb      	ldrb	r3, [r7, #11]
 800878c:	2b00      	cmp	r3, #0
 800878e:	d005      	beq.n	800879c <get_sequence_step_timeout+0x38>
 8008790:	7afb      	ldrb	r3, [r7, #11]
 8008792:	2b01      	cmp	r3, #1
 8008794:	d002      	beq.n	800879c <get_sequence_step_timeout+0x38>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 8008796:	7afb      	ldrb	r3, [r7, #11]
 8008798:	2b02      	cmp	r3, #2
 800879a:	d128      	bne.n	80087ee <get_sequence_step_timeout+0x8a>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800879c:	f107 0321 	add.w	r3, r7, #33	; 0x21
 80087a0:	461a      	mov	r2, r3
 80087a2:	2100      	movs	r1, #0
 80087a4:	68f8      	ldr	r0, [r7, #12]
 80087a6:	f7fd fa7d 	bl	8005ca4 <VL53L0X_GetVcselPulsePeriod>
 80087aa:	4603      	mov	r3, r0
 80087ac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 80087b0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d109      	bne.n	80087cc <get_sequence_step_timeout+0x68>
			Status = VL53L0X_RdByte(Dev,
 80087b8:	f107 0320 	add.w	r3, r7, #32
 80087bc:	461a      	mov	r2, r3
 80087be:	2146      	movs	r1, #70	; 0x46
 80087c0:	68f8      	ldr	r0, [r7, #12]
 80087c2:	f001 fd8b 	bl	800a2dc <VL53L0X_RdByte>
 80087c6:	4603      	mov	r3, r0
 80087c8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 80087cc:	f897 3020 	ldrb.w	r3, [r7, #32]
 80087d0:	b29b      	uxth	r3, r3
 80087d2:	4618      	mov	r0, r3
 80087d4:	f7ff ff5c 	bl	8008690 <VL53L0X_decode_timeout>
 80087d8:	4603      	mov	r3, r0
 80087da:	847b      	strh	r3, [r7, #34]	; 0x22

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 80087dc:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 80087e0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80087e2:	4619      	mov	r1, r3
 80087e4:	68f8      	ldr	r0, [r7, #12]
 80087e6:	f7ff ff93 	bl	8008710 <VL53L0X_calc_timeout_us>
 80087ea:	62b8      	str	r0, [r7, #40]	; 0x28
 80087ec:	e092      	b.n	8008914 <get_sequence_step_timeout+0x1b0>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 80087ee:	7afb      	ldrb	r3, [r7, #11]
 80087f0:	2b03      	cmp	r3, #3
 80087f2:	d135      	bne.n	8008860 <get_sequence_step_timeout+0xfc>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80087f4:	f107 0321 	add.w	r3, r7, #33	; 0x21
 80087f8:	461a      	mov	r2, r3
 80087fa:	2100      	movs	r1, #0
 80087fc:	68f8      	ldr	r0, [r7, #12]
 80087fe:	f7fd fa51 	bl	8005ca4 <VL53L0X_GetVcselPulsePeriod>
 8008802:	4603      	mov	r3, r0
 8008804:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 8008808:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800880c:	2b00      	cmp	r3, #0
 800880e:	f040 8081 	bne.w	8008914 <get_sequence_step_timeout+0x1b0>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8008812:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8008816:	461a      	mov	r2, r3
 8008818:	2100      	movs	r1, #0
 800881a:	68f8      	ldr	r0, [r7, #12]
 800881c:	f7fd fa42 	bl	8005ca4 <VL53L0X_GetVcselPulsePeriod>
 8008820:	4603      	mov	r3, r0
 8008822:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 8008826:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800882a:	2b00      	cmp	r3, #0
 800882c:	d109      	bne.n	8008842 <get_sequence_step_timeout+0xde>
				Status = VL53L0X_RdWord(Dev,
 800882e:	f107 031e 	add.w	r3, r7, #30
 8008832:	461a      	mov	r2, r3
 8008834:	2151      	movs	r1, #81	; 0x51
 8008836:	68f8      	ldr	r0, [r7, #12]
 8008838:	f001 fd7a 	bl	800a330 <VL53L0X_RdWord>
 800883c:	4603      	mov	r3, r0
 800883e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8008842:	8bfb      	ldrh	r3, [r7, #30]
 8008844:	4618      	mov	r0, r3
 8008846:	f7ff ff23 	bl	8008690 <VL53L0X_decode_timeout>
 800884a:	4603      	mov	r3, r0
 800884c:	84fb      	strh	r3, [r7, #38]	; 0x26
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800884e:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8008852:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008854:	4619      	mov	r1, r3
 8008856:	68f8      	ldr	r0, [r7, #12]
 8008858:	f7ff ff5a 	bl	8008710 <VL53L0X_calc_timeout_us>
 800885c:	62b8      	str	r0, [r7, #40]	; 0x28
 800885e:	e059      	b.n	8008914 <get_sequence_step_timeout+0x1b0>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 8008860:	7afb      	ldrb	r3, [r7, #11]
 8008862:	2b04      	cmp	r3, #4
 8008864:	d156      	bne.n	8008914 <get_sequence_step_timeout+0x1b0>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8008866:	f107 0314 	add.w	r3, r7, #20
 800886a:	4619      	mov	r1, r3
 800886c:	68f8      	ldr	r0, [r7, #12]
 800886e:	f7fd fb25 	bl	8005ebc <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 8008872:	2300      	movs	r3, #0
 8008874:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (SchedulerSequenceSteps.PreRangeOn) {
 8008876:	7dfb      	ldrb	r3, [r7, #23]
 8008878:	2b00      	cmp	r3, #0
 800887a:	d01d      	beq.n	80088b8 <get_sequence_step_timeout+0x154>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800887c:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8008880:	461a      	mov	r2, r3
 8008882:	2100      	movs	r1, #0
 8008884:	68f8      	ldr	r0, [r7, #12]
 8008886:	f7fd fa0d 	bl	8005ca4 <VL53L0X_GetVcselPulsePeriod>
 800888a:	4603      	mov	r3, r0
 800888c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_VCSEL_PERIOD_PRE_RANGE,
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS) */
			if (Status == VL53L0X_ERROR_NONE) {
 8008890:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008894:	2b00      	cmp	r3, #0
 8008896:	d10f      	bne.n	80088b8 <get_sequence_step_timeout+0x154>
				Status = VL53L0X_RdWord(Dev,
 8008898:	f107 031e 	add.w	r3, r7, #30
 800889c:	461a      	mov	r2, r3
 800889e:	2151      	movs	r1, #81	; 0x51
 80088a0:	68f8      	ldr	r0, [r7, #12]
 80088a2:	f001 fd45 	bl	800a330 <VL53L0X_RdWord>
 80088a6:	4603      	mov	r3, r0
 80088a8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 80088ac:	8bfb      	ldrh	r3, [r7, #30]
 80088ae:	4618      	mov	r0, r3
 80088b0:	f7ff feee 	bl	8008690 <VL53L0X_decode_timeout>
 80088b4:	4603      	mov	r3, r0
 80088b6:	84fb      	strh	r3, [r7, #38]	; 0x26
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 80088b8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d109      	bne.n	80088d4 <get_sequence_step_timeout+0x170>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80088c0:	f107 0321 	add.w	r3, r7, #33	; 0x21
 80088c4:	461a      	mov	r2, r3
 80088c6:	2101      	movs	r1, #1
 80088c8:	68f8      	ldr	r0, [r7, #12]
 80088ca:	f7fd f9eb 	bl	8005ca4 <VL53L0X_GetVcselPulsePeriod>
 80088ce:	4603      	mov	r3, r0
 80088d0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 80088d4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d10f      	bne.n	80088fc <get_sequence_step_timeout+0x198>
			Status = VL53L0X_RdWord(Dev,
 80088dc:	f107 031c 	add.w	r3, r7, #28
 80088e0:	461a      	mov	r2, r3
 80088e2:	2171      	movs	r1, #113	; 0x71
 80088e4:	68f8      	ldr	r0, [r7, #12]
 80088e6:	f001 fd23 	bl	800a330 <VL53L0X_RdWord>
 80088ea:	4603      	mov	r3, r0
 80088ec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 80088f0:	8bbb      	ldrh	r3, [r7, #28]
 80088f2:	4618      	mov	r0, r3
 80088f4:	f7ff fecc 	bl	8008690 <VL53L0X_decode_timeout>
 80088f8:	4603      	mov	r3, r0
 80088fa:	84bb      	strh	r3, [r7, #36]	; 0x24
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 80088fc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80088fe:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008900:	1ad3      	subs	r3, r2, r3
 8008902:	84bb      	strh	r3, [r7, #36]	; 0x24
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8008904:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8008908:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800890a:	4619      	mov	r1, r3
 800890c:	68f8      	ldr	r0, [r7, #12]
 800890e:	f7ff feff 	bl	8008710 <VL53L0X_calc_timeout_us>
 8008912:	62b8      	str	r0, [r7, #40]	; 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008918:	601a      	str	r2, [r3, #0]

	return Status;
 800891a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800891e:	4618      	mov	r0, r3
 8008920:	3730      	adds	r7, #48	; 0x30
 8008922:	46bd      	mov	sp, r7
 8008924:	bd80      	pop	{r7, pc}

08008926 <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 8008926:	b580      	push	{r7, lr}
 8008928:	b08a      	sub	sp, #40	; 0x28
 800892a:	af00      	add	r7, sp, #0
 800892c:	60f8      	str	r0, [r7, #12]
 800892e:	460b      	mov	r3, r1
 8008930:	607a      	str	r2, [r7, #4]
 8008932:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008934:	2300      	movs	r3, #0
 8008936:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t MsrcRangeTimeOutMClks;
	uint32_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800893a:	7afb      	ldrb	r3, [r7, #11]
 800893c:	2b00      	cmp	r3, #0
 800893e:	d005      	beq.n	800894c <set_sequence_step_timeout+0x26>
 8008940:	7afb      	ldrb	r3, [r7, #11]
 8008942:	2b01      	cmp	r3, #1
 8008944:	d002      	beq.n	800894c <set_sequence_step_timeout+0x26>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 8008946:	7afb      	ldrb	r3, [r7, #11]
 8008948:	2b02      	cmp	r3, #2
 800894a:	d138      	bne.n	80089be <set_sequence_step_timeout+0x98>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800894c:	f107 031b 	add.w	r3, r7, #27
 8008950:	461a      	mov	r2, r3
 8008952:	2100      	movs	r1, #0
 8008954:	68f8      	ldr	r0, [r7, #12]
 8008956:	f7fd f9a5 	bl	8005ca4 <VL53L0X_GetVcselPulsePeriod>
 800895a:	4603      	mov	r3, r0
 800895c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 8008960:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008964:	2b00      	cmp	r3, #0
 8008966:	d11a      	bne.n	800899e <set_sequence_step_timeout+0x78>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 8008968:	7efb      	ldrb	r3, [r7, #27]
 800896a:	461a      	mov	r2, r3
 800896c:	6879      	ldr	r1, [r7, #4]
 800896e:	68f8      	ldr	r0, [r7, #12]
 8008970:	f7ff fea4 	bl	80086bc <VL53L0X_calc_timeout_mclks>
 8008974:	4603      	mov	r3, r0
 8008976:	83bb      	strh	r3, [r7, #28]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 8008978:	8bbb      	ldrh	r3, [r7, #28]
 800897a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800897e:	d903      	bls.n	8008988 <set_sequence_step_timeout+0x62>
				MsrcEncodedTimeOut = 255;
 8008980:	23ff      	movs	r3, #255	; 0xff
 8008982:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8008986:	e004      	b.n	8008992 <set_sequence_step_timeout+0x6c>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 8008988:	8bbb      	ldrh	r3, [r7, #28]
 800898a:	b2db      	uxtb	r3, r3
				MsrcEncodedTimeOut =
 800898c:	3b01      	subs	r3, #1
 800898e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8008992:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008996:	b29a      	uxth	r2, r3
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 800899e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	f040 80ab 	bne.w	8008afe <set_sequence_step_timeout+0x1d8>
			Status = VL53L0X_WrByte(Dev,
 80089a8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80089ac:	461a      	mov	r2, r3
 80089ae:	2146      	movs	r1, #70	; 0x46
 80089b0:	68f8      	ldr	r0, [r7, #12]
 80089b2:	f001 fc11 	bl	800a1d8 <VL53L0X_WrByte>
 80089b6:	4603      	mov	r3, r0
 80089b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (Status == VL53L0X_ERROR_NONE) {
 80089bc:	e09f      	b.n	8008afe <set_sequence_step_timeout+0x1d8>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 80089be:	7afb      	ldrb	r3, [r7, #11]
 80089c0:	2b03      	cmp	r3, #3
 80089c2:	d135      	bne.n	8008a30 <set_sequence_step_timeout+0x10a>

			if (Status == VL53L0X_ERROR_NONE) {
 80089c4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d11b      	bne.n	8008a04 <set_sequence_step_timeout+0xde>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80089cc:	f107 031b 	add.w	r3, r7, #27
 80089d0:	461a      	mov	r2, r3
 80089d2:	2100      	movs	r1, #0
 80089d4:	68f8      	ldr	r0, [r7, #12]
 80089d6:	f7fd f965 	bl	8005ca4 <VL53L0X_GetVcselPulsePeriod>
 80089da:	4603      	mov	r3, r0
 80089dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 80089e0:	7efb      	ldrb	r3, [r7, #27]
 80089e2:	461a      	mov	r2, r3
 80089e4:	6879      	ldr	r1, [r7, #4]
 80089e6:	68f8      	ldr	r0, [r7, #12]
 80089e8:	f7ff fe68 	bl	80086bc <VL53L0X_calc_timeout_mclks>
 80089ec:	4603      	mov	r3, r0
				PreRangeTimeOutMClks =
 80089ee:	84bb      	strh	r3, [r7, #36]	; 0x24
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 80089f0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80089f2:	4618      	mov	r0, r3
 80089f4:	f7ff fe20 	bl	8008638 <VL53L0X_encode_timeout>
 80089f8:	4603      	mov	r3, r0
 80089fa:	833b      	strh	r3, [r7, #24]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80089fc:	8b3a      	ldrh	r2, [r7, #24]
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 8008a04:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d108      	bne.n	8008a1e <set_sequence_step_timeout+0xf8>
				Status = VL53L0X_WrWord(Dev,
 8008a0c:	8b3b      	ldrh	r3, [r7, #24]
 8008a0e:	461a      	mov	r2, r3
 8008a10:	2151      	movs	r1, #81	; 0x51
 8008a12:	68f8      	ldr	r0, [r7, #12]
 8008a14:	f001 fc04 	bl	800a220 <VL53L0X_WrWord>
 8008a18:	4603      	mov	r3, r0
 8008a1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 8008a1e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d16b      	bne.n	8008afe <set_sequence_step_timeout+0x1d8>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	687a      	ldr	r2, [r7, #4]
 8008a2a:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 8008a2e:	e066      	b.n	8008afe <set_sequence_step_timeout+0x1d8>
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 8008a30:	7afb      	ldrb	r3, [r7, #11]
 8008a32:	2b04      	cmp	r3, #4
 8008a34:	d160      	bne.n	8008af8 <set_sequence_step_timeout+0x1d2>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 8008a36:	f107 0310 	add.w	r3, r7, #16
 8008a3a:	4619      	mov	r1, r3
 8008a3c:	68f8      	ldr	r0, [r7, #12]
 8008a3e:	f7fd fa3d 	bl	8005ebc <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 8008a42:	2300      	movs	r3, #0
 8008a44:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (SchedulerSequenceSteps.PreRangeOn) {
 8008a46:	7cfb      	ldrb	r3, [r7, #19]
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d01d      	beq.n	8008a88 <set_sequence_step_timeout+0x162>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8008a4c:	f107 031b 	add.w	r3, r7, #27
 8008a50:	461a      	mov	r2, r3
 8008a52:	2100      	movs	r1, #0
 8008a54:	68f8      	ldr	r0, [r7, #12]
 8008a56:	f7fd f925 	bl	8005ca4 <VL53L0X_GetVcselPulsePeriod>
 8008a5a:	4603      	mov	r3, r0
 8008a5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS) */
				if (Status == VL53L0X_ERROR_NONE) {
 8008a60:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d10f      	bne.n	8008a88 <set_sequence_step_timeout+0x162>
					Status = VL53L0X_RdWord(Dev, 0x51,
 8008a68:	f107 0318 	add.w	r3, r7, #24
 8008a6c:	461a      	mov	r2, r3
 8008a6e:	2151      	movs	r1, #81	; 0x51
 8008a70:	68f8      	ldr	r0, [r7, #12]
 8008a72:	f001 fc5d 	bl	800a330 <VL53L0X_RdWord>
 8008a76:	4603      	mov	r3, r0
 8008a78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 8008a7c:	8b3b      	ldrh	r3, [r7, #24]
 8008a7e:	4618      	mov	r0, r3
 8008a80:	f7ff fe06 	bl	8008690 <VL53L0X_decode_timeout>
 8008a84:	4603      	mov	r3, r0
					PreRangeTimeOutMClks =
 8008a86:	84bb      	strh	r3, [r7, #36]	; 0x24
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 8008a88:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d109      	bne.n	8008aa4 <set_sequence_step_timeout+0x17e>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8008a90:	f107 031b 	add.w	r3, r7, #27
 8008a94:	461a      	mov	r2, r3
 8008a96:	2101      	movs	r1, #1
 8008a98:	68f8      	ldr	r0, [r7, #12]
 8008a9a:	f7fd f903 	bl	8005ca4 <VL53L0X_GetVcselPulsePeriod>
 8008a9e:	4603      	mov	r3, r0
 8008aa0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
						&CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 8008aa4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d128      	bne.n	8008afe <set_sequence_step_timeout+0x1d8>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 8008aac:	7efb      	ldrb	r3, [r7, #27]
 8008aae:	461a      	mov	r2, r3
 8008ab0:	6879      	ldr	r1, [r7, #4]
 8008ab2:	68f8      	ldr	r0, [r7, #12]
 8008ab4:	f7ff fe02 	bl	80086bc <VL53L0X_calc_timeout_mclks>
 8008ab8:	6238      	str	r0, [r7, #32]
					TimeOutMicroSecs,
					(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 8008aba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008abc:	6a3a      	ldr	r2, [r7, #32]
 8008abe:	4413      	add	r3, r2
 8008ac0:	623b      	str	r3, [r7, #32]

				FinalRangeEncodedTimeOut =
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);
 8008ac2:	6a38      	ldr	r0, [r7, #32]
 8008ac4:	f7ff fdb8 	bl	8008638 <VL53L0X_encode_timeout>
 8008ac8:	4603      	mov	r3, r0
 8008aca:	83fb      	strh	r3, [r7, #30]

				if (Status == VL53L0X_ERROR_NONE) {
 8008acc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d108      	bne.n	8008ae6 <set_sequence_step_timeout+0x1c0>
					Status = VL53L0X_WrWord(Dev, 0x71,
 8008ad4:	8bfb      	ldrh	r3, [r7, #30]
 8008ad6:	461a      	mov	r2, r3
 8008ad8:	2171      	movs	r1, #113	; 0x71
 8008ada:	68f8      	ldr	r0, [r7, #12]
 8008adc:	f001 fba0 	bl	800a220 <VL53L0X_WrWord>
 8008ae0:	4603      	mov	r3, r0
 8008ae2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
 8008ae6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d107      	bne.n	8008afe <set_sequence_step_timeout+0x1d8>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	687a      	ldr	r2, [r7, #4]
 8008af2:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 8008af6:	e002      	b.n	8008afe <set_sequence_step_timeout+0x1d8>
						FinalRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008af8:	23fc      	movs	r3, #252	; 0xfc
 8008afa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	}
	return Status;
 8008afe:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8008b02:	4618      	mov	r0, r3
 8008b04:	3728      	adds	r7, #40	; 0x28
 8008b06:	46bd      	mov	sp, r7
 8008b08:	bd80      	pop	{r7, pc}

08008b0a <VL53L0X_set_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_set_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 8008b0a:	b580      	push	{r7, lr}
 8008b0c:	b08a      	sub	sp, #40	; 0x28
 8008b0e:	af00      	add	r7, sp, #0
 8008b10:	6078      	str	r0, [r7, #4]
 8008b12:	460b      	mov	r3, r1
 8008b14:	70fb      	strb	r3, [r7, #3]
 8008b16:	4613      	mov	r3, r2
 8008b18:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008b1a:	2300      	movs	r3, #0
 8008b1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t vcsel_period_reg;
	uint8_t MinPreVcselPeriodPCLK = 12;
 8008b20:	230c      	movs	r3, #12
 8008b22:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t MaxPreVcselPeriodPCLK = 18;
 8008b26:	2312      	movs	r3, #18
 8008b28:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t MinFinalVcselPeriodPCLK = 8;
 8008b2c:	2308      	movs	r3, #8
 8008b2e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint8_t MaxFinalVcselPeriodPCLK = 14;
 8008b32:	230e      	movs	r3, #14
 8008b34:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t MeasurementTimingBudgetMicroSeconds;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t PreRangeTimeoutMicroSeconds;
	uint32_t MsrcTimeoutMicroSeconds;
	uint8_t PhaseCalInt = 0;
 8008b38:	2300      	movs	r3, #0
 8008b3a:	73fb      	strb	r3, [r7, #15]

	/* Check if valid clock period requested */

	if ((VCSELPulsePeriodPCLK % 2) != 0) {
 8008b3c:	78bb      	ldrb	r3, [r7, #2]
 8008b3e:	f003 0301 	and.w	r3, r3, #1
 8008b42:	b2db      	uxtb	r3, r3
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d003      	beq.n	8008b50 <VL53L0X_set_vcsel_pulse_period+0x46>
		/* Value must be an even number */
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008b48:	23fc      	movs	r3, #252	; 0xfc
 8008b4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008b4e:	e020      	b.n	8008b92 <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE &&
 8008b50:	78fb      	ldrb	r3, [r7, #3]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d10d      	bne.n	8008b72 <VL53L0X_set_vcsel_pulse_period+0x68>
 8008b56:	78ba      	ldrb	r2, [r7, #2]
 8008b58:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008b5c:	429a      	cmp	r2, r3
 8008b5e:	d304      	bcc.n	8008b6a <VL53L0X_set_vcsel_pulse_period+0x60>
		(VCSELPulsePeriodPCLK < MinPreVcselPeriodPCLK ||
 8008b60:	78ba      	ldrb	r2, [r7, #2]
 8008b62:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8008b66:	429a      	cmp	r2, r3
 8008b68:	d903      	bls.n	8008b72 <VL53L0X_set_vcsel_pulse_period+0x68>
		VCSELPulsePeriodPCLK > MaxPreVcselPeriodPCLK)) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008b6a:	23fc      	movs	r3, #252	; 0xfc
 8008b6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008b70:	e00f      	b.n	8008b92 <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE &&
 8008b72:	78fb      	ldrb	r3, [r7, #3]
 8008b74:	2b01      	cmp	r3, #1
 8008b76:	d10c      	bne.n	8008b92 <VL53L0X_set_vcsel_pulse_period+0x88>
 8008b78:	78ba      	ldrb	r2, [r7, #2]
 8008b7a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008b7e:	429a      	cmp	r2, r3
 8008b80:	d304      	bcc.n	8008b8c <VL53L0X_set_vcsel_pulse_period+0x82>
		(VCSELPulsePeriodPCLK < MinFinalVcselPeriodPCLK ||
 8008b82:	78ba      	ldrb	r2, [r7, #2]
 8008b84:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008b88:	429a      	cmp	r2, r3
 8008b8a:	d902      	bls.n	8008b92 <VL53L0X_set_vcsel_pulse_period+0x88>
		 VCSELPulsePeriodPCLK > MaxFinalVcselPeriodPCLK)) {

		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008b8c:	23fc      	movs	r3, #252	; 0xfc
 8008b8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Apply specific settings for the requested clock period */

	if (Status != VL53L0X_ERROR_NONE)
 8008b92:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d002      	beq.n	8008ba0 <VL53L0X_set_vcsel_pulse_period+0x96>
		return Status;
 8008b9a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008b9e:	e239      	b.n	8009014 <VL53L0X_set_vcsel_pulse_period+0x50a>


	if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE) {
 8008ba0:	78fb      	ldrb	r3, [r7, #3]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d150      	bne.n	8008c48 <VL53L0X_set_vcsel_pulse_period+0x13e>

		/* Set phase check limits */
		if (VCSELPulsePeriodPCLK == 12) {
 8008ba6:	78bb      	ldrb	r3, [r7, #2]
 8008ba8:	2b0c      	cmp	r3, #12
 8008baa:	d110      	bne.n	8008bce <VL53L0X_set_vcsel_pulse_period+0xc4>

			Status = VL53L0X_WrByte(Dev,
 8008bac:	2218      	movs	r2, #24
 8008bae:	2157      	movs	r1, #87	; 0x57
 8008bb0:	6878      	ldr	r0, [r7, #4]
 8008bb2:	f001 fb11 	bl	800a1d8 <VL53L0X_WrByte>
 8008bb6:	4603      	mov	r3, r0
 8008bb8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x18);
			Status = VL53L0X_WrByte(Dev,
 8008bbc:	2208      	movs	r2, #8
 8008bbe:	2156      	movs	r1, #86	; 0x56
 8008bc0:	6878      	ldr	r0, [r7, #4]
 8008bc2:	f001 fb09 	bl	800a1d8 <VL53L0X_WrByte>
 8008bc6:	4603      	mov	r3, r0
 8008bc8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008bcc:	e17f      	b.n	8008ece <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 14) {
 8008bce:	78bb      	ldrb	r3, [r7, #2]
 8008bd0:	2b0e      	cmp	r3, #14
 8008bd2:	d110      	bne.n	8008bf6 <VL53L0X_set_vcsel_pulse_period+0xec>

			Status = VL53L0X_WrByte(Dev,
 8008bd4:	2230      	movs	r2, #48	; 0x30
 8008bd6:	2157      	movs	r1, #87	; 0x57
 8008bd8:	6878      	ldr	r0, [r7, #4]
 8008bda:	f001 fafd 	bl	800a1d8 <VL53L0X_WrByte>
 8008bde:	4603      	mov	r3, r0
 8008be0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x30);
			Status = VL53L0X_WrByte(Dev,
 8008be4:	2208      	movs	r2, #8
 8008be6:	2156      	movs	r1, #86	; 0x56
 8008be8:	6878      	ldr	r0, [r7, #4]
 8008bea:	f001 faf5 	bl	800a1d8 <VL53L0X_WrByte>
 8008bee:	4603      	mov	r3, r0
 8008bf0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008bf4:	e16b      	b.n	8008ece <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 16) {
 8008bf6:	78bb      	ldrb	r3, [r7, #2]
 8008bf8:	2b10      	cmp	r3, #16
 8008bfa:	d110      	bne.n	8008c1e <VL53L0X_set_vcsel_pulse_period+0x114>

			Status = VL53L0X_WrByte(Dev,
 8008bfc:	2240      	movs	r2, #64	; 0x40
 8008bfe:	2157      	movs	r1, #87	; 0x57
 8008c00:	6878      	ldr	r0, [r7, #4]
 8008c02:	f001 fae9 	bl	800a1d8 <VL53L0X_WrByte>
 8008c06:	4603      	mov	r3, r0
 8008c08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x40);
			Status = VL53L0X_WrByte(Dev,
 8008c0c:	2208      	movs	r2, #8
 8008c0e:	2156      	movs	r1, #86	; 0x56
 8008c10:	6878      	ldr	r0, [r7, #4]
 8008c12:	f001 fae1 	bl	800a1d8 <VL53L0X_WrByte>
 8008c16:	4603      	mov	r3, r0
 8008c18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008c1c:	e157      	b.n	8008ece <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 18) {
 8008c1e:	78bb      	ldrb	r3, [r7, #2]
 8008c20:	2b12      	cmp	r3, #18
 8008c22:	f040 8154 	bne.w	8008ece <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 8008c26:	2250      	movs	r2, #80	; 0x50
 8008c28:	2157      	movs	r1, #87	; 0x57
 8008c2a:	6878      	ldr	r0, [r7, #4]
 8008c2c:	f001 fad4 	bl	800a1d8 <VL53L0X_WrByte>
 8008c30:	4603      	mov	r3, r0
 8008c32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x50);
			Status = VL53L0X_WrByte(Dev,
 8008c36:	2208      	movs	r2, #8
 8008c38:	2156      	movs	r1, #86	; 0x56
 8008c3a:	6878      	ldr	r0, [r7, #4]
 8008c3c:	f001 facc 	bl	800a1d8 <VL53L0X_WrByte>
 8008c40:	4603      	mov	r3, r0
 8008c42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008c46:	e142      	b.n	8008ece <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		}
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE) {
 8008c48:	78fb      	ldrb	r3, [r7, #3]
 8008c4a:	2b01      	cmp	r3, #1
 8008c4c:	f040 813f 	bne.w	8008ece <VL53L0X_set_vcsel_pulse_period+0x3c4>

		if (VCSELPulsePeriodPCLK == 8) {
 8008c50:	78bb      	ldrb	r3, [r7, #2]
 8008c52:	2b08      	cmp	r3, #8
 8008c54:	d14c      	bne.n	8008cf0 <VL53L0X_set_vcsel_pulse_period+0x1e6>

			Status = VL53L0X_WrByte(Dev,
 8008c56:	2210      	movs	r2, #16
 8008c58:	2148      	movs	r1, #72	; 0x48
 8008c5a:	6878      	ldr	r0, [r7, #4]
 8008c5c:	f001 fabc 	bl	800a1d8 <VL53L0X_WrByte>
 8008c60:	4603      	mov	r3, r0
 8008c62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x10);
			Status = VL53L0X_WrByte(Dev,
 8008c66:	2208      	movs	r2, #8
 8008c68:	2147      	movs	r1, #71	; 0x47
 8008c6a:	6878      	ldr	r0, [r7, #4]
 8008c6c:	f001 fab4 	bl	800a1d8 <VL53L0X_WrByte>
 8008c70:	4603      	mov	r3, r0
 8008c72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 8008c76:	2202      	movs	r2, #2
 8008c78:	2132      	movs	r1, #50	; 0x32
 8008c7a:	6878      	ldr	r0, [r7, #4]
 8008c7c:	f001 faac 	bl	800a1d8 <VL53L0X_WrByte>
 8008c80:	4603      	mov	r3, r0
 8008c82:	461a      	mov	r2, r3
 8008c84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008c88:	4313      	orrs	r3, r2
 8008c8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x02);
			Status |= VL53L0X_WrByte(Dev,
 8008c8e:	220c      	movs	r2, #12
 8008c90:	2130      	movs	r1, #48	; 0x30
 8008c92:	6878      	ldr	r0, [r7, #4]
 8008c94:	f001 faa0 	bl	800a1d8 <VL53L0X_WrByte>
 8008c98:	4603      	mov	r3, r0
 8008c9a:	461a      	mov	r2, r3
 8008c9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008ca0:	4313      	orrs	r3, r2
 8008ca2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x0C);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8008ca6:	2201      	movs	r2, #1
 8008ca8:	21ff      	movs	r1, #255	; 0xff
 8008caa:	6878      	ldr	r0, [r7, #4]
 8008cac:	f001 fa94 	bl	800a1d8 <VL53L0X_WrByte>
 8008cb0:	4603      	mov	r3, r0
 8008cb2:	461a      	mov	r2, r3
 8008cb4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008cb8:	4313      	orrs	r3, r2
 8008cba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 8008cbe:	2230      	movs	r2, #48	; 0x30
 8008cc0:	2130      	movs	r1, #48	; 0x30
 8008cc2:	6878      	ldr	r0, [r7, #4]
 8008cc4:	f001 fa88 	bl	800a1d8 <VL53L0X_WrByte>
 8008cc8:	4603      	mov	r3, r0
 8008cca:	461a      	mov	r2, r3
 8008ccc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008cd0:	4313      	orrs	r3, r2
 8008cd2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x30);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8008cd6:	2200      	movs	r2, #0
 8008cd8:	21ff      	movs	r1, #255	; 0xff
 8008cda:	6878      	ldr	r0, [r7, #4]
 8008cdc:	f001 fa7c 	bl	800a1d8 <VL53L0X_WrByte>
 8008ce0:	4603      	mov	r3, r0
 8008ce2:	461a      	mov	r2, r3
 8008ce4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008ce8:	4313      	orrs	r3, r2
 8008cea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008cee:	e0ee      	b.n	8008ece <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 10) {
 8008cf0:	78bb      	ldrb	r3, [r7, #2]
 8008cf2:	2b0a      	cmp	r3, #10
 8008cf4:	d14c      	bne.n	8008d90 <VL53L0X_set_vcsel_pulse_period+0x286>

			Status = VL53L0X_WrByte(Dev,
 8008cf6:	2228      	movs	r2, #40	; 0x28
 8008cf8:	2148      	movs	r1, #72	; 0x48
 8008cfa:	6878      	ldr	r0, [r7, #4]
 8008cfc:	f001 fa6c 	bl	800a1d8 <VL53L0X_WrByte>
 8008d00:	4603      	mov	r3, r0
 8008d02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x28);
			Status = VL53L0X_WrByte(Dev,
 8008d06:	2208      	movs	r2, #8
 8008d08:	2147      	movs	r1, #71	; 0x47
 8008d0a:	6878      	ldr	r0, [r7, #4]
 8008d0c:	f001 fa64 	bl	800a1d8 <VL53L0X_WrByte>
 8008d10:	4603      	mov	r3, r0
 8008d12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 8008d16:	2203      	movs	r2, #3
 8008d18:	2132      	movs	r1, #50	; 0x32
 8008d1a:	6878      	ldr	r0, [r7, #4]
 8008d1c:	f001 fa5c 	bl	800a1d8 <VL53L0X_WrByte>
 8008d20:	4603      	mov	r3, r0
 8008d22:	461a      	mov	r2, r3
 8008d24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008d28:	4313      	orrs	r3, r2
 8008d2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 8008d2e:	2209      	movs	r2, #9
 8008d30:	2130      	movs	r1, #48	; 0x30
 8008d32:	6878      	ldr	r0, [r7, #4]
 8008d34:	f001 fa50 	bl	800a1d8 <VL53L0X_WrByte>
 8008d38:	4603      	mov	r3, r0
 8008d3a:	461a      	mov	r2, r3
 8008d3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008d40:	4313      	orrs	r3, r2
 8008d42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x09);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8008d46:	2201      	movs	r2, #1
 8008d48:	21ff      	movs	r1, #255	; 0xff
 8008d4a:	6878      	ldr	r0, [r7, #4]
 8008d4c:	f001 fa44 	bl	800a1d8 <VL53L0X_WrByte>
 8008d50:	4603      	mov	r3, r0
 8008d52:	461a      	mov	r2, r3
 8008d54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008d58:	4313      	orrs	r3, r2
 8008d5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 8008d5e:	2220      	movs	r2, #32
 8008d60:	2130      	movs	r1, #48	; 0x30
 8008d62:	6878      	ldr	r0, [r7, #4]
 8008d64:	f001 fa38 	bl	800a1d8 <VL53L0X_WrByte>
 8008d68:	4603      	mov	r3, r0
 8008d6a:	461a      	mov	r2, r3
 8008d6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008d70:	4313      	orrs	r3, r2
 8008d72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8008d76:	2200      	movs	r2, #0
 8008d78:	21ff      	movs	r1, #255	; 0xff
 8008d7a:	6878      	ldr	r0, [r7, #4]
 8008d7c:	f001 fa2c 	bl	800a1d8 <VL53L0X_WrByte>
 8008d80:	4603      	mov	r3, r0
 8008d82:	461a      	mov	r2, r3
 8008d84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008d88:	4313      	orrs	r3, r2
 8008d8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008d8e:	e09e      	b.n	8008ece <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 12) {
 8008d90:	78bb      	ldrb	r3, [r7, #2]
 8008d92:	2b0c      	cmp	r3, #12
 8008d94:	d14c      	bne.n	8008e30 <VL53L0X_set_vcsel_pulse_period+0x326>

			Status = VL53L0X_WrByte(Dev,
 8008d96:	2238      	movs	r2, #56	; 0x38
 8008d98:	2148      	movs	r1, #72	; 0x48
 8008d9a:	6878      	ldr	r0, [r7, #4]
 8008d9c:	f001 fa1c 	bl	800a1d8 <VL53L0X_WrByte>
 8008da0:	4603      	mov	r3, r0
 8008da2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x38);
			Status = VL53L0X_WrByte(Dev,
 8008da6:	2208      	movs	r2, #8
 8008da8:	2147      	movs	r1, #71	; 0x47
 8008daa:	6878      	ldr	r0, [r7, #4]
 8008dac:	f001 fa14 	bl	800a1d8 <VL53L0X_WrByte>
 8008db0:	4603      	mov	r3, r0
 8008db2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 8008db6:	2203      	movs	r2, #3
 8008db8:	2132      	movs	r1, #50	; 0x32
 8008dba:	6878      	ldr	r0, [r7, #4]
 8008dbc:	f001 fa0c 	bl	800a1d8 <VL53L0X_WrByte>
 8008dc0:	4603      	mov	r3, r0
 8008dc2:	461a      	mov	r2, r3
 8008dc4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008dc8:	4313      	orrs	r3, r2
 8008dca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 8008dce:	2208      	movs	r2, #8
 8008dd0:	2130      	movs	r1, #48	; 0x30
 8008dd2:	6878      	ldr	r0, [r7, #4]
 8008dd4:	f001 fa00 	bl	800a1d8 <VL53L0X_WrByte>
 8008dd8:	4603      	mov	r3, r0
 8008dda:	461a      	mov	r2, r3
 8008ddc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008de0:	4313      	orrs	r3, r2
 8008de2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x08);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8008de6:	2201      	movs	r2, #1
 8008de8:	21ff      	movs	r1, #255	; 0xff
 8008dea:	6878      	ldr	r0, [r7, #4]
 8008dec:	f001 f9f4 	bl	800a1d8 <VL53L0X_WrByte>
 8008df0:	4603      	mov	r3, r0
 8008df2:	461a      	mov	r2, r3
 8008df4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008df8:	4313      	orrs	r3, r2
 8008dfa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 8008dfe:	2220      	movs	r2, #32
 8008e00:	2130      	movs	r1, #48	; 0x30
 8008e02:	6878      	ldr	r0, [r7, #4]
 8008e04:	f001 f9e8 	bl	800a1d8 <VL53L0X_WrByte>
 8008e08:	4603      	mov	r3, r0
 8008e0a:	461a      	mov	r2, r3
 8008e0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008e10:	4313      	orrs	r3, r2
 8008e12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8008e16:	2200      	movs	r2, #0
 8008e18:	21ff      	movs	r1, #255	; 0xff
 8008e1a:	6878      	ldr	r0, [r7, #4]
 8008e1c:	f001 f9dc 	bl	800a1d8 <VL53L0X_WrByte>
 8008e20:	4603      	mov	r3, r0
 8008e22:	461a      	mov	r2, r3
 8008e24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008e28:	4313      	orrs	r3, r2
 8008e2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008e2e:	e04e      	b.n	8008ece <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 14) {
 8008e30:	78bb      	ldrb	r3, [r7, #2]
 8008e32:	2b0e      	cmp	r3, #14
 8008e34:	d14b      	bne.n	8008ece <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 8008e36:	2248      	movs	r2, #72	; 0x48
 8008e38:	2148      	movs	r1, #72	; 0x48
 8008e3a:	6878      	ldr	r0, [r7, #4]
 8008e3c:	f001 f9cc 	bl	800a1d8 <VL53L0X_WrByte>
 8008e40:	4603      	mov	r3, r0
 8008e42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x048);
			Status = VL53L0X_WrByte(Dev,
 8008e46:	2208      	movs	r2, #8
 8008e48:	2147      	movs	r1, #71	; 0x47
 8008e4a:	6878      	ldr	r0, [r7, #4]
 8008e4c:	f001 f9c4 	bl	800a1d8 <VL53L0X_WrByte>
 8008e50:	4603      	mov	r3, r0
 8008e52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 8008e56:	2203      	movs	r2, #3
 8008e58:	2132      	movs	r1, #50	; 0x32
 8008e5a:	6878      	ldr	r0, [r7, #4]
 8008e5c:	f001 f9bc 	bl	800a1d8 <VL53L0X_WrByte>
 8008e60:	4603      	mov	r3, r0
 8008e62:	461a      	mov	r2, r3
 8008e64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008e68:	4313      	orrs	r3, r2
 8008e6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 8008e6e:	2207      	movs	r2, #7
 8008e70:	2130      	movs	r1, #48	; 0x30
 8008e72:	6878      	ldr	r0, [r7, #4]
 8008e74:	f001 f9b0 	bl	800a1d8 <VL53L0X_WrByte>
 8008e78:	4603      	mov	r3, r0
 8008e7a:	461a      	mov	r2, r3
 8008e7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008e80:	4313      	orrs	r3, r2
 8008e82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x07);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8008e86:	2201      	movs	r2, #1
 8008e88:	21ff      	movs	r1, #255	; 0xff
 8008e8a:	6878      	ldr	r0, [r7, #4]
 8008e8c:	f001 f9a4 	bl	800a1d8 <VL53L0X_WrByte>
 8008e90:	4603      	mov	r3, r0
 8008e92:	461a      	mov	r2, r3
 8008e94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008e98:	4313      	orrs	r3, r2
 8008e9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 8008e9e:	2220      	movs	r2, #32
 8008ea0:	2130      	movs	r1, #48	; 0x30
 8008ea2:	6878      	ldr	r0, [r7, #4]
 8008ea4:	f001 f998 	bl	800a1d8 <VL53L0X_WrByte>
 8008ea8:	4603      	mov	r3, r0
 8008eaa:	461a      	mov	r2, r3
 8008eac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008eb0:	4313      	orrs	r3, r2
 8008eb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8008eb6:	2200      	movs	r2, #0
 8008eb8:	21ff      	movs	r1, #255	; 0xff
 8008eba:	6878      	ldr	r0, [r7, #4]
 8008ebc:	f001 f98c 	bl	800a1d8 <VL53L0X_WrByte>
 8008ec0:	4603      	mov	r3, r0
 8008ec2:	461a      	mov	r2, r3
 8008ec4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008ec8:	4313      	orrs	r3, r2
 8008eca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}


	/* Re-calculate and apply timeouts, in macro periods */

	if (Status == VL53L0X_ERROR_NONE) {
 8008ece:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d17f      	bne.n	8008fd6 <VL53L0X_set_vcsel_pulse_period+0x4cc>
		vcsel_period_reg = VL53L0X_encode_vcsel_period((uint8_t)
 8008ed6:	78bb      	ldrb	r3, [r7, #2]
 8008ed8:	4618      	mov	r0, r3
 8008eda:	f7fe fe38 	bl	8007b4e <VL53L0X_encode_vcsel_period>
 8008ede:	4603      	mov	r3, r0
 8008ee0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		* using the new VCSEL period.
		*
		* For the MSRC timeout, the same applies - this timeout being
		* dependant on the pre-range vcsel period.
		*/
		switch (VcselPeriodType) {
 8008ee4:	78fb      	ldrb	r3, [r7, #3]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d002      	beq.n	8008ef0 <VL53L0X_set_vcsel_pulse_period+0x3e6>
 8008eea:	2b01      	cmp	r3, #1
 8008eec:	d045      	beq.n	8008f7a <VL53L0X_set_vcsel_pulse_period+0x470>
 8008eee:	e06e      	b.n	8008fce <VL53L0X_set_vcsel_pulse_period+0x4c4>
		case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
			Status = get_sequence_step_timeout(Dev,
 8008ef0:	f107 0314 	add.w	r3, r7, #20
 8008ef4:	461a      	mov	r2, r3
 8008ef6:	2103      	movs	r1, #3
 8008ef8:	6878      	ldr	r0, [r7, #4]
 8008efa:	f7ff fc33 	bl	8008764 <get_sequence_step_timeout>
 8008efe:	4603      	mov	r3, r0
 8008f00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 8008f04:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d109      	bne.n	8008f20 <VL53L0X_set_vcsel_pulse_period+0x416>
				Status = get_sequence_step_timeout(Dev,
 8008f0c:	f107 0310 	add.w	r3, r7, #16
 8008f10:	461a      	mov	r2, r3
 8008f12:	2102      	movs	r1, #2
 8008f14:	6878      	ldr	r0, [r7, #4]
 8008f16:	f7ff fc25 	bl	8008764 <get_sequence_step_timeout>
 8008f1a:	4603      	mov	r3, r0
 8008f1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					&MsrcTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 8008f20:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d109      	bne.n	8008f3c <VL53L0X_set_vcsel_pulse_period+0x432>
				Status = VL53L0X_WrByte(Dev,
 8008f28:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8008f2c:	461a      	mov	r2, r3
 8008f2e:	2150      	movs	r1, #80	; 0x50
 8008f30:	6878      	ldr	r0, [r7, #4]
 8008f32:	f001 f951 	bl	800a1d8 <VL53L0X_WrByte>
 8008f36:	4603      	mov	r3, r0
 8008f38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 8008f3c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d108      	bne.n	8008f56 <VL53L0X_set_vcsel_pulse_period+0x44c>
				Status = set_sequence_step_timeout(Dev,
 8008f44:	697b      	ldr	r3, [r7, #20]
 8008f46:	461a      	mov	r2, r3
 8008f48:	2103      	movs	r1, #3
 8008f4a:	6878      	ldr	r0, [r7, #4]
 8008f4c:	f7ff fceb 	bl	8008926 <set_sequence_step_timeout>
 8008f50:	4603      	mov	r3, r0
 8008f52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_PRE_RANGE,
					PreRangeTimeoutMicroSeconds);


			if (Status == VL53L0X_ERROR_NONE)
 8008f56:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d108      	bne.n	8008f70 <VL53L0X_set_vcsel_pulse_period+0x466>
				Status = set_sequence_step_timeout(Dev,
 8008f5e:	693b      	ldr	r3, [r7, #16]
 8008f60:	461a      	mov	r2, r3
 8008f62:	2102      	movs	r1, #2
 8008f64:	6878      	ldr	r0, [r7, #4]
 8008f66:	f7ff fcde 	bl	8008926 <set_sequence_step_timeout>
 8008f6a:	4603      	mov	r3, r0
 8008f6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					MsrcTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	78ba      	ldrb	r2, [r7, #2]
 8008f74:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				Dev,
				PreRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 8008f78:	e02e      	b.n	8008fd8 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
			Status = get_sequence_step_timeout(Dev,
 8008f7a:	f107 0318 	add.w	r3, r7, #24
 8008f7e:	461a      	mov	r2, r3
 8008f80:	2104      	movs	r1, #4
 8008f82:	6878      	ldr	r0, [r7, #4]
 8008f84:	f7ff fbee 	bl	8008764 <get_sequence_step_timeout>
 8008f88:	4603      	mov	r3, r0
 8008f8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_FINAL_RANGE,
				&FinalRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 8008f8e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d109      	bne.n	8008faa <VL53L0X_set_vcsel_pulse_period+0x4a0>
				Status = VL53L0X_WrByte(Dev,
 8008f96:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8008f9a:	461a      	mov	r2, r3
 8008f9c:	2170      	movs	r1, #112	; 0x70
 8008f9e:	6878      	ldr	r0, [r7, #4]
 8008fa0:	f001 f91a 	bl	800a1d8 <VL53L0X_WrByte>
 8008fa4:	4603      	mov	r3, r0
 8008fa6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 8008faa:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d108      	bne.n	8008fc4 <VL53L0X_set_vcsel_pulse_period+0x4ba>
				Status = set_sequence_step_timeout(Dev,
 8008fb2:	69bb      	ldr	r3, [r7, #24]
 8008fb4:	461a      	mov	r2, r3
 8008fb6:	2104      	movs	r1, #4
 8008fb8:	6878      	ldr	r0, [r7, #4]
 8008fba:	f7ff fcb4 	bl	8008926 <set_sequence_step_timeout>
 8008fbe:	4603      	mov	r3, r0
 8008fc0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					FinalRangeTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	78ba      	ldrb	r2, [r7, #2]
 8008fc8:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				Dev,
				FinalRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 8008fcc:	e004      	b.n	8008fd8 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008fce:	23fc      	movs	r3, #252	; 0xfc
 8008fd0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008fd4:	e000      	b.n	8008fd8 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		}
	}
 8008fd6:	bf00      	nop

	/* Finally, the timing budget must be re-applied */
	if (Status == VL53L0X_ERROR_NONE) {
 8008fd8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d109      	bne.n	8008ff4 <VL53L0X_set_vcsel_pulse_period+0x4ea>
		VL53L0X_GETPARAMETERFIELD(Dev,
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	695b      	ldr	r3, [r3, #20]
 8008fe4:	61fb      	str	r3, [r7, #28]
			MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);

		Status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 8008fe6:	69f9      	ldr	r1, [r7, #28]
 8008fe8:	6878      	ldr	r0, [r7, #4]
 8008fea:	f7fc fe1d 	bl	8005c28 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 8008fee:	4603      	mov	r3, r0
 8008ff0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Perform the phase calibration. This is needed after changing on
	 * vcsel period.
	 * get_data_enable = 0, restore_config = 1 */
	if (Status == VL53L0X_ERROR_NONE)
 8008ff4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d109      	bne.n	8009010 <VL53L0X_set_vcsel_pulse_period+0x506>
		Status = VL53L0X_perform_phase_calibration(
 8008ffc:	f107 010f 	add.w	r1, r7, #15
 8009000:	2301      	movs	r3, #1
 8009002:	2200      	movs	r2, #0
 8009004:	6878      	ldr	r0, [r7, #4]
 8009006:	f7fe fcbd 	bl	8007984 <VL53L0X_perform_phase_calibration>
 800900a:	4603      	mov	r3, r0
 800900c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Dev, &PhaseCalInt, 0, 1);

	return Status;
 8009010:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8009014:	4618      	mov	r0, r3
 8009016:	3728      	adds	r7, #40	; 0x28
 8009018:	46bd      	mov	sp, r7
 800901a:	bd80      	pop	{r7, pc}

0800901c <VL53L0X_get_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 800901c:	b580      	push	{r7, lr}
 800901e:	b086      	sub	sp, #24
 8009020:	af00      	add	r7, sp, #0
 8009022:	60f8      	str	r0, [r7, #12]
 8009024:	460b      	mov	r3, r1
 8009026:	607a      	str	r2, [r7, #4]
 8009028:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800902a:	2300      	movs	r3, #0
 800902c:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 800902e:	7afb      	ldrb	r3, [r7, #11]
 8009030:	2b00      	cmp	r3, #0
 8009032:	d002      	beq.n	800903a <VL53L0X_get_vcsel_pulse_period+0x1e>
 8009034:	2b01      	cmp	r3, #1
 8009036:	d00a      	beq.n	800904e <VL53L0X_get_vcsel_pulse_period+0x32>
 8009038:	e013      	b.n	8009062 <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800903a:	f107 0316 	add.w	r3, r7, #22
 800903e:	461a      	mov	r2, r3
 8009040:	2150      	movs	r1, #80	; 0x50
 8009042:	68f8      	ldr	r0, [r7, #12]
 8009044:	f001 f94a 	bl	800a2dc <VL53L0X_RdByte>
 8009048:	4603      	mov	r3, r0
 800904a:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800904c:	e00b      	b.n	8009066 <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800904e:	f107 0316 	add.w	r3, r7, #22
 8009052:	461a      	mov	r2, r3
 8009054:	2170      	movs	r1, #112	; 0x70
 8009056:	68f8      	ldr	r0, [r7, #12]
 8009058:	f001 f940 	bl	800a2dc <VL53L0X_RdByte>
 800905c:	4603      	mov	r3, r0
 800905e:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 8009060:	e001      	b.n	8009066 <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009062:	23fc      	movs	r3, #252	; 0xfc
 8009064:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 8009066:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800906a:	2b00      	cmp	r3, #0
 800906c:	d107      	bne.n	800907e <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 800906e:	7dbb      	ldrb	r3, [r7, #22]
 8009070:	4618      	mov	r0, r3
 8009072:	f7fe fd59 	bl	8007b28 <VL53L0X_decode_vcsel_period>
 8009076:	4603      	mov	r3, r0
 8009078:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	701a      	strb	r2, [r3, #0]

	return Status;
 800907e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009082:	4618      	mov	r0, r3
 8009084:	3718      	adds	r7, #24
 8009086:	46bd      	mov	sp, r7
 8009088:	bd80      	pop	{r7, pc}

0800908a <VL53L0X_set_measurement_timing_budget_micro_seconds>:



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 800908a:	b580      	push	{r7, lr}
 800908c:	b092      	sub	sp, #72	; 0x48
 800908e:	af00      	add	r7, sp, #0
 8009090:	6078      	str	r0, [r7, #4]
 8009092:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009094:	2300      	movs	r3, #0
 8009096:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800909a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800909e:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 80090a0:	f240 7376 	movw	r3, #1910	; 0x776
 80090a4:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t EndOverheadMicroSeconds		= 960;
 80090a6:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80090aa:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t MsrcOverheadMicroSeconds		= 660;
 80090ac:	f44f 7325 	mov.w	r3, #660	; 0x294
 80090b0:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t TccOverheadMicroSeconds		= 590;
 80090b2:	f240 234e 	movw	r3, #590	; 0x24e
 80090b6:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t DssOverheadMicroSeconds		= 690;
 80090b8:	f240 23b2 	movw	r3, #690	; 0x2b2
 80090bc:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 80090be:	f44f 7325 	mov.w	r3, #660	; 0x294
 80090c2:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 80090c4:	f240 2326 	movw	r3, #550	; 0x226
 80090c8:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 80090ca:	2300      	movs	r3, #0
 80090cc:	60fb      	str	r3, [r7, #12]
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
 80090ce:	f644 6320 	movw	r3, #20000	; 0x4e20
 80090d2:	623b      	str	r3, [r7, #32]
	uint32_t SubTimeout = 0;
 80090d4:	2300      	movs	r3, #0
 80090d6:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	if (MeasurementTimingBudgetMicroSeconds
 80090d8:	683a      	ldr	r2, [r7, #0]
 80090da:	6a3b      	ldr	r3, [r7, #32]
 80090dc:	429a      	cmp	r2, r3
 80090de:	d205      	bcs.n	80090ec <VL53L0X_set_measurement_timing_budget_micro_seconds+0x62>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80090e0:	23fc      	movs	r3, #252	; 0xfc
 80090e2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		return Status;
 80090e6:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80090ea:	e0aa      	b.n	8009242 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 80090ec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80090ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090f0:	4413      	add	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 80090f2:	683a      	ldr	r2, [r7, #0]
 80090f4:	1ad3      	subs	r3, r2, r3
 80090f6:	643b      	str	r3, [r7, #64]	; 0x40

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 80090f8:	f107 0314 	add.w	r3, r7, #20
 80090fc:	4619      	mov	r1, r3
 80090fe:	6878      	ldr	r0, [r7, #4]
 8009100:	f7fc fedc 	bl	8005ebc <VL53L0X_GetSequenceStepEnables>
 8009104:	4603      	mov	r3, r0
 8009106:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	if (Status == VL53L0X_ERROR_NONE &&
 800910a:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800910e:	2b00      	cmp	r3, #0
 8009110:	d15b      	bne.n	80091ca <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
		(SchedulerSequenceSteps.TccOn  ||
 8009112:	7d3b      	ldrb	r3, [r7, #20]
	if (Status == VL53L0X_ERROR_NONE &&
 8009114:	2b00      	cmp	r3, #0
 8009116:	d105      	bne.n	8009124 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.MsrcOn ||
 8009118:	7d7b      	ldrb	r3, [r7, #21]
		(SchedulerSequenceSteps.TccOn  ||
 800911a:	2b00      	cmp	r3, #0
 800911c:	d102      	bne.n	8009124 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.DssOn)) {
 800911e:	7dbb      	ldrb	r3, [r7, #22]
		SchedulerSequenceSteps.MsrcOn ||
 8009120:	2b00      	cmp	r3, #0
 8009122:	d052      	beq.n	80091ca <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 8009124:	f107 0310 	add.w	r3, r7, #16
 8009128:	461a      	mov	r2, r3
 800912a:	2102      	movs	r1, #2
 800912c:	6878      	ldr	r0, [r7, #4]
 800912e:	f7ff fb19 	bl	8008764 <get_sequence_step_timeout>
 8009132:	4603      	mov	r3, r0
 8009134:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					&MsrcDccTccTimeoutMicroSeconds);

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled. */

		if (Status != VL53L0X_ERROR_NONE)
 8009138:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800913c:	2b00      	cmp	r3, #0
 800913e:	d002      	beq.n	8009146 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbc>
			return Status;
 8009140:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8009144:	e07d      	b.n	8009242 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 8009146:	7d3b      	ldrb	r3, [r7, #20]
 8009148:	2b00      	cmp	r3, #0
 800914a:	d00f      	beq.n	800916c <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 800914c:	693b      	ldr	r3, [r7, #16]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 800914e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009150:	4413      	add	r3, r2
 8009152:	61fb      	str	r3, [r7, #28]

			if (SubTimeout <
 8009154:	69fa      	ldr	r2, [r7, #28]
 8009156:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009158:	429a      	cmp	r2, r3
 800915a:	d204      	bcs.n	8009166 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xdc>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 800915c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800915e:	69fb      	ldr	r3, [r7, #28]
 8009160:	1ad3      	subs	r3, r2, r3
 8009162:	643b      	str	r3, [r7, #64]	; 0x40
 8009164:	e002      	b.n	800916c <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009166:	23fc      	movs	r3, #252	; 0xfc
 8009168:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
 800916c:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8009170:	2b00      	cmp	r3, #0
 8009172:	d002      	beq.n	800917a <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf0>
			LOG_FUNCTION_END(Status);
			return Status;
 8009174:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8009178:	e063      	b.n	8009242 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 800917a:	7dbb      	ldrb	r3, [r7, #22]
 800917c:	2b00      	cmp	r3, #0
 800917e:	d011      	beq.n	80091a4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x11a>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 8009180:	693a      	ldr	r2, [r7, #16]
 8009182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009184:	4413      	add	r3, r2
 8009186:	005b      	lsls	r3, r3, #1
 8009188:	61fb      	str	r3, [r7, #28]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800918a:	69fa      	ldr	r2, [r7, #28]
 800918c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800918e:	429a      	cmp	r2, r3
 8009190:	d204      	bcs.n	800919c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x112>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 8009192:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009194:	69fb      	ldr	r3, [r7, #28]
 8009196:	1ad3      	subs	r3, r2, r3
 8009198:	643b      	str	r3, [r7, #64]	; 0x40
 800919a:	e016      	b.n	80091ca <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800919c:	23fc      	movs	r3, #252	; 0xfc
 800919e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80091a2:	e012      	b.n	80091ca <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 80091a4:	7d7b      	ldrb	r3, [r7, #21]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d00f      	beq.n	80091ca <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 80091aa:	693b      	ldr	r3, [r7, #16]
 80091ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80091ae:	4413      	add	r3, r2
 80091b0:	61fb      	str	r3, [r7, #28]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 80091b2:	69fa      	ldr	r2, [r7, #28]
 80091b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80091b6:	429a      	cmp	r2, r3
 80091b8:	d204      	bcs.n	80091c4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x13a>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 80091ba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80091bc:	69fb      	ldr	r3, [r7, #28]
 80091be:	1ad3      	subs	r3, r2, r3
 80091c0:	643b      	str	r3, [r7, #64]	; 0x40
 80091c2:	e002      	b.n	80091ca <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 80091c4:	23fc      	movs	r3, #252	; 0xfc
 80091c6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
 80091ca:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d002      	beq.n	80091d8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x14e>
		LOG_FUNCTION_END(Status);
		return Status;
 80091d2:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80091d6:	e034      	b.n	8009242 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 80091d8:	7dfb      	ldrb	r3, [r7, #23]
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d019      	beq.n	8009212 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
 80091de:	f107 030c 	add.w	r3, r7, #12
 80091e2:	461a      	mov	r2, r3
 80091e4:	2103      	movs	r1, #3
 80091e6:	6878      	ldr	r0, [r7, #4]
 80091e8:	f7ff fabc 	bl	8008764 <get_sequence_step_timeout>
 80091ec:	4603      	mov	r3, r0
 80091ee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80091f6:	4413      	add	r3, r2
 80091f8:	61fb      	str	r3, [r7, #28]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 80091fa:	69fa      	ldr	r2, [r7, #28]
 80091fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80091fe:	429a      	cmp	r2, r3
 8009200:	d204      	bcs.n	800920c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x182>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 8009202:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009204:	69fb      	ldr	r3, [r7, #28]
 8009206:	1ad3      	subs	r3, r2, r3
 8009208:	643b      	str	r3, [r7, #64]	; 0x40
 800920a:	e002      	b.n	8009212 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800920c:	23fc      	movs	r3, #252	; 0xfc
 800920e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 8009212:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8009216:	2b00      	cmp	r3, #0
 8009218:	d111      	bne.n	800923e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>
		SchedulerSequenceSteps.FinalRangeOn) {
 800921a:	7e3b      	ldrb	r3, [r7, #24]
	if (Status == VL53L0X_ERROR_NONE &&
 800921c:	2b00      	cmp	r3, #0
 800921e:	d00e      	beq.n	800923e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>

		FinalRangeTimingBudgetMicroSeconds -=
 8009220:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009224:	1ad3      	subs	r3, r2, r3
 8009226:	643b      	str	r3, [r7, #64]	; 0x40
		 * budget and the sum of all other timeouts within the sequence.
		 * If there is no room for the final range timeout, then an error
		 * will be set. Otherwise the remaining time will be applied to
		 * the final range.
		 */
		Status = set_sequence_step_timeout(Dev,
 8009228:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800922a:	2104      	movs	r1, #4
 800922c:	6878      	ldr	r0, [r7, #4]
 800922e:	f7ff fb7a 	bl	8008926 <set_sequence_step_timeout>
 8009232:	4603      	mov	r3, r0
 8009234:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	683a      	ldr	r2, [r7, #0]
 800923c:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);

	return Status;
 800923e:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 8009242:	4618      	mov	r0, r3
 8009244:	3748      	adds	r7, #72	; 0x48
 8009246:	46bd      	mov	sp, r7
 8009248:	bd80      	pop	{r7, pc}

0800924a <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 800924a:	b580      	push	{r7, lr}
 800924c:	b090      	sub	sp, #64	; 0x40
 800924e:	af00      	add	r7, sp, #0
 8009250:	6078      	str	r0, [r7, #4]
 8009252:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009254:	2300      	movs	r3, #0
 8009256:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800925a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800925e:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 8009260:	f240 7376 	movw	r3, #1910	; 0x776
 8009264:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 8009266:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800926a:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800926c:	f44f 7325 	mov.w	r3, #660	; 0x294
 8009270:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 8009272:	f240 234e 	movw	r3, #590	; 0x24e
 8009276:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 8009278:	f240 23b2 	movw	r3, #690	; 0x2b2
 800927c:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800927e:	f44f 7325 	mov.w	r3, #660	; 0x294
 8009282:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 8009284:	f240 2326 	movw	r3, #550	; 0x226
 8009288:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800928a:	2300      	movs	r3, #0
 800928c:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 800928e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009290:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009292:	441a      	add	r2, r3
 8009294:	683b      	ldr	r3, [r7, #0]
 8009296:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8009298:	f107 0318 	add.w	r3, r7, #24
 800929c:	4619      	mov	r1, r3
 800929e:	6878      	ldr	r0, [r7, #4]
 80092a0:	f7fc fe0c 	bl	8005ebc <VL53L0X_GetSequenceStepEnables>
 80092a4:	4603      	mov	r3, r0
 80092a6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status != VL53L0X_ERROR_NONE) {
 80092aa:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d002      	beq.n	80092b8 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
		LOG_FUNCTION_END(Status);
		return Status;
 80092b2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80092b6:	e075      	b.n	80093a4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 80092b8:	7e3b      	ldrb	r3, [r7, #24]
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d105      	bne.n	80092ca <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 80092be:	7e7b      	ldrb	r3, [r7, #25]
	if (SchedulerSequenceSteps.TccOn  ||
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d102      	bne.n	80092ca <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn) {
 80092c4:	7ebb      	ldrb	r3, [r7, #26]
		SchedulerSequenceSteps.MsrcOn ||
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d030      	beq.n	800932c <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>

		Status = get_sequence_step_timeout(Dev,
 80092ca:	f107 0310 	add.w	r3, r7, #16
 80092ce:	461a      	mov	r2, r3
 80092d0:	2102      	movs	r1, #2
 80092d2:	6878      	ldr	r0, [r7, #4]
 80092d4:	f7ff fa46 	bl	8008764 <get_sequence_step_timeout>
 80092d8:	4603      	mov	r3, r0
 80092da:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 80092de:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d122      	bne.n	800932c <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
			if (SchedulerSequenceSteps.TccOn) {
 80092e6:	7e3b      	ldrb	r3, [r7, #24]
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d007      	beq.n	80092fc <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb2>
				*pMeasurementTimingBudgetMicroSeconds +=
 80092ec:	683b      	ldr	r3, [r7, #0]
 80092ee:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 80092f0:	6939      	ldr	r1, [r7, #16]
 80092f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092f4:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 80092f6:	441a      	add	r2, r3
 80092f8:	683b      	ldr	r3, [r7, #0]
 80092fa:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 80092fc:	7ebb      	ldrb	r3, [r7, #26]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d009      	beq.n	8009316 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xcc>
				*pMeasurementTimingBudgetMicroSeconds +=
 8009302:	683b      	ldr	r3, [r7, #0]
 8009304:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 8009306:	6939      	ldr	r1, [r7, #16]
 8009308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800930a:	440b      	add	r3, r1
 800930c:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 800930e:	441a      	add	r2, r3
 8009310:	683b      	ldr	r3, [r7, #0]
 8009312:	601a      	str	r2, [r3, #0]
 8009314:	e00a      	b.n	800932c <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 8009316:	7e7b      	ldrb	r3, [r7, #25]
 8009318:	2b00      	cmp	r3, #0
 800931a:	d007      	beq.n	800932c <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800931c:	683b      	ldr	r3, [r7, #0]
 800931e:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 8009320:	6939      	ldr	r1, [r7, #16]
 8009322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009324:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 8009326:	441a      	add	r2, r3
 8009328:	683b      	ldr	r3, [r7, #0]
 800932a:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800932c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009330:	2b00      	cmp	r3, #0
 8009332:	d114      	bne.n	800935e <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
		if (SchedulerSequenceSteps.PreRangeOn) {
 8009334:	7efb      	ldrb	r3, [r7, #27]
 8009336:	2b00      	cmp	r3, #0
 8009338:	d011      	beq.n	800935e <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
			Status = get_sequence_step_timeout(Dev,
 800933a:	f107 030c 	add.w	r3, r7, #12
 800933e:	461a      	mov	r2, r3
 8009340:	2103      	movs	r1, #3
 8009342:	6878      	ldr	r0, [r7, #4]
 8009344:	f7ff fa0e 	bl	8008764 <get_sequence_step_timeout>
 8009348:	4603      	mov	r3, r0
 800934a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800934e:	683b      	ldr	r3, [r7, #0]
 8009350:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 8009352:	68f9      	ldr	r1, [r7, #12]
 8009354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009356:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 8009358:	441a      	add	r2, r3
 800935a:	683b      	ldr	r3, [r7, #0]
 800935c:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800935e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009362:	2b00      	cmp	r3, #0
 8009364:	d114      	bne.n	8009390 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 8009366:	7f3b      	ldrb	r3, [r7, #28]
 8009368:	2b00      	cmp	r3, #0
 800936a:	d011      	beq.n	8009390 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
			Status = get_sequence_step_timeout(Dev,
 800936c:	f107 0314 	add.w	r3, r7, #20
 8009370:	461a      	mov	r2, r3
 8009372:	2104      	movs	r1, #4
 8009374:	6878      	ldr	r0, [r7, #4]
 8009376:	f7ff f9f5 	bl	8008764 <get_sequence_step_timeout>
 800937a:	4603      	mov	r3, r0
 800937c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 8009380:	683b      	ldr	r3, [r7, #0]
 8009382:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 8009384:	6979      	ldr	r1, [r7, #20]
 8009386:	6a3b      	ldr	r3, [r7, #32]
 8009388:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800938a:	441a      	add	r2, r3
 800938c:	683b      	ldr	r3, [r7, #0]
 800938e:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009390:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009394:	2b00      	cmp	r3, #0
 8009396:	d103      	bne.n	80093a0 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x156>
		VL53L0X_SETPARAMETERFIELD(Dev,
 8009398:	683b      	ldr	r3, [r7, #0]
 800939a:	681a      	ldr	r2, [r3, #0]
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80093a0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 80093a4:	4618      	mov	r0, r3
 80093a6:	3740      	adds	r7, #64	; 0x40
 80093a8:	46bd      	mov	sp, r7
 80093aa:	bd80      	pop	{r7, pc}

080093ac <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 80093ac:	b580      	push	{r7, lr}
 80093ae:	b088      	sub	sp, #32
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	6078      	str	r0, [r7, #4]
 80093b4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80093b6:	2300      	movs	r3, #0
 80093b8:	77fb      	strb	r3, [r7, #31]
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 80093ba:	2300      	movs	r3, #0
 80093bc:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 80093be:	e0c6      	b.n	800954e <VL53L0X_load_tuning_settings+0x1a2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 80093c0:	697b      	ldr	r3, [r7, #20]
 80093c2:	683a      	ldr	r2, [r7, #0]
 80093c4:	4413      	add	r3, r2
 80093c6:	781b      	ldrb	r3, [r3, #0]
 80093c8:	74fb      	strb	r3, [r7, #19]
		Index++;
 80093ca:	697b      	ldr	r3, [r7, #20]
 80093cc:	3301      	adds	r3, #1
 80093ce:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 80093d0:	7cfb      	ldrb	r3, [r7, #19]
 80093d2:	2bff      	cmp	r3, #255	; 0xff
 80093d4:	f040 808d 	bne.w	80094f2 <VL53L0X_load_tuning_settings+0x146>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 80093d8:	697b      	ldr	r3, [r7, #20]
 80093da:	683a      	ldr	r2, [r7, #0]
 80093dc:	4413      	add	r3, r2
 80093de:	781b      	ldrb	r3, [r3, #0]
 80093e0:	747b      	strb	r3, [r7, #17]
			Index++;
 80093e2:	697b      	ldr	r3, [r7, #20]
 80093e4:	3301      	adds	r3, #1
 80093e6:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 80093e8:	7c7b      	ldrb	r3, [r7, #17]
 80093ea:	2b03      	cmp	r3, #3
 80093ec:	d87e      	bhi.n	80094ec <VL53L0X_load_tuning_settings+0x140>
 80093ee:	a201      	add	r2, pc, #4	; (adr r2, 80093f4 <VL53L0X_load_tuning_settings+0x48>)
 80093f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093f4:	08009405 	.word	0x08009405
 80093f8:	0800943f 	.word	0x0800943f
 80093fc:	08009479 	.word	0x08009479
 8009400:	080094b3 	.word	0x080094b3
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8009404:	697b      	ldr	r3, [r7, #20]
 8009406:	683a      	ldr	r2, [r7, #0]
 8009408:	4413      	add	r3, r2
 800940a:	781b      	ldrb	r3, [r3, #0]
 800940c:	743b      	strb	r3, [r7, #16]
				Index++;
 800940e:	697b      	ldr	r3, [r7, #20]
 8009410:	3301      	adds	r3, #1
 8009412:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8009414:	697b      	ldr	r3, [r7, #20]
 8009416:	683a      	ldr	r2, [r7, #0]
 8009418:	4413      	add	r3, r2
 800941a:	781b      	ldrb	r3, [r3, #0]
 800941c:	73fb      	strb	r3, [r7, #15]
				Index++;
 800941e:	697b      	ldr	r3, [r7, #20]
 8009420:	3301      	adds	r3, #1
 8009422:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8009424:	7c3b      	ldrb	r3, [r7, #16]
 8009426:	b29b      	uxth	r3, r3
 8009428:	021b      	lsls	r3, r3, #8
 800942a:	b29a      	uxth	r2, r3
 800942c:	7bfb      	ldrb	r3, [r7, #15]
 800942e:	b29b      	uxth	r3, r3
 8009430:	4413      	add	r3, r2
 8009432:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	89ba      	ldrh	r2, [r7, #12]
 8009438:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
				break;
 800943c:	e087      	b.n	800954e <VL53L0X_load_tuning_settings+0x1a2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800943e:	697b      	ldr	r3, [r7, #20]
 8009440:	683a      	ldr	r2, [r7, #0]
 8009442:	4413      	add	r3, r2
 8009444:	781b      	ldrb	r3, [r3, #0]
 8009446:	743b      	strb	r3, [r7, #16]
				Index++;
 8009448:	697b      	ldr	r3, [r7, #20]
 800944a:	3301      	adds	r3, #1
 800944c:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800944e:	697b      	ldr	r3, [r7, #20]
 8009450:	683a      	ldr	r2, [r7, #0]
 8009452:	4413      	add	r3, r2
 8009454:	781b      	ldrb	r3, [r3, #0]
 8009456:	73fb      	strb	r3, [r7, #15]
				Index++;
 8009458:	697b      	ldr	r3, [r7, #20]
 800945a:	3301      	adds	r3, #1
 800945c:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800945e:	7c3b      	ldrb	r3, [r7, #16]
 8009460:	b29b      	uxth	r3, r3
 8009462:	021b      	lsls	r3, r3, #8
 8009464:	b29a      	uxth	r2, r3
 8009466:	7bfb      	ldrb	r3, [r7, #15]
 8009468:	b29b      	uxth	r3, r3
 800946a:	4413      	add	r3, r2
 800946c:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	89ba      	ldrh	r2, [r7, #12]
 8009472:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
					Temp16);
				break;
 8009476:	e06a      	b.n	800954e <VL53L0X_load_tuning_settings+0x1a2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8009478:	697b      	ldr	r3, [r7, #20]
 800947a:	683a      	ldr	r2, [r7, #0]
 800947c:	4413      	add	r3, r2
 800947e:	781b      	ldrb	r3, [r3, #0]
 8009480:	743b      	strb	r3, [r7, #16]
				Index++;
 8009482:	697b      	ldr	r3, [r7, #20]
 8009484:	3301      	adds	r3, #1
 8009486:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8009488:	697b      	ldr	r3, [r7, #20]
 800948a:	683a      	ldr	r2, [r7, #0]
 800948c:	4413      	add	r3, r2
 800948e:	781b      	ldrb	r3, [r3, #0]
 8009490:	73fb      	strb	r3, [r7, #15]
				Index++;
 8009492:	697b      	ldr	r3, [r7, #20]
 8009494:	3301      	adds	r3, #1
 8009496:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8009498:	7c3b      	ldrb	r3, [r7, #16]
 800949a:	b29b      	uxth	r3, r3
 800949c:	021b      	lsls	r3, r3, #8
 800949e:	b29a      	uxth	r2, r3
 80094a0:	7bfb      	ldrb	r3, [r7, #15]
 80094a2:	b29b      	uxth	r3, r3
 80094a4:	4413      	add	r3, r2
 80094a6:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	89ba      	ldrh	r2, [r7, #12]
 80094ac:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
				break;
 80094b0:	e04d      	b.n	800954e <VL53L0X_load_tuning_settings+0x1a2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 80094b2:	697b      	ldr	r3, [r7, #20]
 80094b4:	683a      	ldr	r2, [r7, #0]
 80094b6:	4413      	add	r3, r2
 80094b8:	781b      	ldrb	r3, [r3, #0]
 80094ba:	743b      	strb	r3, [r7, #16]
				Index++;
 80094bc:	697b      	ldr	r3, [r7, #20]
 80094be:	3301      	adds	r3, #1
 80094c0:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 80094c2:	697b      	ldr	r3, [r7, #20]
 80094c4:	683a      	ldr	r2, [r7, #0]
 80094c6:	4413      	add	r3, r2
 80094c8:	781b      	ldrb	r3, [r3, #0]
 80094ca:	73fb      	strb	r3, [r7, #15]
				Index++;
 80094cc:	697b      	ldr	r3, [r7, #20]
 80094ce:	3301      	adds	r3, #1
 80094d0:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 80094d2:	7c3b      	ldrb	r3, [r7, #16]
 80094d4:	b29b      	uxth	r3, r3
 80094d6:	021b      	lsls	r3, r3, #8
 80094d8:	b29a      	uxth	r2, r3
 80094da:	7bfb      	ldrb	r3, [r7, #15]
 80094dc:	b29b      	uxth	r3, r3
 80094de:	4413      	add	r3, r2
 80094e0:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	89ba      	ldrh	r2, [r7, #12]
 80094e6:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c
				break;
 80094ea:	e030      	b.n	800954e <VL53L0X_load_tuning_settings+0x1a2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 80094ec:	23fc      	movs	r3, #252	; 0xfc
 80094ee:	77fb      	strb	r3, [r7, #31]
 80094f0:	e02d      	b.n	800954e <VL53L0X_load_tuning_settings+0x1a2>
			}

		} else if (NumberOfWrites <= 4) {
 80094f2:	7cfb      	ldrb	r3, [r7, #19]
 80094f4:	2b04      	cmp	r3, #4
 80094f6:	d828      	bhi.n	800954a <VL53L0X_load_tuning_settings+0x19e>
			Address = *(pTuningSettingBuffer + Index);
 80094f8:	697b      	ldr	r3, [r7, #20]
 80094fa:	683a      	ldr	r2, [r7, #0]
 80094fc:	4413      	add	r3, r2
 80094fe:	781b      	ldrb	r3, [r3, #0]
 8009500:	74bb      	strb	r3, [r7, #18]
			Index++;
 8009502:	697b      	ldr	r3, [r7, #20]
 8009504:	3301      	adds	r3, #1
 8009506:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 8009508:	2300      	movs	r3, #0
 800950a:	61bb      	str	r3, [r7, #24]
 800950c:	e00f      	b.n	800952e <VL53L0X_load_tuning_settings+0x182>
				localBuffer[i] = *(pTuningSettingBuffer +
 800950e:	697b      	ldr	r3, [r7, #20]
 8009510:	683a      	ldr	r2, [r7, #0]
 8009512:	4413      	add	r3, r2
 8009514:	7819      	ldrb	r1, [r3, #0]
 8009516:	f107 0208 	add.w	r2, r7, #8
 800951a:	69bb      	ldr	r3, [r7, #24]
 800951c:	4413      	add	r3, r2
 800951e:	460a      	mov	r2, r1
 8009520:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 8009522:	697b      	ldr	r3, [r7, #20]
 8009524:	3301      	adds	r3, #1
 8009526:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 8009528:	69bb      	ldr	r3, [r7, #24]
 800952a:	3301      	adds	r3, #1
 800952c:	61bb      	str	r3, [r7, #24]
 800952e:	7cfb      	ldrb	r3, [r7, #19]
 8009530:	69ba      	ldr	r2, [r7, #24]
 8009532:	429a      	cmp	r2, r3
 8009534:	dbeb      	blt.n	800950e <VL53L0X_load_tuning_settings+0x162>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 8009536:	7cfb      	ldrb	r3, [r7, #19]
 8009538:	f107 0208 	add.w	r2, r7, #8
 800953c:	7cb9      	ldrb	r1, [r7, #18]
 800953e:	6878      	ldr	r0, [r7, #4]
 8009540:	f000 fdee 	bl	800a120 <VL53L0X_WriteMulti>
 8009544:	4603      	mov	r3, r0
 8009546:	77fb      	strb	r3, [r7, #31]
 8009548:	e001      	b.n	800954e <VL53L0X_load_tuning_settings+0x1a2>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800954a:	23fc      	movs	r3, #252	; 0xfc
 800954c:	77fb      	strb	r3, [r7, #31]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800954e:	697b      	ldr	r3, [r7, #20]
 8009550:	683a      	ldr	r2, [r7, #0]
 8009552:	4413      	add	r3, r2
 8009554:	781b      	ldrb	r3, [r3, #0]
 8009556:	2b00      	cmp	r3, #0
 8009558:	d004      	beq.n	8009564 <VL53L0X_load_tuning_settings+0x1b8>
 800955a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800955e:	2b00      	cmp	r3, #0
 8009560:	f43f af2e 	beq.w	80093c0 <VL53L0X_load_tuning_settings+0x14>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009564:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8009568:	4618      	mov	r0, r3
 800956a:	3720      	adds	r7, #32
 800956c:	46bd      	mov	sp, r7
 800956e:	bd80      	pop	{r7, pc}

08009570 <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 8009570:	b580      	push	{r7, lr}
 8009572:	b088      	sub	sp, #32
 8009574:	af00      	add	r7, sp, #0
 8009576:	60f8      	str	r0, [r7, #12]
 8009578:	60b9      	str	r1, [r7, #8]
 800957a:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800957c:	2300      	movs	r3, #0
 800957e:	77fb      	strb	r3, [r7, #31]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	2200      	movs	r2, #0
 8009584:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 8009586:	f107 0313 	add.w	r3, r7, #19
 800958a:	4619      	mov	r1, r3
 800958c:	68f8      	ldr	r0, [r7, #12]
 800958e:	f7fc fd21 	bl	8005fd4 <VL53L0X_GetXTalkCompensationEnable>
 8009592:	4603      	mov	r3, r0
 8009594:	77fb      	strb	r3, [r7, #31]
	if (Status == VL53L0X_ERROR_NONE) {
 8009596:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800959a:	2b00      	cmp	r3, #0
 800959c:	d111      	bne.n	80095c2 <VL53L0X_get_total_xtalk_rate+0x52>

		if (xtalkCompEnable) {
 800959e:	7cfb      	ldrb	r3, [r7, #19]
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d00e      	beq.n	80095c2 <VL53L0X_get_total_xtalk_rate+0x52>

			VL53L0X_GETPARAMETERFIELD(
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	6a1b      	ldr	r3, [r3, #32]
 80095a8:	61bb      	str	r3, [r7, #24]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 80095aa:	68bb      	ldr	r3, [r7, #8]
 80095ac:	8a9b      	ldrh	r3, [r3, #20]
 80095ae:	461a      	mov	r2, r3
			totalXtalkMegaCps =
 80095b0:	69bb      	ldr	r3, [r7, #24]
 80095b2:	fb02 f303 	mul.w	r3, r2, r3
 80095b6:	617b      	str	r3, [r7, #20]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 80095b8:	697b      	ldr	r3, [r7, #20]
 80095ba:	3380      	adds	r3, #128	; 0x80
 80095bc:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 80095c2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80095c6:	4618      	mov	r0, r3
 80095c8:	3720      	adds	r7, #32
 80095ca:	46bd      	mov	sp, r7
 80095cc:	bd80      	pop	{r7, pc}

080095ce <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 80095ce:	b580      	push	{r7, lr}
 80095d0:	b086      	sub	sp, #24
 80095d2:	af00      	add	r7, sp, #0
 80095d4:	60f8      	str	r0, [r7, #12]
 80095d6:	60b9      	str	r1, [r7, #8]
 80095d8:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80095da:	2300      	movs	r3, #0
 80095dc:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 80095de:	68bb      	ldr	r3, [r7, #8]
 80095e0:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 80095e6:	f107 0310 	add.w	r3, r7, #16
 80095ea:	461a      	mov	r2, r3
 80095ec:	68b9      	ldr	r1, [r7, #8]
 80095ee:	68f8      	ldr	r0, [r7, #12]
 80095f0:	f7ff ffbe 	bl	8009570 <VL53L0X_get_total_xtalk_rate>
 80095f4:	4603      	mov	r3, r0
 80095f6:	75fb      	strb	r3, [r7, #23]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 80095f8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d105      	bne.n	800960c <VL53L0X_get_total_signal_rate+0x3e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681a      	ldr	r2, [r3, #0]
 8009604:	693b      	ldr	r3, [r7, #16]
 8009606:	441a      	add	r2, r3
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	601a      	str	r2, [r3, #0]

	return Status;
 800960c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009610:	4618      	mov	r0, r3
 8009612:	3718      	adds	r7, #24
 8009614:	46bd      	mov	sp, r7
 8009616:	bd80      	pop	{r7, pc}

08009618 <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
 8009618:	b580      	push	{r7, lr}
 800961a:	b09a      	sub	sp, #104	; 0x68
 800961c:	af00      	add	r7, sp, #0
 800961e:	60f8      	str	r0, [r7, #12]
 8009620:	60b9      	str	r1, [r7, #8]
 8009622:	607a      	str	r2, [r7, #4]
 8009624:	603b      	str	r3, [r7, #0]
	const uint32_t cSigmaLimit		= 18;
 8009626:	2312      	movs	r3, #18
 8009628:	657b      	str	r3, [r7, #84]	; 0x54
	const FixPoint1616_t cSignalLimit	= 0x4000; /* 0.25 */
 800962a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800962e:	653b      	str	r3, [r7, #80]	; 0x50
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 8009630:	2342      	movs	r3, #66	; 0x42
 8009632:	64fb      	str	r3, [r7, #76]	; 0x4c
	const uint32_t cAmbEffWidthSigmaEst_ns = 6;
 8009634:	2306      	movs	r3, #6
 8009636:	64bb      	str	r3, [r7, #72]	; 0x48
	const uint32_t cAmbEffWidthDMax_ns	   = 7;
 8009638:	2307      	movs	r3, #7
 800963a:	647b      	str	r3, [r7, #68]	; 0x44
	FixPoint1616_t dmaxAmbient;
	FixPoint1616_t dmaxDarkTmp;
	FixPoint1616_t sigmaEstP2Tmp;
	uint32_t signalRateTemp_mcps;

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800963c:	2300      	movs	r3, #0
 800963e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	LOG_FUNCTION_START("");

	dmaxCalRange_mm =
		PALDevDataGet(Dev, DmaxCalRangeMilliMeter);
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
	dmaxCalRange_mm =
 8009648:	63fb      	str	r3, [r7, #60]	; 0x3c

	dmaxCalSignalRateRtn_mcps =
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 8009650:	63bb      	str	r3, [r7, #56]	; 0x38
		PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 8009652:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009654:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009656:	fb02 f303 	mul.w	r3, r2, r3
 800965a:	637b      	str	r3, [r7, #52]	; 0x34

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 800965c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800965e:	3380      	adds	r3, #128	; 0x80
 8009660:	0a1b      	lsrs	r3, r3, #8
 8009662:	637b      	str	r3, [r7, #52]	; 0x34
	SignalAt0mm *= dmaxCalRange_mm;
 8009664:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009666:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009668:	fb02 f303 	mul.w	r3, r2, r3
 800966c:	637b      	str	r3, [r7, #52]	; 0x34

	minSignalNeeded_p1 = 0;
 800966e:	2300      	movs	r3, #0
 8009670:	667b      	str	r3, [r7, #100]	; 0x64
	if (totalCorrSignalRate_mcps > 0) {
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	2b00      	cmp	r3, #0
 8009676:	d01a      	beq.n	80096ae <VL53L0X_calc_dmax+0x96>

		/* Shift by 10 bits to increase resolution prior to the
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;
 8009678:	68bb      	ldr	r3, [r7, #8]
 800967a:	029b      	lsls	r3, r3, #10
 800967c:	633b      	str	r3, [r7, #48]	; 0x30

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
			(totalCorrSignalRate_mcps/2);
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	085b      	lsrs	r3, r3, #1
		minSignalNeeded_p1 = signalRateTemp_mcps +
 8009682:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009684:	4413      	add	r3, r2
 8009686:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 8009688:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009690:	667b      	str	r3, [r7, #100]	; 0x64

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
 8009692:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009694:	4613      	mov	r3, r2
 8009696:	005b      	lsls	r3, r3, #1
 8009698:	4413      	add	r3, r2
 800969a:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 800969c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800969e:	fb03 f303 	mul.w	r3, r3, r3
 80096a2:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 80096a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80096a6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80096aa:	0c1b      	lsrs	r3, r3, #16
 80096ac:	667b      	str	r3, [r7, #100]	; 0x64
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 80096ae:	683b      	ldr	r3, [r7, #0]
 80096b0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80096b2:	fb02 f303 	mul.w	r3, r2, r3
 80096b6:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* FixPoint1616 >> 16 =	 uint32 */
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 80096b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096ba:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80096be:	0c1b      	lsrs	r3, r3, #16
 80096c0:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* uint32 * uint32	=  uint32 */
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 80096c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096c4:	fb03 f303 	mul.w	r3, r3, r3
 80096c8:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 80096ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80096cc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80096d0:	0c1b      	lsrs	r3, r3, #16
 80096d2:	62bb      	str	r3, [r7, #40]	; 0x28
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 80096d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80096d6:	085a      	lsrs	r2, r3, #1
 80096d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096da:	441a      	add	r2, r3
 80096dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80096de:	fbb2 f3f3 	udiv	r3, r2, r3
 80096e2:	62bb      	str	r3, [r7, #40]	; 0x28
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 80096e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80096e8:	fb02 f303 	mul.w	r3, r2, r3
 80096ec:	62bb      	str	r3, [r7, #40]	; 0x28

	if (sigmaEstP2Tmp > 0xffff) {
 80096ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80096f4:	d302      	bcc.n	80096fc <VL53L0X_calc_dmax+0xe4>
		minSignalNeeded_p3 = 0xfff00000;
 80096f6:	4b54      	ldr	r3, [pc, #336]	; (8009848 <VL53L0X_calc_dmax+0x230>)
 80096f8:	663b      	str	r3, [r7, #96]	; 0x60
 80096fa:	e015      	b.n	8009728 <VL53L0X_calc_dmax+0x110>

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 80096fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80096fe:	085a      	lsrs	r2, r3, #1
 8009700:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009702:	441a      	add	r2, r3
 8009704:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009706:	fbb2 f3f3 	udiv	r3, r2, r3
 800970a:	677b      	str	r3, [r7, #116]	; 0x74
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 800970c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800970e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009710:	fb02 f303 	mul.w	r3, r2, r3
 8009714:	677b      	str	r3, [r7, #116]	; 0x74

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 8009716:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009718:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800971c:	0c1b      	lsrs	r3, r3, #16
 800971e:	663b      	str	r3, [r7, #96]	; 0x60

		minSignalNeeded_p3 *= minSignalNeeded_p3;
 8009720:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009722:	fb03 f303 	mul.w	r3, r3, r3
 8009726:	663b      	str	r3, [r7, #96]	; 0x60

	}

	/* FixPoint1814 / uint32 = FixPoint1814 */
	sigmaLimitTmp = ((cSigmaLimit << 14) + 500) / 1000;
 8009728:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800972a:	039b      	lsls	r3, r3, #14
 800972c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8009730:	4a46      	ldr	r2, [pc, #280]	; (800984c <VL53L0X_calc_dmax+0x234>)
 8009732:	fba2 2303 	umull	r2, r3, r2, r3
 8009736:	099b      	lsrs	r3, r3, #6
 8009738:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1814 * FixPoint1814 = FixPoint3628 := FixPoint0428 */
	sigmaLimitTmp *= sigmaLimitTmp;
 800973a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800973c:	fb03 f303 	mul.w	r3, r3, r3
 8009740:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
	sigmaEstSqTmp = cSigmaEstRef * cSigmaEstRef;
 8009742:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009744:	fb03 f303 	mul.w	r3, r3, r3
 8009748:	623b      	str	r3, [r7, #32]

	/* FixPoint3232 >> 4 = FixPoint0428 */
	sigmaEstSqTmp = (sigmaEstSqTmp + 0x08) >> 4;
 800974a:	6a3b      	ldr	r3, [r7, #32]
 800974c:	3308      	adds	r3, #8
 800974e:	091b      	lsrs	r3, r3, #4
 8009750:	623b      	str	r3, [r7, #32]

	/* FixPoint0428 - FixPoint0428	= FixPoint0428 */
	sigmaLimitTmp -=  sigmaEstSqTmp;
 8009752:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009754:	6a3b      	ldr	r3, [r7, #32]
 8009756:	1ad3      	subs	r3, r2, r3
 8009758:	627b      	str	r3, [r7, #36]	; 0x24

	/* uint32_t * FixPoint0428 = FixPoint0428 */
	minSignalNeeded_p4 = 4 * 12 * sigmaLimitTmp;
 800975a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800975c:	4613      	mov	r3, r2
 800975e:	005b      	lsls	r3, r3, #1
 8009760:	4413      	add	r3, r2
 8009762:	011b      	lsls	r3, r3, #4
 8009764:	61fb      	str	r3, [r7, #28]

	/* FixPoint0428 >> 14 = FixPoint1814 */
	minSignalNeeded_p4 = (minSignalNeeded_p4 + 0x2000) >> 14;
 8009766:	69fb      	ldr	r3, [r7, #28]
 8009768:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800976c:	0b9b      	lsrs	r3, r3, #14
 800976e:	61fb      	str	r3, [r7, #28]

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);
 8009770:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009772:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009774:	4413      	add	r3, r2
 8009776:	61bb      	str	r3, [r7, #24]

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
 8009778:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800977a:	085b      	lsrs	r3, r3, #1
 800977c:	69ba      	ldr	r2, [r7, #24]
 800977e:	4413      	add	r3, r2
 8009780:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= peakVcselDuration_us;
 8009782:	69ba      	ldr	r2, [r7, #24]
 8009784:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009786:	fbb2 f3f3 	udiv	r3, r2, r3
 800978a:	61bb      	str	r3, [r7, #24]

	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;
 800978c:	69bb      	ldr	r3, [r7, #24]
 800978e:	039b      	lsls	r3, r3, #14
 8009790:	61bb      	str	r3, [r7, #24]

	/* FixPoint1814 / FixPoint1814 = uint32 */
	minSignalNeeded += (minSignalNeeded_p4/2);
 8009792:	69fb      	ldr	r3, [r7, #28]
 8009794:	085b      	lsrs	r3, r3, #1
 8009796:	69ba      	ldr	r2, [r7, #24]
 8009798:	4413      	add	r3, r2
 800979a:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= minSignalNeeded_p4;
 800979c:	69ba      	ldr	r2, [r7, #24]
 800979e:	69fb      	ldr	r3, [r7, #28]
 80097a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80097a4:	61bb      	str	r3, [r7, #24]

	/* FixPoint3200 * FixPoint2804 := FixPoint2804*/
	minSignalNeeded *= minSignalNeeded_p1;
 80097a6:	69bb      	ldr	r3, [r7, #24]
 80097a8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80097aa:	fb02 f303 	mul.w	r3, r2, r3
 80097ae:	61bb      	str	r3, [r7, #24]
	 * and 10E-22 on the denominator.
	 * We do this because 32bit fix point calculation can't
	 * handle the larger and smaller elements of this equation,
	 * i.e. speed of light and pulse widths.
	 */
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 80097b0:	69bb      	ldr	r3, [r7, #24]
 80097b2:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80097b6:	4a25      	ldr	r2, [pc, #148]	; (800984c <VL53L0X_calc_dmax+0x234>)
 80097b8:	fba2 2303 	umull	r2, r3, r2, r3
 80097bc:	099b      	lsrs	r3, r3, #6
 80097be:	61bb      	str	r3, [r7, #24]
	minSignalNeeded <<= 4;
 80097c0:	69bb      	ldr	r3, [r7, #24]
 80097c2:	011b      	lsls	r3, r3, #4
 80097c4:	61bb      	str	r3, [r7, #24]

	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 80097c6:	69bb      	ldr	r3, [r7, #24]
 80097c8:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80097cc:	4a1f      	ldr	r2, [pc, #124]	; (800984c <VL53L0X_calc_dmax+0x234>)
 80097ce:	fba2 2303 	umull	r2, r3, r2, r3
 80097d2:	099b      	lsrs	r3, r3, #6
 80097d4:	61bb      	str	r3, [r7, #24]

	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;
 80097d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80097d8:	3380      	adds	r3, #128	; 0x80
 80097da:	0a1b      	lsrs	r3, r3, #8
 80097dc:	617b      	str	r3, [r7, #20]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
 80097de:	697b      	ldr	r3, [r7, #20]
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d008      	beq.n	80097f6 <VL53L0X_calc_dmax+0x1de>
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 80097e4:	697b      	ldr	r3, [r7, #20]
 80097e6:	085a      	lsrs	r2, r3, #1
 80097e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097ea:	441a      	add	r2, r3
 80097ec:	697b      	ldr	r3, [r7, #20]
 80097ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80097f2:	65bb      	str	r3, [r7, #88]	; 0x58
 80097f4:	e001      	b.n	80097fa <VL53L0X_calc_dmax+0x1e2>
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;
 80097f6:	2300      	movs	r3, #0
 80097f8:	65bb      	str	r3, [r7, #88]	; 0x58

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 80097fa:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80097fc:	f7fe f9ba 	bl	8007b74 <VL53L0X_isqrt>
 8009800:	6138      	str	r0, [r7, #16]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 8009802:	69bb      	ldr	r3, [r7, #24]
 8009804:	2b00      	cmp	r3, #0
 8009806:	d008      	beq.n	800981a <VL53L0X_calc_dmax+0x202>
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 8009808:	69bb      	ldr	r3, [r7, #24]
 800980a:	085a      	lsrs	r2, r3, #1
 800980c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800980e:	441a      	add	r2, r3
 8009810:	69bb      	ldr	r3, [r7, #24]
 8009812:	fbb2 f3f3 	udiv	r3, r2, r3
 8009816:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009818:	e001      	b.n	800981e <VL53L0X_calc_dmax+0x206>
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;
 800981a:	2300      	movs	r3, #0
 800981c:	65fb      	str	r3, [r7, #92]	; 0x5c

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 800981e:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8009820:	f7fe f9a8 	bl	8007b74 <VL53L0X_isqrt>
 8009824:	65f8      	str	r0, [r7, #92]	; 0x5c

	*pdmax_mm = dmaxDark;
 8009826:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009828:	693a      	ldr	r2, [r7, #16]
 800982a:	601a      	str	r2, [r3, #0]
	if (dmaxDark > dmaxAmbient)
 800982c:	693a      	ldr	r2, [r7, #16]
 800982e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009830:	429a      	cmp	r2, r3
 8009832:	d902      	bls.n	800983a <VL53L0X_calc_dmax+0x222>
		*pdmax_mm = dmaxAmbient;
 8009834:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009836:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009838:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);

	return Status;
 800983a:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
}
 800983e:	4618      	mov	r0, r3
 8009840:	3768      	adds	r7, #104	; 0x68
 8009842:	46bd      	mov	sp, r7
 8009844:	bd80      	pop	{r7, pc}
 8009846:	bf00      	nop
 8009848:	fff00000 	.word	0xfff00000
 800984c:	10624dd3 	.word	0x10624dd3

08009850 <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
 8009850:	b580      	push	{r7, lr}
 8009852:	b0b4      	sub	sp, #208	; 0xd0
 8009854:	af04      	add	r7, sp, #16
 8009856:	60f8      	str	r0, [r7, #12]
 8009858:	60b9      	str	r1, [r7, #8]
 800985a:	607a      	str	r2, [r7, #4]
 800985c:	603b      	str	r3, [r7, #0]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 800985e:	f44f 7348 	mov.w	r3, #800	; 0x320
 8009862:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 8009866:	f44f 7316 	mov.w	r3, #600	; 0x258
 800986a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	const FixPoint1616_t cDfltFinalRangeIntegrationTimeMilliSecs	= 0x00190000; /* 25ms */
 800986e:	f44f 13c8 	mov.w	r3, #1638400	; 0x190000
 8009872:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 8009876:	f241 235c 	movw	r3, #4700	; 0x125c
 800987a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 800987e:	4b9e      	ldr	r3, [pc, #632]	; (8009af8 <VL53L0X_calc_sigma_estimate+0x2a8>)
 8009880:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 8009884:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8009888:	67fb      	str	r3, [r7, #124]	; 0x7c
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 800988a:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 800988e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009892:	fbb2 f3f3 	udiv	r3, r2, r3
 8009896:	67bb      	str	r3, [r7, #120]	; 0x78
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 8009898:	4b98      	ldr	r3, [pc, #608]	; (8009afc <VL53L0X_calc_sigma_estimate+0x2ac>)
 800989a:	677b      	str	r3, [r7, #116]	; 0x74
	const uint32_t c16BitRoundingParam		= 0x00008000;
 800989c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80098a0:	673b      	str	r3, [r7, #112]	; 0x70
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 80098a2:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 80098a6:	66fb      	str	r3, [r7, #108]	; 0x6c
	const uint32_t cPllPeriod_ps			= 1655;
 80098a8:	f240 6377 	movw	r3, #1655	; 0x677
 80098ac:	66bb      	str	r3, [r7, #104]	; 0x68
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80098ae:	2300      	movs	r3, #0
 80098b0:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	 * Estimates the range sigma
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	6a1b      	ldr	r3, [r3, #32]
 80098b8:	617b      	str	r3, [r7, #20]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 80098ba:	68bb      	ldr	r3, [r7, #8]
 80098bc:	691b      	ldr	r3, [r3, #16]
 80098be:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80098c2:	fb02 f303 	mul.w	r3, r2, r3
	ambientRate_kcps =
 80098c6:	0c1b      	lsrs	r3, r3, #16
 80098c8:	667b      	str	r3, [r7, #100]	; 0x64

	correctedSignalRate_mcps =
 80098ca:	68bb      	ldr	r3, [r7, #8]
 80098cc:	68db      	ldr	r3, [r3, #12]
 80098ce:	663b      	str	r3, [r7, #96]	; 0x60
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
 80098d0:	f107 0310 	add.w	r3, r7, #16
 80098d4:	461a      	mov	r2, r3
 80098d6:	68b9      	ldr	r1, [r7, #8]
 80098d8:	68f8      	ldr	r0, [r7, #12]
 80098da:	f7ff fe78 	bl	80095ce <VL53L0X_get_total_signal_rate>
 80098de:	4603      	mov	r3, r0
 80098e0:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 80098e4:	f107 0314 	add.w	r3, r7, #20
 80098e8:	461a      	mov	r2, r3
 80098ea:	68b9      	ldr	r1, [r7, #8]
 80098ec:	68f8      	ldr	r0, [r7, #12]
 80098ee:	f7ff fe3f 	bl	8009570 <VL53L0X_get_total_xtalk_rate>
 80098f2:	4603      	mov	r3, r0
 80098f4:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 80098f8:	693b      	ldr	r3, [r7, #16]
 80098fa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80098fe:	fb02 f303 	mul.w	r3, r2, r3
 8009902:	65fb      	str	r3, [r7, #92]	; 0x5c
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 8009904:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009906:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800990a:	0c1b      	lsrs	r3, r3, #16
 800990c:	65fb      	str	r3, [r7, #92]	; 0x5c

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 800990e:	697b      	ldr	r3, [r7, #20]
 8009910:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009914:	fb02 f303 	mul.w	r3, r2, r3
 8009918:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 800991c:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8009920:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009922:	429a      	cmp	r2, r3
 8009924:	d902      	bls.n	800992c <VL53L0X_calc_sigma_estimate+0xdc>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 8009926:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009928:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (Status == VL53L0X_ERROR_NONE) {
 800992c:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 8009930:	2b00      	cmp	r3, #0
 8009932:	d168      	bne.n	8009a06 <VL53L0X_calc_sigma_estimate+0x1b6>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800993a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 8009944:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 8009948:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800994c:	461a      	mov	r2, r3
 800994e:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8009952:	68f8      	ldr	r0, [r7, #12]
 8009954:	f7fe feb2 	bl	80086bc <VL53L0X_calc_timeout_mclks>
 8009958:	6578      	str	r0, [r7, #84]	; 0x54
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8009960:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 800996a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800996e:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8009972:	461a      	mov	r2, r3
 8009974:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8009978:	68f8      	ldr	r0, [r7, #12]
 800997a:	f7fe fe9f 	bl	80086bc <VL53L0X_calc_timeout_mclks>
 800997e:	64f8      	str	r0, [r7, #76]	; 0x4c
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 8009980:	2303      	movs	r3, #3
 8009982:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		if (finalRangeVcselPCLKS == 8)
 8009986:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800998a:	2b08      	cmp	r3, #8
 800998c:	d102      	bne.n	8009994 <VL53L0X_calc_sigma_estimate+0x144>
			vcselWidth = 2;
 800998e:	2302      	movs	r3, #2
 8009990:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 8009994:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009996:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009998:	4413      	add	r3, r2
		peakVcselDuration_us = vcselWidth * 2048 *
 800999a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800999e:	fb02 f303 	mul.w	r3, r2, r3
 80099a2:	02db      	lsls	r3, r3, #11
 80099a4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 80099a8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80099ac:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80099b0:	4a53      	ldr	r2, [pc, #332]	; (8009b00 <VL53L0X_calc_sigma_estimate+0x2b0>)
 80099b2:	fba2 2303 	umull	r2, r3, r2, r3
 80099b6:	099b      	lsrs	r3, r3, #6
 80099b8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us *= cPllPeriod_ps;
 80099bc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80099c0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80099c2:	fb02 f303 	mul.w	r3, r2, r3
 80099c6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 80099ca:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80099ce:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80099d2:	4a4b      	ldr	r2, [pc, #300]	; (8009b00 <VL53L0X_calc_sigma_estimate+0x2b0>)
 80099d4:	fba2 2303 	umull	r2, r3, r2, r3
 80099d8:	099b      	lsrs	r3, r3, #6
 80099da:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 80099de:	693b      	ldr	r3, [r7, #16]
 80099e0:	3380      	adds	r3, #128	; 0x80
 80099e2:	0a1b      	lsrs	r3, r3, #8
 80099e4:	613b      	str	r3, [r7, #16]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 80099e6:	693a      	ldr	r2, [r7, #16]
 80099e8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80099ec:	fb02 f303 	mul.w	r3, r2, r3
 80099f0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 80099f4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80099f8:	3380      	adds	r3, #128	; 0x80
 80099fa:	0a1b      	lsrs	r3, r3, #8
 80099fc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 8009a00:	693b      	ldr	r3, [r7, #16]
 8009a02:	021b      	lsls	r3, r3, #8
 8009a04:	613b      	str	r3, [r7, #16]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 8009a06:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d002      	beq.n	8009a14 <VL53L0X_calc_sigma_estimate+0x1c4>
		LOG_FUNCTION_END(Status);
		return Status;
 8009a0e:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 8009a12:	e15e      	b.n	8009cd2 <VL53L0X_calc_sigma_estimate+0x482>
	}

	if (peakSignalRate_kcps == 0) {
 8009a14:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d10c      	bne.n	8009a34 <VL53L0X_calc_sigma_estimate+0x1e4>
		*pSigmaEstimate = cSigmaEstMax;
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009a20:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009a28:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		*pDmax_mm = 0;
 8009a2c:	683b      	ldr	r3, [r7, #0]
 8009a2e:	2200      	movs	r2, #0
 8009a30:	601a      	str	r2, [r3, #0]
 8009a32:	e14c      	b.n	8009cce <VL53L0X_calc_sigma_estimate+0x47e>
	} else {
		if (vcselTotalEventsRtn < 1)
 8009a34:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d102      	bne.n	8009a42 <VL53L0X_calc_sigma_estimate+0x1f2>
			vcselTotalEventsRtn = 1;
 8009a3c:	2301      	movs	r3, #1
 8009a3e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 8009a42:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009a46:	64bb      	str	r3, [r7, #72]	; 0x48

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 8009a48:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009a4a:	041a      	lsls	r2, r3, #16
 8009a4c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009a4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a52:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 8009a56:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009a5a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009a5c:	429a      	cmp	r2, r3
 8009a5e:	d902      	bls.n	8009a66 <VL53L0X_calc_sigma_estimate+0x216>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 8009a60:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009a62:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 8009a66:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009a6a:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8009a6e:	fb02 f303 	mul.w	r3, r2, r3
 8009a72:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 8009a76:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8009a7a:	4613      	mov	r3, r2
 8009a7c:	005b      	lsls	r3, r3, #1
 8009a7e:	4413      	add	r3, r2
 8009a80:	009b      	lsls	r3, r3, #2
 8009a82:	4618      	mov	r0, r3
 8009a84:	f7fe f876 	bl	8007b74 <VL53L0X_isqrt>
 8009a88:	4603      	mov	r3, r0
 8009a8a:	005b      	lsls	r3, r3, #1
 8009a8c:	647b      	str	r3, [r7, #68]	; 0x44

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 8009a8e:	68bb      	ldr	r3, [r7, #8]
 8009a90:	891b      	ldrh	r3, [r3, #8]
 8009a92:	461a      	mov	r2, r3
 8009a94:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009a96:	fb02 f303 	mul.w	r3, r2, r3
 8009a9a:	643b      	str	r3, [r7, #64]	; 0x40
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8009a9c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009a9e:	041a      	lsls	r2, r3, #16
			2 * xTalkCompRate_kcps) + 500)/1000;
 8009aa0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009aa4:	005b      	lsls	r3, r3, #1
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8009aa6:	1ad3      	subs	r3, r2, r3
			2 * xTalkCompRate_kcps) + 500)/1000;
 8009aa8:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8009aac:	4a14      	ldr	r2, [pc, #80]	; (8009b00 <VL53L0X_calc_sigma_estimate+0x2b0>)
 8009aae:	fba2 2303 	umull	r2, r3, r2, r3
 8009ab2:	099b      	lsrs	r3, r3, #6
 8009ab4:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* vcselRate + xtalkCompRate */
		diff2_mcps = ((peakSignalRate_kcps << 16) + 500)/1000;
 8009ab6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009ab8:	041b      	lsls	r3, r3, #16
 8009aba:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8009abe:	4a10      	ldr	r2, [pc, #64]	; (8009b00 <VL53L0X_calc_sigma_estimate+0x2b0>)
 8009ac0:	fba2 2303 	umull	r2, r3, r2, r3
 8009ac4:	099b      	lsrs	r3, r3, #6
 8009ac6:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Shift by 8 bits to increase resolution prior to the
		 * division */
		diff1_mcps <<= 8;
 8009ac8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009aca:	021b      	lsls	r3, r3, #8
 8009acc:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 8009ace:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009ad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ad2:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	bfb8      	it	lt
 8009ada:	425b      	neglt	r3, r3
 8009adc:	637b      	str	r3, [r7, #52]	; 0x34

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 8009ade:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ae0:	021b      	lsls	r3, r3, #8
 8009ae2:	637b      	str	r3, [r7, #52]	; 0x34

		if(pRangingMeasurementData->RangeStatus != 0){
 8009ae4:	68bb      	ldr	r3, [r7, #8]
 8009ae6:	7e1b      	ldrb	r3, [r3, #24]
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d00b      	beq.n	8009b04 <VL53L0X_calc_sigma_estimate+0x2b4>
			pwMult = 1 << 16;
 8009aec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009af0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009af4:	e033      	b.n	8009b5e <VL53L0X_calc_sigma_estimate+0x30e>
 8009af6:	bf00      	nop
 8009af8:	028f87ae 	.word	0x028f87ae
 8009afc:	0006999a 	.word	0x0006999a
 8009b00:	10624dd3 	.word	0x10624dd3
		} else {
			/* FixPoint1616/uint32 = FixPoint1616 */
			pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 8009b04:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009b06:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009b0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b0e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * FixPoint1616 * FixPoint1616 = FixPoint3232, however both
			 * values are small enough such that32 bits will not be
			 * exceeded.
			 */
			pwMult *= ((1 << 16) - xTalkCorrection);
 8009b12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b14:	f5c3 3280 	rsb	r2, r3, #65536	; 0x10000
 8009b18:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009b1c:	fb02 f303 	mul.w	r3, r2, r3
 8009b20:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3232 >> 16) = FixPoint1616 */
			pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 8009b24:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8009b28:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009b2a:	4413      	add	r3, r2
 8009b2c:	0c1b      	lsrs	r3, r3, #16
 8009b2e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
			pwMult += (1 << 16);
 8009b32:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009b36:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8009b3a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * At this point the value will be 1.xx, therefore if we square
			 * the value this will exceed 32 bits. To address this perform
			 * a single shift to the right before the multiplication.
			 */
			pwMult >>= 1;
 8009b3e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009b42:	085b      	lsrs	r3, r3, #1
 8009b44:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
			pwMult = pwMult * pwMult;
 8009b48:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009b4c:	fb03 f303 	mul.w	r3, r3, r3
 8009b50:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3430 >> 14) = Fix1616 */
			pwMult >>= 14;
 8009b54:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009b58:	0b9b      	lsrs	r3, r3, #14
 8009b5a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		}

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 8009b5e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009b62:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009b64:	fb02 f303 	mul.w	r3, r2, r3
 8009b68:	633b      	str	r3, [r7, #48]	; 0x30

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 8009b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b6c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8009b70:	0c1b      	lsrs	r3, r3, #16
 8009b72:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 8009b74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b76:	fb03 f303 	mul.w	r3, r3, r3
 8009b7a:	633b      	str	r3, [r7, #48]	; 0x30

		sqr2 = sigmaEstimateP2;
 8009b7c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009b80:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 8009b82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b84:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8009b88:	0c1b      	lsrs	r3, r3, #16
 8009b8a:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 8009b8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b8e:	fb03 f303 	mul.w	r3, r3, r3
 8009b92:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 8009b94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009b96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b98:	4413      	add	r3, r2
 8009b9a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 8009b9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009b9e:	f7fd ffe9 	bl	8007b74 <VL53L0X_isqrt>
 8009ba2:	6278      	str	r0, [r7, #36]	; 0x24

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 8009ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ba6:	041b      	lsls	r3, r3, #16
 8009ba8:	627b      	str	r3, [r7, #36]	; 0x24
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 8009baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bac:	3332      	adds	r3, #50	; 0x32
 8009bae:	4a4b      	ldr	r2, [pc, #300]	; (8009cdc <VL53L0X_calc_sigma_estimate+0x48c>)
 8009bb0:	fba2 2303 	umull	r2, r3, r2, r3
 8009bb4:	095a      	lsrs	r2, r3, #5
 8009bb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009bb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8009bbc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 8009bc0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009bc4:	f640 32b5 	movw	r2, #2997	; 0xbb5
 8009bc8:	fb02 f303 	mul.w	r3, r2, r3
 8009bcc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 8009bd0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009bd4:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8009bd8:	3308      	adds	r3, #8
 8009bda:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		sigmaEstRtn		 /= 10000;
 8009bde:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009be2:	4a3f      	ldr	r2, [pc, #252]	; (8009ce0 <VL53L0X_calc_sigma_estimate+0x490>)
 8009be4:	fba2 2303 	umull	r2, r3, r2, r3
 8009be8:	0b5b      	lsrs	r3, r3, #13
 8009bea:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 8009bee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009bf2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009bf4:	429a      	cmp	r2, r3
 8009bf6:	d902      	bls.n	8009bfe <VL53L0X_calc_sigma_estimate+0x3ae>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstRtn = cSigmaEstRtnMax;
 8009bf8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009bfa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}
		finalRangeIntegrationTimeMilliSecs =
			(finalRangeTimeoutMicroSecs + preRangeTimeoutMicroSecs + 500)/1000;
 8009bfe:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8009c02:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009c06:	4413      	add	r3, r2
 8009c08:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		finalRangeIntegrationTimeMilliSecs =
 8009c0c:	4a35      	ldr	r2, [pc, #212]	; (8009ce4 <VL53L0X_calc_sigma_estimate+0x494>)
 8009c0e:	fba2 2303 	umull	r2, r3, r2, r3
 8009c12:	099b      	lsrs	r3, r3, #6
 8009c14:	623b      	str	r3, [r7, #32]
		/* sigmaEstRef = 1mm * 25ms/final range integration time (inc pre-range)
		 * sqrt(FixPoint1616/int) = FixPoint2408)
		 */
		sigmaEstRef =
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
				finalRangeIntegrationTimeMilliSecs/2)/
 8009c16:	6a3b      	ldr	r3, [r7, #32]
 8009c18:	085a      	lsrs	r2, r3, #1
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
 8009c1a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009c1e:	441a      	add	r2, r3
 8009c20:	6a3b      	ldr	r3, [r7, #32]
 8009c22:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c26:	4618      	mov	r0, r3
 8009c28:	f7fd ffa4 	bl	8007b74 <VL53L0X_isqrt>
 8009c2c:	61f8      	str	r0, [r7, #28]
				finalRangeIntegrationTimeMilliSecs);

		/* FixPoint2408 << 8 = FixPoint1616 */
		sigmaEstRef <<= 8;
 8009c2e:	69fb      	ldr	r3, [r7, #28]
 8009c30:	021b      	lsls	r3, r3, #8
 8009c32:	61fb      	str	r3, [r7, #28]
		sigmaEstRef = (sigmaEstRef + 500)/1000;
 8009c34:	69fb      	ldr	r3, [r7, #28]
 8009c36:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8009c3a:	4a2a      	ldr	r2, [pc, #168]	; (8009ce4 <VL53L0X_calc_sigma_estimate+0x494>)
 8009c3c:	fba2 2303 	umull	r2, r3, r2, r3
 8009c40:	099b      	lsrs	r3, r3, #6
 8009c42:	61fb      	str	r3, [r7, #28]

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 8009c44:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009c48:	fb03 f303 	mul.w	r3, r3, r3
 8009c4c:	633b      	str	r3, [r7, #48]	; 0x30
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = sigmaEstRef * sigmaEstRef;
 8009c4e:	69fb      	ldr	r3, [r7, #28]
 8009c50:	fb03 f303 	mul.w	r3, r3, r3
 8009c54:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 8009c56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c5a:	4413      	add	r3, r2
 8009c5c:	4618      	mov	r0, r3
 8009c5e:	f7fd ff89 	bl	8007b74 <VL53L0X_isqrt>
 8009c62:	61b8      	str	r0, [r7, #24]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 8009c64:	69bb      	ldr	r3, [r7, #24]
 8009c66:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009c6a:	fb02 f303 	mul.w	r3, r2, r3
 8009c6e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 8009c72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d009      	beq.n	8009c8c <VL53L0X_calc_sigma_estimate+0x43c>
 8009c78:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d005      	beq.n	8009c8c <VL53L0X_calc_sigma_estimate+0x43c>
 8009c80:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8009c84:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009c88:	429a      	cmp	r2, r3
 8009c8a:	d903      	bls.n	8009c94 <VL53L0X_calc_sigma_estimate+0x444>
				(sigmaEstimate > cSigmaEstMax)) {
				sigmaEstimate = cSigmaEstMax;
 8009c8c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009c90:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8009c9a:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	681a      	ldr	r2, [r3, #0]
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		Status = VL53L0X_calc_dmax(
 8009ca6:	6939      	ldr	r1, [r7, #16]
 8009ca8:	683b      	ldr	r3, [r7, #0]
 8009caa:	9303      	str	r3, [sp, #12]
 8009cac:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009cb0:	9302      	str	r3, [sp, #8]
 8009cb2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009cb6:	9301      	str	r3, [sp, #4]
 8009cb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009cba:	9300      	str	r3, [sp, #0]
 8009cbc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009cc0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009cc2:	68f8      	ldr	r0, [r7, #12]
 8009cc4:	f7ff fca8 	bl	8009618 <VL53L0X_calc_dmax>
 8009cc8:	4603      	mov	r3, r0
 8009cca:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			peakVcselDuration_us,
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009cce:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
}
 8009cd2:	4618      	mov	r0, r3
 8009cd4:	37c0      	adds	r7, #192	; 0xc0
 8009cd6:	46bd      	mov	sp, r7
 8009cd8:	bd80      	pop	{r7, pc}
 8009cda:	bf00      	nop
 8009cdc:	51eb851f 	.word	0x51eb851f
 8009ce0:	d1b71759 	.word	0xd1b71759
 8009ce4:	10624dd3 	.word	0x10624dd3

08009ce8 <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 8009ce8:	b580      	push	{r7, lr}
 8009cea:	b090      	sub	sp, #64	; 0x40
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	60f8      	str	r0, [r7, #12]
 8009cf0:	607a      	str	r2, [r7, #4]
 8009cf2:	461a      	mov	r2, r3
 8009cf4:	460b      	mov	r3, r1
 8009cf6:	72fb      	strb	r3, [r7, #11]
 8009cf8:	4613      	mov	r3, r2
 8009cfa:	813b      	strh	r3, [r7, #8]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 8009d02:	2300      	movs	r3, #0
 8009d04:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint8_t SignalRefClipflag = 0;
 8009d08:	2300      	movs	r3, #0
 8009d0a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	uint8_t RangeIgnoreThresholdflag = 0;
 8009d0e:	2300      	movs	r3, #0
 8009d10:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint8_t SigmaLimitCheckEnable = 0;
 8009d14:	2300      	movs	r3, #0
 8009d16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 8009d1a:	2300      	movs	r3, #0
 8009d1c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint8_t SignalRefClipLimitCheckEnable = 0;
 8009d20:	2300      	movs	r3, #0
 8009d22:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 8009d26:	2300      	movs	r3, #0
 8009d28:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 8009d2c:	2300      	movs	r3, #0
 8009d2e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint16_t tmpWord = 0;
 8009d32:	2300      	movs	r3, #0
 8009d34:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 8009d36:	2300      	movs	r3, #0
 8009d38:	613b      	str	r3, [r7, #16]
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 8009d3a:	7afb      	ldrb	r3, [r7, #11]
 8009d3c:	10db      	asrs	r3, r3, #3
 8009d3e:	b2db      	uxtb	r3, r3
 8009d40:	f003 030f 	and.w	r3, r3, #15
 8009d44:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	if (DeviceRangeStatusInternal == 0 ||
 8009d48:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d017      	beq.n	8009d80 <VL53L0X_get_pal_range_status+0x98>
 8009d50:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009d54:	2b05      	cmp	r3, #5
 8009d56:	d013      	beq.n	8009d80 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 5 ||
 8009d58:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009d5c:	2b07      	cmp	r3, #7
 8009d5e:	d00f      	beq.n	8009d80 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 7 ||
 8009d60:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009d64:	2b0c      	cmp	r3, #12
 8009d66:	d00b      	beq.n	8009d80 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 12 ||
 8009d68:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009d6c:	2b0d      	cmp	r3, #13
 8009d6e:	d007      	beq.n	8009d80 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 13 ||
 8009d70:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009d74:	2b0e      	cmp	r3, #14
 8009d76:	d003      	beq.n	8009d80 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 14 ||
 8009d78:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009d7c:	2b0f      	cmp	r3, #15
 8009d7e:	d103      	bne.n	8009d88 <VL53L0X_get_pal_range_status+0xa0>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 8009d80:	2301      	movs	r3, #1
 8009d82:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8009d86:	e002      	b.n	8009d8e <VL53L0X_get_pal_range_status+0xa6>
	} else {
		NoneFlag = 0;
 8009d88:	2300      	movs	r3, #0
 8009d8a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8009d8e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d109      	bne.n	8009daa <VL53L0X_get_pal_range_status+0xc2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8009d96:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8009d9a:	461a      	mov	r2, r3
 8009d9c:	2100      	movs	r1, #0
 8009d9e:	68f8      	ldr	r0, [r7, #12]
 8009da0:	f7fc f9ec 	bl	800617c <VL53L0X_GetLimitCheckEnable>
 8009da4:	4603      	mov	r3, r0
 8009da6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 8009daa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d02e      	beq.n	8009e10 <VL53L0X_get_pal_range_status+0x128>
 8009db2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d12a      	bne.n	8009e10 <VL53L0X_get_pal_range_status+0x128>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 8009dba:	f107 0310 	add.w	r3, r7, #16
 8009dbe:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8009dc2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8009dc4:	68f8      	ldr	r0, [r7, #12]
 8009dc6:	f7ff fd43 	bl	8009850 <VL53L0X_calc_sigma_estimate>
 8009dca:	4603      	mov	r3, r0
 8009dcc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 8009dd0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d103      	bne.n	8009de0 <VL53L0X_get_pal_range_status+0xf8>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 8009dd8:	693b      	ldr	r3, [r7, #16]
 8009dda:	b29a      	uxth	r2, r3
 8009ddc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009dde:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 8009de0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d113      	bne.n	8009e10 <VL53L0X_get_pal_range_status+0x128>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 8009de8:	f107 0320 	add.w	r3, r7, #32
 8009dec:	461a      	mov	r2, r3
 8009dee:	2100      	movs	r1, #0
 8009df0:	68f8      	ldr	r0, [r7, #12]
 8009df2:	f7fc fa49 	bl	8006288 <VL53L0X_GetLimitCheckValue>
 8009df6:	4603      	mov	r3, r0
 8009df8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 8009dfc:	6a3b      	ldr	r3, [r7, #32]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d006      	beq.n	8009e10 <VL53L0X_get_pal_range_status+0x128>
				(SigmaEstimate > SigmaLimitValue))
 8009e02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e04:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 8009e06:	429a      	cmp	r2, r3
 8009e08:	d902      	bls.n	8009e10 <VL53L0X_get_pal_range_status+0x128>
					/* Limit Fail */
					SigmaLimitflag = 1;
 8009e0a:	2301      	movs	r3, #1
 8009e0c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8009e10:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d109      	bne.n	8009e2c <VL53L0X_get_pal_range_status+0x144>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8009e18:	f107 0329 	add.w	r3, r7, #41	; 0x29
 8009e1c:	461a      	mov	r2, r3
 8009e1e:	2102      	movs	r1, #2
 8009e20:	68f8      	ldr	r0, [r7, #12]
 8009e22:	f7fc f9ab 	bl	800617c <VL53L0X_GetLimitCheckEnable>
 8009e26:	4603      	mov	r3, r0
 8009e28:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 8009e2c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d044      	beq.n	8009ebe <VL53L0X_get_pal_range_status+0x1d6>
 8009e34:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d140      	bne.n	8009ebe <VL53L0X_get_pal_range_status+0x1d6>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 8009e3c:	f107 031c 	add.w	r3, r7, #28
 8009e40:	461a      	mov	r2, r3
 8009e42:	2102      	movs	r1, #2
 8009e44:	68f8      	ldr	r0, [r7, #12]
 8009e46:	f7fc fa1f 	bl	8006288 <VL53L0X_GetLimitCheckValue>
 8009e4a:	4603      	mov	r3, r0
 8009e4c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		/* Read LastSignalRefMcps from device */
		if (Status == VL53L0X_ERROR_NONE)
 8009e50:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d107      	bne.n	8009e68 <VL53L0X_get_pal_range_status+0x180>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8009e58:	2201      	movs	r2, #1
 8009e5a:	21ff      	movs	r1, #255	; 0xff
 8009e5c:	68f8      	ldr	r0, [r7, #12]
 8009e5e:	f000 f9bb 	bl	800a1d8 <VL53L0X_WrByte>
 8009e62:	4603      	mov	r3, r0
 8009e64:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		if (Status == VL53L0X_ERROR_NONE)
 8009e68:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d109      	bne.n	8009e84 <VL53L0X_get_pal_range_status+0x19c>
			Status = VL53L0X_RdWord(Dev,
 8009e70:	f107 0316 	add.w	r3, r7, #22
 8009e74:	461a      	mov	r2, r3
 8009e76:	21b6      	movs	r1, #182	; 0xb6
 8009e78:	68f8      	ldr	r0, [r7, #12]
 8009e7a:	f000 fa59 	bl	800a330 <VL53L0X_RdWord>
 8009e7e:	4603      	mov	r3, r0
 8009e80:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
				&tmpWord);

		if (Status == VL53L0X_ERROR_NONE)
 8009e84:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d107      	bne.n	8009e9c <VL53L0X_get_pal_range_status+0x1b4>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8009e8c:	2200      	movs	r2, #0
 8009e8e:	21ff      	movs	r1, #255	; 0xff
 8009e90:	68f8      	ldr	r0, [r7, #12]
 8009e92:	f000 f9a1 	bl	800a1d8 <VL53L0X_WrByte>
 8009e96:	4603      	mov	r3, r0
 8009e98:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 8009e9c:	8afb      	ldrh	r3, [r7, #22]
 8009e9e:	025b      	lsls	r3, r3, #9
 8009ea0:	62fb      	str	r3, [r7, #44]	; 0x2c
		PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009ea6:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148

		if ((SignalRefClipValue > 0) &&
 8009eaa:	69fb      	ldr	r3, [r7, #28]
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d006      	beq.n	8009ebe <VL53L0X_get_pal_range_status+0x1d6>
				(LastSignalRefMcps > SignalRefClipValue)) {
 8009eb0:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 8009eb2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009eb4:	429a      	cmp	r2, r3
 8009eb6:	d902      	bls.n	8009ebe <VL53L0X_get_pal_range_status+0x1d6>
			/* Limit Fail */
			SignalRefClipflag = 1;
 8009eb8:	2301      	movs	r3, #1
 8009eba:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8009ebe:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d109      	bne.n	8009eda <VL53L0X_get_pal_range_status+0x1f2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8009ec6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009eca:	461a      	mov	r2, r3
 8009ecc:	2103      	movs	r1, #3
 8009ece:	68f8      	ldr	r0, [r7, #12]
 8009ed0:	f7fc f954 	bl	800617c <VL53L0X_GetLimitCheckEnable>
 8009ed4:	4603      	mov	r3, r0
 8009ed6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 8009eda:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d023      	beq.n	8009f2a <VL53L0X_get_pal_range_status+0x242>
 8009ee2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d11f      	bne.n	8009f2a <VL53L0X_get_pal_range_status+0x242>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 8009eea:	893b      	ldrh	r3, [r7, #8]
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d102      	bne.n	8009ef6 <VL53L0X_get_pal_range_status+0x20e>
			SignalRatePerSpad = 0;
 8009ef0:	2300      	movs	r3, #0
 8009ef2:	637b      	str	r3, [r7, #52]	; 0x34
 8009ef4:	e005      	b.n	8009f02 <VL53L0X_get_pal_range_status+0x21a>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	021a      	lsls	r2, r3, #8
 8009efa:	893b      	ldrh	r3, [r7, #8]
 8009efc:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f00:	637b      	str	r3, [r7, #52]	; 0x34
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 8009f02:	f107 0318 	add.w	r3, r7, #24
 8009f06:	461a      	mov	r2, r3
 8009f08:	2103      	movs	r1, #3
 8009f0a:	68f8      	ldr	r0, [r7, #12]
 8009f0c:	f7fc f9bc 	bl	8006288 <VL53L0X_GetLimitCheckValue>
 8009f10:	4603      	mov	r3, r0
 8009f12:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 8009f16:	69bb      	ldr	r3, [r7, #24]
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d006      	beq.n	8009f2a <VL53L0X_get_pal_range_status+0x242>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 8009f1c:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 8009f1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009f20:	429a      	cmp	r2, r3
 8009f22:	d202      	bcs.n	8009f2a <VL53L0X_get_pal_range_status+0x242>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 8009f24:	2301      	movs	r3, #1
 8009f26:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009f2a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d14a      	bne.n	8009fc8 <VL53L0X_get_pal_range_status+0x2e0>
		if (NoneFlag == 1) {
 8009f32:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8009f36:	2b01      	cmp	r3, #1
 8009f38:	d103      	bne.n	8009f42 <VL53L0X_get_pal_range_status+0x25a>
			*pPalRangeStatus = 255;	 /* NONE */
 8009f3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f3c:	22ff      	movs	r2, #255	; 0xff
 8009f3e:	701a      	strb	r2, [r3, #0]
 8009f40:	e042      	b.n	8009fc8 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 1 ||
 8009f42:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009f46:	2b01      	cmp	r3, #1
 8009f48:	d007      	beq.n	8009f5a <VL53L0X_get_pal_range_status+0x272>
 8009f4a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009f4e:	2b02      	cmp	r3, #2
 8009f50:	d003      	beq.n	8009f5a <VL53L0X_get_pal_range_status+0x272>
					DeviceRangeStatusInternal == 2 ||
 8009f52:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009f56:	2b03      	cmp	r3, #3
 8009f58:	d103      	bne.n	8009f62 <VL53L0X_get_pal_range_status+0x27a>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 8009f5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f5c:	2205      	movs	r2, #5
 8009f5e:	701a      	strb	r2, [r3, #0]
 8009f60:	e032      	b.n	8009fc8 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 6 ||
 8009f62:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009f66:	2b06      	cmp	r3, #6
 8009f68:	d003      	beq.n	8009f72 <VL53L0X_get_pal_range_status+0x28a>
 8009f6a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009f6e:	2b09      	cmp	r3, #9
 8009f70:	d103      	bne.n	8009f7a <VL53L0X_get_pal_range_status+0x292>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 8009f72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f74:	2204      	movs	r2, #4
 8009f76:	701a      	strb	r2, [r3, #0]
 8009f78:	e026      	b.n	8009fc8 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 8 ||
 8009f7a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009f7e:	2b08      	cmp	r3, #8
 8009f80:	d007      	beq.n	8009f92 <VL53L0X_get_pal_range_status+0x2aa>
 8009f82:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009f86:	2b0a      	cmp	r3, #10
 8009f88:	d003      	beq.n	8009f92 <VL53L0X_get_pal_range_status+0x2aa>
					DeviceRangeStatusInternal == 10 ||
 8009f8a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8009f8e:	2b01      	cmp	r3, #1
 8009f90:	d103      	bne.n	8009f9a <VL53L0X_get_pal_range_status+0x2b2>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 8009f92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f94:	2203      	movs	r2, #3
 8009f96:	701a      	strb	r2, [r3, #0]
 8009f98:	e016      	b.n	8009fc8 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 4 ||
 8009f9a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009f9e:	2b04      	cmp	r3, #4
 8009fa0:	d003      	beq.n	8009faa <VL53L0X_get_pal_range_status+0x2c2>
 8009fa2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8009fa6:	2b01      	cmp	r3, #1
 8009fa8:	d103      	bne.n	8009fb2 <VL53L0X_get_pal_range_status+0x2ca>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 8009faa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009fac:	2202      	movs	r2, #2
 8009fae:	701a      	strb	r2, [r3, #0]
 8009fb0:	e00a      	b.n	8009fc8 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (SigmaLimitflag == 1) {
 8009fb2:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8009fb6:	2b01      	cmp	r3, #1
 8009fb8:	d103      	bne.n	8009fc2 <VL53L0X_get_pal_range_status+0x2da>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 8009fba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009fbc:	2201      	movs	r2, #1
 8009fbe:	701a      	strb	r2, [r3, #0]
 8009fc0:	e002      	b.n	8009fc8 <VL53L0X_get_pal_range_status+0x2e0>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 8009fc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009fc4:	2200      	movs	r2, #0
 8009fc6:	701a      	strb	r2, [r3, #0]
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
 8009fc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009fca:	781b      	ldrb	r3, [r3, #0]
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d102      	bne.n	8009fd6 <VL53L0X_get_pal_range_status+0x2ee>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 8009fd0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009fd2:	2200      	movs	r2, #0
 8009fd4:	815a      	strh	r2, [r3, #10]

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8009fd6:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 8009fda:	461a      	mov	r2, r3
 8009fdc:	2101      	movs	r1, #1
 8009fde:	68f8      	ldr	r0, [r7, #12]
 8009fe0:	f7fc f8cc 	bl	800617c <VL53L0X_GetLimitCheckEnable>
 8009fe4:	4603      	mov	r3, r0
 8009fe6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 8009fea:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d14f      	bne.n	800a092 <VL53L0X_get_pal_range_status+0x3aa>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 8009ff2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d003      	beq.n	800a002 <VL53L0X_get_pal_range_status+0x31a>
 8009ffa:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8009ffe:	2b01      	cmp	r3, #1
 800a000:	d103      	bne.n	800a00a <VL53L0X_get_pal_range_status+0x322>
			Temp8 = 1;
 800a002:	2301      	movs	r3, #1
 800a004:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a008:	e002      	b.n	800a010 <VL53L0X_get_pal_range_status+0x328>
		else
			Temp8 = 0;
 800a00a:	2300      	movs	r3, #0
 800a00c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800a016:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 800a01a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a01e:	2b04      	cmp	r3, #4
 800a020:	d003      	beq.n	800a02a <VL53L0X_get_pal_range_status+0x342>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 800a022:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
		if ((DeviceRangeStatusInternal == 4) ||
 800a026:	2b00      	cmp	r3, #0
 800a028:	d103      	bne.n	800a032 <VL53L0X_get_pal_range_status+0x34a>
			Temp8 = 1;
 800a02a:	2301      	movs	r3, #1
 800a02c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a030:	e002      	b.n	800a038 <VL53L0X_get_pal_range_status+0x350>
		else
			Temp8 = 0;
 800a032:	2300      	movs	r3, #0
 800a034:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800a03e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 800a042:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800a046:	2b00      	cmp	r3, #0
 800a048:	d003      	beq.n	800a052 <VL53L0X_get_pal_range_status+0x36a>
 800a04a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800a04e:	2b01      	cmp	r3, #1
 800a050:	d103      	bne.n	800a05a <VL53L0X_get_pal_range_status+0x372>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 800a052:	2301      	movs	r3, #1
 800a054:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a058:	e002      	b.n	800a060 <VL53L0X_get_pal_range_status+0x378>
		else
			Temp8 = 0;
 800a05a:	2300      	movs	r3, #0
 800a05c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800a066:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 800a06a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d003      	beq.n	800a07a <VL53L0X_get_pal_range_status+0x392>
 800a072:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a076:	2b01      	cmp	r3, #1
 800a078:	d103      	bne.n	800a082 <VL53L0X_get_pal_range_status+0x39a>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 800a07a:	2301      	movs	r3, #1
 800a07c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a080:	e002      	b.n	800a088 <VL53L0X_get_pal_range_status+0x3a0>
		else
			Temp8 = 0;
 800a082:	2300      	movs	r3, #0
 800a084:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800a08e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a092:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f

}
 800a096:	4618      	mov	r0, r3
 800a098:	3740      	adds	r7, #64	; 0x40
 800a09a:	46bd      	mov	sp, r7
 800a09c:	bd80      	pop	{r7, pc}

0800a09e <_I2CWrite>:
#endif


uint8_t _I2CBuffer[64];

int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 800a09e:	b580      	push	{r7, lr}
 800a0a0:	b088      	sub	sp, #32
 800a0a2:	af02      	add	r7, sp, #8
 800a0a4:	60f8      	str	r0, [r7, #12]
 800a0a6:	60b9      	str	r1, [r7, #8]
 800a0a8:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	330a      	adds	r3, #10
 800a0ae:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800a0bc:	b299      	uxth	r1, r3
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	b29a      	uxth	r2, r3
 800a0c2:	697b      	ldr	r3, [r7, #20]
 800a0c4:	9300      	str	r3, [sp, #0]
 800a0c6:	4613      	mov	r3, r2
 800a0c8:	68ba      	ldr	r2, [r7, #8]
 800a0ca:	f7f8 f863 	bl	8002194 <HAL_I2C_Master_Transmit>
 800a0ce:	4603      	mov	r3, r0
 800a0d0:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800a0d2:	693b      	ldr	r3, [r7, #16]
}
 800a0d4:	4618      	mov	r0, r3
 800a0d6:	3718      	adds	r7, #24
 800a0d8:	46bd      	mov	sp, r7
 800a0da:	bd80      	pop	{r7, pc}

0800a0dc <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 800a0dc:	b580      	push	{r7, lr}
 800a0de:	b088      	sub	sp, #32
 800a0e0:	af02      	add	r7, sp, #8
 800a0e2:	60f8      	str	r0, [r7, #12]
 800a0e4:	60b9      	str	r1, [r7, #8]
 800a0e6:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	330a      	adds	r3, #10
 800a0ec:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800a0fa:	f043 0301 	orr.w	r3, r3, #1
 800a0fe:	b2db      	uxtb	r3, r3
 800a100:	b299      	uxth	r1, r3
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	b29a      	uxth	r2, r3
 800a106:	697b      	ldr	r3, [r7, #20]
 800a108:	9300      	str	r3, [sp, #0]
 800a10a:	4613      	mov	r3, r2
 800a10c:	68ba      	ldr	r2, [r7, #8]
 800a10e:	f7f8 f93f 	bl	8002390 <HAL_I2C_Master_Receive>
 800a112:	4603      	mov	r3, r0
 800a114:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800a116:	693b      	ldr	r3, [r7, #16]
}
 800a118:	4618      	mov	r0, r3
 800a11a:	3718      	adds	r7, #24
 800a11c:	46bd      	mov	sp, r7
 800a11e:	bd80      	pop	{r7, pc}

0800a120 <VL53L0X_WriteMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800a120:	b580      	push	{r7, lr}
 800a122:	b086      	sub	sp, #24
 800a124:	af00      	add	r7, sp, #0
 800a126:	60f8      	str	r0, [r7, #12]
 800a128:	607a      	str	r2, [r7, #4]
 800a12a:	603b      	str	r3, [r7, #0]
 800a12c:	460b      	mov	r3, r1
 800a12e:	72fb      	strb	r3, [r7, #11]
    int status_int;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a130:	2300      	movs	r3, #0
 800a132:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 800a134:	683b      	ldr	r3, [r7, #0]
 800a136:	2b3f      	cmp	r3, #63	; 0x3f
 800a138:	d902      	bls.n	800a140 <VL53L0X_WriteMulti+0x20>
        return VL53L0X_ERROR_INVALID_PARAMS;
 800a13a:	f06f 0303 	mvn.w	r3, #3
 800a13e:	e016      	b.n	800a16e <VL53L0X_WriteMulti+0x4e>
    }
    _I2CBuffer[0] = index;
 800a140:	4a0d      	ldr	r2, [pc, #52]	; (800a178 <VL53L0X_WriteMulti+0x58>)
 800a142:	7afb      	ldrb	r3, [r7, #11]
 800a144:	7013      	strb	r3, [r2, #0]
    memcpy(&_I2CBuffer[1], pdata, count);
 800a146:	683a      	ldr	r2, [r7, #0]
 800a148:	6879      	ldr	r1, [r7, #4]
 800a14a:	480c      	ldr	r0, [pc, #48]	; (800a17c <VL53L0X_WriteMulti+0x5c>)
 800a14c:	f000 f99e 	bl	800a48c <memcpy>
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 800a150:	683b      	ldr	r3, [r7, #0]
 800a152:	3301      	adds	r3, #1
 800a154:	461a      	mov	r2, r3
 800a156:	4908      	ldr	r1, [pc, #32]	; (800a178 <VL53L0X_WriteMulti+0x58>)
 800a158:	68f8      	ldr	r0, [r7, #12]
 800a15a:	f7ff ffa0 	bl	800a09e <_I2CWrite>
 800a15e:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800a160:	693b      	ldr	r3, [r7, #16]
 800a162:	2b00      	cmp	r3, #0
 800a164:	d001      	beq.n	800a16a <VL53L0X_WriteMulti+0x4a>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800a166:	23ec      	movs	r3, #236	; 0xec
 800a168:	75fb      	strb	r3, [r7, #23]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800a16a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a16e:	4618      	mov	r0, r3
 800a170:	3718      	adds	r7, #24
 800a172:	46bd      	mov	sp, r7
 800a174:	bd80      	pop	{r7, pc}
 800a176:	bf00      	nop
 800a178:	20000830 	.word	0x20000830
 800a17c:	20000831 	.word	0x20000831

0800a180 <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800a180:	b580      	push	{r7, lr}
 800a182:	b086      	sub	sp, #24
 800a184:	af00      	add	r7, sp, #0
 800a186:	60f8      	str	r0, [r7, #12]
 800a188:	607a      	str	r2, [r7, #4]
 800a18a:	603b      	str	r3, [r7, #0]
 800a18c:	460b      	mov	r3, r1
 800a18e:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a190:	2300      	movs	r3, #0
 800a192:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800a194:	f107 030b 	add.w	r3, r7, #11
 800a198:	2201      	movs	r2, #1
 800a19a:	4619      	mov	r1, r3
 800a19c:	68f8      	ldr	r0, [r7, #12]
 800a19e:	f7ff ff7e 	bl	800a09e <_I2CWrite>
 800a1a2:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800a1a4:	693b      	ldr	r3, [r7, #16]
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d002      	beq.n	800a1b0 <VL53L0X_ReadMulti+0x30>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800a1aa:	23ec      	movs	r3, #236	; 0xec
 800a1ac:	75fb      	strb	r3, [r7, #23]
        goto done;
 800a1ae:	e00c      	b.n	800a1ca <VL53L0X_ReadMulti+0x4a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 800a1b0:	683a      	ldr	r2, [r7, #0]
 800a1b2:	6879      	ldr	r1, [r7, #4]
 800a1b4:	68f8      	ldr	r0, [r7, #12]
 800a1b6:	f7ff ff91 	bl	800a0dc <_I2CRead>
 800a1ba:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800a1bc:	693b      	ldr	r3, [r7, #16]
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d002      	beq.n	800a1c8 <VL53L0X_ReadMulti+0x48>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800a1c2:	23ec      	movs	r3, #236	; 0xec
 800a1c4:	75fb      	strb	r3, [r7, #23]
 800a1c6:	e000      	b.n	800a1ca <VL53L0X_ReadMulti+0x4a>
    }
done:
 800a1c8:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 800a1ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a1ce:	4618      	mov	r0, r3
 800a1d0:	3718      	adds	r7, #24
 800a1d2:	46bd      	mov	sp, r7
 800a1d4:	bd80      	pop	{r7, pc}
	...

0800a1d8 <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 800a1d8:	b580      	push	{r7, lr}
 800a1da:	b084      	sub	sp, #16
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	6078      	str	r0, [r7, #4]
 800a1e0:	460b      	mov	r3, r1
 800a1e2:	70fb      	strb	r3, [r7, #3]
 800a1e4:	4613      	mov	r3, r2
 800a1e6:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a1e8:	2300      	movs	r3, #0
 800a1ea:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800a1ec:	4a0b      	ldr	r2, [pc, #44]	; (800a21c <VL53L0X_WrByte+0x44>)
 800a1ee:	78fb      	ldrb	r3, [r7, #3]
 800a1f0:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data;
 800a1f2:	4a0a      	ldr	r2, [pc, #40]	; (800a21c <VL53L0X_WrByte+0x44>)
 800a1f4:	78bb      	ldrb	r3, [r7, #2]
 800a1f6:	7053      	strb	r3, [r2, #1]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800a1f8:	2202      	movs	r2, #2
 800a1fa:	4908      	ldr	r1, [pc, #32]	; (800a21c <VL53L0X_WrByte+0x44>)
 800a1fc:	6878      	ldr	r0, [r7, #4]
 800a1fe:	f7ff ff4e 	bl	800a09e <_I2CWrite>
 800a202:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800a204:	68bb      	ldr	r3, [r7, #8]
 800a206:	2b00      	cmp	r3, #0
 800a208:	d001      	beq.n	800a20e <VL53L0X_WrByte+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800a20a:	23ec      	movs	r3, #236	; 0xec
 800a20c:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800a20e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a212:	4618      	mov	r0, r3
 800a214:	3710      	adds	r7, #16
 800a216:	46bd      	mov	sp, r7
 800a218:	bd80      	pop	{r7, pc}
 800a21a:	bf00      	nop
 800a21c:	20000830 	.word	0x20000830

0800a220 <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 800a220:	b580      	push	{r7, lr}
 800a222:	b084      	sub	sp, #16
 800a224:	af00      	add	r7, sp, #0
 800a226:	6078      	str	r0, [r7, #4]
 800a228:	460b      	mov	r3, r1
 800a22a:	70fb      	strb	r3, [r7, #3]
 800a22c:	4613      	mov	r3, r2
 800a22e:	803b      	strh	r3, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a230:	2300      	movs	r3, #0
 800a232:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800a234:	4a0e      	ldr	r2, [pc, #56]	; (800a270 <VL53L0X_WrWord+0x50>)
 800a236:	78fb      	ldrb	r3, [r7, #3]
 800a238:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data >> 8;
 800a23a:	883b      	ldrh	r3, [r7, #0]
 800a23c:	0a1b      	lsrs	r3, r3, #8
 800a23e:	b29b      	uxth	r3, r3
 800a240:	b2da      	uxtb	r2, r3
 800a242:	4b0b      	ldr	r3, [pc, #44]	; (800a270 <VL53L0X_WrWord+0x50>)
 800a244:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data & 0x00FF;
 800a246:	883b      	ldrh	r3, [r7, #0]
 800a248:	b2da      	uxtb	r2, r3
 800a24a:	4b09      	ldr	r3, [pc, #36]	; (800a270 <VL53L0X_WrWord+0x50>)
 800a24c:	709a      	strb	r2, [r3, #2]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 800a24e:	2203      	movs	r2, #3
 800a250:	4907      	ldr	r1, [pc, #28]	; (800a270 <VL53L0X_WrWord+0x50>)
 800a252:	6878      	ldr	r0, [r7, #4]
 800a254:	f7ff ff23 	bl	800a09e <_I2CWrite>
 800a258:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800a25a:	68bb      	ldr	r3, [r7, #8]
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d001      	beq.n	800a264 <VL53L0X_WrWord+0x44>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800a260:	23ec      	movs	r3, #236	; 0xec
 800a262:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800a264:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a268:	4618      	mov	r0, r3
 800a26a:	3710      	adds	r7, #16
 800a26c:	46bd      	mov	sp, r7
 800a26e:	bd80      	pop	{r7, pc}
 800a270:	20000830 	.word	0x20000830

0800a274 <VL53L0X_UpdateByte>:
    }
    VL53L0X_PutI2cBus();
    return Status;
}

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 800a274:	b580      	push	{r7, lr}
 800a276:	b084      	sub	sp, #16
 800a278:	af00      	add	r7, sp, #0
 800a27a:	6078      	str	r0, [r7, #4]
 800a27c:	4608      	mov	r0, r1
 800a27e:	4611      	mov	r1, r2
 800a280:	461a      	mov	r2, r3
 800a282:	4603      	mov	r3, r0
 800a284:	70fb      	strb	r3, [r7, #3]
 800a286:	460b      	mov	r3, r1
 800a288:	70bb      	strb	r3, [r7, #2]
 800a28a:	4613      	mov	r3, r2
 800a28c:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a28e:	2300      	movs	r3, #0
 800a290:	73fb      	strb	r3, [r7, #15]
    uint8_t data;

    Status = VL53L0X_RdByte(Dev, index, &data);
 800a292:	f107 020e 	add.w	r2, r7, #14
 800a296:	78fb      	ldrb	r3, [r7, #3]
 800a298:	4619      	mov	r1, r3
 800a29a:	6878      	ldr	r0, [r7, #4]
 800a29c:	f000 f81e 	bl	800a2dc <VL53L0X_RdByte>
 800a2a0:	4603      	mov	r3, r0
 800a2a2:	73fb      	strb	r3, [r7, #15]
    if (Status) {
 800a2a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d110      	bne.n	800a2ce <VL53L0X_UpdateByte+0x5a>
        goto done;
    }
    data = (data & AndData) | OrData;
 800a2ac:	7bba      	ldrb	r2, [r7, #14]
 800a2ae:	78bb      	ldrb	r3, [r7, #2]
 800a2b0:	4013      	ands	r3, r2
 800a2b2:	b2da      	uxtb	r2, r3
 800a2b4:	787b      	ldrb	r3, [r7, #1]
 800a2b6:	4313      	orrs	r3, r2
 800a2b8:	b2db      	uxtb	r3, r3
 800a2ba:	73bb      	strb	r3, [r7, #14]
    Status = VL53L0X_WrByte(Dev, index, data);
 800a2bc:	7bba      	ldrb	r2, [r7, #14]
 800a2be:	78fb      	ldrb	r3, [r7, #3]
 800a2c0:	4619      	mov	r1, r3
 800a2c2:	6878      	ldr	r0, [r7, #4]
 800a2c4:	f7ff ff88 	bl	800a1d8 <VL53L0X_WrByte>
 800a2c8:	4603      	mov	r3, r0
 800a2ca:	73fb      	strb	r3, [r7, #15]
 800a2cc:	e000      	b.n	800a2d0 <VL53L0X_UpdateByte+0x5c>
        goto done;
 800a2ce:	bf00      	nop
done:
    return Status;
 800a2d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a2d4:	4618      	mov	r0, r3
 800a2d6:	3710      	adds	r7, #16
 800a2d8:	46bd      	mov	sp, r7
 800a2da:	bd80      	pop	{r7, pc}

0800a2dc <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 800a2dc:	b580      	push	{r7, lr}
 800a2de:	b086      	sub	sp, #24
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	60f8      	str	r0, [r7, #12]
 800a2e4:	460b      	mov	r3, r1
 800a2e6:	607a      	str	r2, [r7, #4]
 800a2e8:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a2ea:	2300      	movs	r3, #0
 800a2ec:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800a2ee:	f107 030b 	add.w	r3, r7, #11
 800a2f2:	2201      	movs	r2, #1
 800a2f4:	4619      	mov	r1, r3
 800a2f6:	68f8      	ldr	r0, [r7, #12]
 800a2f8:	f7ff fed1 	bl	800a09e <_I2CWrite>
 800a2fc:	6138      	str	r0, [r7, #16]
    if( status_int ){
 800a2fe:	693b      	ldr	r3, [r7, #16]
 800a300:	2b00      	cmp	r3, #0
 800a302:	d002      	beq.n	800a30a <VL53L0X_RdByte+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800a304:	23ec      	movs	r3, #236	; 0xec
 800a306:	75fb      	strb	r3, [r7, #23]
        goto done;
 800a308:	e00c      	b.n	800a324 <VL53L0X_RdByte+0x48>
    }
    status_int = _I2CRead(Dev, data, 1);
 800a30a:	2201      	movs	r2, #1
 800a30c:	6879      	ldr	r1, [r7, #4]
 800a30e:	68f8      	ldr	r0, [r7, #12]
 800a310:	f7ff fee4 	bl	800a0dc <_I2CRead>
 800a314:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800a316:	693b      	ldr	r3, [r7, #16]
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d002      	beq.n	800a322 <VL53L0X_RdByte+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800a31c:	23ec      	movs	r3, #236	; 0xec
 800a31e:	75fb      	strb	r3, [r7, #23]
 800a320:	e000      	b.n	800a324 <VL53L0X_RdByte+0x48>
    }
done:
 800a322:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 800a324:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a328:	4618      	mov	r0, r3
 800a32a:	3718      	adds	r7, #24
 800a32c:	46bd      	mov	sp, r7
 800a32e:	bd80      	pop	{r7, pc}

0800a330 <VL53L0X_RdWord>:

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 800a330:	b580      	push	{r7, lr}
 800a332:	b086      	sub	sp, #24
 800a334:	af00      	add	r7, sp, #0
 800a336:	60f8      	str	r0, [r7, #12]
 800a338:	460b      	mov	r3, r1
 800a33a:	607a      	str	r2, [r7, #4]
 800a33c:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a33e:	2300      	movs	r3, #0
 800a340:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800a342:	f107 030b 	add.w	r3, r7, #11
 800a346:	2201      	movs	r2, #1
 800a348:	4619      	mov	r1, r3
 800a34a:	68f8      	ldr	r0, [r7, #12]
 800a34c:	f7ff fea7 	bl	800a09e <_I2CWrite>
 800a350:	6138      	str	r0, [r7, #16]

    if( status_int ){
 800a352:	693b      	ldr	r3, [r7, #16]
 800a354:	2b00      	cmp	r3, #0
 800a356:	d002      	beq.n	800a35e <VL53L0X_RdWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800a358:	23ec      	movs	r3, #236	; 0xec
 800a35a:	75fb      	strb	r3, [r7, #23]
        goto done;
 800a35c:	e017      	b.n	800a38e <VL53L0X_RdWord+0x5e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 800a35e:	2202      	movs	r2, #2
 800a360:	490e      	ldr	r1, [pc, #56]	; (800a39c <VL53L0X_RdWord+0x6c>)
 800a362:	68f8      	ldr	r0, [r7, #12]
 800a364:	f7ff feba 	bl	800a0dc <_I2CRead>
 800a368:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800a36a:	693b      	ldr	r3, [r7, #16]
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d002      	beq.n	800a376 <VL53L0X_RdWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800a370:	23ec      	movs	r3, #236	; 0xec
 800a372:	75fb      	strb	r3, [r7, #23]
        goto done;
 800a374:	e00b      	b.n	800a38e <VL53L0X_RdWord+0x5e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 800a376:	4b09      	ldr	r3, [pc, #36]	; (800a39c <VL53L0X_RdWord+0x6c>)
 800a378:	781b      	ldrb	r3, [r3, #0]
 800a37a:	b29b      	uxth	r3, r3
 800a37c:	021b      	lsls	r3, r3, #8
 800a37e:	b29a      	uxth	r2, r3
 800a380:	4b06      	ldr	r3, [pc, #24]	; (800a39c <VL53L0X_RdWord+0x6c>)
 800a382:	785b      	ldrb	r3, [r3, #1]
 800a384:	b29b      	uxth	r3, r3
 800a386:	4413      	add	r3, r2
 800a388:	b29a      	uxth	r2, r3
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	801a      	strh	r2, [r3, #0]
done:
    VL53L0X_PutI2cBus();
    return Status;
 800a38e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a392:	4618      	mov	r0, r3
 800a394:	3718      	adds	r7, #24
 800a396:	46bd      	mov	sp, r7
 800a398:	bd80      	pop	{r7, pc}
 800a39a:	bf00      	nop
 800a39c:	20000830 	.word	0x20000830

0800a3a0 <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 800a3a0:	b580      	push	{r7, lr}
 800a3a2:	b086      	sub	sp, #24
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	60f8      	str	r0, [r7, #12]
 800a3a8:	460b      	mov	r3, r1
 800a3aa:	607a      	str	r2, [r7, #4]
 800a3ac:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a3ae:	2300      	movs	r3, #0
 800a3b0:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800a3b2:	f107 030b 	add.w	r3, r7, #11
 800a3b6:	2201      	movs	r2, #1
 800a3b8:	4619      	mov	r1, r3
 800a3ba:	68f8      	ldr	r0, [r7, #12]
 800a3bc:	f7ff fe6f 	bl	800a09e <_I2CWrite>
 800a3c0:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800a3c2:	693b      	ldr	r3, [r7, #16]
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d002      	beq.n	800a3ce <VL53L0X_RdDWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800a3c8:	23ec      	movs	r3, #236	; 0xec
 800a3ca:	75fb      	strb	r3, [r7, #23]
        goto done;
 800a3cc:	e01b      	b.n	800a406 <VL53L0X_RdDWord+0x66>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 800a3ce:	2204      	movs	r2, #4
 800a3d0:	4910      	ldr	r1, [pc, #64]	; (800a414 <VL53L0X_RdDWord+0x74>)
 800a3d2:	68f8      	ldr	r0, [r7, #12]
 800a3d4:	f7ff fe82 	bl	800a0dc <_I2CRead>
 800a3d8:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800a3da:	693b      	ldr	r3, [r7, #16]
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d002      	beq.n	800a3e6 <VL53L0X_RdDWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800a3e0:	23ec      	movs	r3, #236	; 0xec
 800a3e2:	75fb      	strb	r3, [r7, #23]
        goto done;
 800a3e4:	e00f      	b.n	800a406 <VL53L0X_RdDWord+0x66>
    }

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 800a3e6:	4b0b      	ldr	r3, [pc, #44]	; (800a414 <VL53L0X_RdDWord+0x74>)
 800a3e8:	781b      	ldrb	r3, [r3, #0]
 800a3ea:	061a      	lsls	r2, r3, #24
 800a3ec:	4b09      	ldr	r3, [pc, #36]	; (800a414 <VL53L0X_RdDWord+0x74>)
 800a3ee:	785b      	ldrb	r3, [r3, #1]
 800a3f0:	041b      	lsls	r3, r3, #16
 800a3f2:	441a      	add	r2, r3
 800a3f4:	4b07      	ldr	r3, [pc, #28]	; (800a414 <VL53L0X_RdDWord+0x74>)
 800a3f6:	789b      	ldrb	r3, [r3, #2]
 800a3f8:	021b      	lsls	r3, r3, #8
 800a3fa:	4413      	add	r3, r2
 800a3fc:	4a05      	ldr	r2, [pc, #20]	; (800a414 <VL53L0X_RdDWord+0x74>)
 800a3fe:	78d2      	ldrb	r2, [r2, #3]
 800a400:	441a      	add	r2, r3
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	601a      	str	r2, [r3, #0]

done:
    VL53L0X_PutI2cBus();
    return Status;
 800a406:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a40a:	4618      	mov	r0, r3
 800a40c:	3718      	adds	r7, #24
 800a40e:	46bd      	mov	sp, r7
 800a410:	bd80      	pop	{r7, pc}
 800a412:	bf00      	nop
 800a414:	20000830 	.word	0x20000830

0800a418 <VL53L0X_PollingDelay>:

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev) {
 800a418:	b580      	push	{r7, lr}
 800a41a:	b084      	sub	sp, #16
 800a41c:	af00      	add	r7, sp, #0
 800a41e:	6078      	str	r0, [r7, #4]
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800a420:	2300      	movs	r3, #0
 800a422:	73fb      	strb	r3, [r7, #15]

    // do nothing
    VL53L0X_OsDelay();
 800a424:	2002      	movs	r0, #2
 800a426:	f7f7 f9df 	bl	80017e8 <HAL_Delay>
    return status;
 800a42a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a42e:	4618      	mov	r0, r3
 800a430:	3710      	adds	r7, #16
 800a432:	46bd      	mov	sp, r7
 800a434:	bd80      	pop	{r7, pc}
	...

0800a438 <__errno>:
 800a438:	4b01      	ldr	r3, [pc, #4]	; (800a440 <__errno+0x8>)
 800a43a:	6818      	ldr	r0, [r3, #0]
 800a43c:	4770      	bx	lr
 800a43e:	bf00      	nop
 800a440:	2000033c 	.word	0x2000033c

0800a444 <__libc_init_array>:
 800a444:	b570      	push	{r4, r5, r6, lr}
 800a446:	4d0d      	ldr	r5, [pc, #52]	; (800a47c <__libc_init_array+0x38>)
 800a448:	4c0d      	ldr	r4, [pc, #52]	; (800a480 <__libc_init_array+0x3c>)
 800a44a:	1b64      	subs	r4, r4, r5
 800a44c:	10a4      	asrs	r4, r4, #2
 800a44e:	2600      	movs	r6, #0
 800a450:	42a6      	cmp	r6, r4
 800a452:	d109      	bne.n	800a468 <__libc_init_array+0x24>
 800a454:	4d0b      	ldr	r5, [pc, #44]	; (800a484 <__libc_init_array+0x40>)
 800a456:	4c0c      	ldr	r4, [pc, #48]	; (800a488 <__libc_init_array+0x44>)
 800a458:	f000 fc56 	bl	800ad08 <_init>
 800a45c:	1b64      	subs	r4, r4, r5
 800a45e:	10a4      	asrs	r4, r4, #2
 800a460:	2600      	movs	r6, #0
 800a462:	42a6      	cmp	r6, r4
 800a464:	d105      	bne.n	800a472 <__libc_init_array+0x2e>
 800a466:	bd70      	pop	{r4, r5, r6, pc}
 800a468:	f855 3b04 	ldr.w	r3, [r5], #4
 800a46c:	4798      	blx	r3
 800a46e:	3601      	adds	r6, #1
 800a470:	e7ee      	b.n	800a450 <__libc_init_array+0xc>
 800a472:	f855 3b04 	ldr.w	r3, [r5], #4
 800a476:	4798      	blx	r3
 800a478:	3601      	adds	r6, #1
 800a47a:	e7f2      	b.n	800a462 <__libc_init_array+0x1e>
 800a47c:	0800ada8 	.word	0x0800ada8
 800a480:	0800ada8 	.word	0x0800ada8
 800a484:	0800ada8 	.word	0x0800ada8
 800a488:	0800adac 	.word	0x0800adac

0800a48c <memcpy>:
 800a48c:	440a      	add	r2, r1
 800a48e:	4291      	cmp	r1, r2
 800a490:	f100 33ff 	add.w	r3, r0, #4294967295
 800a494:	d100      	bne.n	800a498 <memcpy+0xc>
 800a496:	4770      	bx	lr
 800a498:	b510      	push	{r4, lr}
 800a49a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a49e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a4a2:	4291      	cmp	r1, r2
 800a4a4:	d1f9      	bne.n	800a49a <memcpy+0xe>
 800a4a6:	bd10      	pop	{r4, pc}

0800a4a8 <memset>:
 800a4a8:	4402      	add	r2, r0
 800a4aa:	4603      	mov	r3, r0
 800a4ac:	4293      	cmp	r3, r2
 800a4ae:	d100      	bne.n	800a4b2 <memset+0xa>
 800a4b0:	4770      	bx	lr
 800a4b2:	f803 1b01 	strb.w	r1, [r3], #1
 800a4b6:	e7f9      	b.n	800a4ac <memset+0x4>

0800a4b8 <siprintf>:
 800a4b8:	b40e      	push	{r1, r2, r3}
 800a4ba:	b500      	push	{lr}
 800a4bc:	b09c      	sub	sp, #112	; 0x70
 800a4be:	ab1d      	add	r3, sp, #116	; 0x74
 800a4c0:	9002      	str	r0, [sp, #8]
 800a4c2:	9006      	str	r0, [sp, #24]
 800a4c4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a4c8:	4809      	ldr	r0, [pc, #36]	; (800a4f0 <siprintf+0x38>)
 800a4ca:	9107      	str	r1, [sp, #28]
 800a4cc:	9104      	str	r1, [sp, #16]
 800a4ce:	4909      	ldr	r1, [pc, #36]	; (800a4f4 <siprintf+0x3c>)
 800a4d0:	f853 2b04 	ldr.w	r2, [r3], #4
 800a4d4:	9105      	str	r1, [sp, #20]
 800a4d6:	6800      	ldr	r0, [r0, #0]
 800a4d8:	9301      	str	r3, [sp, #4]
 800a4da:	a902      	add	r1, sp, #8
 800a4dc:	f000 f870 	bl	800a5c0 <_svfiprintf_r>
 800a4e0:	9b02      	ldr	r3, [sp, #8]
 800a4e2:	2200      	movs	r2, #0
 800a4e4:	701a      	strb	r2, [r3, #0]
 800a4e6:	b01c      	add	sp, #112	; 0x70
 800a4e8:	f85d eb04 	ldr.w	lr, [sp], #4
 800a4ec:	b003      	add	sp, #12
 800a4ee:	4770      	bx	lr
 800a4f0:	2000033c 	.word	0x2000033c
 800a4f4:	ffff0208 	.word	0xffff0208

0800a4f8 <strcpy>:
 800a4f8:	4603      	mov	r3, r0
 800a4fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a4fe:	f803 2b01 	strb.w	r2, [r3], #1
 800a502:	2a00      	cmp	r2, #0
 800a504:	d1f9      	bne.n	800a4fa <strcpy+0x2>
 800a506:	4770      	bx	lr

0800a508 <__ssputs_r>:
 800a508:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a50c:	688e      	ldr	r6, [r1, #8]
 800a50e:	429e      	cmp	r6, r3
 800a510:	4682      	mov	sl, r0
 800a512:	460c      	mov	r4, r1
 800a514:	4690      	mov	r8, r2
 800a516:	461f      	mov	r7, r3
 800a518:	d838      	bhi.n	800a58c <__ssputs_r+0x84>
 800a51a:	898a      	ldrh	r2, [r1, #12]
 800a51c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a520:	d032      	beq.n	800a588 <__ssputs_r+0x80>
 800a522:	6825      	ldr	r5, [r4, #0]
 800a524:	6909      	ldr	r1, [r1, #16]
 800a526:	eba5 0901 	sub.w	r9, r5, r1
 800a52a:	6965      	ldr	r5, [r4, #20]
 800a52c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a530:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a534:	3301      	adds	r3, #1
 800a536:	444b      	add	r3, r9
 800a538:	106d      	asrs	r5, r5, #1
 800a53a:	429d      	cmp	r5, r3
 800a53c:	bf38      	it	cc
 800a53e:	461d      	movcc	r5, r3
 800a540:	0553      	lsls	r3, r2, #21
 800a542:	d531      	bpl.n	800a5a8 <__ssputs_r+0xa0>
 800a544:	4629      	mov	r1, r5
 800a546:	f000 fb39 	bl	800abbc <_malloc_r>
 800a54a:	4606      	mov	r6, r0
 800a54c:	b950      	cbnz	r0, 800a564 <__ssputs_r+0x5c>
 800a54e:	230c      	movs	r3, #12
 800a550:	f8ca 3000 	str.w	r3, [sl]
 800a554:	89a3      	ldrh	r3, [r4, #12]
 800a556:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a55a:	81a3      	strh	r3, [r4, #12]
 800a55c:	f04f 30ff 	mov.w	r0, #4294967295
 800a560:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a564:	6921      	ldr	r1, [r4, #16]
 800a566:	464a      	mov	r2, r9
 800a568:	f7ff ff90 	bl	800a48c <memcpy>
 800a56c:	89a3      	ldrh	r3, [r4, #12]
 800a56e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a572:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a576:	81a3      	strh	r3, [r4, #12]
 800a578:	6126      	str	r6, [r4, #16]
 800a57a:	6165      	str	r5, [r4, #20]
 800a57c:	444e      	add	r6, r9
 800a57e:	eba5 0509 	sub.w	r5, r5, r9
 800a582:	6026      	str	r6, [r4, #0]
 800a584:	60a5      	str	r5, [r4, #8]
 800a586:	463e      	mov	r6, r7
 800a588:	42be      	cmp	r6, r7
 800a58a:	d900      	bls.n	800a58e <__ssputs_r+0x86>
 800a58c:	463e      	mov	r6, r7
 800a58e:	4632      	mov	r2, r6
 800a590:	6820      	ldr	r0, [r4, #0]
 800a592:	4641      	mov	r1, r8
 800a594:	f000 faa8 	bl	800aae8 <memmove>
 800a598:	68a3      	ldr	r3, [r4, #8]
 800a59a:	6822      	ldr	r2, [r4, #0]
 800a59c:	1b9b      	subs	r3, r3, r6
 800a59e:	4432      	add	r2, r6
 800a5a0:	60a3      	str	r3, [r4, #8]
 800a5a2:	6022      	str	r2, [r4, #0]
 800a5a4:	2000      	movs	r0, #0
 800a5a6:	e7db      	b.n	800a560 <__ssputs_r+0x58>
 800a5a8:	462a      	mov	r2, r5
 800a5aa:	f000 fb61 	bl	800ac70 <_realloc_r>
 800a5ae:	4606      	mov	r6, r0
 800a5b0:	2800      	cmp	r0, #0
 800a5b2:	d1e1      	bne.n	800a578 <__ssputs_r+0x70>
 800a5b4:	6921      	ldr	r1, [r4, #16]
 800a5b6:	4650      	mov	r0, sl
 800a5b8:	f000 fab0 	bl	800ab1c <_free_r>
 800a5bc:	e7c7      	b.n	800a54e <__ssputs_r+0x46>
	...

0800a5c0 <_svfiprintf_r>:
 800a5c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5c4:	4698      	mov	r8, r3
 800a5c6:	898b      	ldrh	r3, [r1, #12]
 800a5c8:	061b      	lsls	r3, r3, #24
 800a5ca:	b09d      	sub	sp, #116	; 0x74
 800a5cc:	4607      	mov	r7, r0
 800a5ce:	460d      	mov	r5, r1
 800a5d0:	4614      	mov	r4, r2
 800a5d2:	d50e      	bpl.n	800a5f2 <_svfiprintf_r+0x32>
 800a5d4:	690b      	ldr	r3, [r1, #16]
 800a5d6:	b963      	cbnz	r3, 800a5f2 <_svfiprintf_r+0x32>
 800a5d8:	2140      	movs	r1, #64	; 0x40
 800a5da:	f000 faef 	bl	800abbc <_malloc_r>
 800a5de:	6028      	str	r0, [r5, #0]
 800a5e0:	6128      	str	r0, [r5, #16]
 800a5e2:	b920      	cbnz	r0, 800a5ee <_svfiprintf_r+0x2e>
 800a5e4:	230c      	movs	r3, #12
 800a5e6:	603b      	str	r3, [r7, #0]
 800a5e8:	f04f 30ff 	mov.w	r0, #4294967295
 800a5ec:	e0d1      	b.n	800a792 <_svfiprintf_r+0x1d2>
 800a5ee:	2340      	movs	r3, #64	; 0x40
 800a5f0:	616b      	str	r3, [r5, #20]
 800a5f2:	2300      	movs	r3, #0
 800a5f4:	9309      	str	r3, [sp, #36]	; 0x24
 800a5f6:	2320      	movs	r3, #32
 800a5f8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a5fc:	f8cd 800c 	str.w	r8, [sp, #12]
 800a600:	2330      	movs	r3, #48	; 0x30
 800a602:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a7ac <_svfiprintf_r+0x1ec>
 800a606:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a60a:	f04f 0901 	mov.w	r9, #1
 800a60e:	4623      	mov	r3, r4
 800a610:	469a      	mov	sl, r3
 800a612:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a616:	b10a      	cbz	r2, 800a61c <_svfiprintf_r+0x5c>
 800a618:	2a25      	cmp	r2, #37	; 0x25
 800a61a:	d1f9      	bne.n	800a610 <_svfiprintf_r+0x50>
 800a61c:	ebba 0b04 	subs.w	fp, sl, r4
 800a620:	d00b      	beq.n	800a63a <_svfiprintf_r+0x7a>
 800a622:	465b      	mov	r3, fp
 800a624:	4622      	mov	r2, r4
 800a626:	4629      	mov	r1, r5
 800a628:	4638      	mov	r0, r7
 800a62a:	f7ff ff6d 	bl	800a508 <__ssputs_r>
 800a62e:	3001      	adds	r0, #1
 800a630:	f000 80aa 	beq.w	800a788 <_svfiprintf_r+0x1c8>
 800a634:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a636:	445a      	add	r2, fp
 800a638:	9209      	str	r2, [sp, #36]	; 0x24
 800a63a:	f89a 3000 	ldrb.w	r3, [sl]
 800a63e:	2b00      	cmp	r3, #0
 800a640:	f000 80a2 	beq.w	800a788 <_svfiprintf_r+0x1c8>
 800a644:	2300      	movs	r3, #0
 800a646:	f04f 32ff 	mov.w	r2, #4294967295
 800a64a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a64e:	f10a 0a01 	add.w	sl, sl, #1
 800a652:	9304      	str	r3, [sp, #16]
 800a654:	9307      	str	r3, [sp, #28]
 800a656:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a65a:	931a      	str	r3, [sp, #104]	; 0x68
 800a65c:	4654      	mov	r4, sl
 800a65e:	2205      	movs	r2, #5
 800a660:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a664:	4851      	ldr	r0, [pc, #324]	; (800a7ac <_svfiprintf_r+0x1ec>)
 800a666:	f7f5 fdd3 	bl	8000210 <memchr>
 800a66a:	9a04      	ldr	r2, [sp, #16]
 800a66c:	b9d8      	cbnz	r0, 800a6a6 <_svfiprintf_r+0xe6>
 800a66e:	06d0      	lsls	r0, r2, #27
 800a670:	bf44      	itt	mi
 800a672:	2320      	movmi	r3, #32
 800a674:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a678:	0711      	lsls	r1, r2, #28
 800a67a:	bf44      	itt	mi
 800a67c:	232b      	movmi	r3, #43	; 0x2b
 800a67e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a682:	f89a 3000 	ldrb.w	r3, [sl]
 800a686:	2b2a      	cmp	r3, #42	; 0x2a
 800a688:	d015      	beq.n	800a6b6 <_svfiprintf_r+0xf6>
 800a68a:	9a07      	ldr	r2, [sp, #28]
 800a68c:	4654      	mov	r4, sl
 800a68e:	2000      	movs	r0, #0
 800a690:	f04f 0c0a 	mov.w	ip, #10
 800a694:	4621      	mov	r1, r4
 800a696:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a69a:	3b30      	subs	r3, #48	; 0x30
 800a69c:	2b09      	cmp	r3, #9
 800a69e:	d94e      	bls.n	800a73e <_svfiprintf_r+0x17e>
 800a6a0:	b1b0      	cbz	r0, 800a6d0 <_svfiprintf_r+0x110>
 800a6a2:	9207      	str	r2, [sp, #28]
 800a6a4:	e014      	b.n	800a6d0 <_svfiprintf_r+0x110>
 800a6a6:	eba0 0308 	sub.w	r3, r0, r8
 800a6aa:	fa09 f303 	lsl.w	r3, r9, r3
 800a6ae:	4313      	orrs	r3, r2
 800a6b0:	9304      	str	r3, [sp, #16]
 800a6b2:	46a2      	mov	sl, r4
 800a6b4:	e7d2      	b.n	800a65c <_svfiprintf_r+0x9c>
 800a6b6:	9b03      	ldr	r3, [sp, #12]
 800a6b8:	1d19      	adds	r1, r3, #4
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	9103      	str	r1, [sp, #12]
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	bfbb      	ittet	lt
 800a6c2:	425b      	neglt	r3, r3
 800a6c4:	f042 0202 	orrlt.w	r2, r2, #2
 800a6c8:	9307      	strge	r3, [sp, #28]
 800a6ca:	9307      	strlt	r3, [sp, #28]
 800a6cc:	bfb8      	it	lt
 800a6ce:	9204      	strlt	r2, [sp, #16]
 800a6d0:	7823      	ldrb	r3, [r4, #0]
 800a6d2:	2b2e      	cmp	r3, #46	; 0x2e
 800a6d4:	d10c      	bne.n	800a6f0 <_svfiprintf_r+0x130>
 800a6d6:	7863      	ldrb	r3, [r4, #1]
 800a6d8:	2b2a      	cmp	r3, #42	; 0x2a
 800a6da:	d135      	bne.n	800a748 <_svfiprintf_r+0x188>
 800a6dc:	9b03      	ldr	r3, [sp, #12]
 800a6de:	1d1a      	adds	r2, r3, #4
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	9203      	str	r2, [sp, #12]
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	bfb8      	it	lt
 800a6e8:	f04f 33ff 	movlt.w	r3, #4294967295
 800a6ec:	3402      	adds	r4, #2
 800a6ee:	9305      	str	r3, [sp, #20]
 800a6f0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a7bc <_svfiprintf_r+0x1fc>
 800a6f4:	7821      	ldrb	r1, [r4, #0]
 800a6f6:	2203      	movs	r2, #3
 800a6f8:	4650      	mov	r0, sl
 800a6fa:	f7f5 fd89 	bl	8000210 <memchr>
 800a6fe:	b140      	cbz	r0, 800a712 <_svfiprintf_r+0x152>
 800a700:	2340      	movs	r3, #64	; 0x40
 800a702:	eba0 000a 	sub.w	r0, r0, sl
 800a706:	fa03 f000 	lsl.w	r0, r3, r0
 800a70a:	9b04      	ldr	r3, [sp, #16]
 800a70c:	4303      	orrs	r3, r0
 800a70e:	3401      	adds	r4, #1
 800a710:	9304      	str	r3, [sp, #16]
 800a712:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a716:	4826      	ldr	r0, [pc, #152]	; (800a7b0 <_svfiprintf_r+0x1f0>)
 800a718:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a71c:	2206      	movs	r2, #6
 800a71e:	f7f5 fd77 	bl	8000210 <memchr>
 800a722:	2800      	cmp	r0, #0
 800a724:	d038      	beq.n	800a798 <_svfiprintf_r+0x1d8>
 800a726:	4b23      	ldr	r3, [pc, #140]	; (800a7b4 <_svfiprintf_r+0x1f4>)
 800a728:	bb1b      	cbnz	r3, 800a772 <_svfiprintf_r+0x1b2>
 800a72a:	9b03      	ldr	r3, [sp, #12]
 800a72c:	3307      	adds	r3, #7
 800a72e:	f023 0307 	bic.w	r3, r3, #7
 800a732:	3308      	adds	r3, #8
 800a734:	9303      	str	r3, [sp, #12]
 800a736:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a738:	4433      	add	r3, r6
 800a73a:	9309      	str	r3, [sp, #36]	; 0x24
 800a73c:	e767      	b.n	800a60e <_svfiprintf_r+0x4e>
 800a73e:	fb0c 3202 	mla	r2, ip, r2, r3
 800a742:	460c      	mov	r4, r1
 800a744:	2001      	movs	r0, #1
 800a746:	e7a5      	b.n	800a694 <_svfiprintf_r+0xd4>
 800a748:	2300      	movs	r3, #0
 800a74a:	3401      	adds	r4, #1
 800a74c:	9305      	str	r3, [sp, #20]
 800a74e:	4619      	mov	r1, r3
 800a750:	f04f 0c0a 	mov.w	ip, #10
 800a754:	4620      	mov	r0, r4
 800a756:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a75a:	3a30      	subs	r2, #48	; 0x30
 800a75c:	2a09      	cmp	r2, #9
 800a75e:	d903      	bls.n	800a768 <_svfiprintf_r+0x1a8>
 800a760:	2b00      	cmp	r3, #0
 800a762:	d0c5      	beq.n	800a6f0 <_svfiprintf_r+0x130>
 800a764:	9105      	str	r1, [sp, #20]
 800a766:	e7c3      	b.n	800a6f0 <_svfiprintf_r+0x130>
 800a768:	fb0c 2101 	mla	r1, ip, r1, r2
 800a76c:	4604      	mov	r4, r0
 800a76e:	2301      	movs	r3, #1
 800a770:	e7f0      	b.n	800a754 <_svfiprintf_r+0x194>
 800a772:	ab03      	add	r3, sp, #12
 800a774:	9300      	str	r3, [sp, #0]
 800a776:	462a      	mov	r2, r5
 800a778:	4b0f      	ldr	r3, [pc, #60]	; (800a7b8 <_svfiprintf_r+0x1f8>)
 800a77a:	a904      	add	r1, sp, #16
 800a77c:	4638      	mov	r0, r7
 800a77e:	f3af 8000 	nop.w
 800a782:	1c42      	adds	r2, r0, #1
 800a784:	4606      	mov	r6, r0
 800a786:	d1d6      	bne.n	800a736 <_svfiprintf_r+0x176>
 800a788:	89ab      	ldrh	r3, [r5, #12]
 800a78a:	065b      	lsls	r3, r3, #25
 800a78c:	f53f af2c 	bmi.w	800a5e8 <_svfiprintf_r+0x28>
 800a790:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a792:	b01d      	add	sp, #116	; 0x74
 800a794:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a798:	ab03      	add	r3, sp, #12
 800a79a:	9300      	str	r3, [sp, #0]
 800a79c:	462a      	mov	r2, r5
 800a79e:	4b06      	ldr	r3, [pc, #24]	; (800a7b8 <_svfiprintf_r+0x1f8>)
 800a7a0:	a904      	add	r1, sp, #16
 800a7a2:	4638      	mov	r0, r7
 800a7a4:	f000 f87a 	bl	800a89c <_printf_i>
 800a7a8:	e7eb      	b.n	800a782 <_svfiprintf_r+0x1c2>
 800a7aa:	bf00      	nop
 800a7ac:	0800ad6c 	.word	0x0800ad6c
 800a7b0:	0800ad76 	.word	0x0800ad76
 800a7b4:	00000000 	.word	0x00000000
 800a7b8:	0800a509 	.word	0x0800a509
 800a7bc:	0800ad72 	.word	0x0800ad72

0800a7c0 <_printf_common>:
 800a7c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a7c4:	4616      	mov	r6, r2
 800a7c6:	4699      	mov	r9, r3
 800a7c8:	688a      	ldr	r2, [r1, #8]
 800a7ca:	690b      	ldr	r3, [r1, #16]
 800a7cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a7d0:	4293      	cmp	r3, r2
 800a7d2:	bfb8      	it	lt
 800a7d4:	4613      	movlt	r3, r2
 800a7d6:	6033      	str	r3, [r6, #0]
 800a7d8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a7dc:	4607      	mov	r7, r0
 800a7de:	460c      	mov	r4, r1
 800a7e0:	b10a      	cbz	r2, 800a7e6 <_printf_common+0x26>
 800a7e2:	3301      	adds	r3, #1
 800a7e4:	6033      	str	r3, [r6, #0]
 800a7e6:	6823      	ldr	r3, [r4, #0]
 800a7e8:	0699      	lsls	r1, r3, #26
 800a7ea:	bf42      	ittt	mi
 800a7ec:	6833      	ldrmi	r3, [r6, #0]
 800a7ee:	3302      	addmi	r3, #2
 800a7f0:	6033      	strmi	r3, [r6, #0]
 800a7f2:	6825      	ldr	r5, [r4, #0]
 800a7f4:	f015 0506 	ands.w	r5, r5, #6
 800a7f8:	d106      	bne.n	800a808 <_printf_common+0x48>
 800a7fa:	f104 0a19 	add.w	sl, r4, #25
 800a7fe:	68e3      	ldr	r3, [r4, #12]
 800a800:	6832      	ldr	r2, [r6, #0]
 800a802:	1a9b      	subs	r3, r3, r2
 800a804:	42ab      	cmp	r3, r5
 800a806:	dc26      	bgt.n	800a856 <_printf_common+0x96>
 800a808:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a80c:	1e13      	subs	r3, r2, #0
 800a80e:	6822      	ldr	r2, [r4, #0]
 800a810:	bf18      	it	ne
 800a812:	2301      	movne	r3, #1
 800a814:	0692      	lsls	r2, r2, #26
 800a816:	d42b      	bmi.n	800a870 <_printf_common+0xb0>
 800a818:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a81c:	4649      	mov	r1, r9
 800a81e:	4638      	mov	r0, r7
 800a820:	47c0      	blx	r8
 800a822:	3001      	adds	r0, #1
 800a824:	d01e      	beq.n	800a864 <_printf_common+0xa4>
 800a826:	6823      	ldr	r3, [r4, #0]
 800a828:	68e5      	ldr	r5, [r4, #12]
 800a82a:	6832      	ldr	r2, [r6, #0]
 800a82c:	f003 0306 	and.w	r3, r3, #6
 800a830:	2b04      	cmp	r3, #4
 800a832:	bf08      	it	eq
 800a834:	1aad      	subeq	r5, r5, r2
 800a836:	68a3      	ldr	r3, [r4, #8]
 800a838:	6922      	ldr	r2, [r4, #16]
 800a83a:	bf0c      	ite	eq
 800a83c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a840:	2500      	movne	r5, #0
 800a842:	4293      	cmp	r3, r2
 800a844:	bfc4      	itt	gt
 800a846:	1a9b      	subgt	r3, r3, r2
 800a848:	18ed      	addgt	r5, r5, r3
 800a84a:	2600      	movs	r6, #0
 800a84c:	341a      	adds	r4, #26
 800a84e:	42b5      	cmp	r5, r6
 800a850:	d11a      	bne.n	800a888 <_printf_common+0xc8>
 800a852:	2000      	movs	r0, #0
 800a854:	e008      	b.n	800a868 <_printf_common+0xa8>
 800a856:	2301      	movs	r3, #1
 800a858:	4652      	mov	r2, sl
 800a85a:	4649      	mov	r1, r9
 800a85c:	4638      	mov	r0, r7
 800a85e:	47c0      	blx	r8
 800a860:	3001      	adds	r0, #1
 800a862:	d103      	bne.n	800a86c <_printf_common+0xac>
 800a864:	f04f 30ff 	mov.w	r0, #4294967295
 800a868:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a86c:	3501      	adds	r5, #1
 800a86e:	e7c6      	b.n	800a7fe <_printf_common+0x3e>
 800a870:	18e1      	adds	r1, r4, r3
 800a872:	1c5a      	adds	r2, r3, #1
 800a874:	2030      	movs	r0, #48	; 0x30
 800a876:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a87a:	4422      	add	r2, r4
 800a87c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a880:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a884:	3302      	adds	r3, #2
 800a886:	e7c7      	b.n	800a818 <_printf_common+0x58>
 800a888:	2301      	movs	r3, #1
 800a88a:	4622      	mov	r2, r4
 800a88c:	4649      	mov	r1, r9
 800a88e:	4638      	mov	r0, r7
 800a890:	47c0      	blx	r8
 800a892:	3001      	adds	r0, #1
 800a894:	d0e6      	beq.n	800a864 <_printf_common+0xa4>
 800a896:	3601      	adds	r6, #1
 800a898:	e7d9      	b.n	800a84e <_printf_common+0x8e>
	...

0800a89c <_printf_i>:
 800a89c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a8a0:	460c      	mov	r4, r1
 800a8a2:	4691      	mov	r9, r2
 800a8a4:	7e27      	ldrb	r7, [r4, #24]
 800a8a6:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a8a8:	2f78      	cmp	r7, #120	; 0x78
 800a8aa:	4680      	mov	r8, r0
 800a8ac:	469a      	mov	sl, r3
 800a8ae:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a8b2:	d807      	bhi.n	800a8c4 <_printf_i+0x28>
 800a8b4:	2f62      	cmp	r7, #98	; 0x62
 800a8b6:	d80a      	bhi.n	800a8ce <_printf_i+0x32>
 800a8b8:	2f00      	cmp	r7, #0
 800a8ba:	f000 80d8 	beq.w	800aa6e <_printf_i+0x1d2>
 800a8be:	2f58      	cmp	r7, #88	; 0x58
 800a8c0:	f000 80a3 	beq.w	800aa0a <_printf_i+0x16e>
 800a8c4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a8c8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a8cc:	e03a      	b.n	800a944 <_printf_i+0xa8>
 800a8ce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a8d2:	2b15      	cmp	r3, #21
 800a8d4:	d8f6      	bhi.n	800a8c4 <_printf_i+0x28>
 800a8d6:	a001      	add	r0, pc, #4	; (adr r0, 800a8dc <_printf_i+0x40>)
 800a8d8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800a8dc:	0800a935 	.word	0x0800a935
 800a8e0:	0800a949 	.word	0x0800a949
 800a8e4:	0800a8c5 	.word	0x0800a8c5
 800a8e8:	0800a8c5 	.word	0x0800a8c5
 800a8ec:	0800a8c5 	.word	0x0800a8c5
 800a8f0:	0800a8c5 	.word	0x0800a8c5
 800a8f4:	0800a949 	.word	0x0800a949
 800a8f8:	0800a8c5 	.word	0x0800a8c5
 800a8fc:	0800a8c5 	.word	0x0800a8c5
 800a900:	0800a8c5 	.word	0x0800a8c5
 800a904:	0800a8c5 	.word	0x0800a8c5
 800a908:	0800aa55 	.word	0x0800aa55
 800a90c:	0800a979 	.word	0x0800a979
 800a910:	0800aa37 	.word	0x0800aa37
 800a914:	0800a8c5 	.word	0x0800a8c5
 800a918:	0800a8c5 	.word	0x0800a8c5
 800a91c:	0800aa77 	.word	0x0800aa77
 800a920:	0800a8c5 	.word	0x0800a8c5
 800a924:	0800a979 	.word	0x0800a979
 800a928:	0800a8c5 	.word	0x0800a8c5
 800a92c:	0800a8c5 	.word	0x0800a8c5
 800a930:	0800aa3f 	.word	0x0800aa3f
 800a934:	680b      	ldr	r3, [r1, #0]
 800a936:	1d1a      	adds	r2, r3, #4
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	600a      	str	r2, [r1, #0]
 800a93c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a940:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a944:	2301      	movs	r3, #1
 800a946:	e0a3      	b.n	800aa90 <_printf_i+0x1f4>
 800a948:	6825      	ldr	r5, [r4, #0]
 800a94a:	6808      	ldr	r0, [r1, #0]
 800a94c:	062e      	lsls	r6, r5, #24
 800a94e:	f100 0304 	add.w	r3, r0, #4
 800a952:	d50a      	bpl.n	800a96a <_printf_i+0xce>
 800a954:	6805      	ldr	r5, [r0, #0]
 800a956:	600b      	str	r3, [r1, #0]
 800a958:	2d00      	cmp	r5, #0
 800a95a:	da03      	bge.n	800a964 <_printf_i+0xc8>
 800a95c:	232d      	movs	r3, #45	; 0x2d
 800a95e:	426d      	negs	r5, r5
 800a960:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a964:	485e      	ldr	r0, [pc, #376]	; (800aae0 <_printf_i+0x244>)
 800a966:	230a      	movs	r3, #10
 800a968:	e019      	b.n	800a99e <_printf_i+0x102>
 800a96a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800a96e:	6805      	ldr	r5, [r0, #0]
 800a970:	600b      	str	r3, [r1, #0]
 800a972:	bf18      	it	ne
 800a974:	b22d      	sxthne	r5, r5
 800a976:	e7ef      	b.n	800a958 <_printf_i+0xbc>
 800a978:	680b      	ldr	r3, [r1, #0]
 800a97a:	6825      	ldr	r5, [r4, #0]
 800a97c:	1d18      	adds	r0, r3, #4
 800a97e:	6008      	str	r0, [r1, #0]
 800a980:	0628      	lsls	r0, r5, #24
 800a982:	d501      	bpl.n	800a988 <_printf_i+0xec>
 800a984:	681d      	ldr	r5, [r3, #0]
 800a986:	e002      	b.n	800a98e <_printf_i+0xf2>
 800a988:	0669      	lsls	r1, r5, #25
 800a98a:	d5fb      	bpl.n	800a984 <_printf_i+0xe8>
 800a98c:	881d      	ldrh	r5, [r3, #0]
 800a98e:	4854      	ldr	r0, [pc, #336]	; (800aae0 <_printf_i+0x244>)
 800a990:	2f6f      	cmp	r7, #111	; 0x6f
 800a992:	bf0c      	ite	eq
 800a994:	2308      	moveq	r3, #8
 800a996:	230a      	movne	r3, #10
 800a998:	2100      	movs	r1, #0
 800a99a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a99e:	6866      	ldr	r6, [r4, #4]
 800a9a0:	60a6      	str	r6, [r4, #8]
 800a9a2:	2e00      	cmp	r6, #0
 800a9a4:	bfa2      	ittt	ge
 800a9a6:	6821      	ldrge	r1, [r4, #0]
 800a9a8:	f021 0104 	bicge.w	r1, r1, #4
 800a9ac:	6021      	strge	r1, [r4, #0]
 800a9ae:	b90d      	cbnz	r5, 800a9b4 <_printf_i+0x118>
 800a9b0:	2e00      	cmp	r6, #0
 800a9b2:	d04d      	beq.n	800aa50 <_printf_i+0x1b4>
 800a9b4:	4616      	mov	r6, r2
 800a9b6:	fbb5 f1f3 	udiv	r1, r5, r3
 800a9ba:	fb03 5711 	mls	r7, r3, r1, r5
 800a9be:	5dc7      	ldrb	r7, [r0, r7]
 800a9c0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a9c4:	462f      	mov	r7, r5
 800a9c6:	42bb      	cmp	r3, r7
 800a9c8:	460d      	mov	r5, r1
 800a9ca:	d9f4      	bls.n	800a9b6 <_printf_i+0x11a>
 800a9cc:	2b08      	cmp	r3, #8
 800a9ce:	d10b      	bne.n	800a9e8 <_printf_i+0x14c>
 800a9d0:	6823      	ldr	r3, [r4, #0]
 800a9d2:	07df      	lsls	r7, r3, #31
 800a9d4:	d508      	bpl.n	800a9e8 <_printf_i+0x14c>
 800a9d6:	6923      	ldr	r3, [r4, #16]
 800a9d8:	6861      	ldr	r1, [r4, #4]
 800a9da:	4299      	cmp	r1, r3
 800a9dc:	bfde      	ittt	le
 800a9de:	2330      	movle	r3, #48	; 0x30
 800a9e0:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a9e4:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a9e8:	1b92      	subs	r2, r2, r6
 800a9ea:	6122      	str	r2, [r4, #16]
 800a9ec:	f8cd a000 	str.w	sl, [sp]
 800a9f0:	464b      	mov	r3, r9
 800a9f2:	aa03      	add	r2, sp, #12
 800a9f4:	4621      	mov	r1, r4
 800a9f6:	4640      	mov	r0, r8
 800a9f8:	f7ff fee2 	bl	800a7c0 <_printf_common>
 800a9fc:	3001      	adds	r0, #1
 800a9fe:	d14c      	bne.n	800aa9a <_printf_i+0x1fe>
 800aa00:	f04f 30ff 	mov.w	r0, #4294967295
 800aa04:	b004      	add	sp, #16
 800aa06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa0a:	4835      	ldr	r0, [pc, #212]	; (800aae0 <_printf_i+0x244>)
 800aa0c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800aa10:	6823      	ldr	r3, [r4, #0]
 800aa12:	680e      	ldr	r6, [r1, #0]
 800aa14:	061f      	lsls	r7, r3, #24
 800aa16:	f856 5b04 	ldr.w	r5, [r6], #4
 800aa1a:	600e      	str	r6, [r1, #0]
 800aa1c:	d514      	bpl.n	800aa48 <_printf_i+0x1ac>
 800aa1e:	07d9      	lsls	r1, r3, #31
 800aa20:	bf44      	itt	mi
 800aa22:	f043 0320 	orrmi.w	r3, r3, #32
 800aa26:	6023      	strmi	r3, [r4, #0]
 800aa28:	b91d      	cbnz	r5, 800aa32 <_printf_i+0x196>
 800aa2a:	6823      	ldr	r3, [r4, #0]
 800aa2c:	f023 0320 	bic.w	r3, r3, #32
 800aa30:	6023      	str	r3, [r4, #0]
 800aa32:	2310      	movs	r3, #16
 800aa34:	e7b0      	b.n	800a998 <_printf_i+0xfc>
 800aa36:	6823      	ldr	r3, [r4, #0]
 800aa38:	f043 0320 	orr.w	r3, r3, #32
 800aa3c:	6023      	str	r3, [r4, #0]
 800aa3e:	2378      	movs	r3, #120	; 0x78
 800aa40:	4828      	ldr	r0, [pc, #160]	; (800aae4 <_printf_i+0x248>)
 800aa42:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800aa46:	e7e3      	b.n	800aa10 <_printf_i+0x174>
 800aa48:	065e      	lsls	r6, r3, #25
 800aa4a:	bf48      	it	mi
 800aa4c:	b2ad      	uxthmi	r5, r5
 800aa4e:	e7e6      	b.n	800aa1e <_printf_i+0x182>
 800aa50:	4616      	mov	r6, r2
 800aa52:	e7bb      	b.n	800a9cc <_printf_i+0x130>
 800aa54:	680b      	ldr	r3, [r1, #0]
 800aa56:	6826      	ldr	r6, [r4, #0]
 800aa58:	6960      	ldr	r0, [r4, #20]
 800aa5a:	1d1d      	adds	r5, r3, #4
 800aa5c:	600d      	str	r5, [r1, #0]
 800aa5e:	0635      	lsls	r5, r6, #24
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	d501      	bpl.n	800aa68 <_printf_i+0x1cc>
 800aa64:	6018      	str	r0, [r3, #0]
 800aa66:	e002      	b.n	800aa6e <_printf_i+0x1d2>
 800aa68:	0671      	lsls	r1, r6, #25
 800aa6a:	d5fb      	bpl.n	800aa64 <_printf_i+0x1c8>
 800aa6c:	8018      	strh	r0, [r3, #0]
 800aa6e:	2300      	movs	r3, #0
 800aa70:	6123      	str	r3, [r4, #16]
 800aa72:	4616      	mov	r6, r2
 800aa74:	e7ba      	b.n	800a9ec <_printf_i+0x150>
 800aa76:	680b      	ldr	r3, [r1, #0]
 800aa78:	1d1a      	adds	r2, r3, #4
 800aa7a:	600a      	str	r2, [r1, #0]
 800aa7c:	681e      	ldr	r6, [r3, #0]
 800aa7e:	6862      	ldr	r2, [r4, #4]
 800aa80:	2100      	movs	r1, #0
 800aa82:	4630      	mov	r0, r6
 800aa84:	f7f5 fbc4 	bl	8000210 <memchr>
 800aa88:	b108      	cbz	r0, 800aa8e <_printf_i+0x1f2>
 800aa8a:	1b80      	subs	r0, r0, r6
 800aa8c:	6060      	str	r0, [r4, #4]
 800aa8e:	6863      	ldr	r3, [r4, #4]
 800aa90:	6123      	str	r3, [r4, #16]
 800aa92:	2300      	movs	r3, #0
 800aa94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aa98:	e7a8      	b.n	800a9ec <_printf_i+0x150>
 800aa9a:	6923      	ldr	r3, [r4, #16]
 800aa9c:	4632      	mov	r2, r6
 800aa9e:	4649      	mov	r1, r9
 800aaa0:	4640      	mov	r0, r8
 800aaa2:	47d0      	blx	sl
 800aaa4:	3001      	adds	r0, #1
 800aaa6:	d0ab      	beq.n	800aa00 <_printf_i+0x164>
 800aaa8:	6823      	ldr	r3, [r4, #0]
 800aaaa:	079b      	lsls	r3, r3, #30
 800aaac:	d413      	bmi.n	800aad6 <_printf_i+0x23a>
 800aaae:	68e0      	ldr	r0, [r4, #12]
 800aab0:	9b03      	ldr	r3, [sp, #12]
 800aab2:	4298      	cmp	r0, r3
 800aab4:	bfb8      	it	lt
 800aab6:	4618      	movlt	r0, r3
 800aab8:	e7a4      	b.n	800aa04 <_printf_i+0x168>
 800aaba:	2301      	movs	r3, #1
 800aabc:	4632      	mov	r2, r6
 800aabe:	4649      	mov	r1, r9
 800aac0:	4640      	mov	r0, r8
 800aac2:	47d0      	blx	sl
 800aac4:	3001      	adds	r0, #1
 800aac6:	d09b      	beq.n	800aa00 <_printf_i+0x164>
 800aac8:	3501      	adds	r5, #1
 800aaca:	68e3      	ldr	r3, [r4, #12]
 800aacc:	9903      	ldr	r1, [sp, #12]
 800aace:	1a5b      	subs	r3, r3, r1
 800aad0:	42ab      	cmp	r3, r5
 800aad2:	dcf2      	bgt.n	800aaba <_printf_i+0x21e>
 800aad4:	e7eb      	b.n	800aaae <_printf_i+0x212>
 800aad6:	2500      	movs	r5, #0
 800aad8:	f104 0619 	add.w	r6, r4, #25
 800aadc:	e7f5      	b.n	800aaca <_printf_i+0x22e>
 800aade:	bf00      	nop
 800aae0:	0800ad7d 	.word	0x0800ad7d
 800aae4:	0800ad8e 	.word	0x0800ad8e

0800aae8 <memmove>:
 800aae8:	4288      	cmp	r0, r1
 800aaea:	b510      	push	{r4, lr}
 800aaec:	eb01 0402 	add.w	r4, r1, r2
 800aaf0:	d902      	bls.n	800aaf8 <memmove+0x10>
 800aaf2:	4284      	cmp	r4, r0
 800aaf4:	4623      	mov	r3, r4
 800aaf6:	d807      	bhi.n	800ab08 <memmove+0x20>
 800aaf8:	1e43      	subs	r3, r0, #1
 800aafa:	42a1      	cmp	r1, r4
 800aafc:	d008      	beq.n	800ab10 <memmove+0x28>
 800aafe:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ab02:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ab06:	e7f8      	b.n	800aafa <memmove+0x12>
 800ab08:	4402      	add	r2, r0
 800ab0a:	4601      	mov	r1, r0
 800ab0c:	428a      	cmp	r2, r1
 800ab0e:	d100      	bne.n	800ab12 <memmove+0x2a>
 800ab10:	bd10      	pop	{r4, pc}
 800ab12:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ab16:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ab1a:	e7f7      	b.n	800ab0c <memmove+0x24>

0800ab1c <_free_r>:
 800ab1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ab1e:	2900      	cmp	r1, #0
 800ab20:	d048      	beq.n	800abb4 <_free_r+0x98>
 800ab22:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ab26:	9001      	str	r0, [sp, #4]
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	f1a1 0404 	sub.w	r4, r1, #4
 800ab2e:	bfb8      	it	lt
 800ab30:	18e4      	addlt	r4, r4, r3
 800ab32:	f000 f8d3 	bl	800acdc <__malloc_lock>
 800ab36:	4a20      	ldr	r2, [pc, #128]	; (800abb8 <_free_r+0x9c>)
 800ab38:	9801      	ldr	r0, [sp, #4]
 800ab3a:	6813      	ldr	r3, [r2, #0]
 800ab3c:	4615      	mov	r5, r2
 800ab3e:	b933      	cbnz	r3, 800ab4e <_free_r+0x32>
 800ab40:	6063      	str	r3, [r4, #4]
 800ab42:	6014      	str	r4, [r2, #0]
 800ab44:	b003      	add	sp, #12
 800ab46:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ab4a:	f000 b8cd 	b.w	800ace8 <__malloc_unlock>
 800ab4e:	42a3      	cmp	r3, r4
 800ab50:	d90b      	bls.n	800ab6a <_free_r+0x4e>
 800ab52:	6821      	ldr	r1, [r4, #0]
 800ab54:	1862      	adds	r2, r4, r1
 800ab56:	4293      	cmp	r3, r2
 800ab58:	bf04      	itt	eq
 800ab5a:	681a      	ldreq	r2, [r3, #0]
 800ab5c:	685b      	ldreq	r3, [r3, #4]
 800ab5e:	6063      	str	r3, [r4, #4]
 800ab60:	bf04      	itt	eq
 800ab62:	1852      	addeq	r2, r2, r1
 800ab64:	6022      	streq	r2, [r4, #0]
 800ab66:	602c      	str	r4, [r5, #0]
 800ab68:	e7ec      	b.n	800ab44 <_free_r+0x28>
 800ab6a:	461a      	mov	r2, r3
 800ab6c:	685b      	ldr	r3, [r3, #4]
 800ab6e:	b10b      	cbz	r3, 800ab74 <_free_r+0x58>
 800ab70:	42a3      	cmp	r3, r4
 800ab72:	d9fa      	bls.n	800ab6a <_free_r+0x4e>
 800ab74:	6811      	ldr	r1, [r2, #0]
 800ab76:	1855      	adds	r5, r2, r1
 800ab78:	42a5      	cmp	r5, r4
 800ab7a:	d10b      	bne.n	800ab94 <_free_r+0x78>
 800ab7c:	6824      	ldr	r4, [r4, #0]
 800ab7e:	4421      	add	r1, r4
 800ab80:	1854      	adds	r4, r2, r1
 800ab82:	42a3      	cmp	r3, r4
 800ab84:	6011      	str	r1, [r2, #0]
 800ab86:	d1dd      	bne.n	800ab44 <_free_r+0x28>
 800ab88:	681c      	ldr	r4, [r3, #0]
 800ab8a:	685b      	ldr	r3, [r3, #4]
 800ab8c:	6053      	str	r3, [r2, #4]
 800ab8e:	4421      	add	r1, r4
 800ab90:	6011      	str	r1, [r2, #0]
 800ab92:	e7d7      	b.n	800ab44 <_free_r+0x28>
 800ab94:	d902      	bls.n	800ab9c <_free_r+0x80>
 800ab96:	230c      	movs	r3, #12
 800ab98:	6003      	str	r3, [r0, #0]
 800ab9a:	e7d3      	b.n	800ab44 <_free_r+0x28>
 800ab9c:	6825      	ldr	r5, [r4, #0]
 800ab9e:	1961      	adds	r1, r4, r5
 800aba0:	428b      	cmp	r3, r1
 800aba2:	bf04      	itt	eq
 800aba4:	6819      	ldreq	r1, [r3, #0]
 800aba6:	685b      	ldreq	r3, [r3, #4]
 800aba8:	6063      	str	r3, [r4, #4]
 800abaa:	bf04      	itt	eq
 800abac:	1949      	addeq	r1, r1, r5
 800abae:	6021      	streq	r1, [r4, #0]
 800abb0:	6054      	str	r4, [r2, #4]
 800abb2:	e7c7      	b.n	800ab44 <_free_r+0x28>
 800abb4:	b003      	add	sp, #12
 800abb6:	bd30      	pop	{r4, r5, pc}
 800abb8:	200003c0 	.word	0x200003c0

0800abbc <_malloc_r>:
 800abbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abbe:	1ccd      	adds	r5, r1, #3
 800abc0:	f025 0503 	bic.w	r5, r5, #3
 800abc4:	3508      	adds	r5, #8
 800abc6:	2d0c      	cmp	r5, #12
 800abc8:	bf38      	it	cc
 800abca:	250c      	movcc	r5, #12
 800abcc:	2d00      	cmp	r5, #0
 800abce:	4606      	mov	r6, r0
 800abd0:	db01      	blt.n	800abd6 <_malloc_r+0x1a>
 800abd2:	42a9      	cmp	r1, r5
 800abd4:	d903      	bls.n	800abde <_malloc_r+0x22>
 800abd6:	230c      	movs	r3, #12
 800abd8:	6033      	str	r3, [r6, #0]
 800abda:	2000      	movs	r0, #0
 800abdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800abde:	f000 f87d 	bl	800acdc <__malloc_lock>
 800abe2:	4921      	ldr	r1, [pc, #132]	; (800ac68 <_malloc_r+0xac>)
 800abe4:	680a      	ldr	r2, [r1, #0]
 800abe6:	4614      	mov	r4, r2
 800abe8:	b99c      	cbnz	r4, 800ac12 <_malloc_r+0x56>
 800abea:	4f20      	ldr	r7, [pc, #128]	; (800ac6c <_malloc_r+0xb0>)
 800abec:	683b      	ldr	r3, [r7, #0]
 800abee:	b923      	cbnz	r3, 800abfa <_malloc_r+0x3e>
 800abf0:	4621      	mov	r1, r4
 800abf2:	4630      	mov	r0, r6
 800abf4:	f000 f862 	bl	800acbc <_sbrk_r>
 800abf8:	6038      	str	r0, [r7, #0]
 800abfa:	4629      	mov	r1, r5
 800abfc:	4630      	mov	r0, r6
 800abfe:	f000 f85d 	bl	800acbc <_sbrk_r>
 800ac02:	1c43      	adds	r3, r0, #1
 800ac04:	d123      	bne.n	800ac4e <_malloc_r+0x92>
 800ac06:	230c      	movs	r3, #12
 800ac08:	6033      	str	r3, [r6, #0]
 800ac0a:	4630      	mov	r0, r6
 800ac0c:	f000 f86c 	bl	800ace8 <__malloc_unlock>
 800ac10:	e7e3      	b.n	800abda <_malloc_r+0x1e>
 800ac12:	6823      	ldr	r3, [r4, #0]
 800ac14:	1b5b      	subs	r3, r3, r5
 800ac16:	d417      	bmi.n	800ac48 <_malloc_r+0x8c>
 800ac18:	2b0b      	cmp	r3, #11
 800ac1a:	d903      	bls.n	800ac24 <_malloc_r+0x68>
 800ac1c:	6023      	str	r3, [r4, #0]
 800ac1e:	441c      	add	r4, r3
 800ac20:	6025      	str	r5, [r4, #0]
 800ac22:	e004      	b.n	800ac2e <_malloc_r+0x72>
 800ac24:	6863      	ldr	r3, [r4, #4]
 800ac26:	42a2      	cmp	r2, r4
 800ac28:	bf0c      	ite	eq
 800ac2a:	600b      	streq	r3, [r1, #0]
 800ac2c:	6053      	strne	r3, [r2, #4]
 800ac2e:	4630      	mov	r0, r6
 800ac30:	f000 f85a 	bl	800ace8 <__malloc_unlock>
 800ac34:	f104 000b 	add.w	r0, r4, #11
 800ac38:	1d23      	adds	r3, r4, #4
 800ac3a:	f020 0007 	bic.w	r0, r0, #7
 800ac3e:	1ac2      	subs	r2, r0, r3
 800ac40:	d0cc      	beq.n	800abdc <_malloc_r+0x20>
 800ac42:	1a1b      	subs	r3, r3, r0
 800ac44:	50a3      	str	r3, [r4, r2]
 800ac46:	e7c9      	b.n	800abdc <_malloc_r+0x20>
 800ac48:	4622      	mov	r2, r4
 800ac4a:	6864      	ldr	r4, [r4, #4]
 800ac4c:	e7cc      	b.n	800abe8 <_malloc_r+0x2c>
 800ac4e:	1cc4      	adds	r4, r0, #3
 800ac50:	f024 0403 	bic.w	r4, r4, #3
 800ac54:	42a0      	cmp	r0, r4
 800ac56:	d0e3      	beq.n	800ac20 <_malloc_r+0x64>
 800ac58:	1a21      	subs	r1, r4, r0
 800ac5a:	4630      	mov	r0, r6
 800ac5c:	f000 f82e 	bl	800acbc <_sbrk_r>
 800ac60:	3001      	adds	r0, #1
 800ac62:	d1dd      	bne.n	800ac20 <_malloc_r+0x64>
 800ac64:	e7cf      	b.n	800ac06 <_malloc_r+0x4a>
 800ac66:	bf00      	nop
 800ac68:	200003c0 	.word	0x200003c0
 800ac6c:	200003c4 	.word	0x200003c4

0800ac70 <_realloc_r>:
 800ac70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac72:	4607      	mov	r7, r0
 800ac74:	4614      	mov	r4, r2
 800ac76:	460e      	mov	r6, r1
 800ac78:	b921      	cbnz	r1, 800ac84 <_realloc_r+0x14>
 800ac7a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800ac7e:	4611      	mov	r1, r2
 800ac80:	f7ff bf9c 	b.w	800abbc <_malloc_r>
 800ac84:	b922      	cbnz	r2, 800ac90 <_realloc_r+0x20>
 800ac86:	f7ff ff49 	bl	800ab1c <_free_r>
 800ac8a:	4625      	mov	r5, r4
 800ac8c:	4628      	mov	r0, r5
 800ac8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac90:	f000 f830 	bl	800acf4 <_malloc_usable_size_r>
 800ac94:	42a0      	cmp	r0, r4
 800ac96:	d20f      	bcs.n	800acb8 <_realloc_r+0x48>
 800ac98:	4621      	mov	r1, r4
 800ac9a:	4638      	mov	r0, r7
 800ac9c:	f7ff ff8e 	bl	800abbc <_malloc_r>
 800aca0:	4605      	mov	r5, r0
 800aca2:	2800      	cmp	r0, #0
 800aca4:	d0f2      	beq.n	800ac8c <_realloc_r+0x1c>
 800aca6:	4631      	mov	r1, r6
 800aca8:	4622      	mov	r2, r4
 800acaa:	f7ff fbef 	bl	800a48c <memcpy>
 800acae:	4631      	mov	r1, r6
 800acb0:	4638      	mov	r0, r7
 800acb2:	f7ff ff33 	bl	800ab1c <_free_r>
 800acb6:	e7e9      	b.n	800ac8c <_realloc_r+0x1c>
 800acb8:	4635      	mov	r5, r6
 800acba:	e7e7      	b.n	800ac8c <_realloc_r+0x1c>

0800acbc <_sbrk_r>:
 800acbc:	b538      	push	{r3, r4, r5, lr}
 800acbe:	4d06      	ldr	r5, [pc, #24]	; (800acd8 <_sbrk_r+0x1c>)
 800acc0:	2300      	movs	r3, #0
 800acc2:	4604      	mov	r4, r0
 800acc4:	4608      	mov	r0, r1
 800acc6:	602b      	str	r3, [r5, #0]
 800acc8:	f7f6 fcaa 	bl	8001620 <_sbrk>
 800accc:	1c43      	adds	r3, r0, #1
 800acce:	d102      	bne.n	800acd6 <_sbrk_r+0x1a>
 800acd0:	682b      	ldr	r3, [r5, #0]
 800acd2:	b103      	cbz	r3, 800acd6 <_sbrk_r+0x1a>
 800acd4:	6023      	str	r3, [r4, #0]
 800acd6:	bd38      	pop	{r3, r4, r5, pc}
 800acd8:	20000870 	.word	0x20000870

0800acdc <__malloc_lock>:
 800acdc:	4801      	ldr	r0, [pc, #4]	; (800ace4 <__malloc_lock+0x8>)
 800acde:	f000 b811 	b.w	800ad04 <__retarget_lock_acquire_recursive>
 800ace2:	bf00      	nop
 800ace4:	20000878 	.word	0x20000878

0800ace8 <__malloc_unlock>:
 800ace8:	4801      	ldr	r0, [pc, #4]	; (800acf0 <__malloc_unlock+0x8>)
 800acea:	f000 b80c 	b.w	800ad06 <__retarget_lock_release_recursive>
 800acee:	bf00      	nop
 800acf0:	20000878 	.word	0x20000878

0800acf4 <_malloc_usable_size_r>:
 800acf4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800acf8:	1f18      	subs	r0, r3, #4
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	bfbc      	itt	lt
 800acfe:	580b      	ldrlt	r3, [r1, r0]
 800ad00:	18c0      	addlt	r0, r0, r3
 800ad02:	4770      	bx	lr

0800ad04 <__retarget_lock_acquire_recursive>:
 800ad04:	4770      	bx	lr

0800ad06 <__retarget_lock_release_recursive>:
 800ad06:	4770      	bx	lr

0800ad08 <_init>:
 800ad08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad0a:	bf00      	nop
 800ad0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad0e:	bc08      	pop	{r3}
 800ad10:	469e      	mov	lr, r3
 800ad12:	4770      	bx	lr

0800ad14 <_fini>:
 800ad14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad16:	bf00      	nop
 800ad18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad1a:	bc08      	pop	{r3}
 800ad1c:	469e      	mov	lr, r3
 800ad1e:	4770      	bx	lr
